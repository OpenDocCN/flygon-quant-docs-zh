- en: Platform Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台概念
- en: 原文：[https://www.backtrader.com/docu/concepts/](https://www.backtrader.com/docu/concepts/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/docu/concepts/](https://www.backtrader.com/docu/concepts/)
- en: This is a collection of some of the concepts of the platform. It tries to gather
    information bits which can be useful in using the platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是平台某些概念的集合。它试图收集可在使用平台时有用的信息片段。
- en: Before Starting
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始之前
- en: 'All mini-code examples assume the following imports are available:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有小代码示例都假设以下导入可用：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'An alternative syntax for accessing sub-modules like *indicators* and *feeds*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 访问子模块的另一种替代语法，如*指标*和*数据源*：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And then:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Data Feeds - Passing them around
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据源 - 传递它们
- en: 'The basis of the work with the platform will be done with *Strategies*. And
    these will get passed *Data Feeds*. The platform end user does not need to care
    about receiving them:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与平台工作的基础将通过*策略*完成。这些将获得*数据源*。平台最终用户不需要关心接收它们：
- en: '*Data Feeds are automagically provided member variables to the strategy in
    the form of an array and shortcuts to the array positions*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据源被自动提供为策略的成员变量，以数组形式和数组位置的快捷方式*'
- en: 'Quick preview of a Strategy derived class declaration and running the platform:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 策略派生类声明和运行平台的快速预览：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: No `*args` or `**kwargs` are being received by the strategy’s `__init__` method
    (they may still be used)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略的`__init__`方法未接收到`*args`或`**kwargs`（仍然可以使用它们）。
- en: A member variable `self.datas` exists which is array/list/iterable holding at
    least one item (hopefully or else an exception will be raised)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在成员变量`self.datas`，其为包含至少一个项目的数组/列表/可迭代对象（希望至少有一个项目，否则将引发异常）。
- en: So it is. *Data Feeds* get added to the platform and they will show up inside
    the strategy in the sequential order in which they were added to the system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。*数据源*被添加到平台上，它们将按照它们被添加到系统中的顺序显示在策略内部。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This also applies to `Indicators`, should the end user develop his own custom
    Indicator or when having a look at the source code for some of the existing Indicator
    Reference
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于`指标`，如果最终用户开发自己的自定义指标或者查看某些现有指标参考的源代码时。
- en: Shortcuts for Data Feeds
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据源的快捷方式
- en: 'The self.datas array items can be directly accessed with additional automatic
    member variables:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接使用附加自动成员变量访问self.datas数组项：
- en: '`self.data` targets `self.datas[0]`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.data`目标为`self.datas[0]`'
- en: '`self.dataX` targets `self.datas[X]`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.dataX`目标为`self.datas[X]`'
- en: 'The example then:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后的示例：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Omitting the Data Feeds
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 省略数据源
- en: 'The example above can be further simplified to:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例可以进一步简化为：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`self.data` has been completely removed from the invocation of `SimpleMovingAverage`.
    If this is done, the indicator (in this case the `SimpleMovingAverage`) receives
    the first data of the object in which is being created (the *Strategy*), which
    is `self.data` (aka `self.data0` or `self.datas[0]`)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.data`已从`SimpleMovingAverage`的调用中完全移除。如果这样做，指标（在本例中为`SimpleMovingAverage`）将接收正在创建的对象的第一个数据（*策略*），即`self.data`（又名`self.data0`或`self.datas[0]`）'
- en: Almost everything is a *Data Feed*
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几乎一切都是*数据源*
- en: Not only Data Feeds are data and can be passed around. `Indicators` and results
    of `Operations` are also data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅数据源是数据，也可以传递。`指标`和`操作`的结果也是数据。
- en: 'In the previous example the `SimpleMovingAverage` was receiving `self.datas[0]`
    as input to operate on. An example with operations and extra indicators:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，`SimpleMovingAverage`将`self.datas[0]`作为输入进行操作。具有操作和额外指标的示例：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Basically everything gets transformed into an object which can be used as a
    data feed once it has been operated upon.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，一旦被操作，一切都会转换为可以用作数据源的对象。
- en: Parameters
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Mostly every other `class` in the platform supports the notion of *parameters*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 平台中的几乎每个其他`class`都支持*参数*的概念。
- en: Parameters along with default values are declared as a class attribute (tuple
    of tuples or dict-like object)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数连同默认值声明为类属性（元组的元组或类似字典的对象）
- en: Keywords args (`**kwargs`) are scanned for matching parameters, removing them
    from `**kwargs` if found and assigning the value to the corresponding parameter
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数（`**kwargs`）被扫描以匹配参数，如果找到，则从`**kwargs`中删除它们并将值分配给相应的参数。
- en: 'And parameters can be finally used in instances of the class by accessing the
    member variable `self.params` (shorthand: `self.p`)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数最终可以通过访问成员变量`self.params`（简写：`self.p`）在类的实例中使用。
- en: 'The previous quick Strategy preview already contains a parameters example,
    but for the sake of redundancy, again, focusing only on the parameters. Using
    *tuples*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的快速策略预览已经包含了一个参数示例，但为了冗余起见，再次，只关注参数。使用*元组*：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And using a `dict`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使用一个`dict`：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Lines
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行
- en: 'Again mostly every other object in the platform is a `Lines` enabled object.
    From a end user point of view this means:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，平台上几乎每个其他对象都是`Lines`启用的对象。从最终用户的角度来看，这意味着：
- en: It can hold one of more line series, being a line series an array of values
    were the values put together in a chart they would form a line.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以容纳一个或多个线系列，其中线系列是一个值数组，将这些值放在一起形成一条线。
- en: A good example of a *line* (or *lineseries*) is the line formed by the closing
    prices of a stock. This is actually a well-known chart representation of the evolution
    of prices (known as *Line on Close*)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*line*（或*lineseries*）的很好的例子是由股票收盘价形成的线。这实际上是价格演变的一个众所周知的图表表示（称为*Line on Close*）
- en: 'Regular use of the platform is only concerned with **accessing** `lines`. The
    previous mini-strategy example, lightly extended, comes in handy again:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 平台的常规使用只关注**访问**`lines`。前面的迷你策略示例，稍微扩展一下，再次派上用场：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Two objects with `lines` have been exposed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 已公开两个具有`lines`的对象：
- en: '`self.data` It has a `lines` attribute which contains a `close` attribute in
    turn'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.data` 它有一个`lines`属性，其中又包含一个`close`属性'
- en: '`self.movav` which is a `SimpleMovingAverage` indicator It has a `lines` attribute
    which contains a `sma` attribute in turn'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.movav` 是一个`SimpleMovingAverage`指标 它有一个`lines`属性，其中又包含一个`sma`属性'
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: It should be obvious from this, that `lines` are named. They can also be accessed
    sequentially following the declaration order, but this should only be used in
    `Indicator` development
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从这可以明显看出，`lines`是有名称的。它们也可以按照声明顺序顺序访问，但这只应在`Indicator`开发中使用
- en: And both *lines*, namely `close` and `sma` can be queried for a point (*index
    0*) to compare the values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 两个*lines*，即`close`和`sma`，都可以查询一个点（*索引0*）以比较值。
- en: 'Shorthand access to lines do exist:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种缩写访问*行*的方法存在：
- en: '`xxx.lines` can be shortened to `xxx.l`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx.lines` 可以缩短为 `xxx.l`'
- en: '`xxx.lines.name` can be shortened to `xxx.lines_name`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx.lines.name` 可以缩短为 `xxx.lines_name`'
- en: Complex objects like Strategies and Indicators offer quick access to data’s
    lines
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似策略和指标的复杂对象提供了对数据线的快速访问
- en: '`self.data_name` offers a direct access to `self.data.lines.name`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.data_name` 提供了对 `self.data.lines.name` 的直接访问'
- en: 'Which also applies to the numbered data variables: `self.data1_name` -> `self.data1.lines.name`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这也适用于编号的数据变量：`self.data1_name` -> `self.data1.lines.name`
- en: 'Additionally the line names are directly accessible with:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，线路名称可以直接访问：
- en: '`self.data.close` and `self.movav.sma`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.data.close` 和 `self.movav.sma`'
- en: But the notation doesn’t make as clear as the previous one if *lines* are actually
    being accessed.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是如果实际上正在访问*行*，则该符号并不像之前的符号那样清晰。
- en: Not
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不是
- en: '**Setting**/**Assigning** the lines with these two later notations is not supported'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两个后续符号**设置**/**分配**行不受支持
- en: '*Lines* declaration'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*Lines*声明'
- en: If an *Indicator* is being developed, the *lines* which the indicator has must
    be declared.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正在开发一个*Indicator*，则必须声明该指标具有的*lines*。
- en: Just as with *params* this takes place as a class attribute this time *ONLY*
    as a tuple. Dictionaries are not supported because they do not store things following
    insertion order.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如与*params*一样，这次以类属性的形式发生，**仅**作为元组。不支持字典，因为它们不按插入顺序存储事物。
- en: 'For the Simple Moving Average it would be done like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单移动平均线，应该这样做：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The *comma* following the declaration is needed in tuples if you pass a single
    string to the tuple or else each letter in the string would be interpreted as
    an item to be added to the tuple. Possibly one of the few spots where Python’s
    syntax got it wrong.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将单个字符串传递给元组，则元组中需要跟随声明的*逗号*，否则字符串中的每个字母都将被解释为要添加到元组中的项目。这可能是Python语法出错的几个情况之一。
- en: As seen in the previous example this declaration creates a `sma` line in the
    *Indicator* that can be later accessed in the Strategy’s logic (and possibly by
    other indicators to create more complex indicators)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，此声明在*Indicator*中创建了一个`sma`线，可以在策略的逻辑中（可能也可以由其他指标）稍后访问以创建更复杂的指标。
- en: 'For development is sometimes useful to access the lines in a generic non-named
    manner and this is where numbered access comes in handy:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发而言，有时以通用的非命名方式访问行是有用的，这就是编号访问发挥作用的地方：
- en: '`self.lines[0]` points to `self.lines.sma`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.lines[0]` 指向 `self.lines.sma`'
- en: Had more lines been defined they would be accessed with index 1, 2, and higher.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果定义了更多行，则可以使用索引 1、2 和更高的索引来访问它们。
- en: 'And of course, extra shorthand versions do exist:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还存在额外的简写版本：
- en: '`self.line` points to `self.lines[0]`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.line` 指向 `self.lines[0]`'
- en: '`self.lineX` point to `self.lines[X]`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.lineX` 指向 `self.lines[X]`'
- en: '`self.line_X` point to `self.lines[X]`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.line_X` 指向 `self.lines[X]`'
- en: 'Inside objects which are receiving *datas feeds* the lines below these data
    feeds can also be quickly accessed by number:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收*数据源*的对象内，这些数据源下方的行也可以通过数字快速访问：
- en: '`self.dataY` points to `self.data.lines[Y]`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.dataY` 指向 `self.data.lines[Y]`'
- en: '`self.dataX_Y` points to `self.dataX.lines[X]` which is a full shorthard version
    of `self.datas[X].lines[Y]`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.dataX_Y` 指向 `self.dataX.lines[X]`，这是 `self.datas[X].lines[Y]` 的完整简化版本'
- en: Accessing `lines` in *Data Feeds*
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在*数据源*中访问 `lines`
- en: Inside *data feeds* the `lines` can also be accessed omitting the `lines`. This
    makes it more natural to work with thinks like `close` prices.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在*数据源*内部，也可以访问 `lines`，省略 `lines`。这使得使用像 `close` 价格这样的内容更加自然。
- en: 'For example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Which seems more natural than the also valid: `if self.data.lines.close[0]
    > 30.0:`. The same doesn’t apply to `Indicators` with the reasoning being:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎比也有效的更自然：`if self.data.lines.close[0] > 30.0:`。同样的情况不适用于带有以下理由的`Indicators`：
- en: An `Indicator` could have an attribute `close` which holds an intermediate calculation,
    which is later delivered to the actual `lines` also named `close`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Indicator` 可能有一个属性 `close`，它保存一个中间计算结果，稍后交付给实际的 `lines`，也称为 `close`'
- en: In the case of *Data Feeds*, no calculation takes place, because it is only
    a data source.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在*数据源*的情况下，不会进行任何计算，因为它只是一个数据源。
- en: '*Lines* len'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*行*长度'
- en: '*Lines* have a set of points and grow dynamically during execution, therefore
    the length can be measured at any time by invoking the standard Python `len` function.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*行*有一组点，并在执行过程中动态增长，因此可以随时通过调用标准的 Python `len` 函数来测量长度。'
- en: 'This applies to for example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于例如：
- en: Data Feeds
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源
- en: Strategies
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略
- en: Indicators
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标
- en: 'An additional property applies to *Data Feeds* when the data is **preloaded**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据源*中存在另一个属性，当数据 **预加载** 时适用：'
- en: Method `buflen`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法 `buflen`
- en: The method returns the actual number of bars the *Data Feed* has available.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法返回*数据源*可用的实际条形图数。
- en: The difference between `len` and `buflen`
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`len` 和 `buflen` 的区别'
- en: '`len` reports how many bars have been processed'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len` 报告已处理了多少个条形图'
- en: '`buflen` reports the total number of bars which have been loaded for the Data
    Feed'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buflen` 报告为数据源加载了多少个条形图'
- en: If both return the same value, either no data has been preloaded or the processing
    of bars has consumed all preloaded bars (and unless the system is connected to
    a live feed, this will mean the end of processing)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两者返回相同的值，则要么没有预加载数据，要么条形图的处理已消耗所有预加载的条形图（除非系统连接到实时数据源，否则这将意味着处理结束）
- en: Inheritance of Lines and Params
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行和参数的继承
- en: A kind of metalanguage is in place to support declaration of *Params* and *Lines*.
    Every effort has been made to make it compatible with standard Python inheritance
    rules.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一种元语言用于支持*参数*和*行*的声明。为了使其与标准 Python 继承规则兼容，已经尽一切努力。
- en: Params inheritance
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数继承
- en: 'Inheritance should work as expected:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 继承应该按预期工作：
- en: Multiple inheritance is supported
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多重继承
- en: Params from base classes are inherited
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从基类继承参数
- en: If multiple base classes define the same param the default value of the last
    class in the inheritance list is used
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果多个基类定义了相同的参数，则使用继承列表中最后一个类的默认值
- en: If the same param is redefined in a child class, the new default value takes
    over that of the base class
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在子类中重新定义了相同的参数，则新的默认值将取代基类的默认值
- en: Lines Inheritance
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 行继承
- en: Multiple inheritance is supported
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多重继承
- en: Lines from all base classes are inherited. Being *named* lines there will only
    be one version of a line if the same name has been used more than once in base
    classes
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自所有基类的行都会被继承。作为*命名*行，如果相同的名称在基类中使用了多次，则只会有一个版本的行
- en: 'Indexing: 0 and -1'
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引：0 和 -1
- en: '*Lines* as seen before are line series and have a set of points that conform
    a line when drawn together (like when joining all closing prices together along
    a time axis)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*行*如前所述是线系列，并在绘制时一起组成一条线（就像沿时间轴连接所有收盘价一样）'
- en: To access those points in regular code, the choice has been to use a **0** based
    approach for the current *get/set* instant.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要在常规代码中访问这些点，选择使用基于**0**的方法来获取/设置当前*get/set*即时。
- en: Strategies do only *get* values. Indicators do also *set* values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 策略只获取值。指标还设置值。
- en: 'From the previous quick strategy example where the `next` method was briefly
    seen:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的快速策略示例中，`next`方法被简要看到：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The logic is *getting* the current value of the moving average and the current
    closing price by applying index `0`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑是通过应用索引`0` *获取*移动平均值和当前收盘价的当前值。
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Actually for index `0` and when applying logic/arithmetic operators the comparison
    can be made directly as in:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，对于索引`0`，并且在应用逻辑/算术运算符时，可以直接进行比较，如下所示：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See later in the document the explanation for operators.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档后面看运算符的解释。
- en: Setting is meant to be used when developing, for example, an Indicator, because
    the current output value has to be set by the indicator.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置是用于开发时使用的，例如，一个Indicator，因为必须通过该指标设置当前输出值。
- en: 'A SimpleMovingAverage can be calculated for the current get/set point as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式计算当前获取/设置点的SimpleMovingAverage：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Accessing previous set points has been modeled following the definition Python
    makes for `-1` when accessing an array/iterable
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 访问先前设置的点是按照Python为访问数组/可迭代时定义的`-1`进行建模
- en: It points to the last item of the array
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它指向数组的最后一项
- en: The platform consider the last set item (before the current live get/set point)
    to be `-1`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 平台将最后设置的项（当前实时获取/设置点之前）视为`-1`。
- en: 'As such comparing the current `close` to the *previous* `close` is a `0` vs
    `-1` thing. In a strategy, for example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将当前`close`与*前一个*`close`进行比较是一个`0` vs `-1`的事情。例如，在策略中：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Of course and logically, prices *set* before `-1` will be accessed with `-2,
    -3, ...`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，从`-1`之前设置的价格将使用`-2、-3、...`进行访问。
- en: Slicing
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片
- en: '*backtrader* doesn’t support slicing for *lines* objects and this is a design
    decision following the `[0]` and `[-1]` indexing scheme. With regular indexable
    Python objects you would do things like:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*backtrader*不支持对*lines*对象进行切片，这是一种设计决策，遵循了`[0]`和`[-1]`索引方案。对于常规可索引的Python对象，您会执行以下操作：'
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'But remember that with the choice for `0` … it is actually the currently delivered
    value, there is nothing after it. Also:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，在选择为`0`时……实际上是当前交付的值，后面没有了。另外：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Again … `0` is the current value and `-1` is the latest (previous) delivered
    value. That’s why a slice from `0` -> `-1` makes no sense in the *backtrader*
    ecosystem.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 再次……`0`是当前值，`-1`是最新（先前）的交付值。这就是为什么在*backtrader*生态系统中从`0` -> `-1`切片没有意义的原因。
- en: 'If slicing were ever to be supported, it would look like:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持切片，将如下所示：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'or:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'or:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Getting a slice
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取一个切片
- en: 'An array with the latest values can still be gotten. The syntax:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以获取具有最新值的数组。语法：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That would have returned an arry with `1` value (`size=1`) with the current
    moment `0` as the staring point to look backwards.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个具有`1`值（`size=1`）的数组，当前时刻`0`作为向后查找的起始点。
- en: 'To get 10 values from the current point in time (i.e.: the last 10 values):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要从当前时间点获取10个值（即：最后10个值）：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Of course the array has the ordering you would expect. The leftmost value is
    the oldest one and the rightmost value is the most current (it is a regular python
    array and not a *lines* object)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，数组具有您期望的顺序。最左边的值是最旧的值，最右边的值是最新的值（它是一个常规的Python数组，而不是一个*lines*对象）
- en: 'To get the last 10 values skipping only the current point:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最后10个值，仅跳过当前点：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Lines: DELAYED indexing'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行：延迟索引
- en: The `[]` operator syntax is there to extract individual values during the `next`
    logic phase. *Lines* objects support an additional notation to address values
    through a *delayed lines object* during the `__init__` phase.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`[]`操作符语法用于在`next`逻辑阶段提取单个值。 *Lines*对象支持另一种符号，通过*延迟行对象*在`__init__`阶段访问值。'
- en: 'Let’s say that the interest in the logic is to compare the previous *close*
    value to the actual value of a *simple moving average*. Rather than doing it manually
    in each `next` iteration a pre-canned *lines* object can be generated:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 假设逻辑的兴趣是将前一个*close*值与*简单移动平均值*的实际值进行比较。而不是在每个`next`迭代中手动执行，可以生成一个预先定义的*lines*对象：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here the `(delay)` notation is being used:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，正在使用`(delay)`符号：
- en: This delivers a replica of the `close` prices but delayed by `-1`.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这提供了一个`close`价格的副本，但是延迟了`-1`。
- en: And the comparison `self.data.close(-1) > self.sma` generates another *lines*
    object which returns either `1` if the condition is `True` or `0` if `False`
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比较`self.data.close(-1) > self.sma`生成另一个*lines*对象，如果条件为`True`则返回`1`，如果为`False`则返回`0`
- en: Lines Coupling
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线耦合
- en: The operator `()` can be used as shown above with `delay` value to provide a
    delayed version of a *lines* object.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符`()`可以像上面显示的那样与`delay`值一起使用，以提供*lines*对象的延迟版本。
- en: If the syntax is used *WITHOUT* providing a `delay` value, then a `LinesCoupler`
    *lines* object is returned. This is meant to establish a coupling between indicators
    that operate on *datas* with different timeframes.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用语法*WITHOUT*提供`delay`值，则返回一个`LinesCoupler` *lines*对象。这旨在在操作*datas*具有不同时间框架的指标之间建立耦合。
- en: 'Data Feeds with different timeframes have different *lengths*, and the indicators
    operating on them replicate the length of the data. Example:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 具有不同时间框架的数据源具有不同的*长度*，在其上操作的指标复制数据的长度。例如：
- en: A daily data feed has around 250 bars per year
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年的日数据源大约有250个柱状图
- en: A weekly data feed has 52 bars per year
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年的周数据源有52个柱状图
- en: Trying to create an operation (for example) which compares 2 *simple moving
    averages*, each operating on the datas quoted above would break. It would be unclear
    how to match the 250 bars from the daily timeframe to the 52 bars of the weekly
    timeframe.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建一个操作（例如），比较两个*简单移动平均*，每个操作在上述引用的数据上运行，会出现问题。不清楚如何将每日时间框架的250个柱状图与每周时间框架的52个柱状图匹配。
- en: 'The reader could imagine a `date` comparison taking place in the background
    to find out a day - week correspondence, but:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可以想象在后台进行`date`比较，以找出一天 - 一周的对应关系，但是：
- en: '`Indicators` are just mathematical formulas and have no *datetime* information'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指标`只是数学公式，没有*日期时间*信息。'
- en: They know nothing about the environment, just that if the data provides enough
    values, a calculation can take place.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它们对环境一无所知，只知道如果数据提供足够的值，就可以进行计算。
- en: 'The `()` (empty call) notation comes to the rescue:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`()`（空调用）符号来拯救：'
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here the larger timeframe indicator, `sma1` is *coupled* to the daily timeframe
    with `sma1()`. This returns an object which is compatible with the larger numbers
    of bars of `sma0` and copies the values produced by `sma1`, effectively spreading
    the 52 weekly bars in 250 daily bars
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，较大时间框架指标`sma1`与每日时间框架耦合为`sma1()`。这返回一个与`sma0`的更大柱状图兼容的对象，并复制由`sma1`产生的值，有效地将52周柱状图分散在250日柱状图中
- en: Operators, using natural constructs
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符，使用自然构造
- en: In order to achieve the “ease of use” goal the platform allows (within the constraints
    of Python) the use of operators. And to further enhance this goal , the use of
    operators has been broken in two stages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现“易用性”目标，该平台允许（在Python的约束条件下）使用运算符。为了进一步增强这一目标，运算符的使用已分为两个阶段。
- en: Stage 1 - Operators Create Objects
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1阶段 - 运算符创建对象
- en: An example has already been seen even if not explicitly meant for this. During
    the initialization phase (`__init__` method) of objects like Indicators and Strategies,
    operators create objects that can be operated upon, assigned or kept as reference
    for later using during the evaluation phase of the Strategy’s logic.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有明确指定，示例已经展示了这一点。在像指标和策略这样的对象的初始化阶段（`__init__`方法）中，运算符创建可以进行操作、分配或保留作为后续在策略逻辑评估阶段使用的对象。
- en: Once again a potential implementation of a SimpleMovingAverage, further broken
    down into steps.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 再次展示了一个简单移动平均的潜在实现，进一步分解为步骤。
- en: 'The code inside the SimpleMovingAverage indicator `__init__` could look like:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 简单移动平均指标`__init__`中的代码可能如下所示：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A more complete use case is shown during the initialization of a Strategy:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在策略初始化期间展示了一个更完整的用例：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After the above operations have taken place, *sell_sig* is a *Lines* object
    which can be later used in the logic of the Strategy, indicating if the conditions
    are met or not.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述操作完成后，*sell_sig*是一个*Lines*对象，可以在策略的逻辑中稍后使用，指示条件是否满足。
- en: Stage 2 - Operators true to nature
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二阶段 - 自然的运算符
- en: 'Let’s first remember that a strategy has a `next` method which is called for
    every bar the system processes. This is where operators are actually in the stage
    2 mode. Building on the previous example:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先记住，策略有一个`next`方法，系统处理每个柱状图时都会调用该方法。这就是运算符实际处于第2阶段模式的地方。在前面的示例基础上构建：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Not a very useful strategy, just an example. During Stage 2 operators return
    the expected values (boolean if testing for truth and floats if comparing them
    to floats) and also arithmetic operations do.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 不是一个非常有用的策略，只是一个例子。在第2阶段，运算符返回预期的值（如果测试真实性则返回布尔值，如果与浮点数比较则返回浮点数），算术运算也是如此。
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that comparisons are actually not using the [] operator. This is meant
    to further simplify things.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，比较实际上并没有使用[]运算符。这是为了进一步简化事情。
- en: '`if self.sma > 30.0:` … compares `self.sma[0]` to `30.0` (1^(st) line and current
    value)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`if self.sma > 30.0:` … 比较`self.sma[0]`和`30.0`（第1行和当前值）'
- en: '`if self.sma > self.data.close:` … compares `self.sma[0]` to `self.data.close[0]`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`if self.sma > self.data.close:` … 比较`self.sma[0]`和`self.data.close[0]`'
- en: Some non-overriden operators/functions
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些未被覆盖的运算符/函数
- en: Python will not allow overriding everything and thus some functions are provided
    to cope with the cases.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python不允许覆盖所有内容，因此提供了一些函数来处理这些情况。
- en: Note
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Only meant to be used during Stage 1, to create objects which later provide
    values.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在阶段1中使用，以创建稍后提供值的对象。
- en: 'Operators:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符：
- en: '`and` -> `And`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`and` -> `And`'
- en: '`or` -> `Or`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`or` -> `Or`'
- en: 'Logic Control:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑控制：
- en: '`if` -> `If`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` -> `If`'
- en: 'Functions:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 函数：
- en: '`any` -> `Any`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`any` -> `Any`'
- en: '`all` -> `All`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all` -> `All`'
- en: '`cmp` -> `Cmp`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmp` -> `Cmp`'
- en: '`max` -> `Max`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max` -> `Max`'
- en: '`min` -> `Min`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min` -> `Min`'
- en: '`sum` -> `Sum`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sum` -> `Sum`'
- en: '`Sum` actually uses `math.fsum` as the underlying operation because the platform
    works with floating point numbers and applying a regular `sum` may have an impact
    on precision.'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Sum`实际上使用`math.fsum`作为底层操作，因为平台使用浮点数，并且应用常规的`sum`可能会影响精度。'
- en: '`reduce` -> `Reduce`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce` -> `Reduce`'
- en: These utility operators/functions operate on iterables. The elements in the
    iterables can be regular Python numeric types (ints, floats, …) and also objects
    with *Lines*.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用运算符/函数操作可迭代对象。可迭代对象中的元素可以是常规的Python数值类型（整数，浮点数，...）也可以是具有*Lines*的对象。
- en: 'An example generating a very dumb buy signal:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一个生成非常愚蠢买入信号的例子：
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It is obvious that if the `sma1` is higher than the high, it must be higher
    than the close. But the point is illustrating the use of `bt.And`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果`sma1`高于最高价，那么它必须高于收盘价。但重点是说明`bt.And`的用法。
- en: 'Using `bt.If`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`bt.If`：
- en: '[PRE30]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Breakdown:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 分解：
- en: Generate a `SMA` on `data.close` of `period=15`
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`data.close`上生成一个`SMA`，周期为`15`
- en: And then
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后
- en: '`bt.If` the value of the *sma* is larger than `close`, return `low`, else return
    `high`'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bt.If`如果*sma*的值大于`close`，则返回`low`，否则返回`high`'
- en: Remember that no actual value is being returned when `bt.If` is being invoked.
    It returns a *Lines* object which is just like a *SimpleMovingAverage*.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，当调用`bt.If`时并不会返回实际值。它返回一个*Lines*对象，就像一个*SimpleMovingAverage*一样。
- en: The values will be calculated later when the system runs
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值将在系统运行时计算
- en: The generated `bt.If` *Lines* object is then fed to a 2^(nd) `SMA` which will
    sometimes use the `low` prices and sometimes the `high` prices for the calculation
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的`bt.If` *Lines*对象然后被传递给第2个`SMA`，有时会使用`low`价格，有时会使用`high`价格进行计算
- en: 'Those **functions** take also numeric values. The same example with a modification:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这些**函数**也接受数值。同样的例子，稍作修改：
- en: '[PRE31]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now the 2^(nd) moving average uses either `30.0` or the `high` prices to perform
    the calculation, depending on the logic status of `sma` vs `close`
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在第2个移动平均值使用`30.0`或`high`价格执行计算，取决于`sma`与`close`的逻辑状态
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The value `30` is transformed internally into a pseudo-iterable which always
    returns `30`
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 值`30`在内部转换为一个伪可迭代对象，始终返回`30`
