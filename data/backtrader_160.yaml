- en: Pyfolio Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pyfolio集成
- en: 原文：[https://www.backtrader.com/blog/posts/2016-07-17-pyfolio-integration/pyfolio-integration/](https://www.backtrader.com/blog/posts/2016-07-17-pyfolio-integration/pyfolio-integration/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/blog/posts/2016-07-17-pyfolio-integration/pyfolio-integration/](https://www.backtrader.com/blog/posts/2016-07-17-pyfolio-integration/pyfolio-integration/)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**Feb 2017**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**2017年2月**'
- en: '`pyfolio` APIs have changed and `create_full_tear_sheet` no longer has a `gross_lev`
    as a named argument.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyfolio`的API已更改，`create_full_tear_sheet`不再具有`gross_lev`作为命名参数。'
- en: Consequently the sample below doesn’t work
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，下面的示例不起作用
- en: A first look at the tutorial deemed it as difficult, given the tight integration
    amongst zipline and pyfolio, but the sample *test* data available with pyfolio
    for some other uses is actually pretty useful to decode what’s running behind
    the scenes and hence the wonder of integration.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 初次查看教程时，由于zipline和pyfolio之间的紧密集成，被认为很难，但是pyfolio提供的用于其他用途的样本*测试*数据实际上非常有用，可以解码幕后运行的内容，从而实现集成的奇迹。
- en: 'The integration of a *portfolio* tool, namely `pyfolio`, came up with in [Ticket
    #108](https://github.com/mementum/backtrader/issues/108).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '一个名为`pyfolio`的*投资组合*工具的集成是在[Ticket #108](https://github.com/mementum/backtrader/issues/108)中提出的。'
- en: 'Most of the pieces were already in-place in *backtrader*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分组件已经就位在*backtrader*中：
- en: Analyzer infrastructure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析器基础设施
- en: Children analyzer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子分析器
- en: A TimeReturn analyzer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TimeReturn分析器
- en: Only a main `PyFolio` analyzer and 3 easy *children* analyzer are needed. Plus
    a method that relies on one of the dependencies already needed by `pyfolio` which
    is `pandas`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要一个主要的`PyFolio`分析器和3个简单的*子*分析器。再加上一个依赖于`pyfolio`已经需要的`pandas`的方法。
- en: The most challenging part … “getting all the dependencies right”.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最具挑战性的部分是...“确保所有依赖项正确”。
- en: Update of `pandas`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`pandas`
- en: Update of `numpy`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`numpy`
- en: Update of `scikit-lean`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`scikit-lean`
- en: Update of `seaborn`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`seaborn`
- en: 'Under Unix-like environments with a *C* compiler it’s all about time. Under
    Windows and even with the specific *Microsoft* compiler installed (in this case
    the chain for *Python 2.7*) things failed. But a well known site with a collection
    of up-to-date packages for *Windows* helped. Visit it if you ever need it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在类Unix环境中使用*C*编译器，一切都是关于时间的。在Windows下，即使安装了特定的*Microsoft*编译器（在本例中是*Python 2.7*的链），事情也会失败。但是一个收集最新软件包的著名网站对*Windows*有所帮助。如果您需要，请访问：
- en: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
- en: The integration wouldn’t be complete if it wasn’t tested and that’s why the
    usual sample is as always present.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有经过测试，集成将不完整，这就是为什么通常的示例总是存在的原因。
- en: No PyFolio
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有PyFolio
- en: 'The sample uses `random.randint` to decide when to *buy*/*sell*, so this is
    simply a check that things are working:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例使用`random.randint`来决定何时*买入*/*卖出*，因此这只是一个检查事情是否正常运行的方法：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![image](../Images/2065abb1e634b5adc14e6c863f425683.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/2065abb1e634b5adc14e6c863f425683.png)'
- en: There a 3 datas and several *buy* and *sell* operations are randomly chosen
    and scattered over the 2 year default life of the test run
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有3个数据和几个*买入*和*卖出*操作是随机选择并分散在测试运行的默认2年寿命中
- en: A PyFolio run
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个PyFolio运行
- en: '`pyfolio` things work well when running inside a *Jupyter Notebook* including
    inline plotting. Here is the *notebook*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当在*Jupyter Notebook*中运行时，`pyfolio`的功能运行良好，包括内联绘图。这是*笔记本*
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`runstrat` gets here [] as argument to run with default arguments and skip
    arguments passed by the *notebook* itself'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`runstrat`在此处获取[]作为参数以使用默认参数运行，并跳过由*笔记本*本身传递的参数'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![image](../Images/9e907c78e596f4812d1a645f7945f889.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/9e907c78e596f4812d1a645f7945f889.png)'
- en: '![image](../Images/a34f8f7cacb12651e6a372290e4fef8e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/a34f8f7cacb12651e6a372290e4fef8e.png)'
- en: '![image](../Images/8452c2408ba1795af50c3642991c3838.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/8452c2408ba1795af50c3642991c3838.png)'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![image](../Images/f2cc25932652c1c71d99dd12b9020b3c.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f2cc25932652c1c71d99dd12b9020b3c.png)'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![image](../Images/306275e8d7f851520c93bc570295e1d5.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/306275e8d7f851520c93bc570295e1d5.png)'
- en: 'Usage of the sample:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用示例：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
