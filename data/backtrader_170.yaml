- en: Bid-Ask Data to OHLC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bid-Ask数据到OHLC
- en: 原文：[https://www.backtrader.com/blog/posts/2016-04-14-bidask-data-to-ohlc/bidask-data-to-ohlc/](https://www.backtrader.com/blog/posts/2016-04-14-bidask-data-to-ohlc/bidask-data-to-ohlc/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/blog/posts/2016-04-14-bidask-data-to-ohlc/bidask-data-to-ohlc/](https://www.backtrader.com/blog/posts/2016-04-14-bidask-data-to-ohlc/bidask-data-to-ohlc/)
- en: Lately backtrader executed an escape-from-ohlc-land by implementing line overriding,
    which allows to redefine the entire hierarchy and for example have data feeds
    which only feature bid, ask and datetime lines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，backtrader通过实现线覆盖来执行了从ohlcland的逃逸，这允许重新定义整个层次结构，例如拥有仅包含bid、ask和datetime行的数据源。
- en: (Here to the original Escape from OHLC Land)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （这里是原始Escape from OHLC Land）
- en: This opens the question as to how to visualize such data and this is most effectively
    done in `OHLC` format (be it a `bar` or a `candlestick`)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这引发了如何可视化此类数据的问题，这在`OHLC`格式中最有效地完成（无论是`bar`还是`candlestick`）
- en: 'Steps needed:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所需步骤：
- en: Define a Data Feed loader which can read the given `bid/ask` format
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个可以读取给定`bid/ask`格式的数据源加载器
- en: 'Decide to which fields to assign the values, ie: `open`, `high`, `low` and
    `close` (and maybe `volume`'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定将值分配给哪些字段，即：`open`、`high`、`low`和`close`（也许还有`volume`）
- en: Decide on a resampling scheme
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定一个重新采样方案
- en: 'Source data (10 rows of bid-ask data):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 源数据（10行bid-ask数据）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After which:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 之后：
- en: Reading the data will not be a major problem, given the end result has to be
    OHLC and that’s what the built-in data feeds deliver after parsing. Because it
    is yet another variant from *csv*. We can even reuse the `GenericCSVData` existing
    feed. Thank God it is *generic*
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读数据不会是一个主要问题，因为最终结果必须是OHLC，这是内置数据源在解析后提供的内容。因为这是另一种*csv*的变体。我们甚至可以重用现有的`GenericCSVData`数据源。感谢上帝，它是*通用的*
- en: 'Having only a single *price* element and a single *volume* element per line,
    the price assignment is clear: *assign the price to the four price elements and
    the volume to the volume*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有单个*价格*元素和单个*成交量*元素的情况下，价格分配是清晰的：*将价格分配给四个价格元素，将成交量分配给成交量*
- en: 'When it comes down to resampling, rather than upsampling to a larger timeframe
    the key will be the number of bars, ie: *compression*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当涉及到重新采样时，与上采样到更大时间框架不同，关键将是条数，即：*compression*
- en: And the built-in *resampler* can already deliver the same *timeframe* but compressed
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 而内置的*重采样器*已经可以提供相同的*timeframe*但是压缩了。
- en: 'Getting the data into OHLC format with the `GenericCSVData`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`GenericCSVData`将数据转换为OHLC格式：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some of the arguments don’t even need to be changed, namely:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一些参数甚至不需要更改，即：
- en: '`tmformat`: because the time in the feed already matches the default format'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmformat`：因为数据源中的时间已经与默认格式匹配'
- en: '`datetime`: because the date is in the first position in the csv stream'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime`：因为日期在csv流中的第一个位置'
- en: 'The others:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其他：
- en: '`time=1`: indicates that time is not in a single field with `date` and which
    position it has'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time=1`：指示时间不在单个字段中与`date`一起，并指定其位置'
- en: '`open=5` (and the same for `high`, `low`, `close`): which field in the stream
    will be used as source for the price'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open=5`（对于`high`、`low`、`close`也是一样）：流中哪个字段将用作价格的源'
- en: '`volume=7`: same as above'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volume=7`：与上述相同'
- en: '`openinterest=-1`: a negative value indicates this field is not present'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openinterest=-1`：负值表示此字段不存在'
- en: 'Once the data is on board it is about just resampling it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据准备就绪，就只需对其进行重新采样：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We provide the same `timeframe` which the data carries `TimeFrame.Ticks` to
    make sure that the data is not *upsampled*. And the `compression` is taken as
    an argument from the command line, hence: `compression=args.compression`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供相同的`timeframe`，数据携带的是`TimeFrame.Ticks`，以确保数据不被*上采样*。而`compression`是从命令行中传递的参数，因此：`compression=args.compression`
- en: 'A sample execution:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例执行：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And unsurprisingly we have gone from a *Bid/Ask* format to an *OHLC* format
    and from `10` to `5` rows of data due to the `2` assigned to compression.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不出所料，我们已经从*Bid/Ask*格式转换为*OHLC*格式，并且由于分配给压缩的`2`，数据已经从`10`行减少到`5`行。
- en: 'It should also come to no surprise that `backtrader` cannot make miracles and
    with a *compression* factor which is not a divisor of the total number of original
    rows it will deliver `rows / compression + 1` new rows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也不应该让人惊讶，`backtrader`不能创造奇迹，如果*compression*因子不是原始行数的除数，它将传递`rows / compression
    + 1`行新行：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case `10 / 3 = 3.33333` and that’s why `4` rows are delivered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`10 / 3 = 3.33333`，这就是为什么会传递`4`行的原因。
- en: Of course now with `OHLC` in the hand the results can be plotted. The chart
    is not really nice due to the low amount of data and the low variance of the data
    and how `matplotlib` internally handles this situation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，现在手中有了 `OHLC` 数据，结果可以绘制出来。由于数据量少且数据变化小以及 `matplotlib` 内部处理此情况的方式，图表看起来并不怎么好看。
- en: '![image](../Images/85c14ac5921762847465ca04dac151fd.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/85c14ac5921762847465ca04dac151fd.png)'
- en: The sample code (included in the sources of `backtrader`)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 样例代码（包含在 `backtrader` 的源代码中）
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
