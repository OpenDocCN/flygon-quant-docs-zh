["```py\n`from datetime import datetime\nimport backtrader as bt\n\n# Create a subclass of Strategy to define the indicators and logic\n\nclass SmaCross(bt.Strategy):\n    # list of parameters which are configurable for the strategy\n    params = dict(\n        pfast=10,  # period for the fast moving average\n        pslow=30   # period for the slow moving average\n    )\n\n    def __init__(self):\n        sma1 = bt.ind.SMA(period=self.p.pfast)  # fast moving average\n        sma2 = bt.ind.SMA(period=self.p.pslow)  # slow moving average\n        self.crossover = bt.ind.CrossOver(sma1, sma2)  # crossover signal\n\n    def next(self):\n        if not self.position:  # not in the market\n            if self.crossover > 0:  # if fast crosses slow to the upside\n                self.buy()  # enter long\n\n        elif self.crossover < 0:  # in the market & cross to the downside\n            self.close()  # close long position\n\ncerebro = bt.Cerebro()  # create a \"Cerebro\" engine instance\n\n# Create a data feed\ndata = bt.feeds.YahooFinanceData(dataname='MSFT',\n                                 fromdate=datetime(2011, 1, 1),\n                                 todate=datetime(2012, 12, 31))\n\ncerebro.adddata(data)  # Add the data feed\n\ncerebro.addstrategy(SmaCross)  # Add the trading strategy\ncerebro.run()  # run it all\ncerebro.plot()  # and plot it with a single command` \n```", "```py\n`from datetime import datetime\nimport backtrader as bt\n\n# Create a subclass of Strategy to define the indicators and logic\n\nclass SmaCross(bt.Strategy):\n    # list of parameters which are configurable for the strategy\n    params = dict(\n        pfast=10,  # period for the fast moving average\n        pslow=30   # period for the slow moving average\n    )\n\n    def __init__(self):\n        sma1 = bt.ind.SMA(period=self.p.pfast)  # fast moving average\n        sma2 = bt.ind.SMA(period=self.p.pslow)  # slow moving average\n        self.crossover = bt.ind.CrossOver(sma1, sma2)  # crossover signal\n\n    def next(self):\n        if not self.position:  # not in the market\n            if self.crossover > 0:  # if fast crosses slow to the upside\n                self.order_target_size(target=1)  # enter long\n\n        elif self.crossover < 0:  # in the market & cross to the downside\n            self.order_target_size(target=0)  # close long position\n\ncerebro = bt.Cerebro()  # create a \"Cerebro\" engine instance\n\n# Create a data feed\ndata = bt.feeds.YahooFinanceData(dataname='MSFT',\n                                 fromdate=datetime(2011, 1, 1),\n                                 todate=datetime(2012, 12, 31))\n\ncerebro.adddata(data)  # Add the data feed\n\ncerebro.addstrategy(SmaCross)  # Add the trading strategy\ncerebro.run()  # run it all\ncerebro.plot()  # and plot it with a single command` \n```", "```py\n`from datetime import datetime\nimport backtrader as bt\n\n# Create a subclass of SignaStrategy to define the indicators and signals\n\nclass SmaCross(bt.SignalStrategy):\n    # list of parameters which are configurable for the strategy\n    params = dict(\n        pfast=10,  # period for the fast moving average\n        pslow=30   # period for the slow moving average\n    )\n\n    def __init__(self):\n        sma1 = bt.ind.SMA(period=self.p.pfast)  # fast moving average\n        sma2 = bt.ind.SMA(period=self.p.pslow)  # slow moving average\n        crossover = bt.ind.CrossOver(sma1, sma2)  # crossover signal\n        self.signal_add(bt.SIGNAL_LONG, crossover)  # use it as LONG signal\n\ncerebro = bt.Cerebro()  # create a \"Cerebro\" engine instance\n\n# Create a data feed\ndata = bt.feeds.YahooFinanceData(dataname='MSFT',\n                                 fromdate=datetime(2011, 1, 1),\n                                 todate=datetime(2012, 12, 31))\n\ncerebro.adddata(data)  # Add the data feed\n\ncerebro.addstrategy(SmaCross)  # Add the trading strategy\ncerebro.run()  # run it all\ncerebro.plot()  # and plot it with a single command` \n```"]