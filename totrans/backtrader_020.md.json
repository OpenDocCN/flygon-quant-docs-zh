["```py\n`class SimpleMovingAverage(Indicator):\n    lines = ('sma',)\n    params = dict(period=20)\n\n    def __init__(self):\n        ...  # Not relevant for the explanation\n\n    def prenext(self):\n        print('prenext:: current period:', len(self))\n\n    def nextstart(self):\n        print('nextstart:: current period:', len(self))\n        # emulate default behavior ... call next\n        self.next()\n\n    def next(self):\n        print('next:: current period:', len(self))` \n```", "```py\n`sma = btind.SimpleMovingAverage(self.data, period=25)` \n```", "```py\n`sma1 = btind.SimpleMovingAverage(self.data, period=25)\n\nsma2 = btind.SimpleMovingAverage(sma1, period=20)` \n```", "```py\n`import backtrader as bt\nimport backtrader.feeds as btfeeds\n\n...\n\ndatapath = 'path/to/your/yahoo/data.csv'\n\ndata = btfeeds.YahooFinanceCSVData(\n    dataname=datapath,\n    reversed=True)` \n```", "```py\n`data = btfeeds.YahooFinanceCSVData(\n    dataname=datapath,\n    reversed=True\n    fromdate=datetime.datetime(2014, 1, 1),\n    todate=datetime.datetime(2014, 12, 31))` \n```", "```py\n`data = btfeeds.YahooFinanceCSVData(\n    dataname=datapath,\n    reversed=True\n    fromdate=datetime.datetime(2014, 1, 1),\n    todate=datetime.datetime(2014, 12, 31)\n    timeframe=bt.TimeFrame.Days,\n    compression=1,\n    name='Yahoo'\n   )` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    def __init__(self):\n\n        self.sma = btind.SimpleMovingAverage(self.data, period=20)\n\n    def next(self):\n\n        if self.sma > self.data.close:\n            self.buy()\n\n        elif self.sma < self.data.close:\n            self.sell()` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    def __init__(self):\n\n        self.sma = btind.SimpleMovingAverage(self.data, period=20)\n\n    def next(self):\n\n        if self.sma > self.data.close:\n            submitted_order = self.buy()\n\n        elif self.sma < self.data.close:\n            submitted_order = self.sell()\n\n    def start(self):\n        print('Backtesting is about to start')\n\n    def stop(self):\n        print('Backtesting is finished')\n\n    def notify_order(self, order):\n        print('An order new/changed/executed/canceled has been received')` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    params = (('period', 20),)\n\n    def __init__(self):\n\n        self.sma = btind.SimpleMovingAverage(self.data, period=self.params.period)\n\n    ...\n    ...` \n```", "```py\n`cerebro = bt.Cerebro()` \n```", "```py\n`cerebro.adddata(data)\ncerebro.addstrategy(MyStrategy, period=25)\ncerebro.run()` \n```", "```py\n    `cerebro = bt.Cerebro(runonce=True, preload=True)` \n    ```", "```py\n    `cerebro.run()\n    cerebro.plot()` \n    ```", "```py\n    `cerebro.optstrategy(MyStrategy, period=xrange(10, 20))` \n    ```", "```py\n    `cerebro.optstrategy(MyStrategy, period=xrange(10, 20), factor=3.5)` \n    ```"]