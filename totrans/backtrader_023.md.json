["```py\n`$ ./memory-savings.py --save 0\nTotal memory cells used: 506430` \n```", "```py\n`$ ./memory-savings.py --save 1\nTotal memory cells used: 2041` \n```", "```py\n`$ ./memory-savings.py --save -1\nTotal memory cells used: 184623` \n```", "```py\n`$ ./memory-savings.py --save -2\nTotal memory cells used: 174695` \n```", "```py\n`$ ./memory-savings.py --save -2 --plot\nTotal memory cells used: 174695` \n```", "```py\n`$ ./memory-savings.py --save -1 --lendetails\n-- Evaluating Datas\n---- Data 0 Total Cells 34755 - Cells per Line 4965\n-- Evaluating Indicators\n---- Indicator 1.0 Average Total Cells 30 - Cells per line 30\n---- SubIndicators Total Cells 1\n---- Indicator 1.1 _LineDelay Total Cells 1 - Cells per line 1\n---- SubIndicators Total Cells 1\n...\n---- Indicator 0.5 TestInd Total Cells 9930 - Cells per line 4965\n---- SubIndicators Total Cells 0\n-- Evaluating Observers\n---- Observer 0 Total Cells 9930 - Cells per Line 4965\n---- Observer 1 Total Cells 9930 - Cells per Line 4965\n---- Observer 2 Total Cells 9930 - Cells per Line 4965\nTotal memory cells used: 184623` \n```", "```py\n`$ ./memory-savings.py --save 1 --lendetails\n-- Evaluating Datas\n---- Data 0 Total Cells 266 - Cells per Line 38\n-- Evaluating Indicators\n---- Indicator 1.0 Average Total Cells 30 - Cells per line 30\n---- SubIndicators Total Cells 1\n...\n---- Indicator 0.5 TestInd Total Cells 2 - Cells per line 1\n---- SubIndicators Total Cells 0\n-- Evaluating Observers\n---- Observer 0 Total Cells 2 - Cells per Line 1\n---- Observer 1 Total Cells 2 - Cells per Line 1\n---- Observer 2 Total Cells 2 - Cells per Line 1` \n```", "```py\n`$ ./memory-savings.py --help\nusage: memory-savings.py [-h] [--data DATA] [--save SAVE] [--datalines]\n                         [--lendetails] [--plot]\n\nCheck Memory Savings\n\noptional arguments:\n  -h, --help    show this help message and exit\n  --data DATA   Data to be read in (default: ../../datas/yhoo-1996-2015.txt)\n  --save SAVE   Memory saving level [1, 0, -1, -2] (default: 0)\n  --datalines   Print data lines (default: False)\n  --lendetails  Print individual items memory usage (default: False)\n  --plot        Plot the result (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport sys\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\nimport backtrader.utils.flushfile\n\nclass TestInd(bt.Indicator):\n    lines = ('a', 'b')\n\n    def __init__(self):\n        self.lines.a = b = self.data.close - self.data.high\n        self.lines.b = btind.SMA(b, period=20)\n\nclass St(bt.Strategy):\n    params = (\n        ('datalines', False),\n        ('lendetails', False),\n    )\n\n    def __init__(self):\n        btind.SMA()\n        btind.Stochastic()\n        btind.RSI()\n        btind.MACD()\n        btind.CCI()\n        TestInd().plotinfo.plot = False\n\n    def next(self):\n        if self.p.datalines:\n            txt = ','.join(\n                ['%04d' % len(self),\n                 '%04d' % len(self.data0),\n                 self.data.datetime.date(0).isoformat()]\n            )\n\n            print(txt)\n\n    def loglendetails(self, msg):\n        if self.p.lendetails:\n            print(msg)\n\n    def stop(self):\n        super(St, self).stop()\n\n        tlen = 0\n        self.loglendetails('-- Evaluating Datas')\n        for i, data in enumerate(self.datas):\n            tdata = 0\n            for line in data.lines:\n                tdata += len(line.array)\n                tline = len(line.array)\n\n            tlen += tdata\n            logtxt = '---- Data {} Total Cells {} - Cells per Line {}'\n            self.loglendetails(logtxt.format(i, tdata, tline))\n\n        self.loglendetails('-- Evaluating Indicators')\n        for i, ind in enumerate(self.getindicators()):\n            tlen += self.rindicator(ind, i, 0)\n\n        self.loglendetails('-- Evaluating Observers')\n        for i, obs in enumerate(self.getobservers()):\n            tobs = 0\n            for line in obs.lines:\n                tobs += len(line.array)\n                tline = len(line.array)\n\n            tlen += tdata\n            logtxt = '---- Observer {} Total Cells {} - Cells per Line {}'\n            self.loglendetails(logtxt.format(i, tobs, tline))\n\n        print('Total memory cells used: {}'.format(tlen))\n\n    def rindicator(self, ind, i, deep):\n        tind = 0\n        for line in ind.lines:\n            tind += len(line.array)\n            tline = len(line.array)\n\n        thisind = tind\n\n        tsub = 0\n        for j, sind in enumerate(ind.getindicators()):\n            tsub += self.rindicator(sind, j, deep + 1)\n\n        iname = ind.__class__.__name__.split('.')[-1]\n\n        logtxt = '---- Indicator {}.{}  {} Total Cells {} - Cells per line {}'\n        self.loglendetails(logtxt.format(deep, i, iname, tind, tline))\n        logtxt = '---- SubIndicators Total Cells {}'\n        self.loglendetails(logtxt.format(deep, i, iname, tsub))\n\n        return tind + tsub\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n    data = btfeeds.YahooFinanceCSVData(dataname=args.data)\n    cerebro.adddata(data)\n    cerebro.addstrategy(\n        St, datalines=args.datalines, lendetails=args.lendetails)\n\n    cerebro.run(runonce=False, exactbars=args.save)\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Check Memory Savings')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--save', required=False, type=int, default=0,\n                        help=('Memory saving level [1, 0, -1, -2]'))\n\n    parser.add_argument('--datalines', required=False, action='store_true',\n                        help=('Print data lines'))\n\n    parser.add_argument('--lendetails', required=False, action='store_true',\n                        help=('Print individual items memory usage'))\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]