- en: Optimization improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/docu/optimization-improvements/](https://www.backtrader.com/docu/optimization-improvements/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Version `1.8.12.99` of *backtrader* includes an improvement in how *data feeds*
    and *results* are managed during multiprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The behavior for both has been made
  prefs: []
  type: TYPE_NORMAL
- en: 'The behavior of these options can be controlled through two new *Cerebro* parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`optdatas` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True` and optimizing (and the system can `preload` and use `runonce`, data
    preloading will be done only once in the main process to save time and resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`optreturn` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `True` the optimization results will not be full `Strategy` objects (and
    all *datas*, *indicators*, *observers* …) but and object with the following attributes
    (same as in `Strategy`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`params` (or `p`) the strategy had for the execution'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`analyzers` the strategy has executed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In most occassions, only the *analyzers* and with which *params* are the things
    needed to evaluate a the performance of a strategy. If detailed analysis of the
    generated values for (for example) *indicators* is needed, turn this off
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data Feed Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a *Optimization* scenario this is a likely combination of *Cerebro* parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`preload=True` (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Feeeds will be preloaded before running any backtesting code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`runonce=True` (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Indicators* will be calculated in batch mode a tight *for* loop, instead of
    step by step.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If both conditions are `True` and `optdatas=True`, then:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Data Feeds* will be preloaded in the main process before spawning new subprocesses
    (the ones in charge of executing the *backtesting*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Results management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a *Optimization* scenario two things should play the most important role
    when evaluating the different parameters with which each *Strategy* was run:'
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy.params` (or `strategy.p`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual set of values used for the backtesting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`strategy.analyzers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The objects in charge of providing the evaluation of how the *Strategy* has
    actually performed. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`SharpeRatio_A` (the annualized *SharpeRatio*)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When `optreturn=True`, instead of returning full *strategy* instances, placeholder
    objects will be created which carry the two attributes aforementioned to let the
    evaluation take place.
  prefs: []
  type: TYPE_NORMAL
- en: This avoids passing back lots of generated data like for example the values
    generated by indicators during the *backtesting*
  prefs: []
  type: TYPE_NORMAL
- en: Should the *full strategy objects* be wished, simply set `optreturn=False` during
    cerebro *instantiation* or when doing `cerebro.run`.
  prefs: []
  type: TYPE_NORMAL
- en: Some test runs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *optimization* sample in the *backtrader* sources has been extended to add
    control for `optdatas` and `optreturn` (actually to disable them)
  prefs: []
  type: TYPE_NORMAL
- en: Single Core Run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a reference what happens when the amount of CPUs is limited to `1` and the
    `multiprocessing` module is not used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multiple Core Runs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without limiting the number of CPUs, the Python `multiprocessing` module will
    try to use all of them. `optdatas` and `optreturn` will be disabled
  prefs: []
  type: TYPE_NORMAL
- en: Both `optdata` and `optreturn` active
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The default behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The total improvement by having multicore and the *data feed* and *results*
    improvements means going down from `184.92` to `56.58` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Take into account that the sample is using `252` bars and the indicators generate
    only values with a length of `252` points. This is just an example.
  prefs: []
  type: TYPE_NORMAL
- en: The real question is how much of this is attributable to the new behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '`optreturn` deactivated'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s pass full *strategy* objects back to the caller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The execution time has increased `18.50%` (or a speed-up of `15.62%`) is in
    place.
  prefs: []
  type: TYPE_NORMAL
- en: '`optdatas` deactivated'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each subproccess is forced to load its own set of values for the *data feeds*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The execution time has increased `28.52%` (or a speed-up of `22.19%`) is in
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Both deactivated
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Still using multicore but with the old non-improved behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The execution time has increased `47.79%` (or a speed-up of `32.34%`) is in
    place.
  prefs: []
  type: TYPE_NORMAL
- en: This shows that the used of multiple cores is the major contributor to the time
    improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The executions have been done in a Laptop with a `i7-4710HQ` (4-core / 8 logical)
    with 16 GBytes of RAM under Windows 10 64bit. The mileage may vary under other
    conditions
  prefs: []
  type: TYPE_NORMAL
- en: Concluding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The greatest factor in time reduction during optimization is the use of the
    multiple cores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample runs with `optdatas` and `optreturn` show speed-ups of around `22.19%`
    and `15.62%` each (`32.34%` both together in the test)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
