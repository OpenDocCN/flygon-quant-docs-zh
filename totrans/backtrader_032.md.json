["```py\n `# Load the Data\n    datapath = args.dataname or '../../datas/2006-day-001.txt'\n    data = btfeeds.BacktraderCSVData(dataname=datapath)\n    cerebro.adddata(data)  # First add the original data - smaller timeframe\n\n    tframes = dict(daily=bt.TimeFrame.Days, weekly=bt.TimeFrame.Weeks,\n                   monthly=bt.TimeFrame.Months)\n\n    # Handy dictionary for the argument timeframe conversion\n    # Resample the data\n    if args.noresample:\n        datapath = args.dataname2 or '../../datas/2006-week-001.txt'\n        data2 = btfeeds.BacktraderCSVData(dataname=datapath)\n        # And then the large timeframe\n        cerebro.adddata(data2)\n    else:\n        cerebro.resampledata(data, timeframe=tframes[args.timeframe],\n                             compression=args.compression)\n\n    # Run over everything\n    cerebro.run()` \n```", "```py\n`$ ./multitimeframe-example.py --timeframe weekly --compression 1` \n```", "```py\n`$ ./multitimeframe-example.py --timeframe daily --compression 2` \n```", "```py\n`$ ./multitimeframe-example.py --timeframe weekly --compression 1 --indicators --onlydaily\n--------------------------------------------------\nnextstart called with len 10\n--------------------------------------------------` \n```", "```py\n`$ ./multitimeframe-example.py --timeframe weekly --compression 1 --indicators\n--------------------------------------------------\nnextstart called with len 50\n--------------------------------------------------\n--------------------------------------------------\nnextstart called with len 51\n--------------------------------------------------\n--------------------------------------------------\nnextstart called with len 52\n--------------------------------------------------\n--------------------------------------------------\nnextstart called with len 53\n--------------------------------------------------\n--------------------------------------------------\nnextstart called with len 54\n--------------------------------------------------` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass SMAStrategy(bt.Strategy):\n    params = (\n        ('period', 10),\n        ('onlydaily', False),\n    )\n\n    def __init__(self):\n        self.sma_small_tf = btind.SMA(self.data, period=self.p.period)\n        if not self.p.onlydaily:\n            self.sma_large_tf = btind.SMA(self.data1, period=self.p.period)\n\n    def nextstart(self):\n        print('--------------------------------------------------')\n        print('nextstart called with len', len(self))\n        print('--------------------------------------------------')\n\n        super(SMAStrategy, self).nextstart()\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(stdstats=False)\n\n    # Add a strategy\n    if not args.indicators:\n        cerebro.addstrategy(bt.Strategy)\n    else:\n        cerebro.addstrategy(\n            SMAStrategy,\n\n            # args for the strategy\n            period=args.period,\n            onlydaily=args.onlydaily,\n        )\n\n    # Load the Data\n    datapath = args.dataname or '../../datas/2006-day-001.txt'\n    data = btfeeds.BacktraderCSVData(dataname=datapath)\n    cerebro.adddata(data)  # First add the original data - smaller timeframe\n\n    tframes = dict(daily=bt.TimeFrame.Days, weekly=bt.TimeFrame.Weeks,\n                   monthly=bt.TimeFrame.Months)\n\n    # Handy dictionary for the argument timeframe conversion\n    # Resample the data\n    if args.noresample:\n        datapath = args.dataname2 or '../../datas/2006-week-001.txt'\n        data2 = btfeeds.BacktraderCSVData(dataname=datapath)\n        # And then the large timeframe\n        cerebro.adddata(data2)\n    else:\n        cerebro.resampledata(data, timeframe=tframes[args.timeframe],\n                             compression=args.compression)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Multitimeframe test')\n\n    parser.add_argument('--dataname', default='', required=False,\n                        help='File Data to Load')\n\n    parser.add_argument('--dataname2', default='', required=False,\n                        help='Larger timeframe file to load')\n\n    parser.add_argument('--noresample', action='store_true',\n                        help='Do not resample, rather load larger timeframe')\n\n    parser.add_argument('--timeframe', default='weekly', required=False,\n                        choices=['daily', 'weekly', 'monhtly'],\n                        help='Timeframe to resample to')\n\n    parser.add_argument('--compression', default=1, required=False, type=int,\n                        help='Compress n bars into 1')\n\n    parser.add_argument('--indicators', action='store_true',\n                        help='Wether to apply Strategy with indicators')\n\n    parser.add_argument('--onlydaily', action='store_true',\n                        help='Indicator only to be applied to daily timeframe')\n\n    parser.add_argument('--period', default=10, required=False, type=int,\n                        help='Period to apply to indicator')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]