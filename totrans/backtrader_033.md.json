["```py\n`$ ./resampling-example.py --timeframe weekly --compression 1` \n```", "```py\n`$ ./resampling-example.py --timeframe daily --compression 1` \n```", "```py\n `# Load the Data\n    datapath = args.dataname or '../../datas/2006-day-001.txt'\n    data = btfeeds.BacktraderCSVData(dataname=datapath)\n\n    # Handy dictionary for the argument timeframe conversion\n    tframes = dict(\n        daily=bt.TimeFrame.Days,\n        weekly=bt.TimeFrame.Weeks,\n        monthly=bt.TimeFrame.Months)\n\n    # Add the resample data instead of the original\n    cerebro.resampledata(data,\n                         timeframe=tframes[args.timeframe],\n                         compression=args.compression)` \n```", "```py\n`$ ./resampling-example.py --timeframe weekly --compression 3` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(stdstats=False)\n\n    # Add a strategy\n    cerebro.addstrategy(bt.Strategy)\n\n    # Load the Data\n    datapath = args.dataname or '../../datas/2006-day-001.txt'\n    data = btfeeds.BacktraderCSVData(dataname=datapath)\n\n    # Handy dictionary for the argument timeframe conversion\n    tframes = dict(\n        daily=bt.TimeFrame.Days,\n        weekly=bt.TimeFrame.Weeks,\n        monthly=bt.TimeFrame.Months)\n\n    # Add the resample data instead of the original\n    cerebro.resampledata(data,\n                         timeframe=tframes[args.timeframe],\n                         compression=args.compression)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Pandas test script')\n\n    parser.add_argument('--dataname', default='', required=False,\n                        help='File Data to Load')\n\n    parser.add_argument('--timeframe', default='weekly', required=False,\n                        choices=['daily', 'weekly', 'monhtly'],\n                        help='Timeframe to resample to')\n\n    parser.add_argument('--compression', default=1, required=False, type=int,\n                        help='Compress n bars into 1')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]