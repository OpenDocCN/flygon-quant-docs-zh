- en: Data - Replay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://www.backtrader.com/docu/data-replay/data-replay/](https://www.backtrader.com/docu/data-replay/data-replay/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The time is gone and testing a strategy against a fully formed and closed bar
    is good, but it could be better.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where *Data Replay* comes in to help. If:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The strategy operates on data with a timeframe X (example: daily)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: 'Data for a smaller timeframe Y (example: 1 minute) is available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data replay does exactly what the name implies:'
  prefs: []
  type: TYPE_NORMAL
- en: Replay a daily bar using the 1 minute data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is of course not exactly how the market developed, but it is far better
    than looking at the daily fully formed and closed bar in isolation:'
  prefs: []
  type: TYPE_NORMAL
- en: If the strategy operates in realtime during the formation of the daily bar,
    the approximation of the formation of the bar gives a chance to replicate the
    actual behavior of the strategy under real conditions
  prefs: []
  type: TYPE_NORMAL
- en: Putting *Data Replay* into action follows the regular usage patterns of `backtrader`
  prefs: []
  type: TYPE_NORMAL
- en: Load a data feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass the data to cerebro with `replaydata`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Preloading is not supported when data is being replayed because each bar is
    actually built in real-time. It will automatically disabled in any `Cerebro` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters which can be passed to `replaydata`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`timeframe` (default: bt.TimeFrame.Days)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination timeframe which to be useful has to be equal or larger than the
    source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compression` (default: 1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compress the selected value ‚Äún‚Äù to 1 bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Extended parameters (do not touch if not really needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '`bar2edge` (default: True)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replays using time boundaries as the target of the closed bar. For example with
    a ‚Äúticks -> 5 seconds‚Äù the resulting 5 seconds bars will be aligned to xx:00,
    xx:05, xx:10 ‚Ä¶
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`adjbartime` (default: False)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the time at the boundary to adjust the time of the delivered resampled bar
    instead of the last seen timestamp. If resampling to ‚Äú5 seconds‚Äù the time of the
    bar will be adjusted for example to hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png
    ":mm:")05 even if the last seen timestamp was hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png
    ":mm:")04.33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**NOTE**: Time will only be adjusted if ‚Äúbar2edge‚Äù is True. It wouldn‚Äôt make
    sense to adjust the time if the bar has not been aligned to a boundary'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`rightedge` (default: True)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the right edge of the time boundaries to set the time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If False and compressing to 5 seconds the time of a resampled bar for seconds
    between hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png ":mm:")00 and hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png
    ":mm:")04 will be hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png ":mm:")00
    (the starting boundary
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If True the used boundary for the time will be hh![üá≤üá≤](../Images/3e6ba424774c41defcb4e0fc29c71826.png
    ":mm:")05 (the ending boundary)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the sake of working with a example the standard 2006 daily data will be
    replayed on a weekly basis. Which means:'
  prefs: []
  type: TYPE_NORMAL
- en: There will finally be 52 bars, one for each week
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cerebro will call `prenext` and `next` a total of 255 times, which is the original
    count of daily bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The trick:'
  prefs: []
  type: TYPE_NORMAL
- en: When a weekly bar is forming, the length (`len(self)`) of the strategy will
    remain unchanged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With each new week the length will increase by one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some examples below, but first the sauce of the test script in which the data
    is loaded and passed to cerebro with `replaydata` ‚Ä¶ and then `run`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Example - Replay Daily to Weekly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The invocation of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart cannot unfortunately show us the real thing happening in the background,
    so let‚Äôs have a look at the console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we see the internal `self.counter` variable is keeping track of each call
    to either `prenext` or `next`. The former being called before the applied Simple
    Moving Average produces a value. The latter called when the Simple Moving Average
    is producing values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key:'
  prefs: []
  type: TYPE_NORMAL
- en: The length (len(self)) of the strategy changes every 5 bars (5 trading days
    in the week)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The strategy is effectively seeing:'
  prefs: []
  type: TYPE_NORMAL
- en: How the weekly bar developed in 5 shots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This, again, doesn‚Äôt replicate the actual tick-by-tick (and not even minute,
    hour) development of the market, but it is better than actually seeing a bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The visual output is that of the weekly chart which is the final outcome the
    system is being tested again.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/2009aea7cd7025e611fb9a739ba9f5b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Example 2 - Daily to Daily with Compression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course ‚ÄúReplaying‚Äù can be applied to the same timeframe but with a compression.
  prefs: []
  type: TYPE_NORMAL
- en: 'The console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This time we got half the bars as expected because of the factor 2 requested
    compression.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/52c1bf0e292556480053142e8d4fca7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A reconstruction of the market development is possible. Usually a smaller timeframe
    set of data is available and can be used to discretely replay the timeframe which
    the system operates on.
  prefs: []
  type: TYPE_NORMAL
- en: The test script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
