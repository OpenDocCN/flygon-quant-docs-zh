- en: Filters Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/docu/filters-reference/](https://www.backtrader.com/docu/filters-reference/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SessionFilter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.SessionFilter(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This class can be applied to a data source as a filter and will filter out
    intraday bars which fall outside of the regular session times (ie: pre/post market
    data)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a “non-simple” filter and must manage the stack of the data (passed
    during init and **call**)
  prefs: []
  type: TYPE_NORMAL
- en: It needs no “last” method because it has nothing to deliver
  prefs: []
  type: TYPE_NORMAL
- en: SessionFilterSimple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.SessionFilterSimple(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This class can be applied to a data source as a filter and will filter out
    intraday bars which fall outside of the regular session times (ie: pre/post market
    data)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a “simple” filter and must NOT manage the stack of the data (passed
    during init and **call**)
  prefs: []
  type: TYPE_NORMAL
- en: It needs no “last” method because it has nothing to deliver
  prefs: []
  type: TYPE_NORMAL
- en: Bar Management will be done by the SimpleFilterWrapper class made which is added
    durint the DataBase.addfilter_simple call
  prefs: []
  type: TYPE_NORMAL
- en: SessionFilller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.SessionFiller(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Bar Filler for a Data Source inside the declared session start/end times.
  prefs: []
  type: TYPE_NORMAL
- en: The fill bars are constructed using the declared Data Source `timeframe` and
    `compression` (used to calculate the intervening missing times)
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: 'fill_price (def: None):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If None is passed, the closing price of the previous bar will be used. To end
    up with a bar which for example takes time but it is not displayed in a plot …
    use float(‘Nan’)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fill_vol (def: float(‘NaN’)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value to use to fill the missing volume
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fill_oi (def: float(‘NaN’)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value to use to fill the missing Open Interest
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'skip_first_fill (def: True):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon seeing the 1^(st) valid bar do not fill from the sessionstart up to that
    bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CalendarDays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.CalendarDays(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Bar Filler to add missing calendar days to trading days
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: 'fill_price (def: None):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '0: The given value to fill 0 or None: Use the last known closing price -1:
    Use the midpoint of the last bar (High-Low average)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'fill_vol (def: float(‘NaN’)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value to use to fill the missing volume
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fill_oi (def: float(‘NaN’)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value to use to fill the missing Open Interest
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BarReplayer_Open
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.BarReplayer_Open(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This filters splits a bar in two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Open`: the opening price of the bar will be used to deliver an initial price
    bar in which the four components (OHLC) are equal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The volume/openinterest fields are 0 for this initial bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`OHLC`: the original bar is delivered complete with the original `volume`/`openinterest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The split simulates a replay without the need to use the *replay* filter.
  prefs: []
  type: TYPE_NORMAL
- en: DaySplitter_Close
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.DaySplitter_Close(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Splits a daily bar in two parts simulating 2 ticks which will be used to replay
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First tick: `OHLX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Close` will be replaced by the *average* of `Open`, `High` and `Low`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The session opening time is used for this tick
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: 'Second tick: `CCCC`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Close` price will be used for the four components of the price
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The session closing time is used for this tick
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The volume will be split amongst the 2 ticks using the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`closevol` (default: `0.5`) The value indicate which percentage, in absolute
    terms from 0.0 to 1.0, has to be assigned to the *closing* tick. The rest will
    be assigned to the `OHLX` tick.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This filter is meant to be used together with** `cerebro.replaydata`'
  prefs: []
  type: TYPE_NORMAL
- en: HeikinAshi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.HeikinAshi(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The filter remodels the open, high, low, close to make HeikinAshi candlesticks
  prefs: []
  type: TYPE_NORMAL
- en: 'See:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Renko
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.filters.Renko(data)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Modify the data stream to draw Renko bars (or bricks)
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hilo` (default: *False*) Use high and low instead of close to decide if a
    new brick is needed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (default: *None*) The size to consider for each brick'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autosize` (default: *20.0*) If *size* is *None*, this will be used to autocalculate
    the size of the bricks (simply dividing the current price by the given value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dynamic` (default: *False*) If *True* and using *autosize*, the size of the
    bricks will be recalculated when moving to a new brick. This will of course eliminate
    the perfect alignment of Renko bricks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`align` (default: *1.0*) Factor use to align the price boundaries of the bricks.
    If the price is for example *3563.25* and *align* is *10.0*, the resulting aligned
    price will be *3560*. The calculation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3563.25 / 10.0 = 356.325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: round it and remove the decimals -> 356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 356 * 10.0 -> 3560
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
