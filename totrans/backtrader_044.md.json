["```py\n`import backtrader as bt\n\ndata = bt.feeds.OneOfTheFeeds(dataname='mydataname')\ncerebro.adddata(data)\n\ncerebro.add_signal(bt.SIGNAL_LONGSHORT, MySignal)\ncerebro.run()` \n```", "```py\n`class MySignal(bt.Indicator):\n    lines = ('signal',)\n    params = (('period', 30),)\n\n    def __init__(self):\n        self.lines.signal = self.data - bt.indicators.SMA(period=self.p.period)` \n```", "```py\n`import backtrader as bt\n\nbt.SIGNAL_LONG` \n```", "```py\n`class SMACloseSignal(bt.Indicator):\n    lines = ('signal',)\n    params = (('period', 30),)\n\n    def __init__(self):\n        self.lines.signal = self.data - bt.indicators.SMA(period=self.p.period)` \n```", "```py\n`class SMAExitSignal(bt.Indicator):\n    lines = ('signal',)\n    params = (('p1', 5), ('p2', 30),)\n\n    def __init__(self):\n        sma1 = bt.indicators.SMA(period=self.p.p1)\n        sma2 = bt.indicators.SMA(period=self.p.p2)\n        self.lines.signal = sma1 - sma2` \n```", "```py\n`$ ./signals-strategy.py --plot --signal longshort` \n```", "```py\n`$ ./signals-strategy.py --plot --signal longonly` \n```", "```py\n`$ ./signals-strategy.py --plot --signal shortonly` \n```", "```py\n`$ ./signals-strategy.py --plot --signal longonly --exitsignal longexit` \n```", "```py\n`$ ./signals-strategy.py --help\nusage: signals-strategy.py [-h] [--data DATA] [--fromdate FROMDATE]\n                           [--todate TODATE] [--cash CASH]\n                           [--smaperiod SMAPERIOD] [--exitperiod EXITPERIOD]\n                           [--signal {longshort,longonly,shortonly}]\n                           [--exitsignal {longexit,shortexit}]\n                           [--plot [kwargs]]\n\nSample for Signal concepts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Specific data to be read in (default:\n                        ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default: None)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: None)\n  --cash CASH           Cash to start with (default: 50000)\n  --smaperiod SMAPERIOD\n                        Period for the moving average (default: 30)\n  --exitperiod EXITPERIOD\n                        Period for the exit control SMA (default: 5)\n  --signal {longshort,longonly,shortonly}\n                        Signal type to use for the main signal (default:\n                        longshort)\n  --exitsignal {longexit,shortexit}\n                        Signal type to use for the exit signal (default: None)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport collections\nimport datetime\n\nimport backtrader as bt\n\nMAINSIGNALS = collections.OrderedDict(\n    (('longshort', bt.SIGNAL_LONGSHORT),\n     ('longonly', bt.SIGNAL_LONG),\n     ('shortonly', bt.SIGNAL_SHORT),)\n)\n\nEXITSIGNALS = {\n    'longexit': bt.SIGNAL_LONGEXIT,\n    'shortexit': bt.SIGNAL_LONGEXIT,\n}\n\nclass SMACloseSignal(bt.Indicator):\n    lines = ('signal',)\n    params = (('period', 30),)\n\n    def __init__(self):\n        self.lines.signal = self.data - bt.indicators.SMA(period=self.p.period)\n\nclass SMAExitSignal(bt.Indicator):\n    lines = ('signal',)\n    params = (('p1', 5), ('p2', 30),)\n\n    def __init__(self):\n        sma1 = bt.indicators.SMA(period=self.p.p1)\n        sma2 = bt.indicators.SMA(period=self.p.p2)\n        self.lines.signal = sma1 - sma2\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    # if dataset is None, args.data has been given\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, **dkwargs)\n    cerebro.adddata(data)\n\n    cerebro.add_signal(MAINSIGNALS[args.signal],\n                       SMACloseSignal, period=args.smaperiod)\n\n    if args.exitsignal is not None:\n        cerebro.add_signal(EXITSIGNALS[args.exitsignal],\n                           SMAExitSignal,\n                           p1=args.exitperiod,\n                           p2=args.smaperiod)\n\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for Signal concepts')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Specific data to be read in')\n\n    parser.add_argument('--fromdate', required=False, default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False, default=None,\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--smaperiod', required=False, action='store',\n                        type=int, default=30,\n                        help=('Period for the moving average'))\n\n    parser.add_argument('--exitperiod', required=False, action='store',\n                        type=int, default=5,\n                        help=('Period for the exit control SMA'))\n\n    parser.add_argument('--signal', required=False, action='store',\n                        default=MAINSIGNALS.keys()[0], choices=MAINSIGNALS,\n                        help=('Signal type to use for the main signal'))\n\n    parser.add_argument('--exitsignal', required=False, action='store',\n                        default=None, choices=EXITSIGNALS,\n                        help=('Signal type to use for the exit signal'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]