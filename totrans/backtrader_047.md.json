["```py\n`hilo_diff = self.data.high - self.data.low` \n```", "```py\n`sma = bt.SimpleMovingAverage(self.data.close)\nclose_sma_diff = self.data.close - sma` \n```", "```py\n`close_over_sma = self.data.close > sma` \n```", "```py\n`close_over_sma = self.data.close > self.sma` \n```", "```py\n`close_over_sma = self.data.close[0] > self.sma[0]` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    def __init__(self):\n\n        sma1 = btind.SimpleMovingAverage(self.data)\n        ema1 = btind.ExponentialMovingAverage()\n\n        close_over_sma = self.data.close > sma1\n        close_over_ema = self.data.close > ema1\n        sma_ema_diff = sma1 - ema1\n\n        buy_sig = bt.And(close_over_sma, close_over_ema, sma_ema_diff > 0)\n\n    def next(self):\n\n        if buy_sig:\n            self.buy()` \n```", "```py\n    `close_over_sma = self.data.close > self.sma\n    LinePlotterIndicator(close_over_sma, name='Close_over_SMA')` \n    ```", "```py\n`class MyIndicator(bt.Indicator):\n\n    ....\n    plotinfo = dict(subplot=False)\n    ....` \n```", "```py\n`myind = MyIndicator(self.data, someparam=value)\nmyind.plotinfo.subplot = True` \n```", "```py\n`myind = MyIndicator(self.data, someparams=value, subplot=True)` \n```", "```py\n    `class DIPlus(bt.Indicator):\n        plotinfo=dict(plotname='DI+')` \n    ```"]