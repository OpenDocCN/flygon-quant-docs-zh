["```py\n`class DummyInd(bt.Indicator):\n    lines = ('dummyline',)\n\n    params = (('value', 5),)\n\n    def __init__(self):\n        self.lines.dummyline = bt.Max(0.0, self.params.value)` \n```", "```py\n`class DummyInd(bt.Indicator):\n    lines = ('dummyline',)\n\n    params = (('value', 5),)\n\n    def next(self):\n        self.lines.dummyline[0] = max(0.0, self.params.value)` \n```", "```py\n`class DummyInd(bt.Indicator):\n    lines = ('dummyline',)\n\n    params = (('value', 5),)\n\n    def next(self):\n        self.lines.dummyline[0] = max(0.0, self.params.value)\n\n    def once(self, start, end):\n       dummy_array = self.lines.dummyline.array\n\n       for i in xrange(start, end):\n           dummy_array[i] = max(0.0, self.params.value)` \n```", "```py\n`class SimpleMovingAverage1(Indicator):\n    lines = ('sma',)\n    params = (('period', 20),)\n\n    def next(self):\n        datasum = math.fsum(self.data.get(size=self.p.period))\n        self.lines.sma[0] = datasum / self.p.period` \n```", "```py\n`class SimpleMovingAverage1(Indicator):\n    lines = ('sma',)\n    params = (('period', 20),)\n\n    def __init__(self):\n        self.addminperiod(self.params.period)\n\n    def next(self):\n        datasum = math.fsum(self.data.get(size=self.p.period))\n        self.lines.sma[0] = datasum / self.p.period` \n```", "```py\n`from backtrader.indicators import EMA\n\nclass MACD(Indicator):\n    lines = ('macd', 'signal', 'histo',)\n    params = (('period_me1', 12), ('period_me2', 26), ('period_signal', 9),)\n\n    def __init__(self):\n        me1 = EMA(self.data, period=self.p.period_me1)\n        me2 = EMA(self.data, period=self.p.period_me2)\n        self.l.macd = me1 - me2\n        self.l.signal = EMA(self.l.macd, period=self.p.period_signal)\n        self.l.histo = self.l.macd - self.l.signal` \n```", "```py\n`import backtrader as bt\nimport backtrader.indicators as btind\n\nclass OverUnderMovAv(bt.Indicator):\n    lines = ('overunder',)\n    params = dict(period=20, movav=btind.MovAv.Simple)\n\n    def __init__(self):\n        movav = self.p.movav(self.data, period=self.p.period)\n        self.l.overunder = bt.Cmp(movav, self.data)` \n```", "```py\n`import backtrader as bt\nimport backtrader.indicators as btind\n\nclass OverUnderMovAv(bt.Indicator):\n    lines = ('overunder',)\n    params = dict(period=20, movav=bt.ind.MovAv.Simple)\n\n    plotinfo = dict(\n        # Add extra margins above and below the 1s and -1s\n        plotymargin=0.15,\n\n        # Plot a reference horizontal line at 1.0 and -1.0\n        plothlines=[1.0, -1.0],\n\n        # Simplify the y scale to 1.0 and -1.0\n        plotyticks=[1.0, -1.0])\n\n    # Plot the line \"overunder\" (the only one) with dash style\n    # ls stands for linestyle and is directly passed to matplotlib\n    plotlines = dict(overunder=dict(ls='--'))\n\n    def _plotlabel(self):\n        # This method returns a list of labels that will be displayed\n        # behind the name of the indicator on the plot\n\n        # The period must always be there\n        plabels = [self.p.period]\n\n        # Put only the moving average if it's not the default one\n        plabels += [self.p.movav] * self.p.notdefault('movav')\n\n        return plabels\n\n    def __init__(self):\n        movav = self.p.movav(self.data, period=self.p.period)\n        self.l.overunder = bt.Cmp(movav, self.data)` \n```"]