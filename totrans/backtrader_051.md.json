["```py\n`import backtrader as bt\n\nclass MyStrategy(bt.Strategy):\n    params = (('period', 20),)\n\n    def __init__(self):\n        self.sma = bt.indicators.SMA(self.data, period=self.p.period)\n        ...\n\n...` \n```", "```py\n`import backtrader as bt\n\nclass MyStrategy(bt.Strategy):\n    params = (('period', 20),)\n\n    def __init__(self):\n        self.sma = bt.talib.SMA(self.data, timeperiod=self.p.period)\n        ...\n\n...` \n```", "```py\n`import backtrader as bt\n\nclass MyStrategy(bt.Strategy):\n    params = (('period', 20),)\n\n    def __init__(self):\n        self.stoc = bt.talib.STOCH(self.data.high, self.data.low, self.data.close,\n                                   fastk_period=14, slowk_period=3, slowd_period=3)\n\n        ...\n\n...` \n```", "```py\n`print(bt.talib.SMA.__doc__)` \n```", "```py\n`SMA([input_arrays], [timeperiod=30])\n\nSimple Moving Average (Overlap Studies)\n\nInputs:\n    price: (any ndarray)\nParameters:\n    timeperiod: 30\nOutputs:\n    real` \n```", "```py\n`import backtrader as bt\nprint('SMA:', bt.talib.MA_Type.SMA)\nprint('T3:', bt.talib.MA_Type.T3)` \n```", "```py\n`$ ./talibtest.py --plot --ind kama` \n```", "```py\n`$ ./talibtest.py --plot --ind sma` \n```", "```py\n`$ ./talibtest.py --plot --ind ema` \n```", "```py\n`$ ./talibtest.py --plot --ind stoc` \n```", "```py\n`$ ./talibtest.py --plot --ind rsi` \n```", "```py\n`$ ./talibtest.py --plot --ind macd` \n```", "```py\n`$ ./talibtest.py --plot --ind bollinger` \n```", "```py\n`$ ./talibtest.py --plot --ind aroon` \n```", "```py\n`$ ./talibtest.py --plot --ind ultimate` \n```", "```py\n`$ ./talibtest.py --plot --ind trix` \n```", "```py\n`$ ./talibtest.py --plot --ind adxr` \n```", "```py\n`$ ./talibtest.py --plot --ind dema` \n```", "```py\n`$ ./talibtest.py --plot --ind tema` \n```", "```py\n`$ ./talibtest.py --plot --ind ppo` \n```", "```py\n`$ ./talibtest.py --plot --ind williamsr` \n```", "```py\n`$ ./talibtest.py --plot --ind roc` \n```", "```py\n`$ ./talibtest.py --help\nusage: talibtest.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                    [--todate TODATE]\n                    [--ind {sma,ema,stoc,rsi,macd,bollinger,aroon,ultimate,trix,kama,adxr,dema,tema,ppo,williamsr,roc}]\n                    [--no-doji] [--use-next] [--plot [kwargs]]\n\nSample for ta-lib\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data to be read in (default:\n                        ../../datas/yhoo-1996-2015.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: 2006-12-31)\n  --ind {sma,ema,stoc,rsi,macd,bollinger,aroon,ultimate,trix,kama,adxr,dema,tema,ppo,williamsr,roc}\n                        Which indicator pair to show together (default: sma)\n  --no-doji             Remove Doji CandleStick pattern checker (default:\n                        False)\n  --use-next            Use next (step by step) instead of once (batch)\n                        (default: False)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example (escape the quotes if needed): --plot\n                        style=\"candle\" (to plot candles) (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass TALibStrategy(bt.Strategy):\n    params = (('ind', 'sma'), ('doji', True),)\n\n    INDS = ['sma', 'ema', 'stoc', 'rsi', 'macd', 'bollinger', 'aroon',\n            'ultimate', 'trix', 'kama', 'adxr', 'dema', 'ppo', 'tema',\n            'roc', 'williamsr']\n\n    def __init__(self):\n        if self.p.doji:\n            bt.talib.CDLDOJI(self.data.open, self.data.high,\n                             self.data.low, self.data.close)\n\n        if self.p.ind == 'sma':\n            bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n            bt.indicators.SMA(self.data, period=25)\n        elif self.p.ind == 'ema':\n            bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n            bt.indicators.EMA(period=25)\n        elif self.p.ind == 'stoc':\n            bt.talib.STOCH(self.data.high, self.data.low, self.data.close,\n                           fastk_period=14, slowk_period=3, slowd_period=3,\n                           plotname='TA_STOCH')\n\n            bt.indicators.Stochastic(self.data)\n\n        elif self.p.ind == 'macd':\n            bt.talib.MACD(self.data, plotname='TA_MACD')\n            bt.indicators.MACD(self.data)\n            bt.indicators.MACDHisto(self.data)\n        elif self.p.ind == 'bollinger':\n            bt.talib.BBANDS(self.data, timeperiod=25,\n                            plotname='TA_BBANDS')\n            bt.indicators.BollingerBands(self.data, period=25)\n\n        elif self.p.ind == 'rsi':\n            bt.talib.RSI(self.data, plotname='TA_RSI')\n            bt.indicators.RSI(self.data)\n\n        elif self.p.ind == 'aroon':\n            bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n            bt.indicators.AroonIndicator(self.data)\n\n        elif self.p.ind == 'ultimate':\n            bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close,\n                            plotname='TA_ULTOSC')\n            bt.indicators.UltimateOscillator(self.data)\n\n        elif self.p.ind == 'trix':\n            bt.talib.TRIX(self.data, timeperiod=25,  plotname='TA_TRIX')\n            bt.indicators.Trix(self.data, period=25)\n\n        elif self.p.ind == 'adxr':\n            bt.talib.ADXR(self.data.high, self.data.low, self.data.close,\n                          plotname='TA_ADXR')\n            bt.indicators.ADXR(self.data)\n\n        elif self.p.ind == 'kama':\n            bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n            bt.indicators.KAMA(self.data, period=25)\n\n        elif self.p.ind == 'dema':\n            bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n            bt.indicators.DEMA(self.data, period=25)\n\n        elif self.p.ind == 'ppo':\n            bt.talib.PPO(self.data, plotname='TA_PPO')\n            bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n\n        elif self.p.ind == 'tema':\n            bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n            bt.indicators.TEMA(self.data, period=25)\n\n        elif self.p.ind == 'roc':\n            bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n            bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n            bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n            bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n            bt.indicators.ROC(self.data, period=12)\n            bt.indicators.Momentum(self.data, period=12)\n            bt.indicators.MomentumOscillator(self.data, period=12)\n\n        elif self.p.ind == 'williamsr':\n            bt.talib.WILLR(self.data.high, self.data.low, self.data.close,\n                           plotname='TA_WILLR')\n            bt.indicators.WilliamsR(self.data)\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for sizer')\n\n    parser.add_argument('--data0', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default='2006-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--ind', required=False, action='store',\n                        default=TALibStrategy.INDS[0],\n                        choices=TALibStrategy.INDS,\n                        help=('Which indicator pair to show together'))\n\n    parser.add_argument('--no-doji', required=False, action='store_true',\n                        help=('Remove Doji CandleStick pattern checker'))\n\n    parser.add_argument('--use-next', required=False, action='store_true',\n                        help=('Use next (step by step) '\n                              'instead of once (batch)'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example (escape the quotes if needed):\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]