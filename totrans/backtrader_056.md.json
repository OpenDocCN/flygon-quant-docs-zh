["```py\n`$ ./order_target.py --target-size -- plot\n0001 - 2005-01-03 - Position Size:     00 - Value 1000000.00\n0001 - 2005-01-03 - Order Target Size: 03\n0002 - 2005-01-04 - Position Size:     03 - Value 999994.39\n0002 - 2005-01-04 - Order Target Size: 04\n0003 - 2005-01-05 - Position Size:     04 - Value 999992.48\n0003 - 2005-01-05 - Order Target Size: 05\n0004 - 2005-01-06 - Position Size:     05 - Value 999988.79\n...\n0020 - 2005-01-31 - Position Size:     28 - Value 999968.70\n0020 - 2005-01-31 - Order Target Size: 31\n0021 - 2005-02-01 - Position Size:     31 - Value 999954.68\n0021 - 2005-02-01 - Order Target Size: 30\n0022 - 2005-02-02 - Position Size:     30 - Value 999979.65\n0022 - 2005-02-02 - Order Target Size: 29\n0023 - 2005-02-03 - Position Size:     29 - Value 999966.33\n0023 - 2005-02-03 - Order Target Size: 28\n...` \n```", "```py\n`$ ./order_target.py --target-value --plot\n0001 - 2005-01-03 - Position Size:     00 - Value 1000000.00\n0001 - 2005-01-03 - data value 0.00\n0001 - 2005-01-03 - Order Target Value: 3000.00\n0002 - 2005-01-04 - Position Size:     78 - Value 999854.14\n0002 - 2005-01-04 - data value 2853.24\n0002 - 2005-01-04 - Order Target Value: 4000.00\n0003 - 2005-01-05 - Position Size:     109 - Value 999801.68\n0003 - 2005-01-05 - data value 3938.17\n0003 - 2005-01-05 - Order Target Value: 5000.00\n0004 - 2005-01-06 - Position Size:     138 - Value 999699.57\n...\n0020 - 2005-01-31 - Position Size:     808 - Value 999206.37\n0020 - 2005-01-31 - data value 28449.68\n0020 - 2005-01-31 - Order Target Value: 31000.00\n0021 - 2005-02-01 - Position Size:     880 - Value 998807.33\n0021 - 2005-02-01 - data value 30580.00\n0021 - 2005-02-01 - Order Target Value: 30000.00\n0022 - 2005-02-02 - Position Size:     864 - Value 999510.21\n0022 - 2005-02-02 - data value 30706.56\n0022 - 2005-02-02 - Order Target Value: 29000.00\n0023 - 2005-02-03 - Position Size:     816 - Value 999130.05\n0023 - 2005-02-03 - data value 28633.44\n0023 - 2005-02-03 - Order Target Value: 28000.00\n...` \n```", "```py\n`$ ./order_target.py --target-percent --plot\n0001 - 2005-01-03 - Position Size:     00 - Value 1000000.00\n0001 - 2005-01-03 - data percent 0.00\n0001 - 2005-01-03 - Order Target Percent: 0.03\n0002 - 2005-01-04 - Position Size:     785 - Value 998532.05\n0002 - 2005-01-04 - data percent 0.03\n0002 - 2005-01-04 - Order Target Percent: 0.04\n0003 - 2005-01-05 - Position Size:     1091 - Value 998007.44\n0003 - 2005-01-05 - data percent 0.04\n0003 - 2005-01-05 - Order Target Percent: 0.05\n0004 - 2005-01-06 - Position Size:     1381 - Value 996985.64\n...\n0020 - 2005-01-31 - Position Size:     7985 - Value 991966.28\n0020 - 2005-01-31 - data percent 0.28\n0020 - 2005-01-31 - Order Target Percent: 0.31\n0021 - 2005-02-01 - Position Size:     8733 - Value 988008.94\n0021 - 2005-02-01 - data percent 0.31\n0021 - 2005-02-01 - Order Target Percent: 0.30\n0022 - 2005-02-02 - Position Size:     8530 - Value 995005.45\n0022 - 2005-02-02 - data percent 0.30\n0022 - 2005-02-02 - Order Target Percent: 0.29\n0023 - 2005-02-03 - Position Size:     8120 - Value 991240.75\n0023 - 2005-02-03 - data percent 0.29\n0023 - 2005-02-03 - Order Target Percent: 0.28\n...` \n```", "```py\n`$ ./order_target.py --help\nusage: order_target.py [-h] [--data DATA] [--fromdate FROMDATE]\n                       [--todate TODATE] [--cash CASH]\n                       (--target-size | --target-value | --target-percent)\n                       [--plot [kwargs]]\n\nSample for Order Target\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Specific data to be read in (default:\n                        ../../datas/yhoo-1996-2015.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: 2006-12-31)\n  --cash CASH           Ending date in YYYY-MM-DD format (default: 1000000)\n  --target-size         Use order_target_size (default: False)\n  --target-value        Use order_target_value (default: False)\n  --target-percent      Use order_target_percent (default: False)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nfrom datetime import datetime\n\nimport backtrader as bt\n\nclass TheStrategy(bt.Strategy):\n  '''\n This strategy is loosely based on some of the examples from the Van\n K. Tharp book: *Trade Your Way To Financial Freedom*. The logic:\n\n - Enter the market if:\n - The MACD.macd line crosses the MACD.signal line to the upside\n - The Simple Moving Average has a negative direction in the last x\n periods (actual value below value x periods ago)\n\n - Set a stop price x times the ATR value away from the close\n\n - If in the market:\n\n - Check if the current close has gone below the stop price. If yes,\n exit.\n - If not, update the stop price if the new stop price would be higher\n than the current\n '''\n\n    params = (\n        ('use_target_size', False),\n        ('use_target_value', False),\n        ('use_target_percent', False),\n    )\n\n    def notify_order(self, order):\n        if order.status == order.Completed:\n            pass\n\n        if not order.alive():\n            self.order = None  # indicate no order is pending\n\n    def start(self):\n        self.order = None  # sentinel to avoid operrations on pending order\n\n    def next(self):\n        dt = self.data.datetime.date()\n\n        portfolio_value = self.broker.get_value()\n        print('%04d - %s - Position Size: %02d - Value %.2f' %\n              (len(self), dt.isoformat(), self.position.size, portfolio_value))\n\n        data_value = self.broker.get_value([self.data])\n\n        if self.p.use_target_value:\n            print('%04d - %s - data value %.2f' %\n                  (len(self), dt.isoformat(), data_value))\n\n        elif self.p.use_target_percent:\n            port_perc = data_value / portfolio_value\n            print('%04d - %s - data percent %.2f' %\n                  (len(self), dt.isoformat(), port_perc))\n\n        if self.order:\n            return  # pending order execution\n\n        size = dt.day\n        if (dt.month % 2) == 0:\n            size = 31 - size\n\n        if self.p.use_target_size:\n            target = size\n            print('%04d - %s - Order Target Size: %02d' %\n                  (len(self), dt.isoformat(), size))\n\n            self.order = self.order_target_size(target=size)\n\n        elif self.p.use_target_value:\n            value = size * 1000\n\n            print('%04d - %s - Order Target Value: %.2f' %\n                  (len(self), dt.isoformat(), value))\n\n            self.order = self.order_target_value(target=value)\n\n        elif self.p.use_target_percent:\n            percent = size / 100.0\n\n            print('%04d - %s - Order Target Percent: %.2f' %\n                  (len(self), dt.isoformat(), percent))\n\n            self.order = self.order_target_percent(target=percent)\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.setcash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate is not None:\n        dkwargs['fromdate'] = datetime.strptime(args.fromdate, '%Y-%m-%d')\n    if args.todate is not None:\n        dkwargs['todate'] = datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # data\n    data = bt.feeds.YahooFinanceCSVData(dataname=args.data, **dkwargs)\n    cerebro.adddata(data)\n\n    # strategy\n    cerebro.addstrategy(TheStrategy,\n                        use_target_size=args.target_size,\n                        use_target_value=args.target_value,\n                        use_target_percent=args.target_percent)\n\n    cerebro.run()\n\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for Order Target')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Specific data to be read in')\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default='2006-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=1000000,\n                        help='Ending date in YYYY-MM-DD format')\n\n    pgroup = parser.add_mutually_exclusive_group(required=True)\n\n    pgroup.add_argument('--target-size', required=False, action='store_true',\n                        help=('Use order_target_size'))\n\n    pgroup.add_argument('--target-value', required=False, action='store_true',\n                        help=('Use order_target_value'))\n\n    pgroup.add_argument('--target-percent', required=False,\n                        action='store_true',\n                        help=('Use order_target_percent'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]