["```py\n`# For a StopTrail going downwards\n# last price will be used as reference\nself.buy(size=1, exectype=bt.Order.StopTrail, trailamount=0.25)\n# or\nself.buy(size=1, exectype=bt.Order.StopTrail, price=10.50, trailamount=0.25)\n\n# For a StopTrail going upwards\n# last price will be used as reference\nself.sell(size=1, exectype=bt.Order.StopTrail, trailamount=0.25)\n# or\nself.sell(size=1, exectype=bt.Order.StopTrail, price=10.50, trailamount=0.25)` \n```", "```py\n`# For a StopTrail going downwards with 2% distance\n# last price will be used as reference\nself.buy(size=1, exectype=bt.Order.StopTrail, trailpercent=0.02)\n# or\nself.buy(size=1, exectype=bt.Order.StopTrail, price=10.50, trailpercent=0.0.02)\n\n# For a StopTrail going upwards with 2% difference\n# last price will be used as reference\nself.sell(size=1, exectype=bt.Order.StopTrail, trailpercent=0.02)\n# or\nself.sell(size=1, exectype=bt.Order.StopTrail, price=10.50, trailpercent=0.02)` \n```", "```py\n`$ ./trail.py --plot --strat trailamount=50.0` \n```", "```py\n`**************************************************\n2005-02-14,3075.76,3025.76,3025.76\n----------\n2005-02-15,3086.95,3036.95,3036.95\n2005-02-16,3068.55,3036.95,3018.55\n2005-02-17,3067.34,3036.95,3017.34\n2005-02-18,3072.04,3036.95,3022.04\n2005-02-21,3063.64,3036.95,3013.64\n...\n...\n**************************************************\n2005-05-19,3051.79,3001.79,3001.79\n----------\n2005-05-20,3050.45,3001.79,3000.45\n2005-05-23,3070.98,3020.98,3020.98\n2005-05-24,3066.55,3020.98,3016.55\n2005-05-25,3059.84,3020.98,3009.84\n2005-05-26,3086.08,3036.08,3036.08\n2005-05-27,3084.0,3036.08,3034.0\n2005-05-30,3096.54,3046.54,3046.54\n2005-05-31,3076.75,3046.54,3026.75\n2005-06-01,3125.88,3075.88,3075.88\n2005-06-02,3131.03,3081.03,3081.03\n2005-06-03,3114.27,3081.03,3064.27\n2005-06-06,3099.2,3081.03,3049.2\n2005-06-07,3134.82,3084.82,3084.82\n2005-06-08,3125.59,3084.82,3075.59\n2005-06-09,3122.93,3084.82,3072.93\n2005-06-10,3143.85,3093.85,3093.85\n2005-06-13,3159.83,3109.83,3109.83\n2005-06-14,3162.86,3112.86,3112.86\n2005-06-15,3147.55,3112.86,3097.55\n2005-06-16,3160.09,3112.86,3110.09\n2005-06-17,3178.48,3128.48,3128.48\n2005-06-20,3162.14,3128.48,3112.14\n2005-06-21,3179.62,3129.62,3129.62\n2005-06-22,3182.08,3132.08,3132.08\n2005-06-23,3190.8,3140.8,3140.8\n2005-06-24,3161.0,3140.8,3111.0\n...\n...\n...\n**************************************************\n2006-12-19,4100.48,4050.48,4050.48\n----------\n2006-12-20,4118.54,4068.54,4068.54\n2006-12-21,4112.1,4068.54,4062.1\n2006-12-22,4073.5,4068.54,4023.5\n2006-12-27,4134.86,4084.86,4084.86\n2006-12-28,4130.66,4084.86,4080.66\n2006-12-29,4119.94,4084.86,4069.94` \n```", "```py\n`$ ./trail.py --plot --strat trailamount=30.0` \n```", "```py\n`$ ./trail.py --plot --strat trailpercent=0.02` \n```", "```py\n`$ ./trail.py --help\nusage: trail.py [-h] [--data0 DATA0] [--fromdate FROMDATE] [--todate TODATE]\n                [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                [--strat kwargs] [--plot [kwargs]]\n\nStopTrail Sample\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        ma=bt.ind.SMA,\n        p1=10,\n        p2=30,\n        stoptype=bt.Order.StopTrail,\n        trailamount=0.0,\n        trailpercent=0.0,\n    )\n\n    def __init__(self):\n        ma1, ma2 = self.p.ma(period=self.p.p1), self.p.ma(period=self.p.p2)\n        self.crup = bt.ind.CrossUp(ma1, ma2)\n        self.order = None\n\n    def next(self):\n        if not self.position:\n            if self.crup:\n                o = self.buy()\n                self.order = None\n                print('*' * 50)\n\n        elif self.order is None:\n            self.order = self.sell(exectype=self.p.stoptype,\n                                   trailamount=self.p.trailamount,\n                                   trailpercent=self.p.trailpercent)\n\n            if self.p.trailamount:\n                tcheck = self.data.close - self.p.trailamount\n            else:\n                tcheck = self.data.close * (1.0 - self.p.trailpercent)\n            print(','.join(\n                map(str, [self.datetime.date(), self.data.close[0],\n                          self.order.created.price, tcheck])\n                )\n            )\n            print('-' * 10)\n        else:\n            if self.p.trailamount:\n                tcheck = self.data.close - self.p.trailamount\n            else:\n                tcheck = self.data.close * (1.0 - self.p.trailpercent)\n            print(','.join(\n                map(str, [self.datetime.date(), self.data.close[0],\n                          self.order.created.price, tcheck])\n                )\n            )\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'StopTrail Sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]