- en: Broker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/docu/broker/](https://www.backtrader.com/docu/broker/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: class backtrader.brokers.BackBroker()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Broker Simulator
  prefs: []
  type: TYPE_NORMAL
- en: The simulation supports different order types, checking a submitted order cash
    requirements against current cash, keeping track of cash and value for each iteration
    of `cerebro` and keeping the current position on different datas.
  prefs: []
  type: TYPE_NORMAL
- en: '*cash* is adjusted on each iteration for instruments like `futures` for'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Supported order types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Market`: to be executed with the 1^(st) tick of the next bar (namely the `open`
    price)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close`: meant for intraday in which the order is executed with the closing
    price of the last bar of the session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Limit`: executes if the given limit price is seen during the session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stop`: executes a `Market` order if the given stop price is seen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StopLimit`: sets a `Limit` order in motion if the given stop price is seen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because the broker is instantiated by `Cerebro` and there should be (mostly)
    no reason to replace the broker, the params are not controlled by the user for
    the instance. To change this there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually create an instance of this class with the desired params and use `cerebro.broker
    = instance` to set the instance as the broker for the `run` execution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `set_xxx` to set the value using `cerebro.broker.set_xxx` where `\`xxx`
    stands for the name of the parameter to set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`cerebro.broker` is a *property* supported by the `getbroker` and `setbroker`
    methods of `Cerebro`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cash` (default: `10000`): starting cash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commission` (default: `CommInfoBase(percabs=True)`) base commission scheme
    which applies to all assets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checksubmit` (default: `True`) check margin/cash before accepting an order
    into the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eosbar` (default: `False`): With intraday bars consider a bar with the same
    `time` as the end of session to be the end of the session. This is not usually
    the case, because some bars (final auction) are produced by many exchanges for
    many products for a couple of minutes after the end of the session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eosbar` (default: `False`): With intraday bars consider a bar with the same
    `time` as the end of session to be the end of the session. This is not usually
    the case, because some bars (final auction) are produced by many exchanges for
    many products for a couple of minutes after the end of the session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filler` (default: `None`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A callable with signature: `callable(order, price, ago)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`order`: obviously the order in execution. This provides access to the *data*
    (and with it the *ohlc* and *volume* values), the *execution type*, remaining
    size (`order.executed.remsize`) and others.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Please check the `Order` documentation and reference for things available inside
    an `Order` instance
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`price` the price at which the order is going to be executed in the `ago` bar'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ago`: index meant to be used with `order.data` for the extraction of the *ohlc*
    and *volume* prices. In most cases this will be `0` but on a corner case for `Close`
    orders, this will be `-1`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to get the bar volume (for example) do: `volume = order.data.voluume[ago]`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The callable must return the *executed size* (a value >= 0)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The callable may of course be an object with `__call__` matching the aforementioned
    signature
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the default `None` orders will be completely executed in a single shot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_perc` (default: `0.0`) Percentage in absolute termns (and positive) that
    should be used to slip prices up/down for buy/sell orders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0.01` is `1%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0.001` is `0.1%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slip_fixed` (default: `0.0`) Percentage in units (and positive) that should
    be used to slip prices up/down for buy/sell orders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: if `slip_perc` is non zero, it takes precendence over this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_open` (default: `False`) whether to slip prices for order execution which
    would specifically used the *opening* price of the next bar. An example would
    be `Market` order which is executed with the next available tick, i.e: the opening
    price of the bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This also applies to some of the other executions, because the logic tries to
    detect if the *opening* price would match the requested price/execution type when
    moving to a new bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_match` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True` the broker will offer a match by capping slippage at `high/low` prices
    in case they would be exceeded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False` the broker will not match the order with the current prices and will
    try execution during the next iteration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_limit` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Limit` orders, given the exact match price requested, will be matched even
    if `slip_match` is `False`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This option controls that behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `True`, then `Limit` orders will be matched by capping prices to the `limit`
    / `high/low` prices
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False` and slippage exceeds the cap, then there will be no match
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_out` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide *slippage* even if the price falls outside the `high` - `low` range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`coc` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cheat-On-Close* Setting this to `True` with `set_coc` enables'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`coo` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cheat-On-Open* Setting this to `True` with `set_coo` enables'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`int2pnl` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign generated interest (if any) to the profit and loss of operation that
    reduces a position (be it long or short). There may be cases in which this is
    undesired, because different strategies are competing and the interest would be
    assigned on a non-deterministic basis to any of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`shortcash` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If True then cash will be increased when a stocklike asset is shorted and the
    calculated value for the asset will be negative.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False` then the cash will be deducted as operation cost and the calculated
    value will be positive to end up with the same amount
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fundstartval` (default: `100.0`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This parameter controls the start value for measuring the performance in a
    fund-like way, i.e.: cash can be added and deducted increasing the amount of shares.
    Performance is not measured using the net asset value of the porftoflio but using
    the value of the fund'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fundmode` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this is set to `True` analyzers like `TimeReturn` can automatically calculate
    returns based on the fund value and not on the total net asset value
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: set_cash(cash)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sets the cash parameter (alias: `setcash`)'
  prefs: []
  type: TYPE_NORMAL
- en: get_cash()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Returns the current cash (alias: `getcash`)'
  prefs: []
  type: TYPE_NORMAL
- en: get_value(datas=None, mkt=False, lever=False)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Returns the portfolio value of the given datas (if datas is `None`, then the
    total portfolio value will be returned (alias: `getvalue`)'
  prefs: []
  type: TYPE_NORMAL
- en: set_eosbar(eosbar)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sets the eosbar parameter (alias: `seteosbar`'
  prefs: []
  type: TYPE_NORMAL
- en: set_checksubmit(checksubmit)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sets the checksubmit parameter
  prefs: []
  type: TYPE_NORMAL
- en: set_filler(filler)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sets a volume filler for volume filling execution
  prefs: []
  type: TYPE_NORMAL
- en: set_coc(coc)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configure the Cheat-On-Close method to buy the close on order bar
  prefs: []
  type: TYPE_NORMAL
- en: set_coo(coo)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configure the Cheat-On-Open method to buy the close on order bar
  prefs: []
  type: TYPE_NORMAL
- en: set_int2pnl(int2pnl)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configure assignment of interest to profit and loss
  prefs: []
  type: TYPE_NORMAL
- en: set_fundstartval(fundstartval)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set the starting value of the fund-like performance tracker
  prefs: []
  type: TYPE_NORMAL
- en: set_slippage_perc(perc, slip_open=True, slip_limit=True, slip_match=True, slip_out=False)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configure slippage to be percentage based
  prefs: []
  type: TYPE_NORMAL
- en: set_slippage_fixed(fixed, slip_open=True, slip_limit=True, slip_match=True,
    slip_out=False)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configure slippage to be fixed points based
  prefs: []
  type: TYPE_NORMAL
- en: get_orders_open(safe=False)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns an iterable with the orders which are still open (either not executed
    or partially executed
  prefs: []
  type: TYPE_NORMAL
- en: The orders returned must not be touched.
  prefs: []
  type: TYPE_NORMAL
- en: If order manipulation is needed, set the parameter `safe` to True
  prefs: []
  type: TYPE_NORMAL
- en: getcommissioninfo(data)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Retrieves the `CommissionInfo` scheme associated with the given `data`
  prefs: []
  type: TYPE_NORMAL
- en: setcommission(commission=0.0, margin=None, mult=1.0, commtype=None, percabs=True,
    stocklike=False, interest=0.0, interest_long=False, leverage=1.0, automargin=False,
    name=None)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method sets a `` CommissionInfo`` object for assets managed in the broker
    with the parameters. Consult the reference for `CommInfoBase`
  prefs: []
  type: TYPE_NORMAL
- en: If name is `None`, this will be the default for assets for which no other `CommissionInfo`
    scheme can be found
  prefs: []
  type: TYPE_NORMAL
- en: addcommissioninfo(comminfo, name=None)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a `CommissionInfo` object that will be the default for all assets if `name`
    is `None`
  prefs: []
  type: TYPE_NORMAL
- en: getposition(data)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns the current position status (a `Position` instance) for the given `data`
  prefs: []
  type: TYPE_NORMAL
- en: get_fundshares()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns the current number of shares in the fund-like mode
  prefs: []
  type: TYPE_NORMAL
- en: get_fundvalue()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns the Fund-like share value
  prefs: []
  type: TYPE_NORMAL
- en: add_cash(cash)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add/Remove cash to the system (use a negative value to remove)
  prefs: []
  type: TYPE_NORMAL
