- en: Slippage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/docu/slippage/slippage/](https://www.backtrader.com/docu/slippage/slippage/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'backtesting cannot guarantee real market conditions. No matter how good the
    market simulation is, under real market conditions slippage can happen. That means:'
  prefs: []
  type: TYPE_NORMAL
- en: The requested price may not be matched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integrated backtesting broker supports slippage. The following parameters
    can be passed to the broker
  prefs: []
  type: TYPE_NORMAL
- en: '`slip_perc` (default: `0.0`) Percentage in absolute termns (and positive) that
    should be used to slip prices up/down for buy/sell orders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0.01` is `1%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0.001` is `0.1%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slip_fixed` (default: `0.0`) Percentage in units (and positive) that should
    be used to slip prices up/down for buy/sell orders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: if `slip_perc` is non zero, it takes precendence over this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_open` (default: `False`) whether to slip prices for order execution which
    would specifically used the *opening* price of the next bar. An example would
    be `Market` order which is executed with the next available tick, i.e: the opening
    price of the bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This also applies to some of the other executions, because the logic tries to
    detect if the *opening* price would match the requested price/execution type when
    moving to a new bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_match` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True` the broker will offer a match by capping slippage at `high/low` prices
    in case they would be exceeded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False` the broker will not match the order with the current prices and will
    try execution during the next iteration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_limit` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Limit` orders, given the exact match price requested, will be matched even
    if `slip_match` is `False`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This option controls that behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `True`, then `Limit` orders will be matched by capping prices to the `limit`
    / `high/low` prices
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False` and slippage exceeds the cap, then there will be no match
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`slip_out` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide *slippage* even if the price falls outside the `high` - `low` range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to decide when to apply *slippage* the order execution type is taken
    into account:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Close` - **No slippage** is applied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This order is matched against the `close` price and this price is the last one
    of the day. Slippage cannot happen because the order can only happen with the
    last tick of the session and this is a unique price with no tolerance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Market` - *Slippage* is applied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please check the `slip_open` exception. Because `Market` orders will be matched
    against the *opening* price of the next bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Limit` - *Slippage* is applied following this logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the matching price would be the *opening* price, then *slippage* is applied
    according to the parameter `slip_open`. If applied, the price will never be worse
    than the requested `limit` price
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the matching price is not the `limit` price, *slippage* is applied capping
    at `high/low`. In this case `slip_mlimit` applies to decide if a match will be
    happening in case the caps are exceeded
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the matching price is the `limit` price, then no slippage is applied
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stop` - once the order is *triggered* the same logic as for `Market` orders
    apply'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StopLimit` - once the order is *triggered* the same logic as for `Limit` orders
    apply'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This approach tries to offer the most realistic possible approach within the
    limits of the simulation and available data
  prefs: []
  type: TYPE_NORMAL
- en: Configuring slippage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A *broker* is already instantiated by a *cerebro* engine for each run with
    the default parameters. There are two ways to alter the behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: Use methods to configure *slippage*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BackBroker.set_slippage_perc(perc, slip_open=True, slip_limit=True, slip_match=True,
    slip_out=False)
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Configure slippage to be percentage based
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BackBroker.set_slippage_fixed(fixed, slip_open=True, slip_limit=True, slip_match=True,
    slip_out=False)
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Configure slippage to be fixed points based
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the broker as in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Practical examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sources contain a sample which uses the order execution type `Market` and
    a *long/short* approach using *signals*. This should allow to understand the logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'A run with no slippage and an initial plot for reference later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../Images/308d5e797cb3b9b08716db17ff65f3ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the same run using *slippage* with a `1.5%` configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There is **NO CHANGE**. This is the expected behavior for the scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution Type: `Market`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And `slip_open` has not been set to `True`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Market` orders are matched against the *opening* price of the next bar
    and we are not allowing the `open` price to be moved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A run setting `slip_open` to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And one can immediately see tht the prices **HAVE MOVED**. And the allocated
    prices are worst or equal like for operation 35\. *This is not a copy and paste
    error*
  prefs: []
  type: TYPE_NORMAL
- en: The `open` and the `high` on 20016-12-19 were the same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The price cannot be pushed above the `high` because that would mean returning
    a non-existent price.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Of course, *backtrader* allows to match outide the `high` - `low` range if
    wished with `slip_out`. A run with it activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A matching expression for the matched prices would be: OMG! (Oh My God!). The
    prices are clearly outside of the range. Suffice to look at operation 35, which
    has been matched at `4182.83`. A quick inspection of the chart in this document
    shows that the asset never came close to that price.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slip_match` has a default of `True` and that means that *backtrader* offers
    a match, be it with capped or uncapped prices as seen above. Let’s disable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Blistering barnacles! Down to 13 from 35\. The rationale:'
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating `slip_match` disallows matching operations if *slippage* would
    push the matching price above the `high` or below the `low` of the bar. It seems
    that with the `1.5%` of requested *slippage*, around 22 of the operations fail
    to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: The examples should have shown how the different *slippage* options work together.
  prefs: []
  type: TYPE_NORMAL
