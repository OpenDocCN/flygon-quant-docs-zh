["```py\n`class CommInfoBase(with_metaclass(MetaParams)):\n    COMM_PERC, COMM_FIXED = range(2)\n\n    params = (\n        ('commission', 0.0), ('mult', 1.0), ('margin', None),\n        ('commtype', None),\n        ('stocklike', False),\n        ('percabs', False),\n    )` \n```", "```py\n`def setcommission(self,\n                  commission=0.0, margin=None, mult=1.0,\n                  commtype=None, percabs=True, stocklike=False,\n                  name=None):` \n```", "```py\n`$ ./commission-schemes.py --help\nusage: commission-schemes.py [-h] [--data DATA] [--fromdate FROMDATE]\n                             [--todate TODATE] [--stake STAKE]\n                             [--period PERIOD] [--cash CASH] [--comm COMM]\n                             [--mult MULT] [--margin MARGIN]\n                             [--commtype {none,perc,fixed}] [--stocklike]\n                             [--percrel] [--plot] [--numfigs NUMFIGS]\n\nCommission schemes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system (default:\n                        ../../datas/2006-day-001.txt)\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format (default:\n                        2006-01-01)\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format (default:\n                        2006-12-31)\n  --stake STAKE         Stake to apply in each operation (default: 1)\n  --period PERIOD       Period to apply to the Simple Moving Average (default:\n                        30)\n  --cash CASH           Starting Cash (default: 10000.0)\n  --comm COMM           Commission factor for operation, either apercentage or\n                        a per stake unit absolute value (default: 2.0)\n  --mult MULT           Multiplier for operations calculation (default: 10)\n  --margin MARGIN       Margin for futures-like operations (default: 2000.0)\n  --commtype {none,perc,fixed}\n                        Commission - choose none for the old CommissionInfo\n                        behavior (default: none)\n  --stocklike           If the operation is for stock-like assets orfuture-\n                        like assets (default: False)\n  --percrel             If perc is expressed in relative xx{'const': True,\n                        'help': u'If perc is expressed in relative xx%\n                        ratherthan absolute value 0.xx', 'option_strings': [u'\n                        --percrel'], 'dest': u'percrel', 'required': False,\n                        'nargs': 0, 'choices': None, 'default': False, 'prog':\n                        'commission-schemes.py', 'container':\n                        <argparse._ArgumentGroup object at\n                        0x0000000007EC9828>, 'type': None, 'metavar':\n                        None}atherthan absolute value 0.xx (default: False)\n  --plot, -p            Plot the read data (default: False)\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using numfigs figures (default: 1)` \n```", "```py\n`$ ./commission-schemes.py --comm 2.0 --margin 2000.0 --mult 10 --plot` \n```", "```py\n`2006-03-09, BUY CREATE, 3757.59\n2006-03-10, BUY EXECUTED, Price: 3754.13, Cost: 2000.00, Comm 2.00\n2006-04-11, SELL CREATE, 3788.81\n2006-04-12, SELL EXECUTED, Price: 3786.93, Cost: 2000.00, Comm 2.00\n2006-04-12, TRADE PROFIT, GROSS 328.00, NET 324.00\n...` \n```", "```py\n`$ ./commission-schemes.py --comm 0.005 --margin 0 --mult 1 --plot` \n```", "```py\n`$ ./commission-schemes.py --percrel --comm 0.5 --margin 0 --mult 1 --plot` \n```", "```py\n`2006-03-09, BUY CREATE, 3757.59\n2006-03-10, BUY EXECUTED, Price: 3754.13, Cost: 3754.13, Comm 18.77\n2006-04-11, SELL CREATE, 3788.81\n2006-04-12, SELL EXECUTED, Price: 3786.93, Cost: 3754.13, Comm 18.93\n2006-04-12, TRADE PROFIT, GROSS 32.80, NET -4.91\n...` \n```", "```py\n`$ ./commission-schemes.py --commtype perc --percrel --comm 0.5 --margin 2000 --mult 10 --plot` \n```", "```py\n`2006-03-09, BUY CREATE, 3757.59\n2006-03-10, BUY EXECUTED, Price: 3754.13, Cost: 2000.00, Comm 18.77\n2006-04-11, SELL CREATE, 3788.81\n2006-04-12, SELL EXECUTED, Price: 3786.93, Cost: 2000.00, Comm 18.93\n2006-04-12, TRADE PROFIT, GROSS 328.00, NET 290.29\n...` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass SMACrossOver(bt.Strategy):\n    params = (\n        ('stake', 1),\n        ('period', 30),\n    )\n\n    def log(self, txt, dt=None):\n  ''' Logging function fot this strategy'''\n        dt = dt or self.datas[0].datetime.date(0)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n            return\n\n        # Check if an order has been completed\n        # Attention: broker could reject order if not enougth cash\n        if order.status in [order.Completed, order.Canceled, order.Margin]:\n            if order.isbuy():\n                self.log(\n                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                    (order.executed.price,\n                     order.executed.value,\n                     order.executed.comm))\n            else:  # Sell\n                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                         (order.executed.price,\n                          order.executed.value,\n                          order.executed.comm))\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            self.log('TRADE PROFIT, GROSS %.2f, NET %.2f' %\n                     (trade.pnl, trade.pnlcomm))\n\n    def __init__(self):\n        sma = btind.SMA(self.data, period=self.p.period)\n        # > 0 crossing up / < 0 crossing down\n        self.buysell_sig = btind.CrossOver(self.data, sma)\n\n    def next(self):\n        if self.buysell_sig > 0:\n            self.log('BUY CREATE, %.2f' % self.data.close[0])\n            self.buy(size=self.p.stake)  # keep order ref to avoid 2nd orders\n\n        elif self.position and self.buysell_sig < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell(size=self.p.stake)\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data = btfeeds.BacktraderCSVData(\n        dataname=args.data,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 1st data to cerebro\n    cerebro.adddata(data)\n\n    # Add a strategy\n    cerebro.addstrategy(SMACrossOver, period=args.period, stake=args.stake)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcash(args.cash)\n\n    commtypes = dict(\n        none=None,\n        perc=bt.CommInfoBase.COMM_PERC,\n        fixed=bt.CommInfoBase.COMM_FIXED)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcommission(commission=args.comm,\n                                 mult=args.mult,\n                                 margin=args.margin,\n                                 percabs=not args.percrel,\n                                 commtype=commtypes[args.commtype],\n                                 stocklike=args.stocklike)\n\n    # And run it\n    cerebro.run()\n\n    # Plot if requested\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, volume=False)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Commission schemes',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,)\n\n    parser.add_argument('--data', '-d',\n                        default='../../datas/2006-day-001.txt',\n                        help='data to add to the system')\n\n    parser.add_argument('--fromdate', '-f',\n                        default='2006-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default='2006-12-31',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--stake', default=1, type=int,\n                        help='Stake to apply in each operation')\n\n    parser.add_argument('--period', default=30, type=int,\n                        help='Period to apply to the Simple Moving Average')\n\n    parser.add_argument('--cash', default=10000.0, type=float,\n                        help='Starting Cash')\n\n    parser.add_argument('--comm', default=2.0, type=float,\n                        help=('Commission factor for operation, either a'\n                              'percentage or a per stake unit absolute value'))\n\n    parser.add_argument('--mult', default=10, type=int,\n                        help='Multiplier for operations calculation')\n\n    parser.add_argument('--margin', default=2000.0, type=float,\n                        help='Margin for futures-like operations')\n\n    parser.add_argument('--commtype', required=False, default='none',\n                        choices=['none', 'perc', 'fixed'],\n                        help=('Commission - choose none for the old'\n                              ' CommissionInfo behavior'))\n\n    parser.add_argument('--stocklike', required=False, action='store_true',\n                        help=('If the operation is for stock-like assets or'\n                              'future-like assets'))\n\n    parser.add_argument('--percrel', required=False, action='store_true',\n                        help=('If perc is expressed in relative xx% rather'\n                              'than absolute value 0.xx'))\n\n    parser.add_argument('--plot', '-p', action='store_true',\n                        help='Plot the read data')\n\n    parser.add_argument('--numfigs', '-n', default=1,\n                        help='Plot using numfigs figures')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]