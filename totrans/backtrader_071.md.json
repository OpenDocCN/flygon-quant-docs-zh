["```py\n    `class CommInfo_Futures_Fixed(CommInfoBase):\n        params = (\n            ('stocklike', False),\n            ('commtype', CommInfoBase.COMM_FIXED),\n        )` \n    ```", "```py\n    `class CommInfo_Stocks_Perc(CommInfoBase):\n        params = (\n            ('stocklike', True),\n            ('commtype', CommInfoBase.COMM_PERC),\n        )` \n    ```", "```py\n    `class CommInfo_Stocks_PercAbs(CommInfoBase):\n        params = (\n            ('stocklike', True),\n            ('commtype', CommInfoBase.COMM_PERC),\n            ('percabs', True),\n        )` \n    ```", "```py\n    `def _getcommission(self, size, price, pseudoexec):\n      '''Calculates the commission of an operation at a given price\n\n     pseudoexec: if True the operation has not yet been executed\n     '''` \n    ```", "```py\n`...\n\ncomminfo = CommInfo_Stocks_PercAbs(commission=0.005)  # 0.5%\ncerebro.broker.addcommissioninfo(comminfo)` \n```", "```py\n`def addcommissioninfo(self, comminfo, name=None):\n    self.comminfo[name] = comminfo` \n```", "```py\n`import backtrader as bt\n\nclass CommInfo_Fut_Perc_Mult(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_PERC),  # Apply % Commission\n    # ('percabs', False),  # pass perc as xx% which is the default\n    )\n\n    def _getcommission(self, size, price, pseudoexec):\n        return size * price * self.p.commission * self.p.mult` \n```", "```py\n`comminfo = CommInfo_Fut_Perc_Mult(\n    commission=0.1,  # 0.1%\n    mult=10,\n    margin=2000  # Margin is needed for futures-like instruments\n)\n\ncerebro.addcommissioninfo(comminfo)` \n```", "```py\n`class CommInfo_Fut_Perc_Mult(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_PERC),  # Apply % Commission\n      ('percabs', True),  # pass perc as 0.xx\n    )\n\ncomminfo = CommInfo_Fut_Perc_Mult(\n    commission=0.001,  # 0.1%\n    mult=10,\n    margin=2000  # Margin is needed for futures-like instruments\n)\n\ncerebro.addcommissioninfo(comminfo)` \n```", "```py\n`def _getcommission(self, size, price, pseudoexec):\n  '''Calculates the commission of an operation at a given price\n\n pseudoexec: if True the operation has not yet been executed\n '''` \n```", "```py\n`import backtrader as bt\n\nclass CommInfo_Fut_Discount(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_FIXED),  # Apply Commission\n\n      # Custom params for the discount\n      ('discount_volume', 5000),  # minimum contracts to achieve discount\n      ('discount_perc', 50.0),  # 50.0% discount\n    )\n\n    negotiated_volume = 0  # attribute to keep track of the actual volume\n\n    def _getcommission(self, size, price, pseudoexec):\n        if self.negotiated_volume > self.p.discount_volume:\n           actual_discount = self.p.discount_perc / 100.0\n        else:\n           actual_discount = 0.0\n\n        commission = self.p.commission * (1.0 - actual_discount)\n        commvalue = size * price * commission\n\n        if not pseudoexec:\n           # keep track of actual real executed size for future discounts\n           self.negotiated_volume += size\n\n        return commvalue` \n```"]