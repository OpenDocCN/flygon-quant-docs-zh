["```py\n`* `self.dataX_Y` where X is a reference to `self.datas[X]` and `Y`\n  refers to the line, finally pointing to: `self.datas[X].lines[Y]`` \n```", "```py\n`* `self.dataX_Name` which resolves to `self.datas[X].Name` returning\n  the line by name rather than by index` \n```", "```py\n`* `self.data_2` refers to `self.datas[0].lines[2]`` \n```", "```py\n`* `self.data_close` refers to `self.datas[0].close`` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport datetime\n\nimport backtrader as bt\nimport backtrader.analyzers as btanalyzers\nimport backtrader.feeds as btfeeds\nimport backtrader.strategies as btstrats\n\ncerebro = bt.Cerebro()\n\n# data\ndataname = '../datas/sample/2005-2006-day-001.txt'\ndata = btfeeds.BacktraderCSVData(dataname=dataname)\n\ncerebro.adddata(data)\n\n# strategy\ncerebro.addstrategy(btstrats.SMA_CrossOver)\n\n# Analyzer\ncerebro.addanalyzer(btanalyzers.SharpeRatio, _name='mysharpe')\n\nthestrats = cerebro.run()\nthestrat = thestrats[0]\n\nprint('Sharpe Ratio:', thestrat.analyzers.mysharpe.get_analysis())` \n```", "```py\n`$ ./analyzer-test.py\nSharpe Ratio: {'sharperatio': 11.647332609673256}` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport operator\n\nfrom backtrader.utils.py3 import map\nfrom backtrader import Analyzer, TimeFrame\nfrom backtrader.mathsupport import average, standarddev\nfrom backtrader.analyzers import AnnualReturn\n\nclass SharpeRatio(Analyzer):\n    params = (('timeframe', TimeFrame.Years), ('riskfreerate', 0.01),)\n\n    def __init__(self):\n        super(SharpeRatio, self).__init__()\n        self.anret = AnnualReturn()\n\n    def start(self):\n        # Not needed ... but could be used\n        pass\n\n    def next(self):\n        # Not needed ... but could be used\n        pass\n\n    def stop(self):\n        retfree = [self.p.riskfreerate] * len(self.anret.rets)\n        retavg = average(list(map(operator.sub, self.anret.rets, retfree)))\n        retdev = standarddev(self.anret.rets)\n\n        self.ratio = retavg / retdev\n\n    def get_analysis(self):\n        return dict(sharperatio=self.ratio)` \n```"]