["```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ncerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n\n...  # add datas, strategies ...\n\nresults = cerebro.run()\nstrat0 = results[0]\n\n# If no name has been specified, the name is the class name lowercased\ntret_analyzer = strat0.analyzers.getbyname('timereturn')\nprint(tret_analyzer.get_analysis())` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\n\ndata = bt.feeds.OneOfTheFeeds(dataname='abcde', ...)\ncerebro.adddata(data)\n\ncerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years,\n                    data=data)\n\n...  # add strategies ...\n\nresults = cerebro.run()\nstrat0 = results[0]\n\n# If no name has been specified, the name is the class name lowercased\ntret_analyzer = strat0.analyzers.getbyname('timereturn')\nprint(tret_analyzer.get_analysis())` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\n\ndata = bt.feeds.OneOfTheFeeds(dataname='abcde', ...)\ncerebro.adddata(data)\n\ncerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years,\n                    data=data, _name='datareturns')\n\ncerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n                    _name='timereturns')\n\n...  # add strategies ...\n\nresults = cerebro.run()\nstrat0 = results[0]\n\n# If no name has been specified, the name is the class name lowercased\ntret_analyzer = strat0.analyzers.getbyname('timereturns')\nprint(tret_analyzer.get_analysis())\ntdata_analyzer = strat0.analyzers.getbyname('datareturns')\nprint(tdata_analyzer.get_analysis())` \n```", "```py\n`$ ./observer-benchmark.py --plot --timereturn --timeframe notimeframe` \n```", "```py\n`$ ./observer-benchmark.py --plot --timeframe notimeframe` \n```", "```py\n`$ ./observer-benchmark.py --plot --timeframe years` \n```", "```py\n`$ ./observer-benchmark.py --plot --timeframe weeks\n\n.. image:: 04-benchmarking-weeks.png` \n```", "```py\n`$ ./observer-benchmark.py --plot --timeframe notimeframe --benchdata1` \n```", "```py\n`$ ./observer-benchmark.py --help\nusage: observer-benchmark.py [-h] [--data0 DATA0] [--data1 DATA1]\n                             [--benchdata1] [--fromdate FROMDATE]\n                             [--todate TODATE] [--printout] [--cash CASH]\n                             [--period PERIOD] [--stake STAKE] [--timereturn]\n                             [--timeframe {months,days,notimeframe,years,None,weeks}]\n                             [--plot [kwargs]]\n\nBenchmark/TimeReturn Observers Sample\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data0 to be read in (default:\n                        ../../datas/yhoo-1996-2015.txt)\n  --data1 DATA1         Data1 to be read in (default:\n                        ../../datas/orcl-1995-2014.txt)\n  --benchdata1          Benchmark against data1 (default: False)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: 2006-12-31)\n  --printout            Print data lines (default: False)\n  --cash CASH           Cash to start with (default: 50000)\n  --period PERIOD       Period for the crossover moving average (default: 30)\n  --stake STAKE         Stake to apply for the buy operations (default: 1000)\n  --timereturn          Use TimeReturn observer instead of Benchmark (default:\n                        None)\n  --timeframe {months,days,notimeframe,years,None,weeks}\n                        TimeFrame to apply to the Observer (default: None)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport random\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = (\n        ('period', 10),\n        ('printout', False),\n        ('stake', 1000),\n    )\n\n    def __init__(self):\n        sma = bt.indicators.SMA(self.data, period=self.p.period)\n        self.crossover = bt.indicators.CrossOver(self.data, sma)\n\n    def start(self):\n        if self.p.printout:\n            txtfields = list()\n            txtfields.append('Len')\n            txtfields.append('Datetime')\n            txtfields.append('Open')\n            txtfields.append('High')\n            txtfields.append('Low')\n            txtfields.append('Close')\n            txtfields.append('Volume')\n            txtfields.append('OpenInterest')\n            print(','.join(txtfields))\n\n    def next(self):\n        if self.p.printout:\n            # Print only 1st data ... is just a check that things are running\n            txtfields = list()\n            txtfields.append('%04d' % len(self))\n            txtfields.append(self.data.datetime.datetime(0).isoformat())\n            txtfields.append('%.2f' % self.data0.open[0])\n            txtfields.append('%.2f' % self.data0.high[0])\n            txtfields.append('%.2f' % self.data0.low[0])\n            txtfields.append('%.2f' % self.data0.close[0])\n            txtfields.append('%.2f' % self.data0.volume[0])\n            txtfields.append('%.2f' % self.data0.openinterest[0])\n            print(','.join(txtfields))\n\n        if self.position:\n            if self.crossover < 0.0:\n                if self.p.printout:\n                    print('CLOSE {} @%{}'.format(size,\n                                                 self.data.close[0]))\n                self.close()\n\n        else:\n            if self.crossover > 0.0:\n                self.buy(size=self.p.stake)\n                if self.p.printout:\n                    print('BUY {} @%{}'.format(self.p.stake,\n                                                self.data.close[0]))\n\nTIMEFRAMES = {\n    None: None,\n    'days': bt.TimeFrame.Days,\n    'weeks': bt.TimeFrame.Weeks,\n    'months': bt.TimeFrame.Months,\n    'years': bt.TimeFrame.Years,\n    'notimeframe': bt.TimeFrame.NoTimeFrame,\n}\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='Data0')\n\n    cerebro.addstrategy(St,\n                        period=args.period,\n                        stake=args.stake,\n                        printout=args.printout)\n\n    if args.timereturn:\n        cerebro.addobserver(bt.observers.TimeReturn,\n                            timeframe=TIMEFRAMES[args.timeframe])\n    else:\n        benchdata = data0\n        if args.benchdata1:\n            data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **dkwargs)\n            cerebro.adddata(data1, name='Data1')\n            benchdata = data1\n\n        cerebro.addobserver(bt.observers.Benchmark,\n                            data=benchdata,\n                            timeframe=TIMEFRAMES[args.timeframe])\n\n    cerebro.run()\n\n    if args.plot:\n        pkwargs = dict()\n        if args.plot is not True:  # evals to True but is not True\n            pkwargs = eval('dict(' + args.plot + ')')  # args were passed\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Benchmark/TimeReturn Observers Sample')\n\n    parser.add_argument('--data0', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Data0 to be read in')\n\n    parser.add_argument('--data1', required=False,\n                        default='../../datas/orcl-1995-2014.txt',\n                        help='Data1 to be read in')\n\n    parser.add_argument('--benchdata1', required=False, action='store_true',\n                        help=('Benchmark against data1'))\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default='2006-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--printout', required=False, action='store_true',\n                        help=('Print data lines'))\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--period', required=False, action='store',\n                        type=int, default=30,\n                        help=('Period for the crossover moving average'))\n\n    parser.add_argument('--stake', required=False, action='store',\n                        type=int, default=1000,\n                        help=('Stake to apply for the buy operations'))\n\n    parser.add_argument('--timereturn', required=False, action='store_true',\n                        default=None,\n                        help=('Use TimeReturn observer instead of Benchmark'))\n\n    parser.add_argument('--timeframe', required=False, action='store',\n                        default=None, choices=TIMEFRAMES.keys(),\n                        help=('TimeFrame to apply to the Observer'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]