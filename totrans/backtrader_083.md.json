["```py\n`def buy(self, data=None,\n        size=None, price=None, plimit=None,\n        exectype=None, valid=None, tradeid=0, **kwargs):` \n```", "```py\n`class SizerFix(SizerBase):\n    params = (('stake', 1),)` \n```", "```py\n    `cerebro = bt.Cerebro()\n    cerebro.addsizer(bt.sizers.SizerFix, stake=20)  # default sizer for strategies` \n    ```", "```py\n    `cerebro = bt.Cerebro()\n    cerebro.addsizer(bt.sizers.SizerFix, stake=20)  # default sizer for strategies\n\n    idx = cerebro.addstrategy(MyStrategy, myparam=myvalue)\n    cerebro.addsizer_byidx(idx, bt.sizers.SizerFix, stake=5)\n\n    cerebro.addstrategy(MyOtherStrategy)` \n    ```", "```py\n    `class MyStrategy(bt.Strategy):\n        params = (('sizer', None),)\n\n        def __init__(self):\n            if self.p.sizer is not None:\n                self.sizer = self.p.sizer` \n    ```", "```py\n`import backtrader as bt\n\nclass FixedSize(bt.Sizer):\n    params = (('stake', 1),)\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        return self.params.stake` \n```", "```py\n`class FixedRerverser(bt.FixedSize):\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        position = self.broker.getposition(data)\n        size = self.p.stake * (1 + (position.size != 0))\n        return size` \n```", "```py\n`class CloseSMA(bt.Strategy):\n    params = (('period', 15),)\n\n    def __init__(self):\n        sma = bt.indicators.SMA(self.data, period=self.p.period)\n        self.crossover = bt.indicators.CrossOver(self.data, sma)\n\n    def next(self):\n        if self.crossover > 0:\n            self.buy()\n\n        elif self.crossover < 0:\n            self.sell()` \n```", "```py\n`class LongOnly(bt.Sizer):\n    params = (('stake', 1),)\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n      if isbuy:\n          return self.p.stake\n\n      # Sell situation\n      position = self.broker.getposition(data)\n      if not position.size:\n          return 0  # do not sell if nothing is open\n\n      return self.p.stake` \n```", "```py\n`...\ncerebro.addstrategy(CloseSMA)\ncerebro.addsizer(LongOnly)\n...\ncerebro.run()\n...` \n```", "```py\n`...\ncerebro.addstrategy(CloseSMA)\ncerebro.addsizer(FixedReverser)\n...\ncerebro.run()\n...` \n```", "```py\n    `position = self.strategy.getposition(data)` \n    ```", "```py\n`* `comminfo`: The CommissionInfo instance that contains\n  information about the commission for the data and allows\n  calculation of position value, operation cost, commision for the\n  operation\n\n* `cash`: current available cash in the *broker*\n\n* `data`: target of the operation\n\n* `isbuy`: will be `True` for *buy* operations and `False`\n  for *sell* operations` \n```"]