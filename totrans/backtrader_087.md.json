["```py\n`pip install git+https://github.com/blampe/IbPy.git` \n```", "```py\n`pip install https://github.com/blampe/IbPy/archive/master.zip` \n```", "```py\n`import backtrader as bt\n\nibstore = bt.stores.IBStore(host='127.0.0.1', port=7496, clientId=35)\ndata = ibstore.getdata(dataname='EUR.USD-CASH-IDEALPRO')` \n```", "```py\n`import backtrader as bt\n\ndata = bt.feeds.IBData(dataname='EUR.USD-CASH-IDEALPRO',\n                       host='127.0.0.1', port=7496, clientId=35)` \n```", "```py\n     ``RealTimeBars` do not work with the TWS Demo` \n    ```", "```py\n`data = ibstore.getdata(dataname='EUR.USD-CASH-IDEALPRO',\n                       timeframe=bt.TimeFrame.Seconds, compression=5)\n\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Minutes, compression=2)` \n```", "```py\n`data = ibstore.getdata(dataname='TWTR')  # Twitter` \n```", "```py\n`data = ibstore.getdata(dataname='AAPL')  # Error -> multiple contracts` \n```", "```py\n`data = ibstore.getdata(dataname='AAPL-STK-SMART-USD')  # 1 contract found` \n```", "```py\n`class IBStrategy(bt.Strategy):\n\n    def notify_data(self, data, status, *args, **kwargs):\n\n        if status == data.LIVE:  # the data has switched to live data\n           # do something\n           pass` \n```", "```py\n`data = ibstore.getdata(dataname='EUR.USD-CASH-IDEALPRO',\n                       timeframe=bt.TimeFrame.Ticks,\n                       compression=1,  # 1 is the default\n                       rtbar=True,  # use RealTimeBars\n                      )\ncerebro.adddata(data)` \n```", "```py\n`data = ibstore.getdata(dataname='TWTR-STK-SMART', rtbar=True)\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Seconds, compression=20)` \n```", "```py\n`data = ibstore.getdata(dataname='TWTR-STK-SMART')\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Seconds, compression=20)` \n```", "```py\n`data = ibstore.getdata(dataname='EUR.USD-CASH-IDEALPRO')\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Seconds, compression=20)` \n```", "```py\n    `cerebro.resampledata(data, timeframe=bt.TimeFrame.Seconds, compression=5)` \n    ```", "```py\n    `data = ibstore.getdata('TWTR', qcheck=2.0, ...)` \n    ```", "```py\n    `data = ibstore.getdata('TWTR', _latethrough=True, ...)` \n    ```", "```py\n    `cerebro.resampledata(data, takelate=True)` \n    ```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\nibstore = bt.stores.IBStore(host='127.0.0.1', port=7496, clientId=35)\ncerebro.broker = ibstore.getbroker()  # or cerebro.setbroker(...)` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ncerebro.broker = bt.brokers.IBBroker(host='127.0.0.1', port=7496, clientId=35)` \n```", "```py\n`0 - the default value. The \"double bid/ask\" method will be used for\norders for OTC stocks and US options. All other orders will use the\n\"last\" method.` \n```", "```py\n`def next(self):\n    # some logic before\n    self.buy(data, m_triggerMethod=2)` \n```"]