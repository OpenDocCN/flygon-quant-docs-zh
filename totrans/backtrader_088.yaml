- en: Oanda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/docu/live/oanda/oanda/](https://www.backtrader.com/docu/live/oanda/oanda/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The integration with Oanda supports both:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Live Data* feeding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Live Trading*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`oandapy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install it with: `pip install git+https://github.com/oanda/oandapy.git`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pytz` (optional and not really recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given the worlwide and 24x7 nature of Forex, the choice is work in `UTC` time.
    You may still work with your desired output timezone if wished.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sample Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sources contain a full sample under:'
  prefs: []
  type: TYPE_NORMAL
- en: '`samples/oandatest/oandatest.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oanda - the store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The store is the keystone of the live data feed/trade support, providing a layer
    of adaptation between the *Oanda* API and the needs of a data feed and a broker
    proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Providesaccess to getting a *broker* instance with the method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OandaStore.getbroker(*args, **kwargs)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides access to getter *data* feed instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OandaStore.getedata(\*args, **kwargs)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case many of the `**kwargs` are common to data feeds like `dataname`,
    `fromdate`, `todate`, `sessionstart`, `sessionend`, `timeframe`, `compression`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The data may provide other params. Check the reference below.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mandatory parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to successfully connect to *Oanda*, the following parameters are mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`token` (default:`None`): API access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account` (default: `None`): account id'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This are provided by *Oanda*
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether to connect to the *practice* server or to the real server, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`practice` (default: `False`): use the test environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The account has to be periodically checked to get the *cash* and *value*. The
    periodicity can be controlled with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`account_tmout` (default: `10.0`): refresh period for account value/cash refresh'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oanda feeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instantiating the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Pass the symbol according to the Oanda guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*EUR/USDD* following the guidelines from Oanda has to be specified as as `EUR_USD`.
    Instantiate it as:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Time management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unless a `tz` parameter (a *pytz-compatible* object) is passed to the data feed,
    all time output is in `UTC` format as expressed above.
  prefs: []
  type: TYPE_NORMAL
- en: Backfilling
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*backtrader* makes no special request to *Oanda*. For small timeframes the
    backfilling returned by *Oanda* on the *practice* servers has been `500` bars
    long'
  prefs: []
  type: TYPE_NORMAL
- en: OandaBroker - Trading Live
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the broker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the *OandaBroker*, the standard broker simulation instance created by
    *cerebro* has to be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the *Store* model (preferred):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Broker - Initial Positions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The broker supports a single parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use_positions` (default:`True`): When connecting to the broker provider use
    the existing positions to kickstart the broker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set to `False` during instantiation to disregard any existing position
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Opperations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no change with regards to the standar usage. Just use the methods available
    in the strategy (see the `Strategy` reference for a full explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '`buy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sell`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`close`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cancel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order Execution Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Oanda* supports almost all of the order execution types needed by *backtrader*
    with the exception of *Close*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As such the order execution types are limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Order.Market`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order.Limit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order.Stop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order.StopLimit` (using *Stop* and *upperBound* / *lowerBound* prices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order.StopTrail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bracket* orders are supported by using the `takeprofit` and `stoploss` order
    members and creating internally simulated orders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order Validity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same validity notion available during backtesting (with `valid` to `buy`
    and `sell`) is available and with the same meaning. As such, the `valid` parameter
    is translated as follows for *Oanda Orders* for the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` translates to *Good Til Cancelled*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because no validity has been specified it is understood that the order must
    be valid until cancelled
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`datetime/date` translates to *Good Til Date*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timedelta(x)` translates to *Good Til Date* (here `timedelta(x) != timedelta()`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is interpreted as a signal to have an order be valid from `now` + `timedelta(x)`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`timedelta() or 0` translates to *Session*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A value has been passed (instead of `None`) but is *Null* and is interpreted
    as an order valid for the current *day* (session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The standard `Order` status will be notified to a *strategy* over the method
    `notify_order` (if overridden)
  prefs: []
  type: TYPE_NORMAL
- en: '`Submitted` - the order has been sent to TWS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Accepted` - the order has been placed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rejected` - Use for real rejections and when no other status is known during
    order creation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Partial` - a partial execution has taken place'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Completed` - the order has been fully executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Canceled` (or `Cancelled`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Expired` - when an order is cancelled due to expiry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OandaStore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: class backtrader.stores.OandaStore()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Singleton class wrapping to control the connections to Oanda.
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: '`token` (default:`None`): API access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account` (default: `None`): account id'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`practice` (default: `False`): use the test environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account_tmout` (default: `10.0`): refresh period for account value/cash refresh'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OandaBroker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: class backtrader.brokers.OandaBroker(**kwargs)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Broker implementation for Oanda.
  prefs: []
  type: TYPE_NORMAL
- en: This class maps the orders/positions from Oanda to the internal API of `backtrader`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use_positions` (default:`True`): When connecting to the broker provider use
    the existing positions to kickstart the broker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set to `False` during instantiation to disregard any existing position
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OandaData
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: class backtrader.feeds.OandaData(**kwargs)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Oanda Data Feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Params:'
  prefs: []
  type: TYPE_NORMAL
- en: '`qcheck` (default: `0.5`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time in seconds to wake up if no data is received to give a chance to resample/replay
    packets properly and pass notifications up the chain
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`historical` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If set to `True` the data feed will stop after doing the first download of data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The standard data feed parameters `fromdate` and `todate` will be used as reference.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The data feed will make multiple requests if the requested duration is larger
    than the one allowed by IB given the timeframe/compression chosen for the data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`backfill_start` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform backfilling at the start. The maximum possible historical data will
    be fetched in a single request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`backfill` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform backfilling after a disconnection/reconnection cycle. The gap duration
    will be used to download the smallest possible amount of data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`backfill_from` (default: `None`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An additional data source can be passed to do an initial layer of backfilling.
    Once the data source is depleted and if requested, backfilling from IB will take
    place. This is ideally meant to backfill from already stored sources like a file
    on disk, but not limited to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bidask` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, then the historical/backfilling requests will request bid/ask prices
    from the server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False`, then *midpoint* will be requested
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`useask` (default: `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True` the *ask* part of the *bidask* prices will be used instead of the
    default use of *bid*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`includeFirst` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Influence the delivery of the 1^(st) bar of a historical/backfilling request
    by setting the parameter directly to the Oanda API calls
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reconnect` (default: `True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconnect when network connection is down
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reconnections` (default: `-1`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of times to attempt reconnections: `-1` means forever'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reconntimeout` (default: `5.0`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time in seconds to wait in between reconnection attemps
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This data feed supports only this mapping of `timeframe` and `compression`,
    which comply with the definitions in the OANDA API Developer’s Guid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Any other combination will be rejected
  prefs: []
  type: TYPE_NORMAL
