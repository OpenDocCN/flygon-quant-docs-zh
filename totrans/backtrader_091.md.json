["```py\n`cerebro.plot()` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    def __init__(self):\n        self.sma = bt.indicators.SimpleMovingAverage(self.data)\n\ndata = bt.feeds.BacktraderCSVData(dataname='../../datas/2005-2006-day-001.txt')\n\ncerebro = bt.Cerebro()\ncerebro.adddata(data)\ncerebro.addstrategy(St)\ncerebro.run()\ncerebro.plot()` \n```", "```py\n`cerebro = bt.Cerebro(stdstats=False)` \n```", "```py\n`cerebro = bt.Cerebro()\n...\ncerebro.run(stdstats=False)` \n```", "```py\n`plotinfo = dict(plot=True,\n                subplot=True,\n                plotname='',\n                plotskip=False,\n                plotabove=False,\n                plotlinelabels=False,\n                plotlinevalues=True,\n                plotvaluetags=True,\n                plotymargin=0.0,\n                plotyhlines=[],\n                plotyticks=[],\n                plothlines=[],\n                plotforce=False,\n                plotmaster=None,\n                plotylimited=True,\n           )` \n```", "```py\n`sma = bt.indicators.SimpleMovingAverage(self.data, period=15, plotname='mysma')` \n```", "```py\n`sma = bt.indicators.SimpleMovingAverage(self.data, period=15)\nsma.plotinfo.plotname = 'mysma'` \n```", "```py\n    `lines = ('histo',)\n    plotlines = dict(histo=dict(_method='bar', alpha=0.50, width=1.0))` \n    ```", "```py\n    `# Fill for myline when above other_line with colour red\n    plotlines = dict(\n        myline=dict(_fill_gt('other_line', 'red'))\n    )\n\n    # Fill for myline when above 50 with colour red\n    plotlines = dict(\n        myline=dict(_fill_gt(50, 'red))\n    )\n\n    # Fill for myline when above other_line with colour red and 50%\n    # transparency (1.0 means \"no transparency\")\n\n    plotlines = dict(\n        myline=dict(_fill_gt('other_line', ('red', 0.50)))\n    )` \n    ```", "```py\n`plotlines = dict(_0=dict(_name='osc'))` \n```", "```py\n`plotlines = dict(\n    buy=dict(marker='^', markersize=8.0, color='lime', fillstyle='full'),\n    sell=dict(marker='v', markersize=8.0, color='red', fillstyle='full')\n)` \n```", "```py\n`...\nlines = ('pnlplus', 'pnlminus')\n...\n\nplotlines = dict(\n    pnlplus=dict(_name='Positive',\n                 marker='o', color='blue',\n                 markersize=8.0, fillstyle='full'),\n    pnlminus=dict(_name='Negative',\n                  marker='o', color='red',\n                  markersize=8.0, fillstyle='full')\n)` \n```", "```py\n`lines = ('drawdown', 'maxdrawdown',)\n\n...\n\nplotlines = dict(maxdrawdown=dict(_plotskip='True',))` \n```", "```py\n`plotlines = dict(\n    mid=dict(ls='--'),\n    top=dict(_samecolor=True),\n    bot=dict(_samecolor=True),\n)` \n```", "```py\n`lines = ('percK', 'percD',)\n...\nplotlines = dict(percD=dict(_name='%D', ls='--'),\n                 percK=dict(_name='%K'))` \n```", "```py\n    `def _plotlabel(self):\n        plabels = [self.p.period]\n        plabels += [self.p.movav] * self.p.notdefault('movav')\n        return plabels` \n    ```", "```py\n    `def _plotinit(self):\n        self.plotinfo.plotyhlines = [self.p.upperband, self.p.lowerband]` \n    ```", "```py\n`def plot(self, plotter=None, numfigs=1, iplot=True, **kwargs):` \n```", "```py\n`class PlotScheme(object):\n    def __init__(self):\n        # to have a tight packing on the chart wether only the x axis or also\n        # the y axis have (see matplotlib)\n        self.ytight = False\n\n        # y-margin (top/bottom) for the subcharts. This will not overrule the\n        # option plotinfo.plotymargin\n        self.yadjust = 0.0\n        # Each new line is in z-order below the previous one. change it False\n        # to have lines paint above the previous line\n        self.zdown = True\n        # Rotation of the date labes on the x axis\n        self.tickrotation = 15\n\n        # How many \"subparts\" takes a major chart (datas) in the overall chart\n        # This is proportional to the total number of subcharts\n        self.rowsmajor = 5\n\n        # How many \"subparts\" takes a minor chart (indicators/observers) in the\n        # overall chart. This is proportional to the total number of subcharts\n        # Together with rowsmajor, this defines a proportion ratio betwen data\n        # charts and indicators/observers charts\n        self.rowsminor = 1\n\n        # Distance in between subcharts\n        self.plotdist = 0.0\n\n        # Have a grid in the background of all charts\n        self.grid = True\n\n        # Default plotstyle for the OHLC bars which (line -> line on close)\n        # Other options: 'bar' and 'candle'\n        self.style = 'line'\n\n        # Default color for the 'line on close' plot\n        self.loc = 'black'\n        # Default color for a bullish bar/candle (0.75 -> intensity of gray)\n        self.barup = '0.75'\n        # Default color for a bearish bar/candle\n        self.bardown = 'red'\n        # Level of transparency to apply to bars/cancles (NOT USED)\n        self.bartrans = 1.0\n\n        # Wether the candlesticks have to be filled or be transparent\n        self.barupfill = True\n        self.bardownfill = True\n\n        # Wether the candlesticks have to be filled or be transparent\n        self.fillalpha = 0.20\n\n        # Wether to plot volume or not. Note: if the data in question has no\n        # volume values, volume plotting will be skipped even if this is True\n        self.volume = True\n\n        # Wether to overlay the volume on the data or use a separate subchart\n        self.voloverlay = True\n        # Scaling of the volume to the data when plotting as overlay\n        self.volscaling = 0.33\n        # Pushing overlay volume up for better visibiliy. Experimentation\n        # needed if the volume and data overlap too much\n        self.volpushup = 0.00\n\n        # Default colour for the volume of a bullish day\n        self.volup = '#aaaaaa'  # 0.66 of gray\n        # Default colour for the volume of a bearish day\n        self.voldown = '#cc6073'  # (204, 96, 115)\n        # Transparency to apply to the volume when overlaying\n        self.voltrans = 0.50\n\n        # Transparency for text labels (NOT USED CURRENTLY)\n        self.subtxttrans = 0.66\n        # Default font text size for labels on the chart\n        self.subtxtsize = 9\n\n        # Transparency for the legend (NOT USED CURRENTLY)\n        self.legendtrans = 0.25\n        # Wether indicators have a leged displaey in their charts\n        self.legendind = True\n        # Location of the legend for indicators (see matplotlib)\n        self.legendindloc = 'upper left'\n\n        # Plot the last value of a line after the Object name\n        self.linevalues = True\n\n        # Plot a tag at the end of each line with the last value\n        self.valuetags = True\n\n        # Default color for horizontal lines (see plotinfo.plothlines)\n        self.hlinescolor = '0.66'  # shade of gray\n        # Default style for horizontal lines\n        self.hlinesstyle = '--'\n        # Default width for horizontal lines\n        self.hlineswidth = 1.0\n\n        # Default color scheme: Tableau 10\n        self.lcolors = tableau10\n\n        # strftime Format string for the display of ticks on the x axis\n        self.fmt_x_ticks = None\n\n        # strftime Format string for the display of data points values\n        self.fmt_x_data = None` \n```", "```py\n`def color(self, idx)` \n```", "```py\n`tab10_index = [3, 0, 2, 1, 2, 4, 5, 6, 7, 8, 9]` \n```"]