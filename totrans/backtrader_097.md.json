["```py\n`class TradingCalendarBase(with_metaclass(MetaParams, object)):\n    def _nextday(self, day):\n  '''\n Returns the next trading day (datetime/date instance) after ``day``\n (datetime/date instance) and the isocalendar components\n\n The return value is a tuple with 2 components: (nextday, (y, w, d))\n where (y, w, d)\n '''\n        raise NotImplementedError\n\n    def schedule(self, day):\n  '''\n Returns a tuple with the opening and closing times (``datetime.time``)\n for the given ``date`` (``datetime/date`` instance)\n '''\n        raise NotImplementedError` \n```", "```py\n`pip install pandas_market_calendars` \n```", "```py\n`class PandasMarketCalendar(TradingCalendarBase):\n  '''\n Wrapper of ``pandas_market_calendars`` for a trading calendar. The package\n ``pandas_market_calendar`` must be installed\n\n Params:\n\n - ``calendar`` (default ``None``)\n\n The param ``calendar`` accepts the following:\n\n - string: the name of one of the calendars supported, for example\n `NYSE`. The wrapper will attempt to get a calendar instance\n\n - calendar instance: as returned by ``get_calendar('NYSE')``\n\n - ``cachesize`` (default ``365``)\n\n Number of days to cache in advance for lookup\n\n See also:\n\n - https://github.com/rsheftel/pandas_market_calendars\n\n - http://pandas-market-calendars.readthedocs.io/\n\n '''\n    params = (\n        ('calendar', None),  # A pandas_market_calendars instance or exch name\n        ('cachesize', 365),  # Number of days to cache in advance\n    )` \n```", "```py\n`class TradingCalendar(TradingCalendarBase):\n  '''\n Wrapper of ``pandas_market_calendars`` for a trading calendar. The package\n ``pandas_market_calendar`` must be installed\n\n Params:\n\n - ``open`` (default ``time.min``)\n\n Regular start of the session\n\n - ``close`` (default ``time.max``)\n\n Regular end of the session\n\n - ``holidays`` (default ``[]``)\n\n List of non-trading days (``datetime.datetime`` instances)\n\n - ``earlydays`` (default ``[]``)\n\n List of tuples determining the date and opening/closing times of days\n which do not conform to the regular trading hours where each tuple has\n (``datetime.datetime``, ``datetime.time``, ``datetime.time`` )\n\n - ``offdays`` (default ``ISOWEEKEND``)\n\n A list of weekdays in ISO format (Monday: 1 -> Sunday: 7) in which the\n market doesn't trade. This is usually Saturday and Sunday and hence the\n default\n\n '''\n    params = (\n        ('open', time.min),\n        ('close', _time_max),\n        ('holidays', []),  # list of non trading days (date)\n        ('earlydays', []),  # list of tuples (date, opentime, closetime)\n        ('offdays', ISOWEEKEND),  # list of non trading (isoweekdays)\n    )` \n```", "```py\n`def addcalendar(self, cal):\n  '''Adds a global trading calendar to the system. Individual data feeds\n may have separate calendars which override the global one\n\n ``cal`` can be an instance of ``TradingCalendar`` a string or an\n instance of ``pandas_market_calendars``. A string will be will be\n instantiated as a ``PandasMarketCalendar`` (which needs the module\n ``pandas_market_calendar`` installed in the system.\n\n If a subclass of `TradingCalendarBase` is passed (not an instance) it\n will be instantiated\n '''` \n```", "```py\n`...\ndata = bt.feeds.YahooFinanceData(dataname='YHOO', calendar='NYSE', ...)\ncerebro.adddata(data)\n...` \n```", "```py\n`$ ./tcal.py\n\n...\nStrategy len 56 datetime 2016-03-23 Data0 len 56 datetime 2016-03-23 Data1 len 11 datetime 2016-03-18\nStrategy len 57 datetime 2016-03-24 Data0 len 57 datetime 2016-03-24 Data1 len 11 datetime 2016-03-18\nStrategy len 58 datetime 2016-03-28 Data0 len 58 datetime 2016-03-28 Data1 len 12 datetime 2016-03-24\n...` \n```", "```py\n`$ ./tcal.py --plot --pandascal NYSE\n\n...\nStrategy len 56 datetime 2016-03-23 Data0 len 56 datetime 2016-03-23 Data1 len 11 datetime 2016-03-18\nStrategy len 57 datetime 2016-03-24 Data0 len 57 datetime 2016-03-24 Data1 len 12 datetime 2016-03-24\nStrategy len 58 datetime 2016-03-28 Data0 len 58 datetime 2016-03-28 Data1 len 12 datetime 2016-03-24\n...` \n```", "```py\n`class NYSE_2016(bt.TradingCalendar):\n    params = dict(\n        holidays=[\n            datetime.date(2016, 1, 1),\n            datetime.date(2016, 1, 18),\n            datetime.date(2016, 2, 15),\n            datetime.date(2016, 3, 25),\n            datetime.date(2016, 5, 30),\n            datetime.date(2016, 7, 4),\n            datetime.date(2016, 9, 5),\n            datetime.date(2016, 11, 24),\n            datetime.date(2016, 12, 26),\n        ]\n    )` \n```", "```py\n`$ ./tcal.py --plot --owncal\n\n...\nStrategy len 56 datetime 2016-03-23 Data0 len 56 datetime 2016-03-23 Data1 len 11 datetime 2016-03-18\nStrategy len 57 datetime 2016-03-24 Data0 len 57 datetime 2016-03-24 Data1 len 12 datetime 2016-03-24\nStrategy len 58 datetime 2016-03-28 Data0 len 58 datetime 2016-03-28 Data1 len 12 datetime 2016-03-24\n...` \n```", "```py\n`$ ./tcal-intra.py\n\n...\nStrategy len 6838 datetime 2016-11-25 18:00:00 Data0 len 6838 datetime 2016-11-25 13:00:00 Data1 len 21 datetime 2016-11-23 16:00:00\nStrategy len 6839 datetime 2016-11-25 18:01:00 Data0 len 6839 datetime 2016-11-25 13:01:00 Data1 len 21 datetime 20 16-11-23 16:00:00\nStrategy len 6840 datetime 2016-11-28 14:31:00 Data0 len 6840 datetime 2016-11-28 09:31:00 Data1 len 22 datetime 2016-11-25 16:00:00\nStrategy len 6841 datetime 2016-11-28 14:32:00 Data0 len 6841 datetime 2016-11-28 09:32:00 Data1 len 22 datetime 2016-11-25 16:00:00\n...` \n```", "```py\n`$ ./tcal-intra.py --pandascal NYSE\n\n...\nStrategy len 6838 datetime 2016-11-25 18:00:00 Data0 len 6838 datetime 2016-11-25 13:00:00 Data1 len 15 datetime 2016-11-25 13:00:00\nStrategy len 6839 datetime 2016-11-25 18:01:00 Data0 len 6839 datetime 2016-11-25 13:01:00 Data1 len 15 datetime 2016-11-25 13:00:00\nStrategy len 6840 datetime 2016-11-28 14:31:00 Data0 len 6840 datetime 2016-11-28 09:31:00 Data1 len 15 datetime 2016-11-25 13:00:00\nStrategy len 6841 datetime 2016-11-28 14:32:00 Data0 len 6841 datetime 2016-11-28 09:32:00 Data1 len 15 datetime 2016-11-25 13:00:00\n...` \n```", "```py\n`class NYSE_2016(bt.TradingCalendar):\n    params = dict(\n        holidays=[\n            datetime.date(2016, 1, 1),\n            datetime.date(2016, 1, 18),\n            datetime.date(2016, 2, 15),\n            datetime.date(2016, 3, 25),\n            datetime.date(2016, 5, 30),\n            datetime.date(2016, 7, 4),\n            datetime.date(2016, 9, 5),\n            datetime.date(2016, 11, 24),\n            datetime.date(2016, 12, 26),\n        ],\n        earlydays=[\n            (datetime.date(2016, 11, 25),\n             datetime.time(9, 30), datetime.time(13, 1))\n        ],\n        open=datetime.time(9, 30),\n        close=datetime.time(16, 0),\n    )` \n```", "```py\n`$ ./tcal-intra.py --owncal\n\n...\nStrategy len 6838 datetime 2016-11-25 18:00:00 Data0 len 6838 datetime 2016-11-25 13:00:00 Data1 len 15 datetime 2016-11-23 16:00:00\nStrategy len 6839 datetime 2016-11-25 18:01:00 Data0 len 6839 datetime 2016-11-25 13:01:00 Data1 len 16 datetime 2016-11-25 13:01:00\nStrategy len 6840 datetime 2016-11-28 14:31:00 Data0 len 6840 datetime 2016-11-28 09:31:00 Data1 len 16 datetime 2016-11-25 13:01:00\nStrategy len 6841 datetime 2016-11-28 14:32:00 Data0 len 6841 datetime 2016-11-28 09:32:00 Data1 len 16 datetime 2016-11-25 13:01:00\n...` \n```", "```py\n`- ``tz`` (default: ``None``)\n\n  Adds a global timezone for strategies. The argument ``tz`` can be\n\n    - ``None``: in this case the datetime displayed by strategies will be\n      in UTC, which has been always the standard behavior\n\n    - ``pytz`` instance. It will be used as such to convert UTC times to\n      the chosen timezone\n\n    - ``string``. Instantiating a ``pytz`` instance will be attempted.\n\n    - ``integer``. Use, for the strategy, the same timezone as the\n      corresponding ``data`` in the ``self.datas`` iterable (``0`` would\n      use the timezone from ``data0``)` \n```", "```py\n`def addtz(self, tz):\n  '''\n This can also be done with the parameter ``tz``\n\n Adds a global timezone for strategies. The argument ``tz`` can be\n\n - ``None``: in this case the datetime displayed by strategies will be\n in UTC, which has been always the standard behavior\n\n - ``pytz`` instance. It will be used as such to convert UTC times to\n the chosen timezone\n\n - ``string``. Instantiating a ``pytz`` instance will be attempted.\n\n - ``integer``. Use, for the strategy, the same timezone as the\n corresponding ``data`` in the ``self.datas`` iterable (``0`` would\n use the timezone from ``data0``)\n\n '''` \n```", "```py\n`$ ./tcal-intra.py --owncal --cerebro tz=0\n\n...\nStrategy len 6838 datetime 2016-11-25 13:00:00 Data0 len 6838 datetime 2016-11-25 13:00:00 Data1 len 15 datetime 2016-11-23 16:00:00\nStrategy len 6839 datetime 2016-11-25 13:01:00 Data0 len 6839 datetime 2016-11-25 13:01:00 Data1 len 16 datetime 2016-11-25 13:01:00\nStrategy len 6840 datetime 2016-11-28 09:31:00 Data0 len 6840 datetime 2016-11-28 09:31:00 Data1 len 16 datetime 2016-11-25 13:01:00\nStrategy len 6841 datetime 2016-11-28 09:32:00 Data0 len 6841 datetime 2016-11-28 09:32:00 Data1 len 16 datetime 2016-11-25 13:01:00\n...` \n```", "```py\n`$ ./tcal.py --help\nusage: tcal.py [-h] [--data0 DATA0] [--offline] [--fromdate FROMDATE]\n               [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n               [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n               [--pandascal PANDASCAL | --owncal]\n               [--timeframe {Weeks,Months,Years}]\n\nTrading Calendar Sample\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data to read in (default: YHOO)\n  --offline             Read from disk with same name as ticker (default:\n                        False)\n  --fromdate FROMDATE   Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                        2016-01-01)\n  --todate TODATE       Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                        2016-12-31)\n  --cerebro kwargs      kwargs in key=value format (default: )\n  --broker kwargs       kwargs in key=value format (default: )\n  --sizer kwargs        kwargs in key=value format (default: )\n  --strat kwargs        kwargs in key=value format (default: )\n  --plot [kwargs]       kwargs in key=value format (default: )\n  --pandascal PANDASCAL\n                        Name of trading calendar to use (default: )\n  --owncal              Apply custom NYSE 2016 calendar (default: False)\n  --timeframe {Weeks,Months,Years}\n                        Timeframe to resample to (default: Weeks)` \n```", "```py\n`$ ./tcal-intra.py --help\nusage: tcal-intra.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                     [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n                     [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n                     [--pandascal PANDASCAL | --owncal] [--timeframe {Days}]\n\nTrading Calendar Sample\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data to read in (default: yhoo-2016-11.csv)\n  --fromdate FROMDATE   Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                        2016-01-01)\n  --todate TODATE       Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                        2016-12-31)\n  --cerebro kwargs      kwargs in key=value format (default: )\n  --broker kwargs       kwargs in key=value format (default: )\n  --sizer kwargs        kwargs in key=value format (default: )\n  --strat kwargs        kwargs in key=value format (default: )\n  --plot [kwargs]       kwargs in key=value format (default: )\n  --pandascal PANDASCAL\n                        Name of trading calendar to use (default: )\n  --owncal              Apply custom NYSE 2016 calendar (default: False)\n  --timeframe {Days}    Timeframe to resample to (default: Days)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass NYSE_2016(bt.TradingCalendar):\n    params = dict(\n        holidays=[\n            datetime.date(2016, 1, 1),\n            datetime.date(2016, 1, 18),\n            datetime.date(2016, 2, 15),\n            datetime.date(2016, 3, 25),\n            datetime.date(2016, 5, 30),\n            datetime.date(2016, 7, 4),\n            datetime.date(2016, 9, 5),\n            datetime.date(2016, 11, 24),\n            datetime.date(2016, 12, 26),\n        ]\n    )\n\nclass St(bt.Strategy):\n    params = dict(\n    )\n\n    def __init__(self):\n        pass\n\n    def start(self):\n        self.t0 = datetime.datetime.utcnow()\n\n    def stop(self):\n        t1 = datetime.datetime.utcnow()\n        print('Duration:', t1 - self.t0)\n\n    def prenext(self):\n        self.next()\n\n    def next(self):\n        print('Strategy len {} datetime {}'.format(\n            len(self), self.datetime.date()), end=' ')\n\n        print('Data0 len {} datetime {}'.format(\n            len(self.data0), self.data0.datetime.date()), end=' ')\n\n        if len(self.data1):\n            print('Data1 len {} datetime {}'.format(\n                len(self.data1), self.data1.datetime.date()))\n        else:\n            print()\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    YahooData = bt.feeds.YahooFinanceData\n    if args.offline:\n        YahooData = bt.feeds.YahooFinanceCSVData  # change to read file\n\n    # Data feed\n    data0 = YahooData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    d1 = cerebro.resampledata(data0,\n                              timeframe=getattr(bt.TimeFrame, args.timeframe))\n    d1.plotinfo.plotmaster = data0\n    d1.plotinfo.sameaxis = True\n\n    if args.pandascal:\n        cerebro.addcalendar(args.pandascal)\n    elif args.owncal:\n        cerebro.addcalendar(NYSE_2016)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Trading Calendar Sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='YHOO',\n                        required=False, help='Data to read in')\n\n    parser.add_argument('--offline', required=False, action='store_true',\n                        help='Read from disk with same name as ticker')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='2016-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='2016-12-31',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    pgroup = parser.add_mutually_exclusive_group(required=False)\n    pgroup.add_argument('--pandascal', required=False, action='store',\n                        default='', help='Name of trading calendar to use')\n\n    pgroup.add_argument('--owncal', required=False, action='store_true',\n                        help='Apply custom NYSE 2016 calendar')\n\n    parser.add_argument('--timeframe', required=False, action='store',\n                        default='Weeks', choices=['Weeks', 'Months', 'Years'],\n                        help='Timeframe to resample to')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass NYSE_2016(bt.TradingCalendar):\n    params = dict(\n        holidays=[\n            datetime.date(2016, 1, 1),\n            datetime.date(2016, 1, 18),\n            datetime.date(2016, 2, 15),\n            datetime.date(2016, 3, 25),\n            datetime.date(2016, 5, 30),\n            datetime.date(2016, 7, 4),\n            datetime.date(2016, 9, 5),\n            datetime.date(2016, 11, 24),\n            datetime.date(2016, 12, 26),\n        ],\n        earlydays=[\n            (datetime.date(2016, 11, 25),\n             datetime.time(9, 30), datetime.time(13, 1))\n        ],\n        open=datetime.time(9, 30),\n        close=datetime.time(16, 0),\n    )\n\nclass St(bt.Strategy):\n    params = dict(\n    )\n\n    def __init__(self):\n        pass\n\n    def prenext(self):\n        self.next()\n\n    def next(self):\n        print('Strategy len {} datetime {}'.format(\n            len(self), self.datetime.datetime()), end=' ')\n\n        print('Data0 len {} datetime {}'.format(\n            len(self.data0), self.data0.datetime.datetime()), end=' ')\n\n        if len(self.data1):\n            print('Data1 len {} datetime {}'.format(\n                len(self.data1), self.data1.datetime.datetime()))\n        else:\n            print()\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    # kwargs = dict(tz='US/Eastern')\n    # import pytz\n    # tz = tzinput = pytz.timezone('Europe/Berlin')\n    tzinput = 'Europe/Berlin'\n    # tz = tzinput\n    tz = 'US/Eastern'\n    kwargs = dict(tzinput=tzinput, tz=tz)\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    d1 = cerebro.resampledata(data0,\n                              timeframe=getattr(bt.TimeFrame, args.timeframe))\n    # d1.plotinfo.plotmaster = data0\n    # d1.plotinfo.sameaxis = False\n\n    if args.pandascal:\n        cerebro.addcalendar(args.pandascal)\n    elif args.owncal:\n        cerebro.addcalendar(NYSE_2016())  # or NYSE_2016() to pass an instance\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Trading Calendar Sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='yhoo-2016-11.csv',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='2016-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='2016-12-31',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    pgroup = parser.add_mutually_exclusive_group(required=False)\n    pgroup.add_argument('--pandascal', required=False, action='store',\n                        default='', help='Name of trading calendar to use')\n\n    pgroup.add_argument('--owncal', required=False, action='store_true',\n                        help='Apply custom NYSE 2016 calendar')\n\n    parser.add_argument('--timeframe', required=False, action='store',\n                        default='Days', choices=['Days'],\n                        help='Timeframe to resample to')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]