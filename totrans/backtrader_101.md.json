["```py\n`import numpy as np\nimport pandas as pd\n\nCOLUMNS = ['open', 'high', 'low', 'close', 'volume', 'openinterest']\nCANDLES = 20000\nSTOCKS\n\ndateindex = pd.date_range(start='2010-01-01', periods=CANDLES, freq='15min')\n\nfor i in range(STOCKS):\n\n    data = np.random.randint(10, 20, size=(CANDLES, len(COLUMNS)))\n    df = pd.DataFrame(data * 1.01, dateindex, columns=COLUMNS)\n    df = df.rename_axis('datetime')\n    df.to_csv('candles{:02d}.csv'.format(i))` \n```", "```py\n`$ ./two-million-candles.py\nCerebro Start Time:          2019-10-26 08:33:15.563088\nStrat Init Time:             2019-10-26 08:34:31.845349\nTime Loading Data Feeds:     76.28\nNumber of data feeds:        100\nStrat Start Time:            2019-10-26 08:34:31.864349\nPre-Next Start Time:         2019-10-26 08:34:32.670352\nTime Calculating Indicators: 0.81\nNext Start Time:             2019-10-26 08:34:32.671351\nStrat warm-up period Time:   0.00\nTime to Strat Next Logic:    77.11\nEnd Time:                    2019-10-26 08:35:31.493349\nTime in Strategy Next Logic: 58.82\nTotal Time in Strategy:      58.82\nTotal Time:                  135.93\nLength of data feeds:        20000` \n```", "```py\n`$ ./two-million-candles.py\nCerebro Start Time:          2019-10-26 08:39:42.958689\nStrat Init Time:             2019-10-26 08:40:31.260691\nTime Loading Data Feeds:     48.30\nNumber of data feeds:        100\nStrat Start Time:            2019-10-26 08:40:31.338692\nPre-Next Start Time:         2019-10-26 08:40:31.612688\nTime Calculating Indicators: 0.27\nNext Start Time:             2019-10-26 08:40:31.612688\nStrat warm-up period Time:   0.00\nTime to Strat Next Logic:    48.65\nEnd Time:                    2019-10-26 08:40:40.150689\nTime in Strategy Next Logic: 8.54\nTotal Time in Strategy:      8.54\nTotal Time:                  57.19\nLength of data feeds:        20000` \n```", "```py\n ``True` or `1`: all \u201clines\u201d objects reduce memory usage to the\n  automatically calculated minimum period.\n\n  If a Simple Moving Average has a period of 30, the underlying data\n  will have always a running buffer of 30 bars to allow the\n  calculation of the Simple Moving Average\n\n  * This setting will deactivate `preload` and `runonce`\n\n  * Using this setting also deactivates **plotting**` \n```", "```py\n`$ ./two-million-candles.py --cerebro exactbars=False,stdstats=False\nCerebro Start Time:          2019-10-26 08:37:08.014348\nStrat Init Time:             2019-10-26 08:38:21.850392\nTime Loading Data Feeds:     73.84\nNumber of data feeds:        100\nStrat Start Time:            2019-10-26 08:38:21.851394\nPre-Next Start Time:         2019-10-26 08:38:21.857393\nTime Calculating Indicators: 0.01\nNext Start Time:             2019-10-26 08:38:21.857393\nStrat warm-up period Time:   0.00\nTime to Strat Next Logic:    73.84\nEnd Time:                    2019-10-26 08:39:02.334936\nTime in Strategy Next Logic: 40.48\nTotal Time in Strategy:      40.48\nTotal Time:                  114.32\nLength of data feeds:        20000` \n```", "```py\n`$ ./two-million-candles.py --cerebro exactbars=True,stdstats=False\nCerebro Start Time:          2019-10-26 08:44:32.309689\nStrat Init Time:             2019-10-26 08:44:32.406689\nTime Loading Data Feeds:     0.10\nNumber of data feeds:        100\nStrat Start Time:            2019-10-26 08:44:32.409689\nPre-Next Start Time:         2019-10-26 08:44:32.451689\nTime Calculating Indicators: 0.04\nNext Start Time:             2019-10-26 08:44:32.451689\nStrat warm-up period Time:   0.00\nTime to Strat Next Logic:    0.14\nEnd Time:                    2019-10-26 08:45:38.918693\nTime in Strategy Next Logic: 66.47\nTotal Time in Strategy:      66.47\nTotal Time:                  66.61\nLength of data feeds:        20000` \n```", "```py\n`$ ./two-million-candles.py --strat indicators=True,trade=True\nCerebro Start Time:          2019-10-26 08:57:36.114415\nStrat Init Time:             2019-10-26 08:58:25.569448\nTime Loading Data Feeds:     49.46\nNumber of data feeds:        100\nTotal indicators:            300\nMoving Average to be used:   SMA\nIndicators period 1:         10\nIndicators period 2:         50\nStrat Start Time:            2019-10-26 08:58:26.230445\nPre-Next Start Time:         2019-10-26 08:58:40.850447\nTime Calculating Indicators: 14.62\nNext Start Time:             2019-10-26 08:58:41.005446\nStrat warm-up period Time:   0.15\nTime to Strat Next Logic:    64.89\nEnd Time:                    2019-10-26 09:00:13.057955\nTime in Strategy Next Logic: 92.05\nTotal Time in Strategy:      92.21\nTotal Time:                  156.94\nLength of data feeds:        20000` \n```", "```py\n`$ ./two-million-candles.py --strat indicators=True\nCerebro Start Time:          2019-10-26 09:05:55.967969\nStrat Init Time:             2019-10-26 09:06:44.072969\nTime Loading Data Feeds:     48.10\nNumber of data feeds:        100\nTotal indicators:            300\nMoving Average to be used:   SMA\nIndicators period 1:         10\nIndicators period 2:         50\nStrat Start Time:            2019-10-26 09:06:44.779971\nPre-Next Start Time:         2019-10-26 09:06:59.208969\nTime Calculating Indicators: 14.43\nNext Start Time:             2019-10-26 09:06:59.360969\nStrat warm-up period Time:   0.15\nTime to Strat Next Logic:    63.39\nEnd Time:                    2019-10-26 09:07:09.151838\nTime in Strategy Next Logic: 9.79\nTotal Time in Strategy:      9.94\nTotal Time:                  73.18\nLength of data feeds:        20000` \n```", "```py\n`#!/usr/bin/env python\n# -*- coding: utf-8; py-indent-offset:4 -*-\n###############################################################################\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        indicators=False,\n        indperiod1=10,\n        indperiod2=50,\n        indicator=bt.ind.SMA,\n        trade=False,\n    )\n\n    def __init__(self):\n        self.dtinit = datetime.datetime.now()\n        print('Strat Init Time: {}'.format(self.dtinit))\n        loaddata = (self.dtinit - self.env.dtcerebro).total_seconds()\n        print('Time Loading Data Feeds: {:.2f}'.format(loaddata))\n\n        print('Number of data feeds: {}'.format(len(self.datas)))\n        if self.p.indicators:\n            total_ind = self.p.indicators * 3 * len(self.datas)\n            print('Total indicators: {}'.format(total_ind))\n            indname = self.p.indicator.__name__\n            print('Moving Average to be used: {}'.format(indname))\n            print('Indicators period 1: {}'.format(self.p.indperiod1))\n            print('Indicators period 2: {}'.format(self.p.indperiod2))\n\n            self.macross = {}\n            for d in self.datas:\n                ma1 = self.p.indicator(d, period=self.p.indperiod1)\n                ma2 = self.p.indicator(d, period=self.p.indperiod2)\n                self.macross[d] = bt.ind.CrossOver(ma1, ma2)\n\n    def start(self):\n        self.dtstart = datetime.datetime.now()\n        print('Strat Start Time: {}'.format(self.dtstart))\n\n    def prenext(self):\n        if len(self.data0) == 1:  # only 1st time\n            self.dtprenext = datetime.datetime.now()\n            print('Pre-Next Start Time: {}'.format(self.dtprenext))\n            indcalc = (self.dtprenext - self.dtstart).total_seconds()\n            print('Time Calculating Indicators: {:.2f}'.format(indcalc))\n\n    def nextstart(self):\n        if len(self.data0) == 1:  # there was no prenext\n            self.dtprenext = datetime.datetime.now()\n            print('Pre-Next Start Time: {}'.format(self.dtprenext))\n            indcalc = (self.dtprenext - self.dtstart).total_seconds()\n            print('Time Calculating Indicators: {:.2f}'.format(indcalc))\n\n        self.dtnextstart = datetime.datetime.now()\n        print('Next Start Time: {}'.format(self.dtnextstart))\n        warmup = (self.dtnextstart - self.dtprenext).total_seconds()\n        print('Strat warm-up period Time: {:.2f}'.format(warmup))\n        nextstart = (self.dtnextstart - self.env.dtcerebro).total_seconds()\n        print('Time to Strat Next Logic: {:.2f}'.format(nextstart))\n        self.next()\n\n    def next(self):\n        if not self.p.trade:\n            return\n\n        for d, macross in self.macross.items():\n            if macross > 0:\n                self.order_target_size(data=d, target=1)\n            elif macross < 0:\n                self.order_target_size(data=d, target=-1)\n\n    def stop(self):\n        dtstop = datetime.datetime.now()\n        print('End Time: {}'.format(dtstop))\n        nexttime = (dtstop - self.dtnextstart).total_seconds()\n        print('Time in Strategy Next Logic: {:.2f}'.format(nexttime))\n        strattime = (dtstop - self.dtprenext).total_seconds()\n        print('Total Time in Strategy: {:.2f}'.format(strattime))\n        totaltime = (dtstop - self.env.dtcerebro).total_seconds()\n        print('Total Time: {:.2f}'.format(totaltime))\n        print('Length of data feeds: {}'.format(len(self.data)))\n\ndef run(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    datakwargs = dict(timeframe=bt.TimeFrame.Minutes, compression=15)\n    for i in range(args.numfiles):\n        dataname = 'candles{:02d}.csv'.format(i)\n        data = bt.feeds.GenericCSVData(dataname=dataname, **datakwargs)\n        cerebro.adddata(data)\n\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.dtcerebro = dt0 = datetime.datetime.now()\n    print('Cerebro Start Time: {}'.format(dt0))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Backtrader Basic Script'\n        )\n    )\n\n    parser.add_argument('--numfiles', required=False, default=100, type=int,\n                        help='Number of files to rea')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', '--strategy', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    run()` \n```"]