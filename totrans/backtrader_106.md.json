["```py\n`class MFI_Canonical(bt.Indicator):\n    lines = ('mfi',)\n    params = dict(period=14)\n\n    def __init__(self):\n        tprice = (self.data.close + self.data.low + self.data.high) / 3.0\n        mfraw = tprice * self.data.volume\n        ...` \n```", "```py\n`class MyMFIStrategy(bt.Strategy):\n\n    def __init__(self):\n        mfi = bt.MFI_Canonical(self.data)` \n```", "```py\n`class MyMFIStrategy2(bt.Strategy):\n\n    def __init__(self):\n        wclose = self.data.close * 5.0\n        mfi = bt.MFI_Canonical(self.data.high, self.data.low,\n                               wclose, self.data.volume)` \n```", "```pypython class MFI_MultipleInputs(bt.Indicator): lines = ('mfi',) params = dict(period=14)\n\n```", "```py\n\n```", "```py\n`class MyMFIStrategy2(bt.Strategy):\n\n    def __init__(self):\n        MFI_Canonical(self.data)\n        MFI_MultipleInputs(self.data, plotname='MFI Single Input')\n        MFI_MultipleInputs(self.data.high,\n                           self.data.low,\n                           self.data.close,\n                           self.data.volume,\n                           plotname='MFI Multiple Inputs')` \n```", "```py\n`class MyMFIStrategy2(bt.Strategy):\n    def __init__(self):\n\n        MFI_MultipleInputs(self.data)\n        MFI_MultipleInputs(self.data.high,\n                           self.data.low,\n                           self.data.close * 5.0,\n                           self.data.volume,\n                           plotname='MFI Close * 5.0')` \n```"]