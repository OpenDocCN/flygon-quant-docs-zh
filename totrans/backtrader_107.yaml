- en: Canonical vs Non-Canonical Indicators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规范与非规范指标
- en: 原文：[https://www.backtrader.com/blog/2019-07-08-canonical-or-not/canonical-or-not/](https://www.backtrader.com/blog/2019-07-08-canonical-or-not/canonical-or-not/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/blog/2019-07-08-canonical-or-not/canonical-or-not/](https://www.backtrader.com/blog/2019-07-08-canonical-or-not/canonical-or-not/)
- en: 'The question has shown up several times more or less like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题已经出现了几次，或多或少地是这样的：
- en: How is this or that best/canonically implemented with *backtrader*?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用*backtrader*最佳/规范地实现这个或那个？
- en: 'Being one of the goals of *backtrader* to be **flexible** to support as many
    situations and use cases as possible, the answer is easy: "In at least a couple
    of ways". Summarized for indicators, for which the question most often happens:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为*backtrader*的目标之一是**灵活**地支持尽可能多的情况和用例，答案很简单：“至少有几种方法”。总结一下指标，这是最常见的问题：
- en: 100% declarative in the `__init__` method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__`方法中的100%声明'
- en: 100% step-by-step in the `next` method
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`方法中的100%逐步操作'
- en: Mixing both of the above for complex scenarios in which the declarative part
    cannot cover all needed calculations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在复杂情况下，将上述两者混合在一起，以满足声明部分无法覆盖所有所需计算的需求。
- en: A quick view of the built-in indicators in *backtrader* reveals that all of
    them are implemented in a *declarative* manner. The reasons
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对*backtrader*内置指标的快速查看表明，它们都是以*声明*方式实现的。原因是
- en: Easier to do
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更容易做到
- en: Easier to read
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更易读
- en: More elegant
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更优雅
- en: Vectorized and even-based implementations are automatically managed
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矢量化和基于事件的实现会自动管理
- en: What ?!?! Auto-implemented Vectorization??
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么？！？！自动实现矢量化？？
- en: Yes. If an indicator is implemented entirely inside the `__init_` method, the
    magic of *metaclasses* and operator overloading in Python will deliver the following
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。如果一个指标完全在`__init_`方法中实现，Python中的*元类*和运算符重载的魔法将产生以下结果
- en: A vectorized implementation (default setting when running a backtest)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量化实现（在运行回测时的默认设置）
- en: An event-based implementation (for example for live trading)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于事件的实现（例如用于实时交易）
- en: 'On the other hand and if any part of an indicator which is implemented in the
    `next` method:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果指标的任何部分在`next`方法中实现：
- en: This is the code directly used for an event-based run.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是直接用于基于事件的运行的代码。
- en: Vectorization will be simulated by calling the `next` method in the background
    for each data point
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量化将通过在后台为每个数据点调用`next`方法来模拟
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This means that even if a particular indicator does not have a vectorized implementation,
    all others which have it, will still run vectorized
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着即使某个特定指标没有矢量化实现，所有其他具有矢量化实现的指标仍将以矢量化方式运行
- en: 'Money Flow Index: an Example'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资金流指数：一个例子
- en: Community User *[@Rodrigo Brito](https://community.backtrader.com/user/rodrigo-brito)*
    posted a version of the *"Money Flow Index*" indicator which used the `next` method
    for the implementation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 社区用户*[@Rodrigo Brito](https://community.backtrader.com/user/rodrigo-brito)*发布了一个使用`next`方法进行实现的*"资金流指数（Money
    Flow Index）"*指标的版本。
- en: The code
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 代码
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Kept as originally posted including the long lines for which one has to scroll
    horizontally
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 保持原样发布，包括需要水平滚动的长行
- en: '*[@Rodrigo Brito](https://community.backtrader.com/user/rodrigo-brito)* already
    notices that the usage of temporary lines is (all lines except `mfi`) is something
    which probably admits optimization. Indeed, but in the humble opinion of the author*,
    actually everything does admit a bit of optimization.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*[@Rodrigo Brito](https://community.backtrader.com/user/rodrigo-brito)* 已经注意到临时线条的使用（除了`mfi`之外的所有线条）可能需要优化。确实，但在作者的谦逊意见中，实际上一切都可以稍加优化。'
- en: 'To have common working grounds, one can use the *"Money Flow Index"* definition
    by *StockCharts* and see that the implementation above is good. Here is the link:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有共同的工作基础，可以使用*StockCharts*的*"资金流指数（Money Flow Index）"*定义，并查看上述实现是否良好。这是链接：
- en: '[https://school.stockcharts.com/doku.php?id=technical_indicators:money_flow_index_mfi](https://school.stockcharts.com/doku.php?id=technical_indicators:money_flow_index_mfi)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://school.stockcharts.com/doku.php?id=technical_indicators:money_flow_index_mfi](https://school.stockcharts.com/doku.php?id=technical_indicators:money_flow_index_mfi)'
- en: With that in the hand, a quick **Canonical** implementation of the `MFI` indicator
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，一个快速的**规范**实现`MFI`指标
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One should be able to immediately notice
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 人们应该立即注意到
- en: A single line `mfi` is defined. No temporaries are there.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了一个单行`mfi`。没有临时变量。
- en: Things seem cleaner with no need for `[0]` array indexing
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有需要`[0]`数组索引的需求，看起来更干净
- en: No single `if` here or there
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里或那里没有单个`if`
- en: More compact whilst more readable
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更紧凑但更易读
- en: Should one plot a graph of both run against the same data set, it would look
    like this
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将两个运行对同一数据集绘制的图表，会是这样的
- en: '![MFI](../Images/f52a94b44874329c0bab85e2f90ecb25.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![MFI](../Images/f52a94b44874329c0bab85e2f90ecb25.png)'
- en: The chart shows that both the *Canonical* and *Non-Canonical* versions show
    the same values and development, except **at the beginning**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示，*规范*和*非规范*版本在**开始时**除外，显示相同的值和发展。
- en: The *Non-Canonical* version is delivering values from the very start
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非规范*版本从一开始就提供值'
- en: It is delivering non-meaningful values (100.0 until it deliver 1 extra value
    which is also not good) because it cannot properly deliver
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了无意义的值（100.0，直到提供额外的1个值，这也不好），因为它无法正确地提供
- en: 'In contrast:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下：
- en: The *Canonical* version automatically starts delivering values after the **minimum
    warm-up period** has been reached.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*规范*版本在达到**最短预热时间**后自动开始提供数值。'
- en: No human intervention has been needed (it must for sure be *"Articifial Intelligence"*
    or *"Machine Learning"*, ... **pun intended**)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有人为干预是必需的（肯定是 *"人工智能"* 或 *"机器学习"*，... **双关语**）
- en: See a close-up picture of the affected area
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 查看受影响区域的近景图片
- en: '![MFI Start Close up](../Images/2a9b9c7c6d51e9242307b3c3ed24b046.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![MFI开始近景](../Images/2a9b9c7c6d51e9242307b3c3ed24b046.png)'
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'One could of course try to alleviate this situation in the *Non-Canonical*
    version by doing this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以尝试通过以下方式缓解*非规范*版本的这种情况：
- en: Subclassing from `bt.ind.PeriodN` which already has a `period` param and knows
    what to do with it (and calling `super` during `__init__`)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从已经具有`period`参数并知道如何处理它的`bt.ind.PeriodN`子类化（并在`__init__`期间调用`super`）
- en: Notice also that the *Canonical* version does also account, like the step-by-step
    `next` code for a possible *division-by-zero* situation in the formula.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，*规范*版本也像逐步`next`代码一样考虑了公式中可能出现的*除零*情况。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: whereas this is the other way to do it
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种方法
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Instead of having many lines, a `return` statement and different assignments
    to the output *line*, there is s single declaration of the `mfiratio` calculation
    and a single assignment (following the *StockCharts* formula) to the output line
    `mfi`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 不是有很多行，一个`return`语句和对输出*行*的不同赋值，而是对`mfiratio`计算的单个声明和对输出行`mfi`的单个赋值（按照*StockCharts*公式）
- en: Conclusion
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'Hopefully, this sheds some light as to what the differences can be when implementing
    something in the *Canonical* (i.e.: *declarative* in `__init_`) or *Non-Canonical*
    way (step by step with array indexing in `next`)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能解释在*规范*（即：在`__init__`中声明式）或*非规范*方式（逐步进行，使用数组索引在`next`中）中实现某些内容时的差异。
