["```py\n`class BuyAndHold_1(bt.Strategy):\n    def start(self):\n        self.val_start = self.broker.get_cash()  # keep the starting cash\n\n    def nextstart(self):\n        # Buy all the available cash\n        size = int(self.broker.get_cash() / self.data)\n        self.buy(size=size)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.val_start) - 1.0\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))` \n```", "```py\n`class BuyAndHold_1(bt.Strategy):\n    def start(self):\n        self.val_start = self.broker.get_cash()  # keep the starting cash\n\n    def nextstart(self):\n        # Buy all the available cash\n        self.order_target_value(target=self.broker.get_cash())\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.val_start) - 1.0\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))` \n```", "```py\n `self.buy(data=the_desired_data, size=calculated_size)` \n```", "```py\n`$ ./buy-and-hold.py --bh-buy --plot\nROI:        34.50%` \n```", "```py\n`$ ./buy-and-hold.py --bh-target --plot\nROI:        34.50%` \n```", "```py\n`class BuyAndHold_More(bt.Strategy):\n    params = dict(\n        monthly_cash=1000.0,  # amount of cash to buy every month\n    )\n\n    def start(self):\n        self.cash_start = self.broker.get_cash()\n        self.val_start = 100.0\n\n        # Add a timer which will be called on the 1st trading day of the month\n        self.add_timer(\n            bt.timer.SESSION_END,  # when it will be called\n            monthdays=[1],  # called on the 1st day of the month\n            monthcarry=True,  # called on the 2nd day if the 1st is holiday\n        )\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        # Add the influx of monthly cash to the broker\n        self.broker.add_cash(self.p.monthly_cash)\n\n        # buy available cash\n        target_value = self.broker.get_value() + self.p.monthly_cash\n        self.order_target_value(target=target_value)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.cash_start) - 1.0\n        print('ROI: {:.2f}%'.format(self.roi))` \n```", "```py\n `# Add a timer which will be called on the 1st trading day of the month\n        self.add_timer(\n            bt.timer.SESSION_END,  # when it will be called\n            monthdays=[1],  # called on the 1st day of the month\n            monthcarry=True,  # called on the 2nd day if the 1st is holiday\n        )` \n```", "```py\n `def notify_timer(self, timer, when, *args, **kwargs):\n        # Add the influx of monthly cash to the broker\n        self.broker.add_cash(self.p.monthly_cash)\n\n        # buy available cash\n        target_value = self.broker.get_value() + self.p.monthly_cash\n        self.order_target_value(target=target_value)` \n```", "```py\n`$ ./buy-and-hold.py --bh-more --plot\nROI:        320.96%` \n```", "```py\n`$ ./buy-and-hold.py --bh-more --strat monthly_cash=5000.0\nROI:        1460.99%` \n```", "```py\n`class BuyAndHold_More_Fund(bt.Strategy):\n    params = dict(\n        monthly_cash=1000.0,  # amount of cash to buy every month\n    )\n\n    def start(self):\n        # Activate the fund mode and set the default value at 100\n        self.broker.set_fundmode(fundmode=True, fundstartval=100.00)\n\n        self.cash_start = self.broker.get_cash()\n        self.val_start = 100.0\n\n        # Add a timer which will be called on the 1st trading day of the month\n        self.add_timer(\n            bt.timer.SESSION_END,  # when it will be called\n            monthdays=[1],  # called on the 1st day of the month\n            monthcarry=True,  # called on the 2nd day if the 1st is holiday\n        )\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        # Add the influx of monthly cash to the broker\n        self.broker.add_cash(self.p.monthly_cash)\n\n        # buy available cash\n        target_value = self.broker.get_value() + self.p.monthly_cash\n        self.order_target_value(target=target_value)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() - self.cash_start) - 1.0\n        self.froi = self.broker.get_fundvalue() - self.val_start\n        print('ROI: {:.2f}%'.format(self.roi))\n        print('Fund Value: {:.2f}%'.format(self.froi))` \n```", "```py\n     `def start(self):\n            # Activate the fund mode and set the default value at 100\n            self.broker.set_fundmode(fundmode=True, fundstartval=100.00)` \n    ```", "```py\n     `def stop(self):\n            # calculate the actual returns\n            ...\n            self.froi = self.broker.get_fundvalue() - self.val_start` \n    ```", "```py\n`$ ./buy-and-hold.py --bh-more-fund --strat monthly_cash=5000 --plot\nROI:        1460.99%\nFund Value: 37.31%` \n```", "```py\n`import argparse\nimport datetime\n\nimport backtrader as bt\n\nclass BuyAndHold_Buy(bt.Strategy):\n    def start(self):\n        self.val_start = self.broker.get_cash()  # keep the starting cash\n\n    def nextstart(self):\n        # Buy all the available cash\n        size = int(self.broker.get_cash() / self.data)\n        self.buy(size=size)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.val_start) - 1.0\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))\n\nclass BuyAndHold_Target(bt.Strategy):\n    def start(self):\n        self.val_start = self.broker.get_cash()  # keep the starting cash\n\n    def nextstart(self):\n        # Buy all the available cash\n        size = int(self.broker.get_cash() / self.data)\n        self.buy(size=size)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.val_start) - 1.0\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))\n\nclass BuyAndHold_More(bt.Strategy):\n    params = dict(\n        monthly_cash=1000.0,  # amount of cash to buy every month\n    )\n\n    def start(self):\n        self.cash_start = self.broker.get_cash()\n        self.val_start = 100.0\n\n        # Add a timer which will be called on the 1st trading day of the month\n        self.add_timer(\n            bt.timer.SESSION_END,  # when it will be called\n            monthdays=[1],  # called on the 1st day of the month\n            monthcarry=True,  # called on the 2nd day if the 1st is holiday\n        )\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        # Add the influx of monthly cash to the broker\n        self.broker.add_cash(self.p.monthly_cash)\n\n        # buy available cash\n        target_value = self.broker.get_value() + self.p.monthly_cash\n        self.order_target_value(target=target_value)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.cash_start) - 1.0\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))\n\nclass BuyAndHold_More_Fund(bt.Strategy):\n    params = dict(\n        monthly_cash=1000.0,  # amount of cash to buy every month\n    )\n\n    def start(self):\n        # Activate the fund mode and set the default value at 100\n        self.broker.set_fundmode(fundmode=True, fundstartval=100.00)\n\n        self.cash_start = self.broker.get_cash()\n        self.val_start = 100.0\n\n        # Add a timer which will be called on the 1st trading day of the month\n        self.add_timer(\n            bt.timer.SESSION_END,  # when it will be called\n            monthdays=[1],  # called on the 1st day of the month\n            monthcarry=True,  # called on the 2nd day if the 1st is holiday\n        )\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        # Add the influx of monthly cash to the broker\n        self.broker.add_cash(self.p.monthly_cash)\n\n        # buy available cash\n        target_value = self.broker.get_value() + self.p.monthly_cash\n        self.order_target_value(target=target_value)\n\n    def stop(self):\n        # calculate the actual returns\n        self.roi = (self.broker.get_value() / self.cash_start) - 1.0\n        self.froi = self.broker.get_fundvalue() - self.val_start\n        print('ROI: {:.2f}%'.format(100.0 * self.roi))\n        print('Fund Value: {:.2f}%'.format(self.froi))\n\ndef run(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict(**eval('dict(' + args.dargs + ')'))\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, **kwargs)\n    cerebro.adddata(data)\n\n    # Strategy\n    if args.bh_buy:\n        stclass = BuyAndHold_Buy\n    elif args.bh_target:\n        stclass = BuyAndHold_Target\n    elif args.bh_more:\n        stclass = BuyAndHold_More\n    elif args.bh_more_fund:\n        stclass = BuyAndHold_More_Fund\n\n    cerebro.addstrategy(stclass, **eval('dict(' + args.strat + ')'))\n\n    # Broker\n    broker_kwargs = dict(coc=True)  # default is cheat-on-close active\n    broker_kwargs.update(eval('dict(' + args.broker + ')'))\n    cerebro.broker = bt.brokers.BackBroker(**broker_kwargs)\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Backtrader Basic Script'\n        )\n    )\n\n    parser.add_argument('--data', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    parser.add_argument('--dargs', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', '--strategy', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    pgroup = parser.add_mutually_exclusive_group(required=True)\n    pgroup.add_argument('--bh-buy', required=False, action='store_true',\n                        help='Buy and Hold with buy method')\n\n    pgroup.add_argument('--bh-target', required=False, action='store_true',\n                        help='Buy and Hold with order_target method')\n\n    pgroup.add_argument('--bh-more', required=False, action='store_true',\n                        help='Buy and Hold More')\n\n    pgroup.add_argument('--bh-more-fund', required=False, action='store_true',\n                        help='Buy and Hold More with Fund ROI')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    run()` \n```", "```py\n`$ ./buy-and-hold.py --help\nusage: buy-and-hold.py [-h] [--data DATA] [--dargs kwargs]\n                       [--fromdate FROMDATE] [--todate TODATE]\n                       [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                       [--strat kwargs] [--plot [kwargs]]\n                       (--bh-buy | --bh-target | --bh-more | --bh-more-fund)\n\nBacktrader Basic Script\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Data to read in (default:\n                        ../../datas/2005-2006-day-001.txt)\n  --dargs kwargs        kwargs in key=value format (default: )\n  --fromdate FROMDATE   Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE       Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs      kwargs in key=value format (default: )\n  --broker kwargs       kwargs in key=value format (default: )\n  --sizer kwargs        kwargs in key=value format (default: )\n  --strat kwargs, --strategy kwargs\n                        kwargs in key=value format (default: )\n  --plot [kwargs]       kwargs in key=value format (default: )\n  --bh-buy              Buy and Hold with buy method (default: False)\n  --bh-target           Buy and Hold with order_target method (default: False)\n  --bh-more             Buy and Hold More (default: False)\n  --bh-more-fund        Buy and Hold More with Fund ROI (default: False)` \n```"]