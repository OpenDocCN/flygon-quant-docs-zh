["```py\n`import backtrader as bt\n\nclass MyStrategy(bt.Strategy)\n    def __init__(self):\n        self.the_highest_high_15 = bt.ind.Highest(self.data.high, period=15)\n\n    def next(self):\n        if self.the_highest_high_15 > X:\n            print('ABOUT TO DO SOMETHING')` \n```", "```py\n`import backtrader as bt\n\nclass DynamicHighest(bt.Indicator):\n    lines = ('dyn_highest',)\n    params = dict(tradeopen=False)\n\n    def next(self):\n        if self.p.tradeopen:\n            self.lines.dyn_highest[0] = max(self.data[0], self.dyn_highest[-1])\n\nclass MyStrategy(bt.Strategy)\n    def __init__(self):\n        self.dyn_highest = DynamicHighest(self.data.high)\n\n    def notify_trade(self, trade):\n        self.dyn_highest.p.tradeopen = trade.isopen\n\n    def next(self):\n        if self.dyn_highest > X:\n            print('ABOUT TO DO SOMETHING')` \n```", "```py\n`import backtrader as bt\n\nclass DynamicHighest(bt.Indicator):\n    lines = ('dyn_highest',)\n\n    def __init__(self):\n        self._tradeopen = False\n\n    def tradeopen(self, yesno):\n        self._tradeopen = yesno\n\n    def next(self):\n        if self._tradeopen:\n            self.lines.dyn_highest[0] = max(self.data[0], self.dyn_highest[-1])\n\nclass MyStrategy(bt.Strategy)\n    def __init__(self):\n        self.dyn_highest = DynamicHighest(self.data.high)\n\n    def notify_trade(self, trade):\n        self.dyn_highest.tradeopen(trade.isopen)\n\n    def next(self):\n        if self.dyn_highest > X:\n            print('ABOUT TO DO SOMETHING')` \n```", "```py\n`import backtrader as bt\n\nclass DynamicFn(bt.Indicator):\n    lines = ('dyn_highest',)\n    params = dict(fn=None)\n\n    def __init__(self):\n        self._tradeopen = False\n        # Safeguard for not set function\n        self._fn = self.p.fn or lambda x, y: x\n\n    def tradeopen(self, yesno):\n        self._tradeopen = yesno\n\n    def next(self):\n        if self._tradeopen:\n            self.lines.dyn_highest[0] = self._fn(self.data[0], self.dyn_highest[-1])\n\nclass MyStrategy(bt.Strategy)\n    def __init__(self):\n        self.dyn_highest = DynamicHighest(self.data.high, fn=max)\n\n    def notify_trade(self, trade):\n        self.dyn_highest.tradeopen(trade.isopen)\n\n    def next(self):\n        if self.dyn_highest > X:\n            print('ABOUT TO DO SOMETHING')` \n```", "```py\n    `# Safeguard for not set function\n    self._fn = self.p.fn or lambda x, y: x` \n    ```", "```py\n    `self.lines.dyn_highest[0] = self._fn(self.data[0], self.dyn_highest[-1])` \n    ```", "```py\n    `self.dyn_highest = DynamicHighest(self.data.high, fn=max)` \n    ```"]