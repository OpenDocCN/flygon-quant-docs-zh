["```py\n`$ ./updaystreaks.py --data 099I-DJI --upstreak hilo=True\n            count  rank  upstreak       upleg   upleg %  drawdown  rel drawdown\n1987-01-02      1     1        13  219.069946  0.116193  0.017616      0.171407\n2017-02-09      2     2        12  822.109375  0.041074  0.001875      0.047548\n1970-11-19      3     2        12   66.900024  0.088986  0.010321      0.127055\n1929-06-20      4     2        12   32.000000  0.101716  0.031134      0.340625\n1991-12-18      5     3        11  315.100098  0.109167  0.011113      0.113614\n1955-01-18      6     3        11   22.200012  0.057290  0.014334      0.265765\n2017-07-25      7     4        10  622.289062  0.028949       NaN           NaN\n2013-03-01      8     4        10  488.959961  0.034801  0.008102      0.240919\n1996-11-04      9     4        10  348.839844  0.058148  0.004792      0.087605\n1973-07-16     10     4        10   53.600037  0.060695  0.095935      1.686565\n1959-11-17     11     4        10   31.599976  0.049945  0.011216      0.237342\n1959-06-24     12     4        10   36.200012  0.057680  0.020649      0.381215\n1955-08-23     13     4        10   25.400024  0.056344  0.008772      0.165353\n1933-03-03     14     4        10   12.600002  0.250497  0.142415      0.730158\n1920-12-29     15     4        10    8.099998  0.119118  0.022339      0.209876\n2016-07-08     16     5         9  778.378906  0.043688  0.016552      0.396003\n1996-05-08     17     5         9  334.369629  0.061755  0.002442      0.041990\n1989-07-03     18     5         9  141.890137  0.058804  0.007179      0.129677\n1968-04-23     19     5         9   38.000000  0.043123  0.070535      1.736842\n1967-04-13     20     5         9   49.700012  0.059061  0.006593      0.118713\n1967-01-03     21     5         9   55.799988  0.071603  0.006321      0.094982\n1965-01-22     22     5         9   18.500000  0.020838  0.031326      1.540541\n1964-03-06     23     5         9   19.600037  0.024506  0.016127      0.678570\n1955-06-15     24     5         9   12.399994  0.028343  0.005537      0.201613\n1955-04-05     25     5         9   16.299988  0.039553  0.010465      0.276074\n1954-09-01     26     5         9   18.599976  0.055822  0.009325      0.177419\n1945-04-06     27     5         9    9.000000  0.058140  0.008526      0.155555\n1929-02-18     28     5         9   21.800018  0.072812  0.086005      1.279815\n1921-10-18     29     5         9    4.300003  0.061871  0.008130      0.139536` \n```", "```py\n `count  rank  upstreak       upleg   upleg %  drawdown  rel drawdown\n1987-01-02      1     1        13  219.069946  0.116193  0.017616      0.171407\n2017-02-09      2     2        12  822.109375  0.041074  0.001875      0.047548\n1970-11-19      3     2        12   66.900024  0.088986  0.010321      0.127055\n1929-06-20      4     2        12   32.000000  0.101716  0.031134      0.340625\n...` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport collections\nimport datetime\nimport itertools\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport backtrader as bt\n\nclass UpStreak(bt.Analyzer):\n    params = dict(\n        sep=',',\n        hilo=False,\n    )\n\n    def __init__(self):\n        self.upday = bt.ind.UpDayBool()\n        self.curdt = None  # streak start date\n\n        self.incs = dict()  # upleg in points\n        self.pincs = dict()  # upleg in percentage\n        self.close0 = dict()  # starting price for upleg\n        self.peaks = collections.deque()  # endng price for upleg\n        self.ddown = dict()  # absolute drawdowns\n        self.ddownrel = dict()  # relative drawdown (% of upleg retraced)\n\n        self.rets = collections.defaultdict(int)  # holds main results\n\n    def next(self):\n        curclose = self.data.close[0]\n        lastclose = self.data.close[-1]\n\n        self.peaks.append((None, None))\n        while True:\n            dt, peak = self.peaks.popleft()\n            if dt is None:\n                break  # all elements seen\n\n            if peak > curclose:  # peak not overdone, update drawdown\n                ddown = 1.0 - curclose / peak\n                self.ddown[dt] = max(self.ddown[dt], ddown)\n                self.peaks.append((dt, peak))  # not done yet\n\n                inc = self.incs[dt]\n                fall = peak - curclose\n                ddownrel = fall / inc\n                self.ddownrel[dt] = max(self.ddownrel[dt], ddownrel)\n\n        if self.upday:\n            if self.curdt is None:  # streak begins\n                self.curdt = self.strategy.datetime.date()\n                if self.p.hilo:\n                    lastclose = self.data.low[-1]\n                self.close0[self.curdt] = lastclose\n\n            self.incs[self.curdt] = inc = curclose - self.close0[self.curdt]\n            self.pincs[self.curdt] = inc / self.close0[self.curdt]\n            self.rets[self.curdt] += 1  # update current streak\n        else:\n            if self.curdt is not None:  # streak ends\n                if self.p.hilo:\n                    lastclose = self.data.high[-1]\n\n                inc = self.incs[self.curdt]\n                fall = lastclose - curclose\n                self.ddownrel[self.curdt] = fall / inc\n                self.ddown[self.curdt] = 1.0 - curclose / lastclose\n                self.peaks.append((self.curdt, lastclose))\n\n                self.curdt = None\n\n    def stop(self):\n        s = sorted(\n            self.rets.items(),\n            reverse=True,\n            key=lambda item: (item[1], item[0])\n        )\n        # keep it in dict format\n        self.rets = collections.OrderedDict(s)\n\n        self.s = collections.OrderedDict(s)\n\n        self.headers = [\n            'date',\n            'count', 'rank', 'upstreak',\n            'upleg', 'upleg %',\n            'drawdown', 'rel drawdown',\n        ]\n\n        i = 0\n        count = itertools.count(1)\n        last = float('inf')\n        for dt, streak in self.s.items():\n            if streak < last:\n                i += 1\n                last = streak\n            ddown = self.ddown.get(dt, None)\n            ddownrel = self.ddownrel.get(dt, None)\n            inc = self.incs.get(dt, None)\n            pinc = self.pincs.get(dt, None)\n\n            self.s[dt] = [\n                next(count), i,\n                streak,\n                inc, pinc,\n                ddown, ddownrel\n            ]\n\n    def get_dataframe(self):\n        return pd.DataFrame.from_items(\n            self.s.items(),\n            orient='index',\n            columns=self.headers[1:],  # skip index\n        )\n\n    def print_ranking(self):\n        i = 0\n        last = float('inf')\n        print(self.p.sep.join(self.headers))\n\n        for dt, items in self.s.items():\n            print(\n                self.p.sep.join(\n                    str(x) for x in itertools.chain([dt], items)\n                )\n            )\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    kwargs = dict()  # Data feed kwargs\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    fromdate = kwargs.get('fromdate', datetime.date.min)\n\n    store = bt.stores.VChartFile()\n    data = store.getdata(dataname=args.data, **kwargs)\n    cerebro.adddata(data)\n\n    cerebro.addanalyzer(UpStreak, **eval('dict(' + args.upstreak + ')'))\n    result = cerebro.run()\n    st0 = result[0]\n\n    a = st0.analyzers.upstreak\n\n    # Plot some things\n    # pd.set_option('display.max_columns', 500)\n    pd.set_option('display.expand_frame_repr', False)\n    df = a.get_dataframe()\n    up = df['upstreak']\n\n    up9 = df[up >= 9]\n    print(up9)\n\n    up7 = df[up >= 7]\n    x = up7['upstreak']\n    y = up7['rel drawdown'] * 100.0\n\n    plt.scatter(x, y)\n    plt.ylabel('% Relative Drawdown')\n    plt.xlabel('Updays streak')\n    plt.title('DJI Relative Drawdown after N consecutive UpDays')\n    plt.show()\n\n    # Plot some things\n    y = up7['drawdown'] * 100.0\n    plt.ylabel('% Absolute Drawdown')\n    plt.xlabel('Updays streak')\n    plt.title('DJI Drawdown after N consecutive UpDays')\n    plt.scatter(x, y)\n    plt.show()\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'UpDayStreaks'\n        )\n    )\n\n    parser.add_argument('--data', default='', required=True,\n                        help='Data Ticker')\n\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--upstreak', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]