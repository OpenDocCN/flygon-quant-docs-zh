["```py\n`...\ncerebro.adddata(mydata)\n...\ncerebro.add_order_history(orders, notify=True or False)\n...\ncerebro.run()` \n```", "```py\n    `datetime ascending` \n    ```", "```py\n`ORDER_HISTORY = (\n    ('2005-02-01', 1, 2984.63),\n    ('2005-03-04', -1, 3079.93),\n    ...\n    ('2006-12-18', 1, 4140.99),\n)` \n```", "```py\n`$ ./order-history.py --plot --cerebro writer=True` \n```", "```py\n`Creating Signal Strategy\n2005-02-01,1,2984.63\n2005-03-04,-1,3079.93\n...\n2006-12-01,-1,3993.03\nprofit 177.9000000000001\n2006-12-18,1,4140.99\n===============================================================================\nCerebro:\n...\n        - timereturn1:\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - timeframe: 8\n            - compression: None\n            - _doprenext: True\n            - data: None\n            - firstopen: True\n            - fund: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - 2005-12-31: 0.03580099999999975\n            - 2006-12-31: 0.01649448108275653\n        .......................................................................\n        - tradeanalyzer:\n          - Params: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n            - total:\n              - total: 14\n              - open: 1\n              - closed: 13\n            \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n            - streak:\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n              - won:\n                - current: 2\n                - longest: 2\n...` \n```", "```py\n`$ ./order-history.py --plot --cerebro writer=True --order-history` \n```", "```py\n`Creating Empty Strategy\n2005-02-01,1,2984.63\n2005-03-04,-1,3079.93\n...\n        .......................................................................\n        - timereturn1:\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - timeframe: 8\n            - compression: None\n            - _doprenext: True\n            - data: None\n            - firstopen: True\n            - fund: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - 2005-12-31: 0.03580099999999975\n            - 2006-12-31: 0.01649448108275653\n        .......................................................................\n        - tradeanalyzer:\n          - Params: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n            - total:\n              - total: 14\n              - open: 1\n              - closed: 13\n            \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n            - streak:\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n              - won:\n                - current: 2\n                - longest: 2\n...` \n```", "```py\n`$ ./order-history.py --help\nusage: order-history.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                        [--todate TODATE] [--order-history] [--cerebro kwargs]\n                        [--broker kwargs] [--sizer kwargs] [--strat kwargs]\n                        [--plot [kwargs]]\n\nOrder History Sample\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --order-history      use order history (default: False)\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nORDER_HISTORY = (\n    ('2005-02-01', 1, 2984.63),\n    ('2005-03-04', -1, 3079.93),\n    ('2005-03-08', 1, 3113.82),\n    ('2005-03-22', -1, 3040.55),\n    ('2005-04-08', 1, 3092.07),\n    ('2005-04-20', -1, 2957.92),\n    ('2005-05-13', 1, 2991.71),\n    ('2005-08-19', -1, 3284.35),\n    ('2005-08-22', 1, 3328.84),\n    ('2005-08-25', -1, 3293.69),\n    ('2005-09-12', 1, 3361.1),\n    ('2005-10-18', -1, 3356.73),\n    ('2005-11-09', 1, 3361.92),\n    ('2006-01-24', -1, 3544.78),\n    ('2006-02-06', 1, 3678.87),\n    ('2006-03-13', -1, 3801.03),\n    ('2006-03-20', 1, 3833.25),\n    ('2006-04-13', -1, 3777.24),\n    ('2006-05-02', 1, 3839.24),\n    ('2006-05-16', -1, 3711.46),\n    ('2006-06-30', 1, 3592.01),\n    ('2006-07-21', -1, 3580.53),\n    ('2006-08-01', 1, 3687.82),\n    ('2006-09-14', -1, 3809.08),\n    ('2006-09-25', 1, 3815.13),\n    ('2006-12-01', -1, 3993.03),\n    ('2006-12-18', 1, 4140.99),\n)\n\nclass SmaCross(bt.SignalStrategy):\n    params = dict(sma1=10, sma2=20)\n\n    def notify_order(self, order):\n        if not order.alive():\n            print(','.join(str(x) for x in\n                           (self.data.num2date(order.executed.dt).date(),\n                            order.executed.size * 1 if order.isbuy() else -1,\n                            order.executed.price)))\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            print('profit {}'.format(trade.pnlcomm))\n\n    def __init__(self):\n        print('Creating Signal Strategy')\n        sma1 = bt.ind.SMA(period=self.params.sma1)\n        sma2 = bt.ind.SMA(period=self.params.sma2)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n\nclass St(bt.Strategy):\n    params = dict(\n    )\n\n    def notify_order(self, order):\n        if not order.alive():\n            print(','.join(str(x) for x in\n                           (self.data.num2date(order.executed.dt).date(),\n                            order.executed.size * 1 if order.isbuy() else -1,\n                            order.executed.price)))\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            print('profit {}'.format(trade.pnlcomm))\n\n    def __init__(self):\n        print('Creating Empty Strategy')\n        pass\n\n    def next(self):\n        pass\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    if not args.order_history:\n        cerebro.addstrategy(SmaCross, **eval('dict(' + args.strat + ')'))\n    else:\n        cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n        cerebro.add_order_history(ORDER_HISTORY, notify=True)\n\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Months)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.TradeAnalyzer)\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Order History Sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--order-history', required=False, action='store_true',\n                        help='use order history')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]