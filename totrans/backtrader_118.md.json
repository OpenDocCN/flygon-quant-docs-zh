["```py\n`$ ./renko.py --renko size=35,align=10.0 --plot` \n```", "```py\n`$ ./renko.py --renko size=35,align=10.0 --plot --dual` \n```", "```py\n`$ ./renko.py --help\nusage: renko.py [-h] [--data0 DATA0] [--fromdate FROMDATE] [--todate TODATE]\n                [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                [--strat kwargs] [--plot [kwargs]] [--renko kwargs] [--dual]\n\nRenko bricks sample\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )\n  --renko kwargs       kwargs in key=value format (default: )\n  --dual               put the filter on a second version of the data\n                       (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n    )\n\n    def __init__(self):\n        for d in self.datas:\n            bt.ind.RSI(d)\n\n    def next(self):\n        pass\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n\n    fkwargs = dict()\n    fkwargs.update(**eval('dict(' + args.renko + ')'))\n\n    if not args.dual:\n        data0.addfilter(bt.filters.Renko, **fkwargs)\n        cerebro.adddata(data0)\n    else:\n        cerebro.adddata(data0)\n        data1 = data0.clone()\n        data1.addfilter(bt.filters.Renko, **fkwargs)\n        cerebro.adddata(data1)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    kwargs = dict(stdstats=False)\n    kwargs.update(**eval('dict(' + args.cerebro + ')'))\n    cerebro.run(**kwargs)\n\n    if args.plot:  # Plot if requested to\n        kwargs = dict(style='candle')\n        kwargs.update(**eval('dict(' + args.plot + ')'))\n        cerebro.plot(**kwargs)\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Renko bricks sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--renko', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--dual', required=False, action='store_true',\n                        help='put the filter on a second version of the data')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]