["```py\n`class RelativeMomentumIndex(RSI):\n    alias = ('RMI', )\n\n    linealias = (('rsi', 'rmi',),)  # add an alias for this class rmi -> rsi\n    plotlines = dict(rsi=dict(_name='rmi'))  # change line plotting name` \n```", "```py\n`class RelativeMomentumIndex(RSI):\n    alias = ('RMI', )\n\n    linesoverrride = True  # allow redefinition of the lines hierarcy\n    lines = ('rmi',)  # define the line\n    linealias = (('rmi', 'rsi',),)  # add an alias for base class rsi -> rmi` \n```", "```py\n`data0 = MyDataFeed(dataname='xxx', timeframe=bt.TimeFrame.Days, compression=1)\ndata0.addfilter(bt.filters.HeikinAshi)\ncerebro.adddata(data0)` \n```", "```py\n`data0 = MyDataFeed(dataname='xxx', timeframe=bt.TimeFrame.Days, compression=1)\ncerebro.adddata(data0)\n\ndata1 = data0.clone()\ndata1.addfilter(bt.filters.HeikinAshi)\ncerebro.adddata(data1)` \n```", "```py\n`cerebro.plot(style='candle')` \n```", "```py\n`...\ndata0 = MyDataFeed(dataname='xxx', timeframe=bt.TimeFrame.Days, compression=1)\ndata0.plotinfo.plotlog = False  # allow other actors to resize the axis\n...` \n```", "```py\n`...\ndata0 = MyDataFeed(dataname='xxx', timeframe=bt.TimeFrame.Days, compression=1)\ndata0.plotinfo.plotlog = True\ndata0.plotinfo.plotylimited = True\ncerebro.adddata(data0)\n...` \n```", "```py\n`mydatas = []\ndata = MyDataFeed(dataname=mytickers[0], timeframe=..., compression=...)\nmydatafeeds.append(data)\nfor ticker in mytickers[1:]\n    data = MyDataFeed(dataname=ticker, timeframe=..., compression=...)\n    mydatafeeds.append(data)\n    data.plotinfo.plotmaster = mydatas[0]` \n```", "```py\n`mydatas = []\nfor ticker in mytickers:\n    data = MyDataFeed(dataname=ticker, timeframe=..., compression=...)\n    mydatafeeds.append(data)\n    data.plotinfo.plotmaster = mydatas[0]` \n```", "```py\n`mytickers = ['YHOO', 'IBM', 'AAPL']\nfor t in mytickers:\n  d = bt.feeds.YahooFinanceData(dataname=t, fromdate=..., name=t.lower())` \n```", "```py\n`def __init__(self):\n  yhoosma = bt.ind.SMA(self.dnames.yhoo, period=20)\n  aaplsma = bt.ind.SMA(self.dnames['aapl'], period=30)\n\n  # or even go over the keys/items/values like in a regular dict\n  # for example with a dictionary comprehension\n  stocs = {name: bt.ind.Stochastic(data) for name, data in self.dnames.items()}` \n```"]