["```py\n`def notify_timer(self, timer, when, *args, **kwargs):\n    '''Receives a timer notification where ``timer`` is the timer which was\n    returned by ``add_timer``, and ``when`` is the calling time. ``args``\n    and ``kwargs`` are any additional arguments passed to ``add_timer``\n\n    The actual ``when`` time can be later, but the system may have not be\n    able to call the timer before. This value is the timer value and not the\n    system time.\n    '''` \n```", "```py\n`def add_timer(self, when,\n              offset=datetime.timedelta(), repeat=datetime.timedelta(),\n              weekdays=[], weekcarry=False,\n              monthdays=[], monthcarry=True,\n              allow=None,\n              tzdata=None, cheat=False,\n              *args, **kwargs):\n    '''` \n```", "```py\n`def add_timer(self, when,\n              offset=datetime.timedelta(), repeat=datetime.timedelta(),\n              weekdays=[], weekcarry=False,\n              monthdays=[], monthcarry=True,\n              allow=None,\n              tzdata=None, cheat=False, strats=False,\n              *args, **kwargs):\n    '''` \n```", "```py\n`class St(bt.Strategy):\n    params = dict(\n        when=bt.timer.SESSION_START,\n        timer=True,\n        cheat=False,\n        offset=datetime.timedelta(),\n        repeat=datetime.timedelta(),\n        weekdays=[],\n    )` \n```", "```py\n`$ ./scheduled.py --strat when='datetime.time(15,30)'\n\nstrategy notify_timer with tid 0, when 2005-01-03 15:30:00 cheat False\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 0, when 2005-01-04 15:30:00 cheat False\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\nstrategy notify_timer with tid 0, when 2005-01-05 15:30:00 cheat False\n3, 2005-01-05 17:30:00, Week 1, Day 3, O 2969.0, H 2969.0, L 2942.69, C 2947.19\nstrategy notify_timer with tid 0, when 2005-01-06 15:30:00 cheat False\n...` \n```", "```py\n`$ ./scheduled.py --strat when='datetime.time(15,30)',offset='datetime.timedelta(minutes=30)'\n\nstrategy notify_timer with tid 0, when 2005-01-03 16:00:00 cheat False\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 0, when 2005-01-04 16:00:00 cheat False\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\nstrategy notify_timer with tid 0, when 2005-01-05 16:00:00 cheat False\n...` \n```", "```py\n`$ ./scheduled.py --strat when='bt.timer.SESSION_START',offset='datetime.timedelta(minutes=30)'\n\nstrategy notify_timer with tid 0, when 2005-01-03 09:30:00 cheat False\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 0, when 2005-01-04 09:30:00 cheat False\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\n...` \n```", "```py\n`$ ./scheduled.py --strat when='bt.timer.SESSION_START',offset='datetime.timedelta(minutes=30)',repeat='datetime.timedelta(minutes=30)'\n\nstrategy notify_timer with tid 0, when 2005-01-03 09:30:00 cheat False\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 0, when 2005-01-04 09:30:00 cheat False\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\nstrategy notify_timer with tid 0, when 2005-01-05 09:30:00 cheat False\n...` \n```", "```py\n`$ ./scheduled.py --strat when='bt.timer.SESSION_START',cheat=True\n\nstrategy notify_timer with tid 1, when 2005-01-03 09:00:00 cheat True\n-- 2005-01-03 Create buy order\nstrategy notify_timer with tid 0, when 2005-01-03 09:00:00 cheat False\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 1, when 2005-01-04 09:00:00 cheat True\nstrategy notify_timer with tid 0, when 2005-01-04 09:00:00 cheat False\n-- 2005-01-04 Buy Exec @ 2969.78\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\nstrategy notify_timer with tid 1, when 2005-01-05 09:00:00 cheat True\nstrategy notify_timer with tid 0, when 2005-01-05 09:00:00 cheat False\n...` \n```", "```py\n`$ ./scheduled.py --strat when='bt.timer.SESSION_START',cheat=True --broker coo=True\n\nstrategy notify_timer with tid 1, when 2005-01-03 09:00:00 cheat True\n-- 2005-01-03 Create buy order\nstrategy notify_timer with tid 0, when 2005-01-03 09:00:00 cheat False\n-- 2005-01-03 Buy Exec @ 2952.29\n1, 2005-01-03 17:30:00, Week 1, Day 1, O 2952.29, H 2989.61, L 2946.8, C 2970.02\nstrategy notify_timer with tid 1, when 2005-01-04 09:00:00 cheat True\nstrategy notify_timer with tid 0, when 2005-01-04 09:00:00 cheat False\n2, 2005-01-04 17:30:00, Week 1, Day 2, O 2969.78, H 2979.88, L 2961.14, C 2971.12\nstrategy notify_timer with tid 1, when 2005-01-05 09:00:00 cheat True\nstrategy notify_timer with tid 0, when 2005-01-05 09:00:00 cheat False\n...` \n```", "```py\n`class St(bt.Strategy):\n    params = dict(\n        when=bt.timer.SESSION_START,\n        timer=True,\n        cheat=False,\n        offset=datetime.timedelta(),\n        repeat=datetime.timedelta(),\n        weekdays=[],\n        weekcarry=False,\n        monthdays=[],\n        monthcarry=True,\n    )` \n```", "```py\n`$ ./scheduled-min.py --strat when='datetime.time(15, 30)'\n\n1, 2006-01-02 09:05:00, Week 1, Day 1, O 3578.73, H 3587.88, L 3578.73, C 3582.99\n2, 2006-01-02 09:10:00, Week 1, Day 1, O 3583.01, H 3588.4, L 3583.01, C 3588.03\n...\n77, 2006-01-02 15:25:00, Week 1, Day 1, O 3599.07, H 3599.68, L 3598.47, C 3599.68\nstrategy notify_timer with tid 0, when 2006-01-02 15:30:00 cheat False\n78, 2006-01-02 15:30:00, Week 1, Day 1, O 3599.64, H 3599.73, L 3599.0, C 3599.67\n...\n179, 2006-01-03 15:25:00, Week 1, Day 2, O 3634.72, H 3635.0, L 3634.06, C 3634.87\nstrategy notify_timer with tid 0, when 2006-01-03 15:30:00 cheat False\n180, 2006-01-03 15:30:00, Week 1, Day 2, O 3634.81, H 3634.89, L 3634.04, C 3634.23\n...` \n```", "```py\n`$ ./scheduled-min.py --strat when='datetime.time(15, 30)',repeat='datetime.timedelta(minutes=15)'\n\n...\n74, 2006-01-02 15:10:00, Week 1, Day 1, O 3596.12, H 3596.63, L 3595.92, C 3596.63\n75, 2006-01-02 15:15:00, Week 1, Day 1, O 3596.36, H 3596.65, L 3596.19, C 3596.65\n76, 2006-01-02 15:20:00, Week 1, Day 1, O 3596.53, H 3599.13, L 3596.12, C 3598.9\n77, 2006-01-02 15:25:00, Week 1, Day 1, O 3599.07, H 3599.68, L 3598.47, C 3599.68\nstrategy notify_timer with tid 0, when 2006-01-02 15:30:00 cheat False\n78, 2006-01-02 15:30:00, Week 1, Day 1, O 3599.64, H 3599.73, L 3599.0, C 3599.67\n79, 2006-01-02 15:35:00, Week 1, Day 1, O 3599.61, H 3600.29, L 3599.52, C 3599.92\n80, 2006-01-02 15:40:00, Week 1, Day 1, O 3599.96, H 3602.06, L 3599.76, C 3602.05\nstrategy notify_timer with tid 0, when 2006-01-02 15:45:00 cheat False\n81, 2006-01-02 15:45:00, Week 1, Day 1, O 3601.97, H 3602.07, L 3601.45, C 3601.83\n82, 2006-01-02 15:50:00, Week 1, Day 1, O 3601.74, H 3602.8, L 3601.63, C 3602.8\n83, 2006-01-02 15:55:00, Week 1, Day 1, O 3602.53, H 3602.74, L 3602.33, C 3602.61\nstrategy notify_timer with tid 0, when 2006-01-02 16:00:00 cheat False\n84, 2006-01-02 16:00:00, Week 1, Day 1, O 3602.58, H 3602.75, L 3601.81, C 3602.14\n85, 2006-01-02 16:05:00, Week 1, Day 1, O 3602.16, H 3602.16, L 3600.86, C 3600.96\n86, 2006-01-02 16:10:00, Week 1, Day 1, O 3601.2, H 3601.49, L 3600.94, C 3601.27\n...\nstrategy notify_timer with tid 0, when 2006-01-02 17:15:00 cheat False\n99, 2006-01-02 17:15:00, Week 1, Day 1, O 3603.96, H 3603.96, L 3602.89, C 3603.79\n100, 2006-01-02 17:20:00, Week 1, Day 1, O 3603.94, H 3605.95, L 3603.87, C 3603.91\n101, 2006-01-02 17:25:00, Week 1, Day 1, O 3604.0, H 3604.76, L 3603.85, C 3604.64\nstrategy notify_timer with tid 0, when 2006-01-02 17:30:00 cheat False\n102, 2006-01-02 17:30:00, Week 1, Day 1, O 3604.06, H 3604.41, L 3603.95, C 3604.33\n103, 2006-01-03 09:05:00, Week 1, Day 2, O 3604.08, H 3609.6, L 3604.08, C 3609.6\n104, 2006-01-03 09:10:00, Week 1, Day 2, O 3610.34, H 3617.31, L 3610.34, C 3617.31\n105, 2006-01-03 09:15:00, Week 1, Day 2, O 3617.61, H 3617.87, L 3616.03, C 3617.51\n106, 2006-01-03 09:20:00, Week 1, Day 2, O 3617.24, H 3618.86, L 3616.09, C 3618.42\n...\n179, 2006-01-03 15:25:00, Week 1, Day 2, O 3634.72, H 3635.0, L 3634.06, C 3634.87\nstrategy notify_timer with tid 0, when 2006-01-03 15:30:00 cheat False\n180, 2006-01-03 15:30:00, Week 1, Day 2, O 3634.81, H 3634.89, L 3634.04, C 3634.23\n...` \n```", "```py\n`$ ./scheduled-min.py --strat when='bt.timer.SESSION_START',cheat=True\n\nstrategy notify_timer with tid 1, when 2006-01-02 09:00:00 cheat True\n-- 2006-01-02 09:05:00 Create buy order\nstrategy notify_timer with tid 0, when 2006-01-02 09:00:00 cheat False\n1, 2006-01-02 09:05:00, Week 1, Day 1, O 3578.73, H 3587.88, L 3578.73, C 3582.99\n-- 2006-01-02 09:10:00 Buy Exec @ 3583.01\n2, 2006-01-02 09:10:00, Week 1, Day 1, O 3583.01, H 3588.4, L 3583.01, C 3588.03\n...` \n```", "```py\n`$ ./scheduled-min.py --strat when='bt.timer.SESSION_START',cheat=True --broker coo=True\n\nstrategy notify_timer with tid 1, when 2006-01-02 09:00:00 cheat True\n-- 2006-01-02 09:05:00 Create buy order\nstrategy notify_timer with tid 0, when 2006-01-02 09:00:00 cheat False\n-- 2006-01-02 09:05:00 Buy Exec @ 3578.73\n1, 2006-01-02 09:05:00, Week 1, Day 1, O 3578.73, H 3587.88, L 3578.73, C 3582.99\n2, 2006-01-02 09:10:00, Week 1, Day 1, O 3583.01, H 3588.4, L 3583.01, C 3588.03\n...` \n```", "```py\n    `class FutOpExp(object):\n        def __init__(self):\n            self.fridays = 0\n            self.curmonth = -1\n\n        def __call__(self, d):\n            _, _, isowkday = d.isocalendar()\n\n            if d.month != self.curmonth:\n                self.curmonth = d.month\n                self.fridays = 0\n\n            # Mon=1 ... Sun=7\n            if isowkday == 5 and self.curmonth in [3, 6, 9, 12]:\n                self.fridays += 1\n\n                if self.friday == 3:  # 3rd Friday\n                    return True  # timer allowed\n\n            return False  # timer disallowed` \n    ```", "```py\n`- `when`: can be\n\n  - `datetime.time` instance (see below `tzdata`)\n\n  - `bt.timer.SESSION_START` to reference a session start\n\n  - `bt.timer.SESSION_END` to reference a session end` \n```", "```py\n     ``SESSION_END` and `tzdata` is `None`, the 1st *data feed*\n      in the system (aka `self.data0`) will be used as the reference\n      to find out the session times.` \n    ```", "```py\n`$ ./scheduled.py --help\nusage: scheduled.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                    [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n                    [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n\nSample Skeleton\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`$ ./scheduled-min.py --help\nusage: scheduled-min.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                        [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n                        [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n\nTimer Test Intraday\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default: ../../datas/2006-min-005.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        when=bt.timer.SESSION_START,\n        timer=True,\n        cheat=False,\n        offset=datetime.timedelta(),\n        repeat=datetime.timedelta(),\n        weekdays=[],\n    )\n\n    def __init__(self):\n        bt.ind.SMA()\n        if self.p.timer:\n            self.add_timer(\n                when=self.p.when,\n                offset=self.p.offset,\n                repeat=self.p.repeat,\n                weekdays=self.p.weekdays,\n            )\n        if self.p.cheat:\n            self.add_timer(\n                when=self.p.when,\n                offset=self.p.offset,\n                repeat=self.p.repeat,\n                cheat=True,\n            )\n\n        self.order = None\n\n    def prenext(self):\n        self.next()\n\n    def next(self):\n        _, isowk, isowkday = self.datetime.date().isocalendar()\n        txt = '{}, {}, Week {}, Day {}, O {}, H {}, L {}, C {}'.format(\n            len(self), self.datetime.datetime(),\n            isowk, isowkday,\n            self.data.open[0], self.data.high[0],\n            self.data.low[0], self.data.close[0])\n\n        print(txt)\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        print('strategy notify_timer with tid {}, when {} cheat {}'.\n              format(timer.p.tid, when, timer.p.cheat))\n\n        if self.order is None and timer.p.cheat:\n            print('-- {} Create buy order'.format(self.data.datetime.date()))\n            self.order = self.buy()\n\n    def notify_order(self, order):\n        if order.status == order.Completed:\n            print('-- {} Buy Exec @ {}'.format(\n                self.data.datetime.date(), order.executed.price))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict(\n        timeframe=bt.TimeFrame.Days,\n        compression=1,\n        sessionstart=datetime.time(9, 0),\n        sessionend=datetime.time(17, 30),\n    )\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Sample Skeleton'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        when=bt.timer.SESSION_START,\n        timer=True,\n        cheat=False,\n        offset=datetime.timedelta(),\n        repeat=datetime.timedelta(),\n        weekdays=[],\n        weekcarry=False,\n        monthdays=[],\n        monthcarry=True,\n    )\n\n    def __init__(self):\n        bt.ind.SMA()\n        if self.p.timer:\n            self.add_timer(\n                when=self.p.when,\n                offset=self.p.offset,\n                repeat=self.p.repeat,\n                weekdays=self.p.weekdays,\n                weekcarry=self.p.weekcarry,\n                monthdays=self.p.monthdays,\n                monthcarry=self.p.monthcarry,\n                # tzdata=self.data0,\n            )\n        if self.p.cheat:\n            self.add_timer(\n                when=self.p.when,\n                offset=self.p.offset,\n                repeat=self.p.repeat,\n                weekdays=self.p.weekdays,\n                weekcarry=self.p.weekcarry,\n                monthdays=self.p.monthdays,\n                monthcarry=self.p.monthcarry,\n                tzdata=self.data0,\n                cheat=True,\n            )\n\n        self.order = None\n\n    def prenext(self):\n        self.next()\n\n    def next(self):\n        _, isowk, isowkday = self.datetime.date().isocalendar()\n        txt = '{}, {}, Week {}, Day {}, O {}, H {}, L {}, C {}'.format(\n            len(self), self.datetime.datetime(),\n            isowk, isowkday,\n            self.data.open[0], self.data.high[0],\n            self.data.low[0], self.data.close[0])\n\n        print(txt)\n\n    def notify_timer(self, timer, when, *args, **kwargs):\n        print('strategy notify_timer with tid {}, when {} cheat {}'.\n              format(timer.p.tid, when, timer.p.cheat))\n\n        if self.order is None and timer.params.cheat:\n            print('-- {} Create buy order'.format(\n                self.data.datetime.datetime()))\n            self.order = self.buy()\n\n    def notify_order(self, order):\n        if order.status == order.Completed:\n            print('-- {} Buy Exec @ {}'.format(\n                self.data.datetime.datetime(), order.executed.price))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict(\n        timeframe=bt.TimeFrame.Minutes,\n        compression=5,\n        sessionstart=datetime.time(9, 0),\n        sessionend=datetime.time(17, 30),\n    )\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Timer Test Intraday'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2006-min-005.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]