["```py\n`cerebro = bt.Cerebro(cheat_on_open=True)` \n```", "```py\n`$ ./cheat-on-open.py --cerebro cheat_on_open=False\n\n...\n2005-04-07 next, open 3073.4 close 3090.72\n2005-04-08 next, open 3092.07 close 3088.92\nStrat Len 68 2005-04-08 Send Buy, fromopen False, close 3088.92\n2005-04-11 Buy Executed at price 3088.47\n2005-04-11 next, open 3088.47 close 3080.6\n2005-04-12 next, open 3080.42 close 3065.18\n...` \n```", "```py\n`$ ./cheat-on-open.py --cerebro cheat_on_open=True\n\n...\n2005-04-07 next, open 3073.4 close 3090.72\n2005-04-08 next, open 3092.07 close 3088.92\n2005-04-11 Send Buy, fromopen True, close 3080.6\n2005-04-11 Buy Executed at price 3088.47\n2005-04-11 next, open 3088.47 close 3080.6\n2005-04-12 next, open 3080.42 close 3065.18\n...` \n```", "```py\n`$ ./cheat-on-open.py --help\nusage: cheat-on-open.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                        [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n                        [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n\nCheat-On-Open Sample\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        periods=[10, 30],\n        matype=bt.ind.SMA,\n    )\n\n    def __init__(self):\n        self.cheating = self.cerebro.p.cheat_on_open\n        mas = [self.p.matype(period=x) for x in self.p.periods]\n        self.signal = bt.ind.CrossOver(*mas)\n        self.order = None\n\n    def notify_order(self, order):\n        if order.status != order.Completed:\n            return\n\n        self.order = None\n        print('{} {} Executed at price {}'.format(\n            bt.num2date(order.executed.dt).date(),\n            'Buy' * order.isbuy() or 'Sell', order.executed.price)\n        )\n\n    def operate(self, fromopen):\n        if self.order is not None:\n            return\n        if self.position:\n            if self.signal < 0:\n                self.order = self.close()\n        elif self.signal > 0:\n            print('{} Send Buy, fromopen {}, close {}'.format(\n                self.data.datetime.date(),\n                fromopen, self.data.close[0])\n            )\n            self.order = self.buy()\n\n    def next(self):\n        print('{} next, open {} close {}'.format(\n            self.data.datetime.date(),\n            self.data.open[0], self.data.close[0])\n        )\n\n        if self.cheating:\n            return\n        self.operate(fromopen=False)\n\n    def next_open(self):\n        if not self.cheating:\n            return\n        self.operate(fromopen=True)\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Cheat-On-Open Sample'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]