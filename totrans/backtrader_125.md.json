["```py\n`$ ./mult-values.py --plot volume=False\n\n2001-01-02 d0 Position 0\n2001-01-02 Data d0 OType buy Sizing to 1\n2001-01-02 d0 Main 1 Stp 2 Lmt 3\n2001-01-02 d1 Position 0\n2001-01-02 d2 Position 0\n2001-01-03 d0 Order 1 Status Accepted\n2001-01-03 d0 Order 2 Status Accepted\n2001-01-03 d0 Order 3 Status Accepted\n2001-01-03 d0 Order 1 Status Completed\n-- No longer alive main Ref\n2001-01-03 d0 Position 1\n2001-01-03 d1 Position 0\n2001-01-03 d2 Position 0\n2001-01-04 d0 Order 3 Status Completed\n-- No longer alive limit Ref\n2001-01-04 d0 Order 2 Status Canceled\n-- No longer alive stop Ref\n...\n...\n...\n2006-12-27 d0 Order 2036 Status Accepted\n2006-12-27 d0 Order 2037 Status Accepted\n2006-12-27 d0 Order 2038 Status Accepted\n2006-12-27 d0 Position 0\n2006-12-27 d1 Position 0\n2006-12-27 d2 Position 0\n2006-12-28 d0 Position 0\n2006-12-28 d1 Position 0\n2006-12-28 d2 Position 0\n2006-12-29 d0 Position 0\n2006-12-29 d1 Position 0\n2006-12-29 d2 Position 0` \n```", "```py\n`$ ./mult-values.py --plot volume=False --strat rawbracket=False` \n```", "```py\n`./mult-values.py --strat usebracket=False --plot volume=False` \n```", "```py\n`$ ./mult-values.py --help\nusage: mult-values.py [-h] [--data0 DATA0] [--data1 DATA1] [--data2 DATA2]\n                      [--fromdate FROMDATE] [--todate TODATE]\n                      [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                      [--strat kwargs] [--plot [kwargs]]\n\nMultiple Values and Brackets\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data0 to read in (default:\n                       ../../datas/nvda-1999-2014.txt)\n  --data1 DATA1        Data1 to read in (default:\n                       ../../datas/yhoo-1996-2014.txt)\n  --data2 DATA2        Data1 to read in (default:\n                       ../../datas/orcl-1995-2014.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                       2001-01-01)\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                       2007-01-01)\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass TestSizer(bt.Sizer):\n    params = dict(stake=1)\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        dt, i = self.strategy.datetime.date(), data._id\n        s = self.p.stake * (1 + (not isbuy))\n        print('{} Data {} OType {} Sizing to {}'.format(\n            dt, data._name, ('buy' * isbuy) or 'sell', s))\n\n        return s\n\nclass St(bt.Strategy):\n    params = dict(\n        enter=[1, 3, 4],  # data ids are 1 based\n        hold=[7, 10, 15],  # data ids are 1 based\n        usebracket=True,\n        rawbracket=True,\n        pentry=0.015,\n        plimits=0.03,\n        valid=10,\n    )\n\n    def notify_order(self, order):\n        if order.status == order.Submitted:\n            return\n\n        dt, dn = self.datetime.date(), order.data._name\n        print('{} {} Order {} Status {}'.format(\n            dt, dn, order.ref, order.getstatusname())\n        )\n\n        whichord = ['main', 'stop', 'limit', 'close']\n        if not order.alive():  # not alive - nullify\n            dorders = self.o[order.data]\n            idx = dorders.index(order)\n            dorders[idx] = None\n            print('-- No longer alive {} Ref'.format(whichord[idx]))\n\n            if all(x is None for x in dorders):\n                dorders[:] = []  # empty list - New orders allowed\n\n    def __init__(self):\n        self.o = dict()  # orders per data (main, stop, limit, manual-close)\n        self.holding = dict()  # holding periods per data\n\n    def next(self):\n        for i, d in enumerate(self.datas):\n            dt, dn = self.datetime.date(), d._name\n            pos = self.getposition(d).size\n            print('{} {} Position {}'.format(dt, dn, pos))\n\n            if not pos and not self.o.get(d, None):  # no market / no orders\n                if dt.weekday() == self.p.enter[i]:\n                    if not self.p.usebracket:\n                        self.o[d] = [self.buy(data=d)]\n                        print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n\n                    else:\n                        p = d.close[0] * (1.0 - self.p.pentry)\n                        pstp = p * (1.0 - self.p.plimits)\n                        plmt = p * (1.0 + self.p.plimits)\n                        valid = datetime.timedelta(self.p.valid)\n\n                        if self.p.rawbracket:\n                            o1 = self.buy(data=d, exectype=bt.Order.Limit,\n                                          price=p, valid=valid, transmit=False)\n\n                            o2 = self.sell(data=d, exectype=bt.Order.Stop,\n                                           price=pstp, size=o1.size,\n                                           transmit=False, parent=o1)\n\n                            o3 = self.sell(data=d, exectype=bt.Order.Limit,\n                                           price=plmt, size=o1.size,\n                                           transmit=True, parent=o1)\n\n                            self.o[d] = [o1, o2, o3]\n\n                        else:\n                            self.o[d] = self.buy_bracket(\n                                data=d, price=p, stopprice=pstp,\n                                limitprice=plmt, oargs=dict(valid=valid))\n\n                        print('{} {} Main {} Stp {} Lmt {}'.format(\n                            dt, dn, *(x.ref for x in self.o[d])))\n\n                    self.holding[d] = 0\n\n            elif pos:  # exiting can also happen after a number of days\n                self.holding[d] += 1\n                if self.holding[d] >= self.p.hold[i]:\n                    o = self.close(data=d)\n                    self.o[d].append(o)  # manual order to list of orders\n                    print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                    if self.p.usebracket:\n                        self.cancel(self.o[d][1])  # cancel stop side\n                        print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n\n    # Sizer\n    # cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Multiple Values and Brackets'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt',\n                        required=False, help='Data0 to read in')\n\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt',\n                        required=False, help='Data1 to read in')\n\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt',\n                        required=False, help='Data1 to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='2001-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='2007-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]