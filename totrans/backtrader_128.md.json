["```py\n`def next(self):\n    ...\n    o1 = self.buy(...)\n    ...\n    o2 = self.buy(..., oco=o1)\n    ...\n    o3 = self.buy(..., oco=o1)  # or even oco=o2, o2 is already in o1 group` \n```", "```py\n`$ ./oco.py --broker cash=50000 --plot` \n```", "```py\n`2005-01-28: Oref 1 / Buy at 2941.11055\n2005-01-28: Oref 2 / Buy at 2896.7722\n2005-01-28: Oref 3 / Buy at 2822.87495\n2005-01-31: Order ref: 1 / Type Buy / Status Submitted\n2005-01-31: Order ref: 2 / Type Buy / Status Submitted\n2005-01-31: Order ref: 3 / Type Buy / Status Submitted\n2005-01-31: Order ref: 1 / Type Buy / Status Accepted\n2005-01-31: Order ref: 2 / Type Buy / Status Accepted\n2005-01-31: Order ref: 3 / Type Buy / Status Accepted\n2005-02-01: Order ref: 1 / Type Buy / Status Expired\n2005-02-01: Order ref: 3 / Type Buy / Status Canceled\n2005-02-01: Order ref: 2 / Type Buy / Status Canceled\n...\n2006-06-23: Oref 49 / Buy at 3532.39925\n2006-06-23: Oref 50 / Buy at 3479.147\n2006-06-23: Oref 51 / Buy at 3390.39325\n2006-06-26: Order ref: 49 / Type Buy / Status Submitted\n2006-06-26: Order ref: 50 / Type Buy / Status Submitted\n2006-06-26: Order ref: 51 / Type Buy / Status Submitted\n2006-06-26: Order ref: 49 / Type Buy / Status Accepted\n2006-06-26: Order ref: 50 / Type Buy / Status Accepted\n2006-06-26: Order ref: 51 / Type Buy / Status Accepted\n2006-06-26: Order ref: 49 / Type Buy / Status Completed\n2006-06-26: Order ref: 51 / Type Buy / Status Canceled\n2006-06-26: Order ref: 50 / Type Buy / Status Canceled\n...\n2006-11-10: Order ref: 61 / Type Buy / Status Canceled\n2006-12-11: Oref 63 / Buy at 4032.62555\n2006-12-11: Oref 64 / Buy at 3971.8322\n2006-12-11: Oref 65 / Buy at 3870.50995\n2006-12-12: Order ref: 63 / Type Buy / Status Submitted\n2006-12-12: Order ref: 64 / Type Buy / Status Submitted\n2006-12-12: Order ref: 65 / Type Buy / Status Submitted\n2006-12-12: Order ref: 63 / Type Buy / Status Accepted\n2006-12-12: Order ref: 64 / Type Buy / Status Accepted\n2006-12-12: Order ref: 65 / Type Buy / Status Accepted\n2006-12-15: Order ref: 63 / Type Buy / Status Expired\n2006-12-15: Order ref: 65 / Type Buy / Status Canceled\n2006-12-15: Order ref: 64 / Type Buy / Status Canceled` \n```", "```py\n`$ ./oco.py --strat do_oco=False --broker cash=50000\n\n2005-01-28: Oref 1 / Buy at 2941.11055\n2005-01-28: Oref 2 / Buy at 2896.7722\n2005-01-28: Oref 3 / Buy at 2822.87495\n2005-01-31: Order ref: 1 / Type Buy / Status Submitted\n2005-01-31: Order ref: 2 / Type Buy / Status Submitted\n2005-01-31: Order ref: 3 / Type Buy / Status Submitted\n2005-01-31: Order ref: 1 / Type Buy / Status Accepted\n2005-01-31: Order ref: 2 / Type Buy / Status Accepted\n2005-01-31: Order ref: 3 / Type Buy / Status Accepted\n2005-02-01: Order ref: 1 / Type Buy / Status Expired` \n```", "```py\n`$ ./oco.py --help\nusage: oco.py [-h] [--data0 DATA0] [--fromdate FROMDATE] [--todate TODATE]\n              [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n              [--strat kwargs] [--plot [kwargs]]\n\nSample Skeleton\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = dict(\n        ma=bt.ind.SMA,\n        p1=5,\n        p2=15,\n        limit=0.005,\n        limdays=3,\n        limdays2=1000,\n        hold=10,\n        switchp1p2=False,  # switch prices of order1 and order2\n        oco1oco2=False,  # False - use order1 as oco for order3, else order2\n        do_oco=True,  # use oco or not\n    )\n\n    def notify_order(self, order):\n        print('{}: Order ref: {} / Type {} / Status {}'.format(\n            self.data.datetime.date(0),\n            order.ref, 'Buy' * order.isbuy() or 'Sell',\n            order.getstatusname()))\n\n        if order.status == order.Completed:\n            self.holdstart = len(self)\n\n        if not order.alive() and order.ref in self.orefs:\n            self.orefs.remove(order.ref)\n\n    def __init__(self):\n        ma1, ma2 = self.p.ma(period=self.p.p1), self.p.ma(period=self.p.p2)\n        self.cross = bt.ind.CrossOver(ma1, ma2)\n\n        self.orefs = list()\n\n    def next(self):\n        if self.orefs:\n            return  # pending orders do nothing\n\n        if not self.position:\n            if self.cross > 0.0:  # crossing up\n\n                p1 = self.data.close[0] * (1.0 - self.p.limit)\n                p2 = self.data.close[0] * (1.0 - 2 * 2 * self.p.limit)\n                p3 = self.data.close[0] * (1.0 - 3 * 3 * self.p.limit)\n\n                if self.p.switchp1p2:\n                    p1, p2 = p2, p1\n\n                o1 = self.buy(exectype=bt.Order.Limit, price=p1,\n                              valid=datetime.timedelta(self.p.limdays))\n\n                print('{}: Oref {} / Buy at {}'.format(\n                    self.datetime.date(), o1.ref, p1))\n\n                oco2 = o1 if self.p.do_oco else None\n                o2 = self.buy(exectype=bt.Order.Limit, price=p2,\n                              valid=datetime.timedelta(self.p.limdays2),\n                              oco=oco2)\n\n                print('{}: Oref {} / Buy at {}'.format(\n                    self.datetime.date(), o2.ref, p2))\n\n                if self.p.do_oco:\n                    oco3 = o1 if not self.p.oco1oco2 else oco2\n                else:\n                    oco3 = None\n\n                o3 = self.buy(exectype=bt.Order.Limit, price=p3,\n                              valid=datetime.timedelta(self.p.limdays2),\n                              oco=oco3)\n\n                print('{}: Oref {} / Buy at {}'.format(\n                    self.datetime.date(), o3.ref, p3))\n\n                self.orefs = [o1.ref, o2.ref, o3.ref]\n\n        else:  # in the market\n            if (len(self) - self.holdstart) >= self.p.hold:\n                self.close()\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Sample Skeleton'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]