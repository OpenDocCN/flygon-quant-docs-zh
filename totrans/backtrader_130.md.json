["```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\n\ndata0 = bt.feeds.MyFavouriteDataFeed(dataname='futurename')\ncerebro.adddata(data0)\n\ndata1 = bt.feeds.MyFavouriteDataFeed(dataname='spotname')\ndata1.compensate(data0)  # let the system know ops on data1 affect data0\ncerebro.adddata(data1)\n\n...\n\ncerebro.run()` \n```", "```py\n    `# The filter which changes the close price\n    def close_changer(data, *args, **kwargs):\n        data.close[0] += 50.0 * random.randint(-1, 1)\n        return False  # length of stream is unchanged` \n    ```", "```py\n `A simulation including execution on the spot price on the day of\n  future expiration would require activating `cheat-on-close` to\n  make sure the orders are executed when the future expires. This is\n  not needed in this sample, because the expiration is being chosen\n  at random.` \n```", "```py\n    `class St(bt.Strategy):\n        def __init__(self):\n            bt.obs.BuySell(self.data0, barplot=True)  # done here for\n            BuySellArrows(self.data1, barplot=True)  # different markers per data\n\n        def next(self):\n            if not self.position:\n                if random.randint(0, 1):\n                    self.buy(data=self.data0)\n                    self.entered = len(self)\n\n            else:  # in the market\n                if (len(self) - self.entered) >= 10:\n                    self.sell(data=self.data1)` \n    ```", "```py\n`$ ./future-spot.py --no-comp` \n```", "```py\n`$ ./future-spot.py --no-comp` \n```", "```py\n`$ ./future-spot.py --help\nusage: future-spot.py [-h] [--no-comp]\n\nCompensation example\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --no-comp` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport random\nimport backtrader as bt\n\n# The filter which changes the close price\ndef close_changer(data, *args, **kwargs):\n    data.close[0] += 50.0 * random.randint(-1, 1)\n    return False  # length of stream is unchanged\n\n# override the standard markers\nclass BuySellArrows(bt.observers.BuySell):\n    plotlines = dict(buy=dict(marker='$\\u21E7$', markersize=12.0),\n                     sell=dict(marker='$\\u21E9$', markersize=12.0))\n\nclass St(bt.Strategy):\n    def __init__(self):\n        bt.obs.BuySell(self.data0, barplot=True)  # done here for\n        BuySellArrows(self.data1, barplot=True)  # different markers per data\n\n    def next(self):\n        if not self.position:\n            if random.randint(0, 1):\n                self.buy(data=self.data0)\n                self.entered = len(self)\n\n        else:  # in the market\n            if (len(self) - self.entered) >= 10:\n                self.sell(data=self.data1)\n\ndef runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n\n    dataname = '../../datas/2006-day-001.txt'  # data feed\n\n    data0 = bt.feeds.BacktraderCSVData(dataname=dataname, name='data0')\n    cerebro.adddata(data0)\n\n    data1 = bt.feeds.BacktraderCSVData(dataname=dataname, name='data1')\n    data1.addfilter(close_changer)\n    if not args.no_comp:\n        data1.compensate(data0)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1)\n\n    cerebro.addstrategy(St)  # sample strategy\n\n    cerebro.addobserver(bt.obs.Broker)  # removed below with stdstats=False\n    cerebro.addobserver(bt.obs.Trades)  # removed below with stdstats=False\n\n    cerebro.broker.set_coc(True)\n    cerebro.run(stdstats=False)  # execute\n    cerebro.plot(volume=False)  # and plot\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=('Compensation example'))\n\n    parser.add_argument('--no-comp', required=False, action='store_true')\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]