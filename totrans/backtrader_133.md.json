["```py\n`class PercentRank(bt.Indicator):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n\n    def __init__(self):\n        self.addminperiod(self.p.period)\n\n    def next(self):\n        self.lines.pctrank[0] = \\\n            (math.fsum([x < self.data[0]\n                       for x in self.data.get(size=self.p.period)])\n            / self.p.period)\n        super(PercentRank, self).__init__()` \n```", "```py\n`self.addminperiod(self.p.period)` \n```", "```py\n`class PercentRank_PeriodN1(bt.ind.PeriodN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n\n    def next(self):\n        d0 = self.data[0]  # avoid dict/array lookups each time\n        dx = self.data.get(size=self.p.period)\n        self.l.pctrank[0] = math.fsum((x < d0 for x in dx)) / self.p.period` \n```", "```py\n`class PercentRank_OperationN1(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = (lambda d: math.fsum((x < d[-1] for x in d)) / self.p.period)` \n```", "```py\n`TypeError: <lambda>() takes 1 positional argument but 2 were given` \n```", "```py\n`class PercentRank_OperationN2(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = (lambda self, d: math.fsum((x < d[-1] for x in d)) / self.p.period)` \n```", "```py\n`class PercentRank_OperationN3(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = staticmethod(lambda d: math.fsum((x < d[-1] for x in d)) / len(d))` \n```", "```py\n`class ApplyN(bt.ind.OperationN):\n    lines = ('apply',)\n    params = (('func', None),)\n\n    def __init__(self):\n        self.func = self.p.func\n        super(ApplyN, self).__init__()` \n```", "```py\n`class PercentRank_ApplyN(ApplyN):\n    params = (\n        ('period', 50),\n        ('func', lambda d: math.fsum((x < d[-1] for x in d)) / len(d)),\n    )` \n```", "```py\n`$ ./percentrank.py --help\nusage: percentrank.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                      [--todate TODATE] [--cerebro kwargs] [--broker kwargs]\n                      [--sizer kwargs] [--strat kwargs] [--plot [kwargs]]\n\nSample Skeleton\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 DATA0        Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport math\n\nimport backtrader as bt\n\nclass PercentRank(bt.Indicator):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n\n    def __init__(self):\n        self.addminperiod(self.p.period)\n\n    def next(self):\n        self.lines.pctrank[0] = \\\n            (math.fsum([x < self.data[0]\n                       for x in self.data.get(size=self.p.period)])\n            / self.p.period)\n        super(PercentRank, self).__init__()\n\nclass PercentRank_PeriodN1(bt.ind.PeriodN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n\n    def next(self):\n        d0 = self.data[0]  # avoid dict/array lookups each time\n        dx = self.data.get(size=self.p.period)\n        self.l.pctrank[0] = math.fsum((x < d0 for x in dx)) / self.p.period\n\nclass PercentRank_OperationN1(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = (lambda d: math.fsum((x < d[-1] for x in d)) / self.p.period)\n\nclass PercentRank_OperationN2(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = (lambda self, d: math.fsum((x < d[-1] for x in d)) / self.p.period)\n\nclass PercentRank_OperationN3(bt.ind.OperationN):\n    lines = ('pctrank',)\n    params = (('period', 50),)\n    func = staticmethod(lambda d: math.fsum((x < d[-1] for x in d)) / len(d))\n\nclass ApplyN(bt.ind.OperationN):\n    lines = ('apply',)\n    params = (('func', None),)\n\n    def __init__(self):\n        self.func = self.p.func\n        super(ApplyN, self).__init__()\n\nclass PercentRank_ApplyN(ApplyN):\n    params = (\n        ('period', 50),\n        ('func', lambda d: math.fsum((x < d[-1] for x in d)) / len(d)),\n    )\n\nclass St(bt.Strategy):\n    params = (\n        ('n1', False),\n    )\n\n    def __init__(self):\n        PercentRank()\n        PercentRank_PeriodN1()\n        if self.p.n1:\n            PercentRank_OperationN1()\n        PercentRank_OperationN2()\n        PercentRank_OperationN3()\n        PercentRank_ApplyN()\n\n    def next(self):\n        pass\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Sizer\n    cerebro.addsizer(bt.sizers.FixedSize, **eval('dict(' + args.sizer + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Sample Skeleton'\n        )\n    )\n\n    parser.add_argument('--data0', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]