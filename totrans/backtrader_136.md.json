["```py\n`def start(self):\n    print(','.join(['TRADE', 'STATUS', 'Value', 'PNL', 'COMMISSION']))\n\ndef notify_order(self, order):\n    if order.status in [order.Margin]:\n        print('ORDER FAILED with status:', order.getstatusname())\n\ndef notify_trade(self, trade):\n    if trade.isclosed:\n        print(','.join(map(str, [\n            'TRADE', 'CLOSE',\n            self.data.num2date(trade.dtclose).date().isoformat(),\n            trade.value,\n            trade.pnl,\n            trade.commission,\n        ]\n        )))\n    elif trade.justopened:\n        print(','.join(map(str, [\n            'TRADE', 'OPEN',\n            self.data.num2date(trade.dtopen).date().isoformat(),\n            trade.value,\n            trade.pnl,\n            trade.commission,\n        ]\n        )))` \n```", "```py\n`$ ./btfd.py --comminfo commission=0.001,leverage=2.0 --strat target=1.0\n\nTRADE,STATUS,Value,PNL,COMMISSION\nORDER FAILED with status: Margin\nORDER FAILED with status: Margin\nTRADE,OPEN,1990-01-08,199345.2,0.0,199.3452\nTRADE,CLOSE,1990-01-10,0.0,-1460.28,397.23012` \n```", "```py\n`./btfd.py --comminfo commission=0.001,leverage=2.0 --strat target=0.998 --plot` \n```", "```py\n`./btfd.py --comminfo commission=0.0005,leverage=2.0 --strat target=0.999 --plot` \n```", "```py\n`./btfd.py --comminfo commission=0.00025,leverage=2.0 --strat target=0.9995 --plot` \n```", "```py\n`./btfd.py --comminfo commission=0.00025,leverage=2.0,interest=0.02,interest_long=True --strat target=0.9995 --plot` \n```", "```py\n`$ ./btfd.py --help\nusage: btfd.py [-h] [--offline] [--data TICKER]\n               [--fromdate YYYY-MM-DD[THH:MM:SS]]\n               [--todate YYYY-MM-DD[THH:MM:SS]] [--cerebro kwargs]\n               [--broker kwargs] [--valobserver kwargs] [--strat kwargs]\n               [--comminfo kwargs] [--plot [kwargs]]\n\nBTFD - http://dark-bid.com/BTFD-only-strategy-that-matters.html - https://www.\nreddit.com/r/algotrading/comments/5jez2b/can_anyone_replicate_this_strategy/\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --offline             Use offline file with ticker name (default: False)\n  --data TICKER         Yahoo ticker to download (default: ^GSPC)\n  --fromdate YYYY-MM-DD[THH:MM:SS]\n                        Starting date[time] (default: 1990-01-01)\n  --todate YYYY-MM-DD[THH:MM:SS]\n                        Ending date[time] (default: 2016-10-01)\n  --cerebro kwargs      kwargs in key=value format (default: stdstats=False)\n  --broker kwargs       kwargs in key=value format (default: cash=100000.0,\n                        coc=True)\n  --valobserver kwargs  kwargs in key=value format (default:\n                        assetstart=100000.0)\n  --strat kwargs        kwargs in key=value format (default:\n                        approach=\"highlow\")\n  --comminfo kwargs     kwargs in key=value format (default: leverage=2.0)\n  --plot [kwargs]       kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\n# References:\n#  - https://www.reddit.com/r/algotrading/comments/5jez2b/can_anyone_replicate_this_strategy/\n#  - http://dark-bid.com/BTFD-only-strategy-that-matters.html\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass ValueUnlever(bt.observers.Value):\n    '''Extension of regular Value observer to add leveraged view'''\n    lines = ('value_lever', 'asset')\n    params = (('assetstart', 100000.0), ('lever', True),)\n\n    def next(self):\n        super(ValueUnlever, self).next()\n        if self.p.lever:\n            self.lines.value_lever[0] = self._owner.broker._valuelever\n\n        if len(self) == 1:\n            self.lines.asset[0] = self.p.assetstart\n        else:\n            change = self.data[0] / self.data[-1]\n            self.lines.asset[0] = change * self.lines.asset[-1]\n\nclass St(bt.Strategy):\n    params = (\n        ('fall', -0.01),\n        ('hold', 2),\n        ('approach', 'highlow'),\n        ('target', 1.0)\n    )\n\n    def __init__(self):\n        if self.p.approach == 'closeclose':\n            self.pctdown = self.data.close / self.data.close(-1) - 1.0\n        elif self.p.approach == 'openclose':\n            self.pctdown = self.data.close / self.data.open - 1.0\n        elif self.p.approach == 'highclose':\n            self.pctdown = self.data.close / self.data.high - 1.0\n        elif self.p.approach == 'highlow':\n            self.pctdown = self.data.low / self.data.high - 1.0\n\n    def next(self):\n        if self.position:\n            if len(self) == self.barexit:\n                self.close()\n        else:\n            if self.pctdown <= self.p.fall:\n                self.order_target_percent(target=self.p.target)\n                self.barexit = len(self) + self.p.hold\n\n    def start(self):\n        print(','.join(['TRADE', 'STATUS', 'Value', 'PNL', 'COMMISSION']))\n\n    def notify_order(self, order):\n        if order.status in [order.Margin, order.Rejected, order.Canceled]:\n            print('ORDER FAILED with status:', order.getstatusname())\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            print(','.join(map(str, [\n                'TRADE', 'CLOSE',\n                self.data.num2date(trade.dtclose).date().isoformat(),\n                trade.value,\n                trade.pnl,\n                trade.commission,\n            ]\n            )))\n        elif trade.justopened:\n            print(','.join(map(str, [\n                'TRADE', 'OPEN',\n                self.data.num2date(trade.dtopen).date().isoformat(),\n                trade.value,\n                trade.pnl,\n                trade.commission,\n            ]\n            )))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        kwargs[d] = datetime.datetime.strptime(a, dtfmt + tmfmt * ('T' in a))\n\n    if not args.offline:\n        YahooData = bt.feeds.YahooFinanceData\n    else:\n        YahooData = bt.feeds.YahooFinanceCSVData\n\n    # Data feed - no plot - observer will do the job\n    data = YahooData(dataname=args.data, plot=False, **kwargs)\n    cerebro.adddata(data)\n\n    # Broker\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n\n    # Add a commission\n    cerebro.broker.setcommission(**eval('dict(' + args.comminfo + ')'))\n\n    # Strategy\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n\n    # Add specific observer\n    cerebro.addobserver(ValueUnlever, **eval('dict(' + args.valobserver + ')'))\n\n    # Execute\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**eval('dict(' + args.plot + ')'))\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(' - '.join([\n            'BTFD',\n            'http://dark-bid.com/BTFD-only-strategy-that-matters.html',\n            ('https://www.reddit.com/r/algotrading/comments/5jez2b/'\n             'can_anyone_replicate_this_strategy/')]))\n        )\n\n    parser.add_argument('--offline', required=False, action='store_true',\n                        help='Use offline file with ticker name')\n\n    parser.add_argument('--data', required=False, default='^GSPC',\n                        metavar='TICKER', help='Yahoo ticker to download')\n\n    parser.add_argument('--fromdate', required=False, default='1990-01-01',\n                        metavar='YYYY-MM-DD[THH:MM:SS]',\n                        help='Starting date[time]')\n\n    parser.add_argument('--todate', required=False, default='2016-10-01',\n                        metavar='YYYY-MM-DD[THH:MM:SS]',\n                        help='Ending date[time]')\n\n    parser.add_argument('--cerebro', required=False, default='stdstats=False',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False,\n                        default='cash=100000.0, coc=True',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--valobserver', required=False,\n                        default='assetstart=100000.0',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False,\n                        default='approach=\"highlow\"',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--comminfo', required=False, default='leverage=2.0',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='volume=False',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]