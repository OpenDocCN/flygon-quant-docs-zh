["```py\n    `class PearsonR(bt.ind.PeriodN):\n        _mindatas = 2  # hint to the platform\n\n        lines = ('correlation',)\n        params = (('period', 20),)\n\n        def next(self):\n            c, p, = scipy.stats.pearsonr(self.data0.get(size=self.p.period),\n                                         self.data1.get(size=self.p.period))\n\n            self.lines.correlation[0] = c` \n    ```", "```py\n     `# Data feeds\n        data0 = YahooData(dataname=args.data0, **kwargs)\n        # cerebro.adddata(data0)\n        cerebro.resampledata(data0, timeframe=bt.TimeFrame.Weeks)\n\n        data1 = YahooData(dataname=args.data1, **kwargs)\n        # cerebro.adddata(data1)\n        cerebro.resampledata(data1, timeframe=bt.TimeFrame.Weeks)\n        data1.plotinfo.plotmaster = data0` \n    ```", "```py\n`$ ./gold-vs-sp500.py --cerebro stdstats=False --plot volume=False` \n```", "```py\n`$ ./gold-vs-sp500.py --help\nusage: gold-vs-sp500.py [-h] [--data0 TICKER] [--data1 TICKER] [--offline]\n                        [--fromdate FROMDATE] [--todate TODATE]\n                        [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                        [--strat kwargs] [--plot [kwargs]] [--myobserver]\n\nGold vs SP500 from https://estrategiastrading.com/oro-bolsa-estadistica-con-\npython/\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data0 TICKER       Yahoo ticker to download (default: SPY)\n  --data1 TICKER       Yahoo ticker to download (default: GLD)\n  --offline            Use the offline files (default: False)\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                       2005-01-01)\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default:\n                       2016-01-01)\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\n# Reference\n# https://estrategiastrading.com/oro-bolsa-estadistica-con-python/\n\nimport argparse\nimport datetime\n\nimport scipy.stats\n\nimport backtrader as bt\n\nclass PearsonR(bt.ind.PeriodN):\n    _mindatas = 2  # hint to the platform\n\n    lines = ('correlation',)\n    params = (('period', 20),)\n\n    def next(self):\n        c, p, = scipy.stats.pearsonr(self.data0.get(size=self.p.period),\n                                     self.data1.get(size=self.p.period))\n\n        self.lines.correlation[0] = c\n\nclass MACrossOver(bt.Strategy):\n    params = (\n        ('ma', bt.ind.MovAv.SMA),\n        ('pd1', 20),\n        ('pd2', 20),\n    )\n\n    def __init__(self):\n        ma1 = self.p.ma(self.data0, period=self.p.pd1, subplot=True)\n        self.p.ma(self.data1, period=self.p.pd2, plotmaster=ma1)\n        PearsonR(self.data0, self.data1)\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict()\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    if not args.offline:\n        YahooData = bt.feeds.YahooFinanceData\n    else:\n        YahooData = bt.feeds.YahooFinanceCSVData\n\n    # Data feeds\n    data0 = YahooData(dataname=args.data0, **kwargs)\n    # cerebro.adddata(data0)\n    cerebro.resampledata(data0, timeframe=bt.TimeFrame.Weeks)\n\n    data1 = YahooData(dataname=args.data1, **kwargs)\n    # cerebro.adddata(data1)\n    cerebro.resampledata(data1, timeframe=bt.TimeFrame.Weeks)\n    data1.plotinfo.plotmaster = data0\n\n    # Broker\n    kwargs = eval('dict(' + args.broker + ')')\n    cerebro.broker = bt.brokers.BackBroker(**kwargs)\n\n    # Sizer\n    kwargs = eval('dict(' + args.sizer + ')')\n    cerebro.addsizer(bt.sizers.FixedSize, **kwargs)\n\n    # Strategy\n    if True:\n        kwargs = eval('dict(' + args.strat + ')')\n        cerebro.addstrategy(MACrossOver, **kwargs)\n\n    cerebro.addobserver(bt.observers.LogReturns2,\n                        timeframe=bt.TimeFrame.Weeks,\n                        compression=20)\n\n    # Execute\n    cerebro.run(**(eval('dict(' + args.cerebro + ')')))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**(eval('dict(' + args.plot + ')')))\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=(\n            'Gold vs SP500 from '\n            'https://estrategiastrading.com/oro-bolsa-estadistica-con-python/')\n    )\n\n    parser.add_argument('--data0', required=False, default='SPY',\n                        metavar='TICKER', help='Yahoo ticker to download')\n\n    parser.add_argument('--data1', required=False, default='GLD',\n                        metavar='TICKER', help='Yahoo ticker to download')\n\n    parser.add_argument('--offline', required=False, action='store_true',\n                        help='Use the offline files')\n\n    # Defaults for dates\n    parser.add_argument('--fromdate', required=False, default='2005-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='2016-01-01',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]