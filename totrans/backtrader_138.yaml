- en: Gold vs SP500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/blog/posts/2016-12-13-gold-vs-sp500/gold-vs-sp500/](https://www.backtrader.com/blog/posts/2016-12-13-gold-vs-sp500/gold-vs-sp500/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sometimes getting hints about where *backtrader* is in use helps understanding
    what people may be looking for and using the platform for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://estrategiastrading.com/oro-bolsa-estadistica-con-python/](https://estrategiastrading.com/oro-bolsa-estadistica-con-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is a post (Spanish) analyzing two ETFs: `GLD` vs `SPY` (effectively *Gold*
    vs *S&P500*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without going into the translation, let’s concentrate on the important points
    for *backtrader*:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a *Correlation* indicator. For the sake of it `PearsonR` was chosen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And for the feat of creating it and instead of coding it from scratch, a sample
    of how to do it from a `scipy` function is done. The code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding rolling logarithmic returns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The platform already had an analyzer with logarithmic returns, but not *rolling*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The analyzer `LogReturnsRolling` has been added, which takes a `timeframe` parameter
    (and `compression`) to use a different timeframe than that of the data (if needed
    be)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And together with it and for visualization (using the *analyzer* internally)
    a `LogReturns` observer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Allowing data on data plotting (easily). Just like this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just using `plotmaster=data0` will plot `data1` on `data0`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting the moving averages on its own axis and on each other was supported
    from the very start of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The *analyzer* and *observer* have also been added to the platform, together
    with a sample with the same defaults as those from the blog post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`stdstats=False` and `volume=False` are there to reduce clutter in the chart
    by removing some of the usual things like `CashValue` observer and the *volume*
    subplots.'
  prefs: []
  type: TYPE_NORMAL
- en: Produces a chart which mimics most of the output from the article.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/07fd7b9cbdb70d8e35cf1d9bf6e40005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Not included:'
  prefs: []
  type: TYPE_NORMAL
- en: The charts creating distributions of returns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They wouldn’t fit in the chart which has a *datetime* based x axis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: But having those distributions may come.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sample Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
