["```py\n`./buysellarrows.py --plot style=\"'ohlc'\"` \n```", "```py\n`class MyBuySell(bt.observers.BuySell):\n    plotlines = dict(\n        buy=dict(marker='$\\u21E7$', markersize=12.0),\n        sell=dict(marker='$\\u21E9$', markersize=12.0)\n    )` \n```", "```py\n `# Patch observer if needed\n    if args.myobserver:\n        bt.observers.BuySell = MyBuySell` \n```", "```py\n`cerebro = bt.Cerebro(stdstats=False)  # remove the standard observers\n\n...\ncerebro.addobserver(MyObserver, barplot=True)\n\n...` \n```", "```py\n`$ ./buysellarrows.py --plot style=\"'ohlc'\" --myobserver` \n```", "```py\n`$ ./buysellarrows.py --help\nusage: buysellarrows.py [-h] [--data DATA | --yahoo TICKER]\n                        [--fromdate FROMDATE] [--todate TODATE]\n                        [--cerebro kwargs] [--broker kwargs] [--sizer kwargs]\n                        [--strat kwargs] [--plot [kwargs]] [--myobserver]\n\nbuysell arrows ...\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --data DATA          Data to read in (default:\n                       ../../datas/2005-2006-day-001.txt)\n  --yahoo TICKER       Yahoo ticker to download (default: )\n  --fromdate FROMDATE  Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --todate TODATE      Date[time] in YYYY-MM-DD[THH:MM:SS] format (default: )\n  --cerebro kwargs     kwargs in key=value format (default: )\n  --broker kwargs      kwargs in key=value format (default: )\n  --sizer kwargs       kwargs in key=value format (default: )\n  --strat kwargs       kwargs in key=value format (default: )\n  --plot [kwargs]      kwargs in key=value format (default: )\n  --myobserver         Patch in Custom BuySell observer (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass MyBuySell(bt.observers.BuySell):\n    plotlines = dict(\n        buy=dict(marker='$\\u21E7$', markersize=12.0),\n        sell=dict(marker='$\\u21E9$', markersize=12.0)\n    )\n\nclass MACrossOver(bt.SignalStrategy):\n    params = (('ma', bt.ind.MovAv.SMA), ('p1', 10), ('p2', 30),)\n\n    def __init__(self):\n        ma1, ma2 = self.p.ma(period=self.p.p1), self.p.ma(period=self.p.p2)\n        self.signal_add(bt.SIGNAL_LONGSHORT, bt.ind.CrossOver(ma1, ma2))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed kwargs\n    kwargs = dict(dataname=args.yahoo or args.data)\n\n    # Parse from/to-date\n    dtfmt, tmfmt = '%Y-%m-%d', 'T%H:%M:%S'\n    for a, d in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n\n    # Data feed kwargs\n    if args.yahoo:\n        data0 = bt.feeds.YahooFinanceData(**kwargs)\n    else:\n        data0 = bt.feeds.BacktraderCSVData(**kwargs)\n    cerebro.adddata(data0)\n\n    # Broker\n    kwargs = eval('dict(' + args.broker + ')')\n    cerebro.broker = bt.brokers.BackBroker(**kwargs)\n\n    # Sizer\n    kwargs = eval('dict(' + args.sizer + ')')\n    cerebro.addsizer(bt.sizers.FixedSize, **kwargs)\n\n    # Strategy\n    kwargs = eval('dict(' + args.strat + ')')\n    cerebro.addstrategy(MACrossOver, **kwargs)\n\n    # better net liquidation value view\n    cerebro.addobserver(bt.observers.Value)\n\n    # Patch observer if needed\n    if args.myobserver:\n        bt.observers.BuySell = MyBuySell\n\n    # Execute\n    cerebro.run(**(eval('dict(' + args.cerebro + ')')))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**(eval('dict(' + args.plot + ')')))\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='buysell arrows ...')\n\n    pgroup = parser.add_mutually_exclusive_group(required=False)\n    pgroup.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Data to read in')\n\n    pgroup.add_argument('--yahoo', required=False, default='',\n                        metavar='TICKER', help='Yahoo ticker to download')\n\n    parser.add_argument('--fromdate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--todate', required=False, default='',\n                        help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n\n    parser.add_argument('--cerebro', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, default='',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', required=False, default='',\n                        nargs='?', const='{}',\n                        metavar='kwargs', help='kwargs in key=value format')\n\n    parser.add_argument('--myobserver', required=False, action='store_true',\n                        help='Patch in Custom BuySell observer')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]