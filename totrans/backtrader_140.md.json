["```py\n`cerebro.broker.set_shortcash(False)` \n```", "```py\n`cerebro.broker = bt.brokers.BackBroker(shortcash=False, **other_kwargs)` \n```", "```py\n`$ ./shortcash.py --plot` \n```", "```py\n`$ ./shortcash.py --plot --broker shortcash=False` \n```", "```py\n`$ ./shortcash.py --help\nusage: shortcash.py [-h] [--data DATA] [--cerebro CEREBRO] [--broker BROKER]\n                    [--sizer SIZER] [--strat STRAT] [--plot [kwargs]]\n\nshortcash testing ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Data to read in (default:\n                        ../../datas/2005-2006-day-001.txt)\n  --cerebro CEREBRO     kwargs in key=value format (default: )\n  --broker BROKER       kwargs in key=value format (default: )\n  --sizer SIZER         kwargs in key=value format (default: )\n  --strat STRAT         kwargs in key=value format (default: )\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\n\nclass MACrossOver(bt.SignalStrategy):\n    params = (('ma', bt.ind.MovAv.SMA), ('p1', 10), ('p2', 30),)\n\n    def __init__(self):\n        ma1, ma2 = self.p.ma(period=self.p.p1), self.p.ma(period=self.p.p2)\n        self.signal_add(bt.SIGNAL_LONGSHORT, bt.ind.CrossOver(ma1, ma2))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    # Data feed\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data)\n    cerebro.adddata(data0)\n\n    # Broker\n    kwargs = eval('dict(' + args.broker + ')')\n    cerebro.broker = bt.brokers.BackBroker(**kwargs)\n\n    # Sizer\n    kwargs = eval('dict(' + args.sizer + ')')\n    cerebro.addsizer(bt.sizers.FixedSize, **kwargs)\n\n    # Strategy\n    kwargs = eval('dict(' + args.strat + ')')\n    cerebro.addstrategy(MACrossOver, **kwargs)\n\n    # better net liquidation value view\n    cerebro.addobserver(bt.observers.Value)\n\n    # Execute\n    cerebro.run(**(eval('dict(' + args.cerebro + ')')))\n\n    if args.plot:  # Plot if requested to\n        cerebro.plot(**(eval('dict(' + args.plot + ')')))\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='shortcash testing ...')\n\n    parser.add_argument('--data', default='../../datas/2005-2006-day-001.txt',\n                        required=False, help='Data to read in')\n\n    parser.add_argument('--cerebro', required=False, action='store',\n                        default='', help='kwargs in key=value format')\n\n    parser.add_argument('--broker', required=False, action='store',\n                        default='', help='kwargs in key=value format')\n\n    parser.add_argument('--sizer', required=False, action='store',\n                        default='', help='kwargs in key=value format')\n\n    parser.add_argument('--strat', required=False, action='store',\n                        default='', help='kwargs in key=value format')\n\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const='{}',\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]