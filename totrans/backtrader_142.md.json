["```py\n`import backtrader as bt\n\nclass MyIndicator(bt.Indicator):\n\n    lines = ('myline',)\n    params = (('period', 20),)\n\n    ...` \n```", "```py\n`import backtrader as bt\n\nclass MyIndicator(bt.Indicator):\n\n    lines = ('myline',)\n    params = (('period', 20),)\n\n    def __init__(self):\n\n        self.lines.myline = (self.data.high - self.data.low) / self.p.period` \n```", "```py\n`class MyMetaClass(type):\n\n    def __new__(meta, name, bases, dct):\n        ...\n\n        lines = dct.pop('lines', ())\n        params = dct.pop('params', ())\n\n        # Some processing of lines and params ... takes place here\n\n        ...\n\n        dct['lines'] = MyLinesClass(info_from_lines)\n        dct['params'] = MyParamsClass(info_from_params)\n\n        ...` \n```", "```py\n`class MyClass(Parent, metaclass=MyMetaClass):\n\n    def __new__(cls, *args, **kwargs):\n\n        obj = super(MyClass, cls).__new__(cls, *args, **kwargs)\n        obj.lines = cls.lines()\n        obj.params = cls.params()\n\n        return obj` \n```"]