- en: Hidden Powers of Python (2)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的隐藏力量（2）
- en: 原文：[https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/](https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/](https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/)
- en: 'Let’s tackle a bit more how the *hidden powers of Python* are used in *backtrader*
    and how this is implemented to try to hit the main goal: *ease of use*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨 *Python 的隐藏力量* 如何在 *backtrader* 中使用，以及如何实现这一点以尝试达到主要目标：*易用性*
- en: What are those definitions?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这些定义是什么？
- en: 'For example an indicator:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如一个指标：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Anyone capable of reading python would say:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任何能够阅读 Python 的人都会说：
- en: '`lines` is a `tuple`, actually containing a single item, a string'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lines` 是一个 `tuple`，实际上包含一个字符串项目'
- en: '`params` is also a `tuple`, containing another `tuple` with 2 items'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` 也是一个 `tuple`，包含另一个包含 2 个项目的 `tuple`'
- en: But later on
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但是后来
- en: 'Extending the example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It should be obvious for anyone, here that:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何人来说，这里应该很明显：
- en: The definition of `lines` in the *class* has been turned into an attribute which
    can be reached as `self.lines` and contains in turn the attribute `myline` as
    specified in the definition
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*类*中的 `lines` 的定义已经转换为可以通过 `self.lines` 访问的属性，并且依次包含定义中指定的 `myline` 属性
- en: And
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 而且
- en: The definition of `params` in the *class* has been turned into an attribute
    which can be reached as `self.p` (or `self.params`) and contains in turn the attribute
    `period` as specified in the definition
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*类*中的 `params` 的定义已经转换为可以通过 `self.p`（或 `self.params`）访问的属性，并依次包含定义中指定的 `period`
    属性
- en: 'And `self.p.period` seems to have a value, because it is being directly used
    in an arithmetic operation (obviously the value is the one from the definition:
    `20`)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 而 `self.p.period` 似乎有一个值，因为它直接在算术运算中使用（显然该值是定义中的值：`20`）
- en: 'The answer: Metaclasses'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 答案：元类
- en: '`bt.Indicator` and therefore also `MyIndicator` have a *metaclass* and this
    allows applying *metaprogramming* concepts.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`bt.Indicator` 和因此也有 `MyIndicator` 的 *元类*，这允许应用 *元编程* 概念。'
- en: 'In this case *the interception of the definitions of ``lines`` and ``params``
    to* make them be:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，*拦截对 `lines` 和 `params` 定义的*方式是这样的：
- en: 'Attributes of the *instances*, ie: reachable as `self.lines` and `self.params`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实例* 的属性，即：可通过 `self.lines` 和 `self.params` 访问'
- en: Attributes of the *classes*
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*类* 的属性'
- en: Contain the `atributes` (and defined values) which are defined in them
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含其中定义的 `属性`（和已定义的值）
- en: Part of the secret
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分的秘密
- en: 'For those not versed in *metaclasses*, it is more or less done so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉*元类*的人，它或多或少是这样实现的：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here the creation of the *class* has been intercepted and the definitions of
    `lines` and `params` has been replaced with a *class* based in information extracted
    from the definitions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里拦截了*类*的创建，并用从定义中提取的信息替换了 `lines` 和 `params` 的定义。
- en: 'This alone would not reach, so the creation of the instances is also intercepted.
    With Pyton 3.x syntax:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这单独是不够的，所以还拦截了实例的创建。 使用 Pyton 3.x 语法：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And here, in the instance *instances* of what above was defined as `MyLinesClass`
    and `MyParamsClass` have been put into the instance of `MyClass`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*上面定义的* `MyLinesClass` 和 `MyParamsClass` 的实例已经被放置到 `MyClass` 的实例中。
- en: 'No, there is no conflict:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不，没有冲突：
- en: 'The *class* is so to say: “system wide” and contains its own attributes for
    `lines` and `params` which are classes'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*类* 可以说是：“系统范围内”，并包含其自己的 `lines` 和 `params` 的属性，它们是类'
- en: 'The *instance* is so to say: “system local” and each instance contains instances
    (different each time) of `lines` and `params`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实例* 可以说是：“系统本地”，每个实例都包含 `lines` 和 `params` 的实例（每次都不同）'
- en: Usually one will work for example with `self.lines` accessing the instance,
    but one could also use `MyClass.lines` accessing the class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，人们会使用 `self.lines` 访问实例，但也可以使用 `MyClass.lines` 访问类。
- en: The latter gives the user access to methods, which are not meant for general
    use, but this is Python and nothing can be forbidden and even less with *Open
    Source*
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 后者给用户访问方法的权限，这些方法并不是为了一般使用，但这是 Python，没有什么可以禁止的，甚至更不用说 *开源* 了
- en: Conclusion
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Metaclasses are working behind the scenes to provide a machinery which enables
    almos a metalanguage by processing things like the `tuple` definitions of `lines`
    and `params`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 元类在幕后工作，提供了一种机制，通过处理诸如 `lines` 和 `params` 的 `tuple` 定义之类的东西，从而使几乎成为一种元语言
- en: Being the goal to make the life easier for anyone using the platform
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是让任何使用该平台的人的生活更加轻松
