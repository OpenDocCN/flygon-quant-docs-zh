- en: Hidden Powers of Python (2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/](https://www.backtrader.com/blog/posts/2016-11-23-hidden-powers-2/hidden-powers/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s tackle a bit more how the *hidden powers of Python* are used in *backtrader*
    and how this is implemented to try to hit the main goal: *ease of use*'
  prefs: []
  type: TYPE_NORMAL
- en: What are those definitions?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For example an indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Anyone capable of reading python would say:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lines` is a `tuple`, actually containing a single item, a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` is also a `tuple`, containing another `tuple` with 2 items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But later on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Extending the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It should be obvious for anyone, here that:'
  prefs: []
  type: TYPE_NORMAL
- en: The definition of `lines` in the *class* has been turned into an attribute which
    can be reached as `self.lines` and contains in turn the attribute `myline` as
    specified in the definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And
  prefs: []
  type: TYPE_NORMAL
- en: The definition of `params` in the *class* has been turned into an attribute
    which can be reached as `self.p` (or `self.params`) and contains in turn the attribute
    `period` as specified in the definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And `self.p.period` seems to have a value, because it is being directly used
    in an arithmetic operation (obviously the value is the one from the definition:
    `20`)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The answer: Metaclasses'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`bt.Indicator` and therefore also `MyIndicator` have a *metaclass* and this
    allows applying *metaprogramming* concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case *the interception of the definitions of ``lines`` and ``params``
    to* make them be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes of the *instances*, ie: reachable as `self.lines` and `self.params`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attributes of the *classes*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contain the `atributes` (and defined values) which are defined in them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part of the secret
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For those not versed in *metaclasses*, it is more or less done so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here the creation of the *class* has been intercepted and the definitions of
    `lines` and `params` has been replaced with a *class* based in information extracted
    from the definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This alone would not reach, so the creation of the instances is also intercepted.
    With Pyton 3.x syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And here, in the instance *instances* of what above was defined as `MyLinesClass`
    and `MyParamsClass` have been put into the instance of `MyClass`.
  prefs: []
  type: TYPE_NORMAL
- en: 'No, there is no conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *class* is so to say: “system wide” and contains its own attributes for
    `lines` and `params` which are classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *instance* is so to say: “system local” and each instance contains instances
    (different each time) of `lines` and `params`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually one will work for example with `self.lines` accessing the instance,
    but one could also use `MyClass.lines` accessing the class.
  prefs: []
  type: TYPE_NORMAL
- en: The latter gives the user access to methods, which are not meant for general
    use, but this is Python and nothing can be forbidden and even less with *Open
    Source*
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metaclasses are working behind the scenes to provide a machinery which enables
    almos a metalanguage by processing things like the `tuple` definitions of `lines`
    and `params`
  prefs: []
  type: TYPE_NORMAL
- en: Being the goal to make the life easier for anyone using the platform
  prefs: []
  type: TYPE_NORMAL
