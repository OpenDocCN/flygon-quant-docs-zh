["```py\n`class St0(bt.SignalStrategy):\n    def __init__(self):\n        sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=30)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n\nclass St1(bt.SignalStrategy):\n    def __init__(self):\n        sma1 = bt.ind.SMA(period=10)\n        crossover = bt.ind.CrossOver(self.data.close, sma1)\n        self.signal_add(bt.SIGNAL_LONG, crossover)` \n```", "```py\n`class StFetcher(object):\n    _STRATS = [St0, St1]\n\n    def __new__(cls, *args, **kwargs):\n        idx = kwargs.pop('idx')\n\n        obj = cls._STRATS[idx](*args, **kwargs)\n        return obj` \n```", "```py\n `cerebro.addanalyzer(bt.analyzers.Returns)\n    cerebro.optstrategy(StFetcher, idx=[0, 1])\n    results = cerebro.run(maxcpus=args.maxcpus, optreturn=args.optreturn)` \n```", "```py\n `strats = [x[0] for x in results]  # flatten the result\n    for i, strat in enumerate(strats):\n        rets = strat.analyzers.returns.get_analysis()\n        print('Strat {} Name {}:\\n - analyzer: {}\\n'.format(\n            i, strat.__class__.__name__, rets))` \n```", "```py\n`./strategy-selection.py\n\nStrat 0 Name St0:\n  - analyzer: OrderedDict([(u'rtot', 0.04847392369449283), (u'ravg', 9.467563221580632e-05), (u'rnorm', 0.02414514457151587), (u'rnorm100', 2.414514457151587)])\n\nStrat 1 Name St1:\n  - analyzer: OrderedDict([(u'rtot', 0.05124714332260593), (u'ravg', 0.00010009207680196471), (u'rnorm', 0.025543999840699633), (u'rnorm100', 2.5543999840699634)])` \n```", "```py\n`$ ./strategy-selection.py --help\nusage: strategy-selection.py [-h] [--data DATA] [--maxcpus MAXCPUS]\n                             [--optreturn]\n\nSample for strategy selection\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --data DATA        Data to be read in (default:\n                     ../../datas/2005-2006-day-001.txt)\n  --maxcpus MAXCPUS  Limit the numer of CPUs to use (default: None)\n  --optreturn        Return reduced/mocked strategy object (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\n\nclass St0(bt.SignalStrategy):\n    def __init__(self):\n        sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=30)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n\nclass St1(bt.SignalStrategy):\n    def __init__(self):\n        sma1 = bt.ind.SMA(period=10)\n        crossover = bt.ind.CrossOver(self.data.close, sma1)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\n\nclass StFetcher(object):\n    _STRATS = [St0, St1]\n\n    def __new__(cls, *args, **kwargs):\n        idx = kwargs.pop('idx')\n\n        obj = cls._STRATS[idx](*args, **kwargs)\n        return obj\n\ndef runstrat(pargs=None):\n    args = parse_args(pargs)\n\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname=args.data)\n    cerebro.adddata(data)\n\n    cerebro.addanalyzer(bt.analyzers.Returns)\n    cerebro.optstrategy(StFetcher, idx=[0, 1])\n    results = cerebro.run(maxcpus=args.maxcpus, optreturn=args.optreturn)\n\n    strats = [x[0] for x in results]  # flatten the result\n    for i, strat in enumerate(strats):\n        rets = strat.analyzers.returns.get_analysis()\n        print('Strat {} Name {}:\\n - analyzer: {}\\n'.format(\n            i, strat.__class__.__name__, rets))\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for strategy selection')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--maxcpus', required=False, action='store',\n                        default=None, type=int,\n                        help='Limit the numer of CPUs to use')\n\n    parser.add_argument('--optreturn', required=False, action='store_true',\n                        help='Return reduced/mocked strategy object')\n\n    return parser.parse_args(pargs)\n\nif __name__ == '__main__':\n    runstrat()` \n```"]