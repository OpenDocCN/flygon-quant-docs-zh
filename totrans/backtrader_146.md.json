["```py\n`cerebro = bt.Cerebro(oldsync=True)` \n```", "```py\n`cerebro.run(oldsync=True)` \n```", "```py\n`$ ./multidata-strategy-unaligned.py --oldsync --plot` \n```", "```py\n`...\nSelf  len: 753\nData0 len: 753\nData1 len: 750\nData0 len == Data1 len: False\nData0 dt: 2005-12-27 23:59:59\nData1 dt: 2005-12-27 23:59:59\n...` \n```", "```py\n`$ ./multidata-strategy-unaligned.py --plot` \n```", "```py\n`...\nSelf  len: 756\nData0 len: 753\nData1 len: 753\nData0 len == Data1 len: True\nData0 dt: 2005-12-27 23:59:59\nData1 dt: 2005-12-30 23:59:59\n...` \n```", "```py\n`$ ./multidata-strategy-unaligned.py --help\nusage: multidata-strategy-unaligned.py [-h] [--data0 DATA0] [--data1 DATA1]\n                                       [--fromdate FROMDATE] [--todate TODATE]\n                                       [--period PERIOD] [--cash CASH]\n                                       [--runnext] [--nopreload] [--oldsync]\n                                       [--commperc COMMPERC] [--stake STAKE]\n                                       [--plot] [--numfigs NUMFIGS]\n\nMultiData Strategy\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0, -d0 DATA0\n                        1st data into the system\n  --data1 DATA1, -d1 DATA1\n                        2nd data into the system\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format\n  --period PERIOD       Period to apply to the Simple Moving Average\n  --cash CASH           Starting Cash\n  --runnext             Use next by next instead of runonce\n  --nopreload           Do not preload the data\n  --oldsync             Use old data synchronization method\n  --commperc COMMPERC   Percentage commission (0.005 is 0.5%\n  --stake STAKE         Stake to apply in each operation\n  --plot, -p            Plot the read data\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using numfigs figures` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\n# The above could be sent to an independent module\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass MultiDataStrategy(bt.Strategy):\n    '''\n    This strategy operates on 2 datas. The expectation is that the 2 datas are\n    correlated and the 2nd data is used to generate signals on the 1st\n\n      - Buy/Sell Operationss will be executed on the 1st data\n      - The signals are generated using a Simple Moving Average on the 2nd data\n        when the close price crosses upwwards/downwards\n\n    The strategy is a long-only strategy\n    '''\n    params = dict(\n        period=15,\n        stake=10,\n        printout=True,\n    )\n\n    def log(self, txt, dt=None):\n        if self.p.printout:\n            dt = dt or self.data.datetime[0]\n            dt = bt.num2date(dt)\n            print('%s, %s' % (dt.isoformat(), txt))\n\n    def notify_order(self, order):\n        if order.status in [bt.Order.Submitted, bt.Order.Accepted]:\n            return  # Await further notifications\n\n        if order.status == order.Completed:\n            if order.isbuy():\n                buytxt = 'BUY COMPLETE, %.2f' % order.executed.price\n                self.log(buytxt, order.executed.dt)\n            else:\n                selltxt = 'SELL COMPLETE, %.2f' % order.executed.price\n                self.log(selltxt, order.executed.dt)\n\n        elif order.status in [order.Expired, order.Canceled, order.Margin]:\n            self.log('%s ,' % order.Status[order.status])\n            pass  # Simply log\n\n        # Allow new orders\n        self.orderid = None\n\n    def __init__(self):\n        # To control operation entries\n        self.orderid = None\n\n        # Create SMA on 2nd data\n        sma = btind.MovAv.SMA(self.data1, period=self.p.period)\n        # Create a CrossOver Signal from close an moving average\n        self.signal = btind.CrossOver(self.data1.close, sma)\n\n    def next(self):\n        if self.orderid:\n            return  # if an order is active, no new orders are allowed\n\n        if self.p.printout:\n            print('Self  len:', len(self))\n            print('Data0 len:', len(self.data0))\n            print('Data1 len:', len(self.data1))\n            print('Data0 len == Data1 len:',\n                  len(self.data0) == len(self.data1))\n\n            print('Data0 dt:', self.data0.datetime.datetime())\n            print('Data1 dt:', self.data1.datetime.datetime())\n\n        if not self.position:  # not yet in market\n            if self.signal > 0.0:  # cross upwards\n                self.log('BUY CREATE , %.2f' % self.data1.close[0])\n                self.buy(size=self.p.stake)\n\n        else:  # in the market\n            if self.signal < 0.0:  # crosss downwards\n                self.log('SELL CREATE , %.2f' % self.data1.close[0])\n                self.sell(size=self.p.stake)\n\n    def stop(self):\n        print('==================================================')\n        print('Starting Value - %.2f' % self.broker.startingcash)\n        print('Ending   Value - %.2f' % self.broker.getvalue())\n        print('==================================================')\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data0 = btfeeds.YahooFinanceCSVData(\n        dataname=args.data0,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 1st data to cerebro\n    cerebro.adddata(data0)\n\n    # Create the 2nd data\n    data1 = btfeeds.YahooFinanceCSVData(\n        dataname=args.data1,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 2nd data to cerebro\n    cerebro.adddata(data1)\n\n    # Add the strategy\n    cerebro.addstrategy(MultiDataStrategy,\n                        period=args.period,\n                        stake=args.stake)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcash(args.cash)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcommission(commission=args.commperc)\n\n    # And run it\n    cerebro.run(runonce=not args.runnext,\n                preload=not args.nopreload,\n                oldsync=args.oldsync)\n\n    # Plot if requested\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, volume=False, zdown=False)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='MultiData Strategy')\n\n    parser.add_argument('--data0', '-d0',\n                        default='../../datas/orcl-2003-2005.txt',\n                        help='1st data into the system')\n\n    parser.add_argument('--data1', '-d1',\n                        default='../../datas/yhoo-2003-2005.txt',\n                        help='2nd data into the system')\n\n    parser.add_argument('--fromdate', '-f',\n                        default='2003-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default='2005-12-31',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--period', default=15, type=int,\n                        help='Period to apply to the Simple Moving Average')\n\n    parser.add_argument('--cash', default=100000, type=int,\n                        help='Starting Cash')\n\n    parser.add_argument('--runnext', action='store_true',\n                        help='Use next by next instead of runonce')\n\n    parser.add_argument('--nopreload', action='store_true',\n                        help='Do not preload the data')\n\n    parser.add_argument('--oldsync', action='store_true',\n                        help='Use old data synchronization method')\n\n    parser.add_argument('--commperc', default=0.005, type=float,\n                        help='Percentage commission (0.005 is 0.5%%')\n\n    parser.add_argument('--stake', default=10, type=int,\n                        help='Stake to apply in each operation')\n\n    parser.add_argument('--plot', '-p', action='store_true',\n                        help='Plot the read data')\n\n    parser.add_argument('--numfigs', '-n', default=1,\n                        help='Plot using numfigs figures')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]