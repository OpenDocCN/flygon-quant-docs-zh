["```py\n`--annualize --timeframe xxx` \n```", "```py\n`--timeframe xxx` \n```", "```py\n`$ ./vwr.py --help\nusage: vwr.py [-h] [--data DATA] [--cash CASH] [--fromdate FROMDATE]\n              [--todate TODATE] [--writercsv]\n              [--tframe {weeks,months,days,years}] [--sigma-max SIGMA_MAX]\n              [--tau TAU] [--tann TANN] [--stddev-sample] [--plot [kwargs]]\n\nTimeReturns and VWR\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system (default:\n                        ../../datas/2005-2006-day-001.txt)\n  --cash CASH           Starting Cash (default: None)\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format (default: None)\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format (default: None)\n  --writercsv, -wcsv    Tell the writer to produce a csv stream (default:\n                        False)\n  --tframe {weeks,months,days,years}, --timeframe {weeks,months,days,years}\n                        TimeFrame for the Returns/Sharpe calculations\n                        (default: None)\n  --sigma-max SIGMA_MAX\n                        VWR Sigma Max (default: None)\n  --tau TAU             VWR tau factor (default: None)\n  --tann TANN           Annualization factor (default: None)\n  --stddev-sample       Consider Bessels correction for stddeviation (default:\n                        False)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nTFRAMES = dict(\n    days=bt.TimeFrame.Days,\n    weeks=bt.TimeFrame.Weeks,\n    months=bt.TimeFrame.Months,\n    years=bt.TimeFrame.Years)\n\ndef runstrat(pargs=None):\n    args = parse_args(pargs)\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    if args.cash is not None:\n        cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    # Get the dates from the args\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    # Create the 1st data\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, **dkwargs)\n    cerebro.adddata(data)  # Add the data to cerebro\n\n    cerebro.addstrategy(bt.strategies.SMA_CrossOver)  # Add the strategy\n\n    lrkwargs = dict()\n    if args.tframe is not None:\n        lrkwargs['timeframe'] = TFRAMES[args.tframe]\n\n    if args.tann is not None:\n        lrkwargs['tann'] = args.tann\n\n    cerebro.addanalyzer(bt.analyzers.Returns, **lrkwargs)  # Returns\n\n    vwrkwargs = dict()\n    if args.tframe is not None:\n        vwrkwargs['timeframe'] = TFRAMES[args.tframe]\n\n    if args.tann is not None:\n        vwrkwargs['tann'] = args.tann\n\n    if args.sigma_max is not None:\n        vwrkwargs['sigma_max'] = args.sigma_max\n\n    if args.tau is not None:\n        vwrkwargs['tau'] = args.tau\n\n    cerebro.addanalyzer(bt.analyzers.VWR, **vwrkwargs)  # VWR Analyzer\n\n    # Add a writer to get output\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=4)\n\n    cerebro.run()  # And run it\n\n    # Plot if requested\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='TimeReturns and SharpeRatio')\n\n    parser.add_argument('--data', '-d',\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='data to add to the system')\n\n    parser.add_argument('--cash', default=None, type=float, required=False,\n                        help='Starting Cash')\n\n    parser.add_argument('--fromdate', '-f',\n                        default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--writercsv', '-wcsv', action='store_true',\n                        help='Tell the writer to produce a csv stream')\n\n    parser.add_argument('--tframe', '--timeframe', default=None,\n                        required=False, choices=TFRAMES.keys(),\n                        help='TimeFrame for the Returns/Sharpe calculations')\n\n    parser.add_argument('--sigma-max', required=False, action='store',\n                        type=float, default=None,\n                        help='VWR Sigma Max')\n\n    parser.add_argument('--tau', required=False, action='store',\n                        type=float, default=None,\n                        help='VWR tau factor')\n\n    parser.add_argument('--tann', required=False, action='store',\n                        type=float, default=None,\n                        help=('Annualization factor'))\n\n    parser.add_argument('--stddev-sample', required=False, action='store_true',\n                        help='Consider Bessels correction for stddeviation')\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]