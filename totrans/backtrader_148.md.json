["```py\n`$ ./optimization.py --maxcpus 1\n==================================================\n**************************************************\n--------------------------------------------------\nOrderedDict([(u'smaperiod', 10), (u'macdperiod1', 12), (u'macdperiod2', 26), (u'macdperiod3', 9)])\n**************************************************\n--------------------------------------------------\nOrderedDict([(u'smaperiod', 10), (u'macdperiod1', 13), (u'macdperiod2', 26), (u'macdperiod3', 9)])\n...\n...\nOrderedDict([(u'smaperiod', 29), (u'macdperiod1', 19), (u'macdperiod2', 29), (u'macdperiod3', 14)])\n==================================================\nTime used: 184.922727833` \n```", "```py\n`$ ./optimization.py\n...\n...\n...\n==================================================\nTime used: 56.5889185394` \n```", "```py\n`$ ./optimization.py --no-optreturn\n...\n...\n...\n==================================================\nTime used: 67.056914007` \n```", "```py\n`$ ./optimization.py --no-optdatas\n...\n...\n...\n==================================================\nTime used: 72.7238112637` \n```", "```py\n`$ ./optimization.py --no-optdatas --no-optreturn\n...\n...\n...\n==================================================\nTime used: 83.6246643786` \n```", "```py\n`$ ./optimization.py --help\nusage: optimization.py [-h] [--data DATA] [--fromdate FROMDATE]\n                       [--todate TODATE] [--maxcpus MAXCPUS] [--no-runonce]\n                       [--exactbars EXACTBARS] [--no-optdatas]\n                       [--no-optreturn] [--ma_low MA_LOW] [--ma_high MA_HIGH]\n                       [--m1_low M1_LOW] [--m1_high M1_HIGH] [--m2_low M2_LOW]\n                       [--m2_high M2_HIGH] [--m3_low M3_LOW]\n                       [--m3_high M3_HIGH]\n\nOptimization\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format\n  --maxcpus MAXCPUS, -m MAXCPUS\n                        Number of CPUs to use in the optimization\n                          - 0 (default): use all available CPUs\n                          - 1 -> n: use as many as specified\n  --no-runonce          Run in next mode\n  --exactbars EXACTBARS\n                        Use the specified exactbars still compatible with preload\n                          0 No memory savings\n                          -1 Moderate memory savings\n                          -2 Less moderate memory savings\n  --no-optdatas         Do not optimize data preloading in optimization\n  --no-optreturn        Do not optimize the returned values to save time\n  --ma_low MA_LOW       SMA range low to optimize\n  --ma_high MA_HIGH     SMA range high to optimize\n  --m1_low M1_LOW       MACD Fast MA range low to optimize\n  --m1_high M1_HIGH     MACD Fast MA range high to optimize\n  --m2_low M2_LOW       MACD Slow MA range low to optimize\n  --m2_high M2_HIGH     MACD Slow MA range high to optimize\n  --m3_low M3_LOW       MACD Signal range low to optimize\n  --m3_high M3_HIGH     MACD Signal range high to optimize` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport time\n\nfrom backtrader.utils.py3 import range\n\nimport backtrader as bt\nimport backtrader.indicators as btind\nimport backtrader.feeds as btfeeds\n\nclass OptimizeStrategy(bt.Strategy):\n    params = (('smaperiod', 15),\n              ('macdperiod1', 12),\n              ('macdperiod2', 26),\n              ('macdperiod3', 9),\n              )\n\n    def __init__(self):\n        # Add indicators to add load\n\n        btind.SMA(period=self.p.smaperiod)\n        btind.MACD(period_me1=self.p.macdperiod1,\n                   period_me2=self.p.macdperiod2,\n                   period_signal=self.p.macdperiod3)\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(maxcpus=args.maxcpus,\n                         runonce=not args.no_runonce,\n                         exactbars=args.exactbars,\n                         optdatas=not args.no_optdatas,\n                         optreturn=not args.no_optreturn)\n\n    # Add a strategy\n    cerebro.optstrategy(\n        OptimizeStrategy,\n        smaperiod=range(args.ma_low, args.ma_high),\n        macdperiod1=range(args.m1_low, args.m1_high),\n        macdperiod2=range(args.m2_low, args.m2_high),\n        macdperiod3=range(args.m3_low, args.m3_high),\n    )\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data = btfeeds.BacktraderCSVData(\n        dataname=args.data,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the Data Feed to Cerebro\n    cerebro.adddata(data)\n\n    # clock the start of the process\n    tstart = time.clock()\n\n    # Run over everything\n    stratruns = cerebro.run()\n\n    # clock the end of the process\n    tend = time.clock()\n\n    print('==================================================')\n    for stratrun in stratruns:\n        print('**************************************************')\n        for strat in stratrun:\n            print('--------------------------------------------------')\n            print(strat.p._getkwargs())\n    print('==================================================')\n\n    # print out the result\n    print('Time used:', str(tend - tstart))\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Optimization',\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n\n    parser.add_argument(\n        '--data', '-d',\n        default='../../datas/2006-day-001.txt',\n        help='data to add to the system')\n\n    parser.add_argument(\n        '--fromdate', '-f',\n        default='2006-01-01',\n        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument(\n        '--todate', '-t',\n        default='2006-12-31',\n        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument(\n        '--maxcpus', '-m',\n        type=int, required=False, default=0,\n        help=('Number of CPUs to use in the optimization'\n              '\\n'\n              '  - 0 (default): use all available CPUs\\n'\n              '  - 1 -> n: use as many as specified\\n'))\n\n    parser.add_argument(\n        '--no-runonce', action='store_true', required=False,\n        help='Run in next mode')\n\n    parser.add_argument(\n        '--exactbars', required=False, type=int, default=0,\n        help=('Use the specified exactbars still compatible with preload\\n'\n              '  0 No memory savings\\n'\n              '  -1 Moderate memory savings\\n'\n              '  -2 Less moderate memory savings\\n'))\n\n    parser.add_argument(\n        '--no-optdatas', action='store_true', required=False,\n        help='Do not optimize data preloading in optimization')\n\n    parser.add_argument(\n        '--no-optreturn', action='store_true', required=False,\n        help='Do not optimize the returned values to save time')\n\n    parser.add_argument(\n        '--ma_low', type=int,\n        default=10, required=False,\n        help='SMA range low to optimize')\n\n    parser.add_argument(\n        '--ma_high', type=int,\n        default=30, required=False,\n        help='SMA range high to optimize')\n\n    parser.add_argument(\n        '--m1_low', type=int,\n        default=12, required=False,\n        help='MACD Fast MA range low to optimize')\n\n    parser.add_argument(\n        '--m1_high', type=int,\n        default=20, required=False,\n        help='MACD Fast MA range high to optimize')\n\n    parser.add_argument(\n        '--m2_low', type=int,\n        default=26, required=False,\n        help='MACD Slow MA range low to optimize')\n\n    parser.add_argument(\n        '--m2_high', type=int,\n        default=30, required=False,\n        help='MACD Slow MA range high to optimize')\n\n    parser.add_argument(\n        '--m3_low', type=int,\n        default=9, required=False,\n        help='MACD Signal range low to optimize')\n\n    parser.add_argument(\n        '--m3_high', type=int,\n        default=15, required=False,\n        help='MACD Signal range high to optimize')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]