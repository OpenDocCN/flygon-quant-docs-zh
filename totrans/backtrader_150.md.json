["```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ndata0 = bt.feeds.MyFeed(dataname='Expiry0')\ndata1 = bt.feeds.MyFeed(dataname='Expiry1')\n...\ndataN = bt.feeds.MyFeed(dataname='ExpiryN')\n\ndrollover = cerebro.rolloverdata(data0, data1, ..., dataN, name='MyRoll', **kwargs)\n\ncerebro.run()` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ndata0 = bt.feeds.MyFeed(dataname='Expiry0')\ndata1 = bt.feeds.MyFeed(dataname='Expiry1')\n...\ndataN = bt.feeds.MyFeed(dataname='ExpiryN')\n\ndrollover = bt.feeds.RollOver(data0, data1, ..., dataN, dataname='MyRoll', **kwargs)\ncerebro.adddata(drollover)\n\ncerebro.run()` \n```", "```py\n    `checkdate(dt, d):` \n    ```", "```py\n    `checkcondition(d0, d1)` \n    ```", "```py\n`$ ./rollover.py\n\nLen, Name, RollName, Datetime, WeekDay, Open, High, Low, Close, Volume, OpenInterest\n0001, FESX, 199FESXM4, 2013-09-26, Thu, 2829.0, 2843.0, 2829.0, 2843.0, 3.0, 1000.0\n0002, FESX, 199FESXM4, 2013-09-27, Fri, 2842.0, 2842.0, 2832.0, 2841.0, 16.0, 1101.0\n...\n0176, FESX, 199FESXM4, 2014-06-20, Fri, 3315.0, 3324.0, 3307.0, 3322.0, 134777.0, 520978.0\n0177, FESX, 199FESXU4, 2014-06-23, Mon, 3301.0, 3305.0, 3265.0, 3285.0, 730211.0, 3003692.0\n...\n0241, FESX, 199FESXU4, 2014-09-19, Fri, 3287.0, 3308.0, 3286.0, 3294.0, 144692.0, 566249.0\n0242, FESX, 199FESXZ4, 2014-09-22, Mon, 3248.0, 3263.0, 3231.0, 3240.0, 582077.0, 2976624.0\n...\n0306, FESX, 199FESXZ4, 2014-12-19, Fri, 3196.0, 3202.0, 3131.0, 3132.0, 226415.0, 677924.0\n0307, FESX, 199FESXH5, 2014-12-22, Mon, 3151.0, 3177.0, 3139.0, 3168.0, 547095.0, 2952769.0\n...\n0366, FESX, 199FESXH5, 2015-03-20, Fri, 3680.0, 3698.0, 3672.0, 3695.0, 147632.0, 887205.0\n0367, FESX, 199FESXM5, 2015-03-23, Mon, 3654.0, 3655.0, 3608.0, 3618.0, 802344.0, 3521988.0\n...\n0426, FESX, 199FESXM5, 2015-06-18, Thu, 3398.0, 3540.0, 3373.0, 3465.0, 1173246.0, 811805.0\n0427, FESX, 199FESXM5, 2015-06-19, Fri, 3443.0, 3499.0, 3440.0, 3488.0, 104096.0, 516792.0` \n```", "```py\n`$ ./rollover.py --rollover --plot\n\nLen, Name, RollName, Datetime, WeekDay, Open, High, Low, Close, Volume, OpenInterest\n0001, FESX, 199FESXM4, 2013-09-26, Thu, 2829.0, 2843.0, 2829.0, 2843.0, 3.0, 1000.0\n0002, FESX, 199FESXM4, 2013-09-27, Fri, 2842.0, 2842.0, 2832.0, 2841.0, 16.0, 1101.0\n...\n0176, FESX, 199FESXM4, 2014-06-20, Fri, 3315.0, 3324.0, 3307.0, 3322.0, 134777.0, 520978.0\n0177, FESX, 199FESXU4, 2014-06-23, Mon, 3301.0, 3305.0, 3265.0, 3285.0, 730211.0, 3003692.0\n...\n0241, FESX, 199FESXU4, 2014-09-19, Fri, 3287.0, 3308.0, 3286.0, 3294.0, 144692.0, 566249.0\n0242, FESX, 199FESXZ4, 2014-09-22, Mon, 3248.0, 3263.0, 3231.0, 3240.0, 582077.0, 2976624.0\n...\n0306, FESX, 199FESXZ4, 2014-12-19, Fri, 3196.0, 3202.0, 3131.0, 3132.0, 226415.0, 677924.0\n0307, FESX, 199FESXH5, 2014-12-22, Mon, 3151.0, 3177.0, 3139.0, 3168.0, 547095.0, 2952769.0\n...\n0366, FESX, 199FESXH5, 2015-03-20, Fri, 3680.0, 3698.0, 3672.0, 3695.0, 147632.0, 887205.0\n0367, FESX, 199FESXM5, 2015-03-23, Mon, 3654.0, 3655.0, 3608.0, 3618.0, 802344.0, 3521988.0\n...\n0426, FESX, 199FESXM5, 2015-06-18, Thu, 3398.0, 3540.0, 3373.0, 3465.0, 1173246.0, 811805.0\n0427, FESX, 199FESXM5, 2015-06-19, Fri, 3443.0, 3499.0, 3440.0, 3488.0, 104096.0, 516792.0` \n```", "```py\n`$ ./rollover.py --rollover --checkdate --plot\n\nLen, Name, RollName, Datetime, WeekDay, Open, High, Low, Close, Volume, OpenInterest\n0001, FESX, 199FESXM4, 2013-09-26, Thu, 2829.0, 2843.0, 2829.0, 2843.0, 3.0, 1000.0\n0002, FESX, 199FESXM4, 2013-09-27, Fri, 2842.0, 2842.0, 2832.0, 2841.0, 16.0, 1101.0\n...\n0171, FESX, 199FESXM4, 2014-06-13, Fri, 3283.0, 3292.0, 3253.0, 3276.0, 734907.0, 2715357.0\n0172, FESX, 199FESXU4, 2014-06-16, Mon, 3261.0, 3275.0, 3252.0, 3262.0, 180608.0, 844486.0\n...\n0236, FESX, 199FESXU4, 2014-09-12, Fri, 3245.0, 3247.0, 3220.0, 3232.0, 650314.0, 2726874.0\n0237, FESX, 199FESXZ4, 2014-09-15, Mon, 3209.0, 3224.0, 3203.0, 3221.0, 153448.0, 983793.0\n...\n0301, FESX, 199FESXZ4, 2014-12-12, Fri, 3127.0, 3143.0, 3038.0, 3042.0, 1409834.0, 2934179.0\n0302, FESX, 199FESXH5, 2014-12-15, Mon, 3041.0, 3089.0, 2963.0, 2980.0, 329896.0, 904053.0\n...\n0361, FESX, 199FESXH5, 2015-03-13, Fri, 3657.0, 3680.0, 3627.0, 3670.0, 867678.0, 3499116.0\n0362, FESX, 199FESXM5, 2015-03-16, Mon, 3594.0, 3641.0, 3588.0, 3629.0, 250445.0, 1056099.0\n...\n0426, FESX, 199FESXM5, 2015-06-18, Thu, 3398.0, 3540.0, 3373.0, 3465.0, 1173246.0, 811805.0\n0427, FESX, 199FESXM5, 2015-06-19, Fri, 3443.0, 3499.0, 3440.0, 3488.0, 104096.0, 516792.0` \n```", "```py\n`$ ./rollover.py --rollover --checkdate --checkcondition --plot\n\nLen, Name, RollName, Datetime, WeekDay, Open, High, Low, Close, Volume, OpenInterest\n0001, FESX, 199FESXM4, 2013-09-26, Thu, 2829.0, 2843.0, 2829.0, 2843.0, 3.0, 1000.0\n0002, FESX, 199FESXM4, 2013-09-27, Fri, 2842.0, 2842.0, 2832.0, 2841.0, 16.0, 1101.0\n...\n0175, FESX, 199FESXM4, 2014-06-19, Thu, 3307.0, 3330.0, 3300.0, 3321.0, 717979.0, 759122.0\n0176, FESX, 199FESXU4, 2014-06-20, Fri, 3309.0, 3318.0, 3290.0, 3298.0, 711627.0, 2957641.0\n...\n0240, FESX, 199FESXU4, 2014-09-18, Thu, 3249.0, 3275.0, 3243.0, 3270.0, 846600.0, 803202.0\n0241, FESX, 199FESXZ4, 2014-09-19, Fri, 3273.0, 3293.0, 3250.0, 3252.0, 1042294.0, 3021305.0\n...\n0305, FESX, 199FESXZ4, 2014-12-18, Thu, 3095.0, 3175.0, 3085.0, 3172.0, 1309574.0, 889112.0\n0306, FESX, 199FESXH5, 2014-12-19, Fri, 3195.0, 3200.0, 3106.0, 3147.0, 1329040.0, 2964538.0\n...\n0365, FESX, 199FESXH5, 2015-03-19, Thu, 3661.0, 3691.0, 3646.0, 3668.0, 1271122.0, 1054639.0\n0366, FESX, 199FESXM5, 2015-03-20, Fri, 3607.0, 3664.0, 3595.0, 3646.0, 1182235.0, 3407004.0\n...\n0426, FESX, 199FESXM5, 2015-06-18, Thu, 3398.0, 3540.0, 3373.0, 3465.0, 1173246.0, 811805.0\n0427, FESX, 199FESXM5, 2015-06-19, Fri, 3443.0, 3499.0, 3440.0, 3488.0, 104096.0, 516792.0` \n```", "```py\n`$ ./rollover.py --help\nusage: rollover.py [-h] [--no-cerebro] [--rollover] [--checkdate]\n                   [--checkcondition] [--plot [kwargs]]\n\nSample for Roll Over of Futures\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-cerebro          Use RollOver Directly (default: False)\n  --rollover\n  --checkdate           Change during expiration week (default: False)\n  --checkcondition      Change when a given condition is met (default: False)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport bisect\nimport calendar\nimport datetime\n\nimport backtrader as bt\n\nclass TheStrategy(bt.Strategy):\n    def start(self):\n        header = ['Len', 'Name', 'RollName', 'Datetime', 'WeekDay', 'Open',\n                  'High', 'Low', 'Close', 'Volume', 'OpenInterest']\n        print(', '.join(header))\n\n    def next(self):\n        txt = list()\n        txt.append('%04d' % len(self.data0))\n        txt.append('{}'.format(self.data0._dataname))\n        # Internal knowledge ... current expiration in use is in _d\n        txt.append('{}'.format(self.data0._d._dataname))\n        txt.append('{}'.format(self.data.datetime.date()))\n        txt.append('{}'.format(self.data.datetime.date().strftime('%a')))\n        txt.append('{}'.format(self.data.open[0]))\n        txt.append('{}'.format(self.data.high[0]))\n        txt.append('{}'.format(self.data.low[0]))\n        txt.append('{}'.format(self.data.close[0]))\n        txt.append('{}'.format(self.data.volume[0]))\n        txt.append('{}'.format(self.data.openinterest[0]))\n        print(', '.join(txt))\n\ndef checkdate(dt, d):\n    # Check if the date is in the week where the 3rd friday of Mar/Jun/Sep/Dec\n\n    # EuroStoxx50 expiry codes: MY\n    # M -> H, M, U, Z (Mar, Jun, Sep, Dec)\n    # Y -> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 -> year code. 5 -> 2015\n    MONTHS = dict(H=3, M=6, U=9, Z=12)\n\n    M = MONTHS[d._dataname[-2]]\n\n    centuria, year = divmod(dt.year, 10)\n    decade = centuria * 10\n\n    YCode = int(d._dataname[-1])\n    Y = decade + YCode\n    if Y < dt.year:  # Example: year 2019 ... YCode is 0 for 2020\n        Y += 10\n\n    exp_day = 21 - (calendar.weekday(Y, M, 1) + 2) % 7\n    exp_dt = datetime.datetime(Y, M, exp_day)\n\n    # Get the year, week numbers\n    exp_year, exp_week, _ = exp_dt.isocalendar()\n    dt_year, dt_week, _ = dt.isocalendar()\n\n    # print('dt {} vs {} exp_dt'.format(dt, exp_dt))\n    # print('dt_week {} vs {} exp_week'.format(dt_week, exp_week))\n\n    # can switch if in same week\n    return (dt_year, dt_week) == (exp_year, exp_week)\n\ndef checkvolume(d0, d1):\n    return d0.volume[0] < d1.volume[0]  # Switch if volume from d0 < d1\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n\n    fcodes = ['199FESXM4', '199FESXU4', '199FESXZ4', '199FESXH5', '199FESXM5']\n    store = bt.stores.VChartFile()\n    ffeeds = [store.getdata(dataname=x) for x in fcodes]\n\n    rollkwargs = dict()\n    if args.checkdate:\n        rollkwargs['checkdate'] = checkdate\n\n        if args.checkcondition:\n            rollkwargs['checkcondition'] = checkvolume\n\n    if not args.no_cerebro:\n        if args.rollover:\n            cerebro.rolloverdata(name='FESX', *ffeeds, **rollkwargs)\n        else:\n            cerebro.chaindata(name='FESX', *ffeeds)\n    else:\n        drollover = bt.feeds.RollOver(*ffeeds, dataname='FESX', **rollkwargs)\n        cerebro.adddata(drollover)\n\n    cerebro.addstrategy(TheStrategy)\n    cerebro.run(stdstats=False)\n\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for Roll Over of Futures')\n\n    parser.add_argument('--no-cerebro', required=False, action='store_true',\n                        help='Use RollOver Directly')\n\n    parser.add_argument('--rollover', required=False, action='store_true')\n\n    parser.add_argument('--checkdate', required=False, action='store_true',\n                        help='Change during expiration week')\n\n    parser.add_argument('--checkcondition', required=False,\n                        action='store_true',\n                        help='Change when a given condition is met')\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]