["```py\n`def setcommission(self,\n                  commission=0.0, margin=None, mult=1.0,\n                  commtype=None, percabs=True, stocklike=False,\n                  interest=0.0, interest_long=False,\n                  name=None)` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ncomminfo = bt.CommissionInfo(commtype=bt.CommissionInfo.COMM_PERC,  # % commission\n                             commission=0.005,  # 0.5%\n                             percabs=True,  # perc expressed in abs terms\n                             stocklike=True,\n                             interest=0.05,  # 5% anual credit interest rate\n                            )\n\ncerebro.broker.addcommissioninfo(comminfo)\n...` \n```", "```py\n`import backtrader as bt\n\ncerebro = bt.Cerebro()\ncerebro.broker.setcommission(commtype=bt.CommissionInfo.COMM_PERC,  # % commission\n                             commission=0.005,  # 0.5%\n                             percabs=True,  # perc expressed in abs terms\n                             stocklike=True,\n                             interest=0.05,  # 5% anual credit interest rate\n                            )\n\n...` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike --long --no-exit\n01 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike --long --no-exit --interest 0.15\n01 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike --long --no-exit --interest 0.15 --interest_long\n01 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike\n01 2005-03-22 23:59:59 SELL Size: -10 / Price: 3040.55\n02 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47\n...\n...\n34 2006-12-19 23:59:59 BUY  Size: +10 / Price: 4121.01\n35 2006-12-19 23:59:59 BUY  Size: +10 / Price: 4121.01` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike --interest 0.15 --interest_long\n01 2005-03-22 23:59:59 SELL Size: -10 / Price: 3040.55\n02 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47\n...\n...\n34 2006-12-19 23:59:59 BUY  Size: +10 / Price: 4121.01` \n```", "```py\n`$ ./credit-interest.py --plot --stocklike --interest 0.15\n01 2005-03-22 23:59:59 SELL Size: -10 / Price: 3040.55\n02 2005-04-11 23:59:59 BUY  Size: +10 / Price: 3088.47\n...\n...\n34 2006-12-19 23:59:59 BUY  Size: +10 / Price: 4121.01\n35 2006-12-19 23:59:59 BUY  Size: +10 / Price: 4121.01` \n```", "```py\n`$ ./credit-interest.py --help\nusage: credit-interest.py [-h] [--data DATA] [--fromdate FROMDATE]\n                          [--todate TODATE] [--cash CASH] [--period1 PERIOD1]\n                          [--period2 PERIOD2] [--interest INTEREST]\n                          [--interest_long] [--long | --short] [--no-exit]\n                          [--stocklike] [--margin MARGIN] [--mult MULT]\n                          [--stake STAKE] [--plot [kwargs]]\n\nSample for Slippage\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Specific data to be read in (default:\n                        ../../datas/2005-2006-day-001.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default: None)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: None)\n  --cash CASH           Cash to start with (default: 50000)\n  --period1 PERIOD1     Fast moving average period (default: 10)\n  --period2 PERIOD2     Slow moving average period (default: 30)\n  --interest INTEREST   Activate credit interest rate (default: 0.0)\n  --interest_long       Credit interest rate for long positions (default:\n                        False)\n  --long                Do a long only strategy (default: False)\n  --short               Do a long only strategy (default: False)\n  --no-exit             The 1st taken position will not be exited (default:\n                        False)\n  --stocklike           Consider the asset to be stocklike (default: False)\n  --margin MARGIN       Margin for future like instruments (default: 0.0)\n  --mult MULT           Multiplier for future like instruments (default: 1.0)\n  --stake STAKE         Stake to apply (default: 10)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport collections\nimport datetime\nimport itertools\n\nimport backtrader as bt\n\nclass SMACrossOver(bt.Signal):\n    params = (('p1', 10), ('p2', 30),)\n\n    def __init__(self):\n        sma1 = bt.indicators.SMA(period=self.p.p1)\n        sma2 = bt.indicators.SMA(period=self.p.p2)\n        self.lines.signal = bt.indicators.CrossOver(sma1, sma2)\n\nclass NoExit(bt.Signal):\n    def next(self):\n        self.lines.signal[0] = 0.0\n\nclass St(bt.SignalStrategy):\n    opcounter = itertools.count(1)\n\n    def notify_order(self, order):\n        if order.status == bt.Order.Completed:\n            t = ''\n            t += '{:02d}'.format(next(self.opcounter))\n            t += ' {}'.format(order.data.datetime.datetime())\n            t += ' BUY ' * order.isbuy() or ' SELL'\n            t += ' Size: {:+d} / Price: {:.2f}'\n            print(t.format(order.executed.size, order.executed.price))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    # if dataset is None, args.data has been given\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, **dkwargs)\n    cerebro.adddata(data)\n\n    cerebro.signal_strategy(St)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=args.stake)\n\n    sigtype = bt.signal.SIGNAL_LONGSHORT\n    if args.long:\n        sigtype = bt.signal.SIGNAL_LONG\n    elif args.short:\n        sigtype = bt.signal.SIGNAL_SHORT\n\n    cerebro.add_signal(sigtype,\n                       SMACrossOver, p1=args.period1, p2=args.period2)\n\n    if args.no_exit:\n        if args.long:\n            cerebro.add_signal(bt.signal.SIGNAL_LONGEXIT, NoExit)\n        elif args.short:\n            cerebro.add_signal(bt.signal.SIGNAL_SHORTEXIT, NoExit)\n\n    comminfo = bt.CommissionInfo(\n        mult=args.mult,\n        margin=args.margin,\n        stocklike=args.stocklike,\n        interest=args.interest,\n        interest_long=args.interest_long)\n\n    if True:\n        cerebro.broker.addcommissioninfo(comminfo)\n\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for Slippage')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Specific data to be read in')\n\n    parser.add_argument('--fromdate', required=False, default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False, default=None,\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--period1', required=False, action='store',\n                        type=int, default=10,\n                        help=('Fast moving average period'))\n\n    parser.add_argument('--period2', required=False, action='store',\n                        type=int, default=30,\n                        help=('Slow moving average period'))\n\n    parser.add_argument('--interest', required=False, action='store',\n                        default=0.0, type=float,\n                        help=('Activate credit interest rate'))\n\n    parser.add_argument('--interest_long', required=False, action='store_true',\n                        help=('Credit interest rate for long positions'))\n\n    pgroup = parser.add_mutually_exclusive_group()\n    pgroup.add_argument('--long', required=False, action='store_true',\n                        help=('Do a long only strategy'))\n\n    pgroup.add_argument('--short', required=False, action='store_true',\n                        help=('Do a long only strategy'))\n\n    parser.add_argument('--no-exit', required=False, action='store_true',\n                        help=('The 1st taken position will not be exited'))\n\n    parser.add_argument('--stocklike', required=False, action='store_true',\n                        help=('Consider the asset to be stocklike'))\n\n    parser.add_argument('--margin', required=False, action='store',\n                        default=0.0, type=float,\n                        help=('Margin for future like instruments'))\n\n    parser.add_argument('--mult', required=False, action='store',\n                        default=1.0, type=float,\n                        help=('Multiplier for future like instruments'))\n\n    parser.add_argument('--stake', required=False, action='store',\n                        default=10, type=int,\n                        help=('Stake to apply'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]