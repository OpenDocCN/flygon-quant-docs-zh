["```py\n`class Screener_SMA(bt.Analyzer):\n    params = dict(period=10)\n\n    def start(self):\n        self.smas = {data: bt.indicators.SMA(data, period=self.p.period)\n                     for data in self.datas}\n\n    def stop(self):\n        self.rets['over'] = list()\n        self.rets['under'] = list()\n\n        for data, sma in self.smas.items():\n            node = data._name, data.close[0], sma[0]\n            if data > sma:  # if data.close[0] > sma[0]\n                self.rets['over'].append(node)\n            else:\n                self.rets['under'].append(node)` \n```", "```py\n`$ btrun --format yahoo --data YHOO --data IBM --data NVDA --data TSLA --data ORCL --data AAPL --fromdate 2016-07-15 --todate 2016-08-13 --analyzer st-screener:Screener_SMA --cerebro runonce=0 --writer --nostdstats\n===============================================================================\nCerebro:\n  -----------------------------------------------------------------------------\n  - Datas:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data0:\n      - Name: YHOO\n      - Timeframe: Days\n      - Compression: 1\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data1:\n      - Name: IBM\n      - Timeframe: Days\n      - Compression: 1\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data2:\n      - Name: NVDA\n      - Timeframe: Days\n      - Compression: 1\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data3:\n      - Name: TSLA\n      - Timeframe: Days\n      - Compression: 1\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data4:\n      - Name: ORCL\n      - Timeframe: Days\n      - Compression: 1\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data5:\n      - Name: AAPL\n      - Timeframe: Days\n      - Compression: 1\n  -----------------------------------------------------------------------------\n  - Strategies:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Strategy:\n      *************************************************************************\n      - Params:\n      *************************************************************************\n      - Indicators:\n        .......................................................................\n        - SMA:\n          - Lines: sma\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 10\n      *************************************************************************\n      - Observers:\n      *************************************************************************\n      - Analyzers:\n        .......................................................................\n        - Value:\n          - Begin: 10000.0\n          - End: 10000.0\n        .......................................................................\n        - Screener_SMA:\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 10\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - over: ('ORCL', 41.09, 41.032), ('IBM', 161.95, 161.221), ('YHOO', 42.94, 39.629000000000005), ('AAPL', 108.18, 106.926), ('NVDA', 63.04, 58.327)\n            - under: ('TSLA', 224.91, 228.423)` \n```", "```py\n`$ btrun --format yahoo --data YHOO --data IBM --data NVDA --data TSLA --data ORCL --data AAPL --fromdate 2016-05-15 --todate 2016-08-13 --analyzer st-screener:Screener_SMA:period=50 --cerebro runonce=0 --writer --nostdstats\n===============================================================================\nCerebro:\n  -----------------------------------------------------------------------------\n  - Datas:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data0:\n...\n...\n...\n        - Screener_SMA:\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 50\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - over: ('ORCL', 41.09, 40.339), ('IBM', 161.95, 155.0356), ('YHOO', 42.94, 37.9648), ('TSLA', 224.91, 220.4784), ('AAPL', 108.18, 98.9782), ('NVDA', 63.04, 51.4746)\n            - under:` \n```", "```py\n `cerebro = bt.Cerebro()\n    for ticker in args.tickers.split(','):\n        data = bt.feeds.YahooFinanceData(dataname=ticker,\n                                         fromdate=fromdate, todate=todate)\n        cerebro.adddata(data)\n\n    cerebro.addanalyzer(Screener_SMA, period=args.period)\n    cerebro.run(runonce=False, stdstats=False, writer=True)` \n```", "```py\n`$ ./st-screener.py\n===============================================================================\nCerebro:\n...\n...\n...\n        - Screener_SMA:\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 10\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - over: (u'NVDA', 63.04, 58.327), (u'AAPL', 108.18, 106.926), (u'YHOO', 42.94, 39.629000000000005), (u'IBM', 161.95, 161.221), (u'ORCL', 41.09, 41.032)\n            - under: (u'TSLA', 224.91, 228.423)` \n```", "```py\n`$ ./st-screener.py --help\nusage: st-screener.py [-h] [--tickers TICKERS] [--period PERIOD]\n\nSMA Stock Screener\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --tickers TICKERS  Yahoo Tickers to consider, COMMA separated (default:\n                     YHOO,IBM,AAPL,TSLA,ORCL,NVDA)\n  --period PERIOD    SMA period (default: 10)` \n```", "```py\n`#!/usr/bin/env python\n# -*- coding: utf-8; py-indent-offset:4 -*-\n###############################################################################\n#\n# Copyright (C) 2015, 2016 Daniel Rodriguez\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n###############################################################################\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\n\nclass Screener_SMA(bt.Analyzer):\n    params = dict(period=10)\n\n    def start(self):\n        self.smas = {data: bt.indicators.SMA(data, period=self.p.period)\n                     for data in self.datas}\n\n    def stop(self):\n        self.rets['over'] = list()\n        self.rets['under'] = list()\n\n        for data, sma in self.smas.items():\n            node = data._name, data.close[0], sma[0]\n            if data > sma:  # if data.close[0] > sma[0]\n                self.rets['over'].append(node)\n            else:\n                self.rets['under'].append(node)\n\nDEFAULTTICKERS = ['YHOO', 'IBM', 'AAPL', 'TSLA', 'ORCL', 'NVDA']\n\ndef run(args=None):\n    args = parse_args(args)\n    todate = datetime.date.today()\n    # Get from date from period +X% for weekeends/bank/holidays: let's double\n    fromdate = todate - datetime.timedelta(days=args.period * 2)\n\n    cerebro = bt.Cerebro()\n    for ticker in args.tickers.split(','):\n        data = bt.feeds.YahooFinanceData(dataname=ticker,\n                                         fromdate=fromdate, todate=todate)\n        cerebro.adddata(data)\n\n    cerebro.addanalyzer(Screener_SMA, period=args.period)\n    cerebro.run(runonce=False, stdstats=False, writer=True)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='SMA Stock Screener')\n\n    parser.add_argument('--tickers', required=False, action='store',\n                        default=','.join(DEFAULTTICKERS),\n                        help='Yahoo Tickers to consider, COMMA separated')\n\n    parser.add_argument('--period', required=False, action='store',\n                        type=int, default=10,\n                        help=('SMA period'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    run()` \n```"]