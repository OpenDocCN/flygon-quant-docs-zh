["```py\n`params = (\n    # Standard MACD Parameters\n    ('macd1', 12),\n    ('macd2', 26),\n    ('macdsig', 9),\n    ('atrperiod', 14),  # ATR Period (standard)\n    ('atrdist', 3.0),   # ATR distance for stop price\n    ('smaperiod', 30),  # SMA Period (pretty standard)\n    ('dirperiod', 10),  # Lookback period to consider SMA trend direction\n)` \n```", "```py\n`parser.add_argument('--cash', required=False, action='store',\n                    type=float, default=50000,\n                    help=('Cash to start with'))\n\nparser.add_argument('--cashalloc', required=False, action='store',\n                    type=float, default=0.20,\n                    help=('Perc (abs) of cash to allocate for ops'))\n\nparser.add_argument('--commperc', required=False, action='store',\n                    type=float, default=0.0033,\n                    help=('Perc (abs) commision in each operation. '\n                          '0.001 -> 0.1%%, 0.01 -> 1%%'))` \n```", "```py\n`$ ./macdsystem.py --plot --dataset yhoo\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.07118518868\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.316736183525\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.02323119024\n  - 2006-12-31: -0.0813678018166\n  - 2007-12-31: -0.0144802141955\n  - 2008-12-31: -0.142301023804\n  - 2009-12-31: 0.0612152927491\n  - 2010-12-31: 0.00898269987778\n  - 2011-12-31: -0.00845048588578\n  - 2012-12-31: 0.0541362123146\n  - 2013-12-31: 0.0158705967774\n  - 2014-12-31: 0.0281978956007\n===============================================================================\nSharpeRatio:\n  - sharperatio: -0.261214264357\n===============================================================================\nSQN:\n  - sqn: -0.784558216044\n  - trades: 45` \n```", "```py\n`$ ./macdsystem.py --plot --dataset orcl\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.24890384718\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 2.23991354467\n===============================================================================\nTimeReturn:\n  - 2005-12-31: -0.02372911952\n  - 2006-12-31: 0.0692563226579\n  - 2007-12-31: 0.0551086853554\n  - 2008-12-31: -0.026707886256\n  - 2009-12-31: 0.0786118091383\n  - 2010-12-31: 0.037571919146\n  - 2011-12-31: 0.00846519206845\n  - 2012-12-31: 0.0402937469005\n  - 2013-12-31: -0.0147124502187\n  - 2014-12-31: 0.00710131291379\n===============================================================================\nSharpeRatio:\n  - sharperatio: 0.359712552054\n===============================================================================\nSQN:\n  - sqn: 1.76240859868\n  - trades: 37` \n```", "```py\n`$ ./macdsystem.py --plot --dataset nvda\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.0178507058999\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.177604931253\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.0773031957141\n  - 2006-12-31: 0.105007457325\n  - 2007-12-31: 0.015286423657\n  - 2008-12-31: -0.109130552525\n  - 2009-12-31: 0.14716076542\n  - 2010-12-31: -0.0891638005423\n  - 2011-12-31: -0.0788216550171\n  - 2012-12-31: -0.0498231953066\n  - 2013-12-31: -0.0119166712361\n  - 2014-12-31: 0.00940493597076\n===============================================================================\nSharpeRatio:\n  - sharperatio: -0.102967601564\n===============================================================================\nSQN:\n  - sqn: -0.0700412395071\n  - trades: 38` \n```", "```py\n`$ ./macdsystem.py --plot --dataset yhoo --cashalloc 0.50\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.20560369198\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.316736183525\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.05517338686\n  - 2006-12-31: -0.195123836162\n  - 2007-12-31: -0.0441556438731\n  - 2008-12-31: -0.32426212721\n  - 2009-12-31: 0.153876836394\n  - 2010-12-31: 0.0167157437151\n  - 2011-12-31: -0.0202891373759\n  - 2012-12-31: 0.13289763017\n  - 2013-12-31: 0.0408192946307\n  - 2014-12-31: 0.0685527133815\n===============================================================================\nSharpeRatio:\n  - sharperatio: -0.154427699146\n===============================================================================\nSQN:\n  - sqn: -0.97846453428\n  - trades: 45` \n```", "```py\n`$ ./macdsystem.py --plot --dataset orcl --cashalloc 0.50\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.69016747856\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 2.23991354467\n===============================================================================\nTimeReturn:\n  - 2005-12-31: -0.0597533502\n  - 2006-12-31: 0.176988400688\n  - 2007-12-31: 0.140268851352\n  - 2008-12-31: -0.0685193675128\n  - 2009-12-31: 0.195760054561\n  - 2010-12-31: 0.0956386594392\n  - 2011-12-31: 0.018709882089\n  - 2012-12-31: 0.100122407053\n  - 2013-12-31: -0.0375741196261\n  - 2014-12-31: 0.017570390931\n===============================================================================\nSharpeRatio:\n  - sharperatio: 0.518921692742\n===============================================================================\nSQN:\n  - sqn: 1.68844251174\n  - trades: 37` \n```", "```py\n`$ ./macdsystem.py --plot --dataset nvda --cashalloc 0.50\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.128845648113\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.177604931253\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.200593209479\n  - 2006-12-31: 0.219254906522\n  - 2007-12-31: 0.0407793562989\n  - 2008-12-31: -0.259567975403\n  - 2009-12-31: 0.380971100974\n  - 2010-12-31: -0.208860409742\n  - 2011-12-31: -0.189068154062\n  - 2012-12-31: -0.122095056225\n  - 2013-12-31: -0.0296495770432\n  - 2014-12-31: 0.0232050942344\n===============================================================================\nSharpeRatio:\n  - sharperatio: -0.0222780544339\n===============================================================================\nSQN:\n  - sqn: -0.190661428812\n  - trades: 38` \n```", "```py\n`$ ./macdsystem.py --plot --dataset yhoo --cashalloc 0.50 --atrdist 4.0\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.01196310622\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.316736183525\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.06476232676\n  - 2006-12-31: -0.220219327475\n  - 2007-12-31: -0.0525484648039\n  - 2008-12-31: -0.314772526784\n  - 2009-12-31: 0.179631995594\n  - 2010-12-31: 0.0579495723922\n  - 2011-12-31: -0.0248948026947\n  - 2012-12-31: 0.10922621981\n  - 2013-12-31: 0.406711050602\n  - 2014-12-31: -0.0113108751022\n===============================================================================\nSharpeRatio:\n  - sharperatio: 0.0495181271704\n===============================================================================\nSQN:\n  - sqn: -0.211652416441\n  - trades: 33` \n```", "```py\n`$ ./macdsystem.py --plot --dataset orcl --cashalloc 0.50 --atrdist 4.0\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.21907748452\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 2.23991354467\n===============================================================================\nTimeReturn:\n  - 2005-12-31: -0.06660102614\n  - 2006-12-31: 0.169334910265\n  - 2007-12-31: 0.10620478758\n  - 2008-12-31: -0.167615289704\n  - 2009-12-31: 0.17616784045\n  - 2010-12-31: 0.0591200431984\n  - 2011-12-31: -0.100238247103\n  - 2012-12-31: 0.135096589522\n  - 2013-12-31: -0.0630483842399\n  - 2014-12-31: 0.0175914485158\n===============================================================================\nSharpeRatio:\n  - sharperatio: 0.144210776122\n===============================================================================\nSQN:\n  - sqn: 0.646519270815\n  - trades: 30` \n```", "```py\n`$ ./macdsystem.py --plot --dataset nvda --cashalloc 0.50 --atrdist 4.0\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: 0.48840287049\n===============================================================================\nTimeReturn:\n  - 9999-12-31 23:59:59.999999: -0.177604931253\n===============================================================================\nTimeReturn:\n  - 2005-12-31: 0.246510998277\n  - 2006-12-31: 0.194958106054\n  - 2007-12-31: -0.123140650516\n  - 2008-12-31: -0.246174938322\n  - 2009-12-31: 0.33121185861\n  - 2010-12-31: -0.0442212647256\n  - 2011-12-31: 0.0368388717861\n  - 2012-12-31: -0.048473112136\n  - 2013-12-31: 0.10657587649\n  - 2014-12-31: 0.0883112536534\n===============================================================================\nSharpeRatio:\n  - sharperatio: 0.264551262551\n===============================================================================\nSQN:\n  - sqn: 0.564151633588\n  - trades: 29` \n```", "```py\n`$ ./macdsystem.py --help\nusage: macdsystem.py [-h] (--data DATA | --dataset {yhoo,orcl,nvda})\n                     [--fromdate FROMDATE] [--todate TODATE] [--cash CASH]\n                     [--cashalloc CASHALLOC] [--commperc COMMPERC]\n                     [--macd1 MACD1] [--macd2 MACD2] [--macdsig MACDSIG]\n                     [--atrperiod ATRPERIOD] [--atrdist ATRDIST]\n                     [--smaperiod SMAPERIOD] [--dirperiod DIRPERIOD]\n                     [--riskfreerate RISKFREERATE] [--plot [kwargs]]\n\nSample for Tharp example with MACD\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Specific data to be read in (default: None)\n  --dataset {yhoo,orcl,nvda}\n                        Choose one of the predefined data sets (default: None)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: None)\n  --cash CASH           Cash to start with (default: 50000)\n  --cashalloc CASHALLOC\n                        Perc (abs) of cash to allocate for ops (default: 0.2)\n  --commperc COMMPERC   Perc (abs) commision in each operation. 0.001 -> 0.1%,\n                        0.01 -> 1% (default: 0.0033)\n  --macd1 MACD1         MACD Period 1 value (default: 12)\n  --macd2 MACD2         MACD Period 2 value (default: 26)\n  --macdsig MACDSIG     MACD Signal Period value (default: 9)\n  --atrperiod ATRPERIOD\n                        ATR Period To Consider (default: 14)\n  --atrdist ATRDIST     ATR Factor for stop price calculation (default: 3.0)\n  --smaperiod SMAPERIOD\n                        Period for the moving average (default: 30)\n  --dirperiod DIRPERIOD\n                        Period for SMA direction calculation (default: 10)\n  --riskfreerate RISKFREERATE\n                        Risk free rate in Perc (abs) of the asset for the\n                        Sharpe Ratio (default: 0.01)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport random\n\nimport backtrader as bt\n\nBTVERSION = tuple(int(x) for x in bt.__version__.split('.'))\n\nclass FixedPerc(bt.Sizer):\n    '''This sizer simply returns a fixed size for any operation\n\n    Params:\n      - ``perc`` (default: ``0.20``) Perc of cash to allocate for operation\n    '''\n\n    params = (\n        ('perc', 0.20),  # perc of cash to use for operation\n    )\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        cashtouse = self.p.perc * cash\n        if BTVERSION > (1, 7, 1, 93):\n            size = comminfo.getsize(data.close[0], cashtouse)\n        else:\n            size = cashtouse // data.close[0]\n        return size\n\nclass TheStrategy(bt.Strategy):\n    '''\n    This strategy is loosely based on some of the examples from the Van\n    K. Tharp book: *Trade Your Way To Financial Freedom*. The logic:\n\n      - Enter the market if:\n        - The MACD.macd line crosses the MACD.signal line to the upside\n        - The Simple Moving Average has a negative direction in the last x\n          periods (actual value below value x periods ago)\n\n     - Set a stop price x times the ATR value away from the close\n\n     - If in the market:\n\n       - Check if the current close has gone below the stop price. If yes,\n         exit.\n       - If not, update the stop price if the new stop price would be higher\n         than the current\n    '''\n\n    params = (\n        # Standard MACD Parameters\n        ('macd1', 12),\n        ('macd2', 26),\n        ('macdsig', 9),\n        ('atrperiod', 14),  # ATR Period (standard)\n        ('atrdist', 3.0),   # ATR distance for stop price\n        ('smaperiod', 30),  # SMA Period (pretty standard)\n        ('dirperiod', 10),  # Lookback period to consider SMA trend direction\n    )\n\n    def notify_order(self, order):\n        if order.status == order.Completed:\n            pass\n\n        if not order.alive():\n            self.order = None  # indicate no order is pending\n\n    def __init__(self):\n        self.macd = bt.indicators.MACD(self.data,\n                                       period_me1=self.p.macd1,\n                                       period_me2=self.p.macd2,\n                                       period_signal=self.p.macdsig)\n\n        # Cross of macd.macd and macd.signal\n        self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n\n        # To set the stop price\n        self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n\n        # Control market trend\n        self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n        self.smadir = self.sma - self.sma(-self.p.dirperiod)\n\n    def start(self):\n        self.order = None  # sentinel to avoid operrations on pending order\n\n    def next(self):\n        if self.order:\n            return  # pending order execution\n\n        if not self.position:  # not in the market\n            if self.mcross[0] > 0.0 and self.smadir < 0.0:\n                self.order = self.buy()\n                pdist = self.atr[0] * self.p.atrdist\n                self.pstop = self.data.close[0] - pdist\n\n        else:  # in the market\n            pclose = self.data.close[0]\n            pstop = self.pstop\n\n            if pclose < pstop:\n                self.close()  # stop met - get out\n            else:\n                pdist = self.atr[0] * self.p.atrdist\n                # Update only if greater than\n                self.pstop = max(pstop, pclose - pdist)\n\nDATASETS = {\n    'yhoo': '../../datas/yhoo-1996-2014.txt',\n    'orcl': '../../datas/orcl-1995-2014.txt',\n    'nvda': '../../datas/nvda-1999-2014.txt',\n}\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc,\n                                                   percabs=True)\n\n    cerebro.broker.addcommissioninfo(comminfo)\n\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    # if dataset is None, args.data has been given\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n\n    cerebro.addstrategy(TheStrategy,\n                        macd1=args.macd1, macd2=args.macd2,\n                        macdsig=args.macdsig,\n                        atrperiod=args.atrperiod,\n                        atrdist=args.atrdist,\n                        smaperiod=args.smaperiod,\n                        dirperiod=args.dirperiod)\n\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n\n    # Add TimeReturn Analyzers for self and the benchmark data\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi',\n                        timeframe=bt.TimeFrame.NoTimeFrame)\n\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark',\n                        timeframe=bt.TimeFrame.NoTimeFrame)\n\n    # Add TimeReturn Analyzers fot the annuyl returns\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    # Add a SharpeRatio\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years,\n                        riskfreerate=args.riskfreerate)\n\n    # Add SQN to qualify the trades\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)  # visualize the drawdown evol\n\n    results = cerebro.run()\n    st0 = results[0]\n\n    for alyzer in st0.analyzers:\n        alyzer.print()\n\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:  # evals to True but is not True\n            npkwargs = eval('dict(' + args.plot + ')')  # args were passed\n            pkwargs.update(npkwargs)\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for Tharp example with MACD')\n\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None,\n                        help='Specific data to be read in')\n\n    group1.add_argument('--dataset', required=False, action='store',\n                        default=None, choices=DATASETS.keys(),\n                        help='Choose one of the predefined data sets')\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default=None,\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--cashalloc', required=False, action='store',\n                        type=float, default=0.20,\n                        help=('Perc (abs) of cash to allocate for ops'))\n\n    parser.add_argument('--commperc', required=False, action='store',\n                        type=float, default=0.0033,\n                        help=('Perc (abs) commision in each operation. '\n                              '0.001 -> 0.1%%, 0.01 -> 1%%'))\n\n    parser.add_argument('--macd1', required=False, action='store',\n                        type=int, default=12,\n                        help=('MACD Period 1 value'))\n\n    parser.add_argument('--macd2', required=False, action='store',\n                        type=int, default=26,\n                        help=('MACD Period 2 value'))\n\n    parser.add_argument('--macdsig', required=False, action='store',\n                        type=int, default=9,\n                        help=('MACD Signal Period value'))\n\n    parser.add_argument('--atrperiod', required=False, action='store',\n                        type=int, default=14,\n                        help=('ATR Period To Consider'))\n\n    parser.add_argument('--atrdist', required=False, action='store',\n                        type=float, default=3.0,\n                        help=('ATR Factor for stop price calculation'))\n\n    parser.add_argument('--smaperiod', required=False, action='store',\n                        type=int, default=30,\n                        help=('Period for the moving average'))\n\n    parser.add_argument('--dirperiod', required=False, action='store',\n                        type=int, default=10,\n                        help=('Period for SMA direction calculation'))\n\n    parser.add_argument('--riskfreerate', required=False, action='store',\n                        type=float, default=0.01,\n                        help=('Risk free rate in Perc (abs) of the asset for '\n                              'the Sharpe Ratio'))\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]