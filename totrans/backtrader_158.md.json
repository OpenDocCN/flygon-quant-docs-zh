["```py\n    `class LongOnly(bt.Sizer):\n        params = (('stake', 1),)\n\n        def _getsizing(self, comminfo, cash, data, isbuy):\n            if isbuy:\n                return self.p.stake\n\n            # Sell situation\n            position = self.strategy.getposition(data)\n            if not position.size:\n                return 0  # do not sell if nothing is open\n\n            return self.p.stake` \n    ```", "```py\n    `class FixedReverser(bt.Sizer):\n        params = (('stake', 1),)\n\n        def _getsizing(self, comminfo, cash, data, isbuy):\n            position = self.broker.getposition(data)\n            size = self.p.stake * (1 + (position.size != 0))\n            return size` \n    ```", "```py\n`class CloseSMA(bt.Strategy):\n    params = (('period', 15),)\n\n    def __init__(self):\n        sma = bt.indicators.SMA(self.data, period=self.p.period)\n        self.crossover = bt.indicators.CrossOver(self.data, sma)\n\n    def next(self):\n        if self.crossover > 0:\n            self.buy()\n\n        elif self.crossover < 0:\n            self.sell()` \n```", "```py\n `if args.longonly:\n        cerebro.addsizer(LongOnly, stake=args.stake)\n    else:\n        cerebro.addsizer(FixedReverser, stake=args.stake)` \n```", "```py\n`$ ./sizertest.py --longonly --plot` \n```", "```py\n`$ ./sizertest.py --plot` \n```", "```py\n`$ ./sizertest.py --help\nusage: sizertest.py [-h] [--data0 DATA0] [--fromdate FROMDATE]\n                    [--todate TODATE] [--cash CASH] [--longonly]\n                    [--stake STAKE] [--period PERIOD] [--plot [kwargs]]\n\nSample for sizer\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data to be read in (default:\n                        ../../datas/yhoo-1996-2015.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: 2006-12-31)\n  --cash CASH           Cash to start with (default: 50000)\n  --longonly            Use the LongOnly sizer (default: False)\n  --stake STAKE         Stake to pass to the sizers (default: 1)\n  --period PERIOD       Period for the Simple Moving Average (default: 15)\n  --plot [kwargs], -p [kwargs]\n                        Plot the read data applying any kwargs passed For\n                        example: --plot style=\"candle\" (to plot candles)\n                        (default: None)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport random\n\nimport backtrader as bt\n\nclass CloseSMA(bt.Strategy):\n    params = (('period', 15),)\n\n    def __init__(self):\n        sma = bt.indicators.SMA(self.data, period=self.p.period)\n        self.crossover = bt.indicators.CrossOver(self.data, sma)\n\n    def next(self):\n        if self.crossover > 0:\n            self.buy()\n\n        elif self.crossover < 0:\n            self.sell()\n\nclass LongOnly(bt.Sizer):\n    params = (('stake', 1),)\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        if isbuy:\n            return self.p.stake\n\n        # Sell situation\n        position = self.strategy.getposition(data)\n        if not position.size:\n            return 0  # do not sell if nothing is open\n\n        return self.p.stake\n\nclass FixedReverser(bt.Sizer):\n    params = (('stake', 1),)\n\n    def _getsizing(self, comminfo, cash, data, isbuy):\n        position = self.broker.getposition(data)\n        size = self.p.stake * (1 + (position.size != 0))\n        return size\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='Data0')\n\n    cerebro.addstrategy(CloseSMA, period=args.period)\n\n    if args.longonly:\n        cerebro.addsizer(LongOnly, stake=args.stake)\n    else:\n        cerebro.addsizer(FixedReverser, stake=args.stake)\n\n    cerebro.run()\n    if args.plot:\n        pkwargs = dict()\n        if args.plot is not True:  # evals to True but is not True\n            pkwargs = eval('dict(' + args.plot + ')')  # args were passed\n\n        cerebro.plot(**pkwargs)\n\ndef parse_args(pargs=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for sizer')\n\n    parser.add_argument('--data0', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default='2006-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--longonly', required=False, action='store_true',\n                        help=('Use the LongOnly sizer'))\n\n    parser.add_argument('--stake', required=False, action='store',\n                        type=int, default=1,\n                        help=('Stake to pass to the sizers'))\n\n    parser.add_argument('--period', required=False, action='store',\n                        type=int, default=15,\n                        help=('Period for the Simple Moving Average'))\n\n    # Plot options\n    parser.add_argument('--plot', '-p', nargs='?', required=False,\n                        metavar='kwargs', const=True,\n                        help=('Plot the read data applying any kwargs passed\\n'\n                              '\\n'\n                              'For example:\\n'\n                              '\\n'\n                              '  --plot style=\"candle\" (to plot candles)\\n'))\n\n    if pargs is not None:\n        return parser.parse_args(pargs)\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]