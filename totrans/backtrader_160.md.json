["```py\n`$ ./pyfoliotest.py --printout --no-pyfolio --plot` \n```", "```py\n`Len,Datetime,Open,High,Low,Close,Volume,OpenInterest\n0001,2005-01-03T23:59:59,38.36,38.90,37.65,38.18,25482800.00,0.00\nBUY  1000 @%23.58\n0002,2005-01-04T23:59:59,38.45,38.54,36.46,36.58,26625300.00,0.00\nBUY  1000 @%36.58\nSELL 500 @%22.47\n0003,2005-01-05T23:59:59,36.69,36.98,36.06,36.13,18469100.00,0.00\n...\nSELL 500 @%37.51\n0502,2006-12-28T23:59:59,25.62,25.72,25.30,25.36,11908400.00,0.00\n0503,2006-12-29T23:59:59,25.42,25.82,25.33,25.54,16297800.00,0.00\nSELL 250 @%17.14\nSELL 250 @%37.01` \n```", "```py\n`%matplotlib inline` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport random\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = (\n        ('printout', False),\n        ('stake', 1000),\n    )\n\n    def __init__(self):\n        pass\n\n    def start(self):\n        if self.p.printout:\n            txtfields = list()\n            txtfields.append('Len')\n            txtfields.append('Datetime')\n            txtfields.append('Open')\n            txtfields.append('High')\n            txtfields.append('Low')\n            txtfields.append('Close')\n            txtfields.append('Volume')\n            txtfields.append('OpenInterest')\n            print(','.join(txtfields))\n\n    def next(self):\n        if self.p.printout:\n            # Print only 1st data ... is just a check that things are running\n            txtfields = list()\n            txtfields.append('%04d' % len(self))\n            txtfields.append(self.data.datetime.datetime(0).isoformat())\n            txtfields.append('%.2f' % self.data0.open[0])\n            txtfields.append('%.2f' % self.data0.high[0])\n            txtfields.append('%.2f' % self.data0.low[0])\n            txtfields.append('%.2f' % self.data0.close[0])\n            txtfields.append('%.2f' % self.data0.volume[0])\n            txtfields.append('%.2f' % self.data0.openinterest[0])\n            print(','.join(txtfields))\n\n        # Data 0\n        for data in self.datas:\n            toss = random.randint(1, 10)\n            curpos = self.getposition(data)\n            if curpos.size:\n                if toss > 5:\n                    size = curpos.size // 2\n                    self.sell(data=data, size=size)\n                    if self.p.printout:\n                        print('SELL {} @%{}'.format(size, data.close[0]))\n\n            elif toss < 5:\n                self.buy(data=data, size=self.p.stake)\n                if self.p.printout:\n                    print('BUY {} @%{}'.format(self.p.stake, data.close[0]))\n\ndef runstrat(args=None):\n    args = parse_args(args)\n\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n\n    data0 = bt.feeds.BacktraderCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='Data0')\n\n    data1 = bt.feeds.BacktraderCSVData(dataname=args.data1, **dkwargs)\n    cerebro.adddata(data1, name='Data1')\n\n    data2 = bt.feeds.BacktraderCSVData(dataname=args.data2, **dkwargs)\n    cerebro.adddata(data2, name='Data2')\n\n    cerebro.addstrategy(St, printout=args.printout)\n    if not args.no_pyfolio:\n        cerebro.addanalyzer(bt.analyzers.PyFolio, _name='pyfolio')\n\n    results = cerebro.run()\n    if not args.no_pyfolio:\n        strat = results[0]\n        pyfoliozer = strat.analyzers.getbyname('pyfolio')\n\n        returns, positions, transactions, gross_lev = pyfoliozer.get_pf_items()\n        if args.printout:\n            print('-- RETURNS')\n            print(returns)\n            print('-- POSITIONS')\n            print(positions)\n            print('-- TRANSACTIONS')\n            print(transactions)\n            print('-- GROSS LEVERAGE')\n            print(gross_lev)\n\n        import pyfolio as pf\n        pf.create_full_tear_sheet(\n            returns,\n            positions=positions,\n            transactions=transactions,\n            gross_lev=gross_lev,\n            live_start_date='2005-05-01',\n            round_trips=True)\n\n    if args.plot:\n        cerebro.plot(style=args.plot_style)\n\ndef parse_args(args=None):\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for pivot point and cross plotting')\n\n    parser.add_argument('--data0', required=False,\n                        default='../../datas/yhoo-1996-2015.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--data1', required=False,\n                        default='../../datas/orcl-1995-2014.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--data2', required=False,\n                        default='../../datas/nvda-1999-2014.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--fromdate', required=False,\n                        default='2005-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', required=False,\n                        default='2006-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--printout', required=False, action='store_true',\n                        help=('Print data lines'))\n\n    parser.add_argument('--cash', required=False, action='store',\n                        type=float, default=50000,\n                        help=('Cash to start with'))\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    parser.add_argument('--plot-style', required=False, action='store',\n                        default='bar', choices=['bar', 'candle', 'line'],\n                        help=('Plot style'))\n\n    parser.add_argument('--no-pyfolio', required=False, action='store_true',\n                        help=('Do not do pyfolio things'))\n\n    import sys\n    aargs = args if args is not None else sys.argv[1:]\n    return parser.parse_args(aargs)` \n```", "```py\n`runstrat([])` \n```", "```py\n`Entire data start date: 2005-01-03\nEntire data end date: 2006-12-29\n\nOut-of-Sample Months: 20\nBacktest Months: 3` \n```", "```py\n`[-0.012 -0.025]` \n```", "```py\n`D:drobinWinPython-64bit-2.7.10.3python-2.7.10.amd64libsite-packagespyfolioplotting.py:1210: FutureWarning: .resample() is now a deferred operation\nuse .resample(...).mean() instead of .resample(...)\n  **kwargs)` \n```", "```py\n`<matplotlib.figure.Figure at 0x23982b70>` \n```", "```py\n`$ ./pyfoliotest.py --help\nusage: pyfoliotest.py [-h] [--data0 DATA0] [--data1 DATA1] [--data2 DATA2]\n                      [--fromdate FROMDATE] [--todate TODATE] [--printout]\n                      [--cash CASH] [--plot] [--plot-style {bar,candle,line}]\n                      [--no-pyfolio]\n\nSample for pivot point and cross plotting\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data0 DATA0         Data to be read in (default:\n                        ../../datas/yhoo-1996-2015.txt)\n  --data1 DATA1         Data to be read in (default:\n                        ../../datas/orcl-1995-2014.txt)\n  --data2 DATA2         Data to be read in (default:\n                        ../../datas/nvda-1999-2014.txt)\n  --fromdate FROMDATE   Starting date in YYYY-MM-DD format (default:\n                        2005-01-01)\n  --todate TODATE       Ending date in YYYY-MM-DD format (default: 2006-12-31)\n  --printout            Print data lines (default: False)\n  --cash CASH           Cash to start with (default: 50000)\n  --plot                Plot the result (default: False)\n  --plot-style {bar,candle,line}\n                        Plot style (default: bar)\n  --no-pyfolio          Do not do pyfolio things (default: False)` \n```"]