["```py\n`callable(order, price, ago)` \n```", "```py\n    `barvolume = order.data.volume[ago]` \n    ```", "```py\n`class MyFiller(object):\n    def __call__(self, order, price, ago):\n        pass` \n```", "```py\n`import backtrader as bt\n\ncerebro = Cerebro()\ncerebro.broker.set_filler(bt.broker.filler.FixedSize())` \n```", "```py\n`import backtrader as bt\n\ncerebro = Cerebro()\nfiller = bt.broker.filler.FixedSize()\nnewbroker = bt.broker.BrokerBack(filler=filler)\ncerebro.broker = newbroker` \n```", "```py\n`$ ./volumefilling.py --stakeperc 20.0` \n```", "```py\n`Len,Datetime,Open,High,Low,Close,Volume,OpenInterest\n0001,2006-01-02,3602.00,3624.00,3596.00,3617.00,164794.00,1511674.00\n++ STAKE VOLUME: 32958.0\n-- NOTIFY ORDER BEGIN\nRef: 1\n...\nAlive: False\n-- NOTIFY ORDER END\n-- ORDER REMSIZE: 0.0\n++ ORDER COMPLETED at data.len: 2\n0002,2006-01-03,3623.00,3665.00,3614.00,3665.00,554426.00,1501792.00\n...` \n```", "```py\n`$ ./volumefilling.py --stakeperc 20.0 --filler FixedSize --filler-args size=1000` \n```", "```py\n`Len,Datetime,Open,High,Low,Close,Volume,OpenInterest\n0001,2006-01-02,3602.00,3624.00,3596.00,3617.00,164794.00,1511674.00\n++ STAKE VOLUME: 32958.0\n-- NOTIFY ORDER BEGIN\n...\n-- NOTIFY ORDER END\n-- ORDER REMSIZE: 0.0\n++ ORDER COMPLETED at data.len: 34\n0034,2006-02-16,3755.00,3774.00,3738.00,3773.00,502043.00,1662302.00\n...` \n```", "```py\n`$ ./volumefilling.py --stakeperc 20.0 --filler FixedBarPerc --filler-args perc=0.75` \n```", "```py\n`...\n-- NOTIFY ORDER END\n-- ORDER REMSIZE: 0.0\n++ ORDER COMPLETED at data.len: 11\n0011,2006-01-16,3635.00,3664.00,3632.00,3660.00,273296.00,1592611.00\n...` \n```", "```py\n`$ ./volumefilling.py --stakeperc 20.0 --filler BarPointPerc --filler-args minmov=1.0,perc=10.0` \n```", "```py\n`...\n-- NOTIFY ORDER END\n-- ORDER REMSIZE: 0.0\n++ ORDER COMPLETED at data.len: 22\n0022,2006-01-31,3697.00,3718.00,3681.00,3704.00,749740.00,1642003.00\n...` \n```", "```py\n`$ ./volumefilling.py --filler FixedSize --filler-args size=10000 --stakeperc 10.0 --plot --cash 500e9` \n```", "```py\n`usage: volumefilling.py [-h] [--data DATA] [--cash CASH]\n                        [--filler {FixedSize,FixedBarPerc,BarPointPerc}]\n                        [--filler-args FILLER_ARGS] [--stakeperc STAKEPERC]\n                        [--opbreak OPBREAK] [--fromdate FROMDATE]\n                        [--todate TODATE] [--plot]\n\nVolume Filling Sample\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA           Data to be read in (default: ../../datas/2006-volume-\n                        day-001.txt)\n  --cash CASH           Starting cash (default: 500000000.0)\n  --filler {FixedSize,FixedBarPerc,BarPointPerc}\n                        Apply a volume filler for the execution (default:\n                        None)\n  --filler-args FILLER_ARGS\n                        kwargs for the filler with format:\n                        arg1=val1,arg2=val2... (default: None)\n  --stakeperc STAKEPERC\n                        Percentage of 1st bar to use for stake (default: 10.0)\n  --opbreak OPBREAK     Bars to wait for new op after completing another\n                        (default: 10)\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format (default: None)\n  --todate TODATE, -t TODATE\n                        Ending date in YYYY-MM-DD format (default: None)\n  --plot                Plot the result (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport os.path\nimport time\nimport sys\n\nimport backtrader as bt\n\nclass St(bt.Strategy):\n    params = (\n        ('stakeperc', 10.0),\n        ('opbreak', 10),\n    )\n\n    def notify_order(self, order):\n        print('-- NOTIFY ORDER BEGIN')\n        print(order)\n        print('-- NOTIFY ORDER END')\n        print('-- ORDER REMSIZE:', order.executed.remsize)\n\n        if order.status == order.Completed:\n            print('++ ORDER COMPLETED at data.len:', len(order.data))\n            self.doop = -self.p.opbreak\n\n    def __init__(self):\n        pass\n\n    def start(self):\n        self.callcounter = 0\n        txtfields = list()\n        txtfields.append('Len')\n        txtfields.append('Datetime')\n        txtfields.append('Open')\n        txtfields.append('High')\n        txtfields.append('Low')\n        txtfields.append('Close')\n        txtfields.append('Volume')\n        txtfields.append('OpenInterest')\n        print(','.join(txtfields))\n\n        self.doop = 0\n\n    def next(self):\n        txtfields = list()\n        txtfields.append('%04d' % len(self))\n        txtfields.append(self.data0.datetime.date(0).isoformat())\n        txtfields.append('%.2f' % self.data0.open[0])\n        txtfields.append('%.2f' % self.data0.high[0])\n        txtfields.append('%.2f' % self.data0.low[0])\n        txtfields.append('%.2f' % self.data0.close[0])\n        txtfields.append('%.2f' % self.data0.volume[0])\n        txtfields.append('%.2f' % self.data0.openinterest[0])\n        print(','.join(txtfields))\n\n        # Single order\n        if self.doop == 0:\n            if not self.position.size:\n                stakevol = (self.data0.volume[0] * self.p.stakeperc) // 100\n                print('++ STAKE VOLUME:', stakevol)\n                self.buy(size=stakevol)\n\n            else:\n                self.close()\n\n        self.doop += 1\n\nFILLERS = {\n    'FixedSize': bt.broker.filler.FixedSize,\n    'FixedBarPerc': bt.broker.filler.FixedBarPerc,\n    'BarPointPerc': bt.broker.filler.BarPointPerc,\n}\n\ndef runstrat():\n    args = parse_args()\n\n    datakwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        datakwargs['fromdate'] = fromdate\n\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        datakwargs['todate'] = todate\n\n    data = bt.feeds.BacktraderCSVData(dataname=args.data, **datakwargs)\n\n    cerebro = bt.Cerebro()\n    cerebro.adddata(data)\n\n    cerebro.broker.set_cash(args.cash)\n    if args.filler is not None:\n        fillerkwargs = dict()\n        if args.filler_args is not None:\n            fillerkwargs = eval('dict(' + args.filler_args + ')')\n\n        filler = FILLERS[args.filler](**fillerkwargs)\n        cerebro.broker.set_filler(filler)\n\n    cerebro.addstrategy(St, stakeperc=args.stakeperc, opbreak=args.opbreak)\n\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Volume Filling Sample')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2006-volume-day-001.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--cash', required=False, action='store',\n                        default=500e6, type=float,\n                        help=('Starting cash'))\n\n    parser.add_argument('--filler', required=False, action='store',\n                        default=None, choices=FILLERS.keys(),\n                        help=('Apply a volume filler for the execution'))\n\n    parser.add_argument('--filler-args', required=False, action='store',\n                        default=None,\n                        help=('kwargs for the filler with format:\\n'\n                              '\\n'\n                              'arg1=val1,arg2=val2...'))\n\n    parser.add_argument('--stakeperc', required=False, action='store',\n                        type=float, default=10.0,\n                        help=('Percentage of 1st bar to use for stake'))\n\n    parser.add_argument('--opbreak', required=False, action='store',\n                        type=int, default=10,\n                        help=('Bars to wait for new op after completing '\n                              'another'))\n\n    parser.add_argument('--fromdate', '-f', required=False, default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t', required=False, default=None,\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]