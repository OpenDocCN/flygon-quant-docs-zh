["```py\n`$ ./daysteps.py --data ../../datas/2006-day-001.txt` \n```", "```py\n`Calls,Len Strat,Len Data,Datetime,Open,High,Low,Close,Volume,OpenInterest\n0001,0001,0001,2006-01-02T23:59:59,3578.73,3578.73,3578.73,3578.73,0.00,0.00\n- I could issue a buy order during the Opening\n0002,0001,0001,2006-01-02T23:59:59,3578.73,3605.95,3578.73,3604.33,0.00,0.00\n0003,0002,0002,2006-01-03T23:59:59,3604.08,3604.08,3604.08,3604.08,0.00,0.00\n- I could issue a buy order during the Opening\n0004,0002,0002,2006-01-03T23:59:59,3604.08,3638.42,3601.84,3614.34,0.00,0.00\n0005,0003,0003,2006-01-04T23:59:59,3615.23,3615.23,3615.23,3615.23,0.00,0.00\n- I could issue a buy order during the Opening\n0006,0003,0003,2006-01-04T23:59:59,3615.23,3652.46,3615.23,3652.46,0.00,0.00\n...\n...\n0505,0253,0253,2006-12-27T23:59:59,4079.70,4079.70,4079.70,4079.70,0.00,0.00\n- I could issue a buy order during the Opening\n0506,0253,0253,2006-12-27T23:59:59,4079.70,4134.86,4079.70,4134.86,0.00,0.00\n0507,0254,0254,2006-12-28T23:59:59,4137.44,4137.44,4137.44,4137.44,0.00,0.00\n- I could issue a buy order during the Opening\n0508,0254,0254,2006-12-28T23:59:59,4137.44,4142.06,4125.14,4130.66,0.00,0.00\n0509,0255,0255,2006-12-29T23:59:59,4130.12,4130.12,4130.12,4130.12,0.00,0.00\n- I could issue a buy order during the Opening\n0510,0255,0255,2006-12-29T23:59:59,4130.12,4142.01,4119.94,4119.94,0.00,0.00` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nfrom datetime import datetime, time\n\nimport backtrader as bt\n\nclass DayStepsFilter(object):\n    def __init__(self, data):\n        self.pendingbar = None\n\n    def __call__(self, data):\n        # Make a copy of the new bar and remove it from stream\n        newbar = [data.lines[i][0] for i in range(data.size())]\n        data.backwards()  # remove the copied bar from stream\n\n        openbar = newbar[:]  # Make an open only bar\n        o = newbar[data.Open]\n        for field_idx in [data.High, data.Low, data.Close]:\n            openbar[field_idx] = o\n\n        # Nullify Volume/OpenInteres at the open\n        openbar[data.Volume] = 0.0\n        openbar[data.OpenInterest] = 0.0\n\n        # Overwrite the new data bar with our pending data - except start point\n        if self.pendingbar is not None:\n            data._updatebar(self.pendingbar)\n\n        self.pendingbar = newbar  # update the pending bar to the new bar\n        data._add2stack(openbar)  # Add the openbar to the stack for processing\n\n        return False  # the length of the stream was not changed\n\n    def last(self, data):\n        '''Called when the data is no longer producing bars\n        Can be called multiple times. It has the chance to (for example)\n        produce extra bars'''\n        if self.pendingbar is not None:\n            data.backwards()  # remove delivered open bar\n            data._add2stack(self.pendingbar)  # add remaining\n            self.pendingbar = None  # No further action\n            return True  # something delivered\n\n        return False  # nothing delivered here\n\nclass St(bt.Strategy):\n    params = ()\n\n    def __init__(self):\n        pass\n\n    def start(self):\n        self.callcounter = 0\n        txtfields = list()\n        txtfields.append('Calls')\n        txtfields.append('Len Strat')\n        txtfields.append('Len Data')\n        txtfields.append('Datetime')\n        txtfields.append('Open')\n        txtfields.append('High')\n        txtfields.append('Low')\n        txtfields.append('Close')\n        txtfields.append('Volume')\n        txtfields.append('OpenInterest')\n        print(','.join(txtfields))\n\n        self.lcontrol = 0\n\n    def next(self):\n        self.callcounter += 1\n\n        txtfields = list()\n        txtfields.append('%04d' % self.callcounter)\n        txtfields.append('%04d' % len(self))\n        txtfields.append('%04d' % len(self.data0))\n        txtfields.append(self.data.datetime.datetime(0).isoformat())\n        txtfields.append('%.2f' % self.data0.open[0])\n        txtfields.append('%.2f' % self.data0.high[0])\n        txtfields.append('%.2f' % self.data0.low[0])\n        txtfields.append('%.2f' % self.data0.close[0])\n        txtfields.append('%.2f' % self.data0.volume[0])\n        txtfields.append('%.2f' % self.data0.openinterest[0])\n        print(','.join(txtfields))\n\n        if len(self.data) > self.lcontrol:\n            print('- I could issue a buy order during the Opening')\n\n        self.lcontrol = len(self.data)\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname=args.data)\n\n    data.addfilter(DayStepsFilter)\n    cerebro.adddata(data)\n\n    cerebro.addstrategy(St)\n\n    cerebro.run(stdstats=False, runonce=False, preload=False)\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for pivot point and cross plotting')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]