["```py\n    `dt = datetime.now() - timedelta(days=3)\n    dt.replace(hour=14, minute=30)\n\n    vcstore.getdata(dataname='001ES', fromdate=dt)` \n    ```", "```py\n`$ ./vctest.py --data0 015ES --timeframe Minutes --compression 1 --fromdate 2016-07-12` \n```", "```py\n`--------------------------------------------------\nStrategy Created\n--------------------------------------------------\nDatetime, Open, High, Low, Close, Volume, OpenInterest, SMA\n***** DATA NOTIF: CONNECTED\n***** DATA NOTIF: DELAYED\n0001, 2016-07-12T08:01:00.000000, 2871.0, 2872.0, 2869.0, 2872.0, 1915.0, 0.0, nan\n0002, 2016-07-12T08:02:00.000000, 2872.0, 2872.0, 2870.0, 2871.0, 479.0, 0.0, nan\n0003, 2016-07-12T08:03:00.000000, 2871.0, 2871.0, 2869.0, 2870.0, 518.0, 0.0, nan\n0004, 2016-07-12T08:04:00.000000, 2870.0, 2871.0, 2870.0, 2871.0, 248.0, 0.0, nan\n0005, 2016-07-12T08:05:00.000000, 2870.0, 2871.0, 2870.0, 2871.0, 234.0, 0.0, 2871.0\n...\n...\n0639, 2016-07-12T18:39:00.000000, 2932.0, 2933.0, 2932.0, 2932.0, 1108.0, 0.0, 2932.8\n0640, 2016-07-12T18:40:00.000000, 2931.0, 2932.0, 2931.0, 2931.0, 65.0, 0.0, 2932.6\n***** DATA NOTIF: LIVE\n0641, 2016-07-12T18:41:00.000000, 2932.0, 2932.0, 2930.0, 2930.0, 2093.0, 0.0, 2931.8\n***** STORE NOTIF: (u'VisualChart is Disconnected', -65520)\n***** DATA NOTIF: CONNBROKEN\n***** STORE NOTIF: (u'VisualChart is Connected', -65521)\n***** DATA NOTIF: CONNECTED\n***** DATA NOTIF: DELAYED\n0642, 2016-07-12T18:42:00.000000, 2931.0, 2931.0, 2931.0, 2931.0, 137.0, 0.0, 2931.2\n0643, 2016-07-12T18:43:00.000000, 2931.0, 2931.0, 2931.0, 2931.0, 432.0, 0.0, 2931.0\n...\n0658, 2016-07-12T18:58:00.000000, 2929.0, 2929.0, 2929.0, 2929.0, 4.0, 0.0, 2930.0\n0659, 2016-07-12T18:59:00.000000, 2929.0, 2930.0, 2929.0, 2930.0, 353.0, 0.0, 2930.0\n***** DATA NOTIF: LIVE\n0660, 2016-07-12T19:00:00.000000, 2930.0, 2930.0, 2930.0, 2930.0, 376.0, 0.0, 2930.0\n0661, 2016-07-12T19:01:00.000000, 2929.0, 2930.0, 2929.0, 2930.0, 35.0, 0.0, 2929.8` \n```", "```py\n`$ ./vctest.py --data0 015ES --timeframe Minutes --compression 1 --fromdate 2016-07-12 2>&1 --broker --account accname --trade --stake 2` \n```", "```py\n`--------------------------------------------------\nStrategy Created\n--------------------------------------------------\nDatetime, Open, High, Low, Close, Volume, OpenInterest, SMA\n***** DATA NOTIF: CONNECTED\n***** DATA NOTIF: DELAYED\n0001, 2016-07-12T08:01:00.000000, 2871.0, 2872.0, 2869.0, 2872.0, 1915.0, 0.0, nan\n...\n0709, 2016-07-12T19:50:00.000000, 2929.0, 2930.0, 2929.0, 2930.0, 11.0, 0.0, 2930.4\n***** DATA NOTIF: LIVE\n0710, 2016-07-12T19:51:00.000000, 2930.0, 2930.0, 2929.0, 2929.0, 134.0, 0.0, 2930.0\n-------------------------------------------------- ORDER BEGIN 2016-07-12 19:52:01.629000\nRef: 1\nOrdType: 0\nOrdType: Buy\nStatus: 1\nStatus: Submitted\nSize: 2\nPrice: None\nPrice Limit: None\nExecType: 0\nExecType: Market\nCommInfo: <backtrader.brokers.vcbroker.VCCommInfo object at 0x000000001100CE10>\nEnd of Session: 736157.916655\nInfo: AutoOrderedDict()\nBroker: <backtrader.brokers.vcbroker.VCBroker object at 0x000000000475D400>\nAlive: True\n-------------------------------------------------- ORDER END\n-------------------------------------------------- ORDER BEGIN 2016-07-12 19:52:01.629000\nRef: 1\nOrdType: 0\nOrdType: Buy\nStatus: 2\nStatus: Accepted\nSize: 2\nPrice: None\nPrice Limit: None\nExecType: 0\nExecType: Market\nCommInfo: <backtrader.brokers.vcbroker.VCCommInfo object at 0x000000001100CE10>\nEnd of Session: 736157.916655\nInfo: AutoOrderedDict()\nBroker: None\nAlive: True\n-------------------------------------------------- ORDER END\n-------------------------------------------------- ORDER BEGIN 2016-07-12 19:52:01.629000\nRef: 1\nOrdType: 0\nOrdType: Buy\nStatus: 4\nStatus: Completed\nSize: 2\nPrice: None\nPrice Limit: None\nExecType: 0\nExecType: Market\nCommInfo: <backtrader.brokers.vcbroker.VCCommInfo object at 0x000000001100CE10>\nEnd of Session: 736157.916655\nInfo: AutoOrderedDict()\nBroker: None\nAlive: False\n-------------------------------------------------- ORDER END\n-------------------------------------------------- TRADE BEGIN 2016-07-12 19:52:01.629000\nref:1\ndata:<backtrader.feeds.vcdata.VCData object at 0x000000000475D9E8>\ntradeid:0\nsize:2.0\nprice:2930.0\nvalue:5860.0\ncommission:0.0\npnl:0.0\npnlcomm:0.0\njustopened:True\nisopen:True\nisclosed:0\nbaropen:710\ndtopen:736157.74375\nbarclose:0\ndtclose:0.0\nbarlen:0\nhistoryon:False\nhistory:[]\nstatus:1\n-------------------------------------------------- TRADE END\n...` \n```", "```py\n`$ ./vctest.py --help\nusage: vctest.py [-h] [--exactbars EXACTBARS] [--plot] [--stopafter STOPAFTER]\n                 [--nostore] [--qcheck QCHECK] [--no-timeoffset] --data0 DATA0\n                 [--tradename TRADENAME] [--data1 DATA1] [--timezone TIMEZONE]\n                 [--no-backfill_start] [--latethrough] [--historical]\n                 [--fromdate FROMDATE] [--todate TODATE]\n                 [--smaperiod SMAPERIOD] [--replay | --resample]\n                 [--timeframe {Ticks,MicroSeconds,Seconds,Minutes,Days,Weeks,Months,Years}]\n                 [--compression COMPRESSION] [--no-bar2edge] [--no-adjbartime]\n                 [--no-rightedge] [--broker] [--account ACCOUNT] [--trade]\n                 [--donotsell]\n                 [--exectype {Market,Close,Limit,Stop,StopLimit}]\n                 [--price PRICE] [--pstoplimit PSTOPLIMIT] [--stake STAKE]\n                 [--valid VALID] [--cancel CANCEL]\n\nTest Visual Chart 6 integration\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --exactbars EXACTBARS\n                        exactbars level, use 0/-1/-2 to enable plotting\n                        (default: 1)\n  --plot                Plot if possible (default: False)\n  --stopafter STOPAFTER\n                        Stop after x lines of LIVE data (default: 0)\n  --nostore             Do not Use the store pattern (default: False)\n  --qcheck QCHECK       Timeout for periodic notification/resampling/replaying\n                        check (default: 0.5)\n  --no-timeoffset       Do not Use TWS/System time offset for non timestamped\n                        prices and to align resampling (default: False)\n  --data0 DATA0         data 0 into the system (default: None)\n  --tradename TRADENAME\n                        Actual Trading Name of the asset (default: None)\n  --data1 DATA1         data 1 into the system (default: None)\n  --timezone TIMEZONE   timezone to get time output into (pytz names)\n                        (default: None)\n  --historical          do only historical download (default: False)\n  --fromdate FROMDATE   Starting date for historical download with format:\n                        YYYY-MM-DD[THH:MM:SS] (default: None)\n  --todate TODATE       End date for historical download with format: YYYY-MM-\n                        DD[THH:MM:SS] (default: None)\n  --smaperiod SMAPERIOD\n                        Period to apply to the Simple Moving Average (default:\n                        5)\n  --replay              replay to chosen timeframe (default: False)\n  --resample            resample to chosen timeframe (default: False)\n  --timeframe {Ticks,MicroSeconds,Seconds,Minutes,Days,Weeks,Months,Years}\n                        TimeFrame for Resample/Replay (default: Ticks)\n  --compression COMPRESSION\n                        Compression for Resample/Replay (default: 1)\n  --no-bar2edge         no bar2edge for resample/replay (default: False)\n  --no-adjbartime       no adjbartime for resample/replay (default: False)\n  --no-rightedge        no rightedge for resample/replay (default: False)\n  --broker              Use VisualChart as broker (default: False)\n  --account ACCOUNT     Choose broker account (else first) (default: None)\n  --trade               Do Sample Buy/Sell operations (default: False)\n  --donotsell           Do not sell after a buy (default: False)\n  --exectype {Market,Close,Limit,Stop,StopLimit}\n                        Execution to Use when opening position (default:\n                        Market)\n  --price PRICE         Price in Limit orders or Stop Trigger Price (default:\n                        None)\n  --pstoplimit PSTOPLIMIT\n                        Price for the limit in StopLimit (default: None)\n  --stake STAKE         Stake to use in buy operations (default: 10)\n  --valid VALID         Seconds or YYYY-MM-DD (default: None)\n  --cancel CANCEL       Cancel a buy order after n bars in operation, to be\n                        combined with orders like Limit (default: 0)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\n# The above could be sent to an independent module\nimport backtrader as bt\nfrom backtrader.utils import flushfile  # win32 quick stdout flushing\nfrom backtrader.utils.py3 import string_types\n\nclass TestStrategy(bt.Strategy):\n    params = dict(\n        smaperiod=5,\n        trade=False,\n        stake=10,\n        exectype=bt.Order.Market,\n        stopafter=0,\n        valid=None,\n        cancel=0,\n        donotsell=False,\n        price=None,\n        pstoplimit=None,\n    )\n\n    def __init__(self):\n        # To control operation entries\n        self.orderid = list()\n        self.order = None\n\n        self.counttostop = 0\n        self.datastatus = 0\n\n        # Create SMA on 2nd data\n        self.sma = bt.indicators.MovAv.SMA(self.data, period=self.p.smaperiod)\n\n        print('--------------------------------------------------')\n        print('Strategy Created')\n        print('--------------------------------------------------')\n\n    def notify_data(self, data, status, *args, **kwargs):\n        print('*' * 5, 'DATA NOTIF:', data._getstatusname(status), *args)\n        if status == data.LIVE:\n            self.counttostop = self.p.stopafter\n            self.datastatus = 1\n\n    def notify_store(self, msg, *args, **kwargs):\n        print('*' * 5, 'STORE NOTIF:', msg)\n\n    def notify_order(self, order):\n        if order.status in [order.Completed, order.Cancelled, order.Rejected]:\n            self.order = None\n\n        print('-' * 50, 'ORDER BEGIN', datetime.datetime.now())\n        print(order)\n        print('-' * 50, 'ORDER END')\n\n    def notify_trade(self, trade):\n        print('-' * 50, 'TRADE BEGIN', datetime.datetime.now())\n        print(trade)\n        print('-' * 50, 'TRADE END')\n\n    def prenext(self):\n        self.next(frompre=True)\n\n    def next(self, frompre=False):\n        txt = list()\n        txt.append('%04d' % len(self))\n        dtfmt = '%Y-%m-%dT%H:%M:%S.%f'\n        txt.append('%s' % self.data.datetime.datetime(0).strftime(dtfmt))\n        txt.append('{}'.format(self.data.open[0]))\n        txt.append('{}'.format(self.data.high[0]))\n        txt.append('{}'.format(self.data.low[0]))\n        txt.append('{}'.format(self.data.close[0]))\n        txt.append('{}'.format(self.data.volume[0]))\n        txt.append('{}'.format(self.data.openinterest[0]))\n        txt.append('{}'.format(self.sma[0]))\n        print(', '.join(txt))\n\n        if len(self.datas) > 1:\n            txt = list()\n            txt.append('%04d' % len(self))\n            dtfmt = '%Y-%m-%dT%H:%M:%S.%f'\n            txt.append('%s' % self.data1.datetime.datetime(0).strftime(dtfmt))\n            txt.append('{}'.format(self.data1.open[0]))\n            txt.append('{}'.format(self.data1.high[0]))\n            txt.append('{}'.format(self.data1.low[0]))\n            txt.append('{}'.format(self.data1.close[0]))\n            txt.append('{}'.format(self.data1.volume[0]))\n            txt.append('{}'.format(self.data1.openinterest[0]))\n            txt.append('{}'.format(float('NaN')))\n            print(', '.join(txt))\n\n        if self.counttostop:  # stop after x live lines\n            self.counttostop -= 1\n            if not self.counttostop:\n                self.env.runstop()\n                return\n\n        if not self.p.trade:\n            return\n\n        # if True and len(self.orderid) < 1:\n        if self.datastatus and not self.position and len(self.orderid) < 1:\n            self.order = self.buy(size=self.p.stake,\n                                  exectype=self.p.exectype,\n                                  price=self.p.price,\n                                  plimit=self.p.pstoplimit,\n                                  valid=self.p.valid)\n\n            self.orderid.append(self.order)\n        elif self.position.size > 0 and not self.p.donotsell:\n            if self.order is None:\n                size = self.p.stake // 2\n                if not size:\n                    size = self.position.size  # use the remaining\n                self.order = self.sell(size=size, exectype=bt.Order.Market)\n\n        elif self.order is not None and self.p.cancel:\n            if self.datastatus > self.p.cancel:\n                self.cancel(self.order)\n\n        if self.datastatus:\n            self.datastatus += 1\n\n    def start(self):\n        header = ['Datetime', 'Open', 'High', 'Low', 'Close', 'Volume',\n                  'OpenInterest', 'SMA']\n        print(', '.join(header))\n\n        self.done = False\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    storekwargs = dict()\n\n    if not args.nostore:\n        vcstore = bt.stores.VCStore(**storekwargs)\n\n    if args.broker:\n        brokerargs = dict(account=args.account, **storekwargs)\n        if not args.nostore:\n            broker = vcstore.getbroker(**brokerargs)\n        else:\n            broker = bt.brokers.VCBroker(**brokerargs)\n\n        cerebro.setbroker(broker)\n\n    timeframe = bt.TimeFrame.TFrame(args.timeframe)\n    if args.resample or args.replay:\n        datatf = bt.TimeFrame.Ticks\n        datacomp = 1\n    else:\n        datatf = timeframe\n        datacomp = args.compression\n\n    fromdate = None\n    if args.fromdate:\n        dtformat = '%Y-%m-%d' + ('T%H:%M:%S' * ('T' in args.fromdate))\n        fromdate = datetime.datetime.strptime(args.fromdate, dtformat)\n\n    todate = None\n    if args.todate:\n        dtformat = '%Y-%m-%d' + ('T%H:%M:%S' * ('T' in args.todate))\n        todate = datetime.datetime.strptime(args.todate, dtformat)\n\n    VCDataFactory = vcstore.getdata if not args.nostore else bt.feeds.VCData\n\n    datakwargs = dict(\n        timeframe=datatf, compression=datacomp,\n        fromdate=fromdate, todate=todate,\n        historical=args.historical,\n        qcheck=args.qcheck,\n        tz=args.timezone\n    )\n\n    if args.nostore and not args.broker:   # neither store nor broker\n        datakwargs.update(storekwargs)  # pass the store args over the data\n\n    data0 = VCDataFactory(dataname=args.data0, tradename=args.tradename,\n                          **datakwargs)\n\n    data1 = None\n    if args.data1 is not None:\n        data1 = VCDataFactory(dataname=args.data1, **datakwargs)\n\n    rekwargs = dict(\n        timeframe=timeframe, compression=args.compression,\n        bar2edge=not args.no_bar2edge,\n        adjbartime=not args.no_adjbartime,\n        rightedge=not args.no_rightedge,\n    )\n\n    if args.replay:\n        cerebro.replaydata(dataname=data0, **rekwargs)\n\n        if data1 is not None:\n            cerebro.replaydata(dataname=data1, **rekwargs)\n\n    elif args.resample:\n        cerebro.resampledata(dataname=data0, **rekwargs)\n\n        if data1 is not None:\n            cerebro.resampledata(dataname=data1, **rekwargs)\n\n    else:\n        cerebro.adddata(data0)\n        if data1 is not None:\n            cerebro.adddata(data1)\n\n    if args.valid is None:\n        valid = None\n    else:\n        try:\n            valid = float(args.valid)\n        except:\n            dtformat = '%Y-%m-%d' + ('T%H:%M:%S' * ('T' in args.valid))\n            valid = datetime.datetime.strptime(args.valid, dtformat)\n        else:\n            valid = datetime.timedelta(seconds=args.valid)\n\n    # Add the strategy\n    cerebro.addstrategy(TestStrategy,\n                        smaperiod=args.smaperiod,\n                        trade=args.trade,\n                        exectype=bt.Order.ExecType(args.exectype),\n                        stake=args.stake,\n                        stopafter=args.stopafter,\n                        valid=valid,\n                        cancel=args.cancel,\n                        donotsell=args.donotsell,\n                        price=args.price,\n                        pstoplimit=args.pstoplimit)\n\n    # Live data ... avoid long data accumulation by switching to \"exactbars\"\n    cerebro.run(exactbars=args.exactbars)\n\n    if args.plot and args.exactbars < 1:  # plot if possible\n        cerebro.plot()\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Test Visual Chart 6 integration')\n\n    parser.add_argument('--exactbars', default=1, type=int,\n                        required=False, action='store',\n                        help='exactbars level, use 0/-1/-2 to enable plotting')\n\n    parser.add_argument('--plot',\n                        required=False, action='store_true',\n                        help='Plot if possible')\n\n    parser.add_argument('--stopafter', default=0, type=int,\n                        required=False, action='store',\n                        help='Stop after x lines of LIVE data')\n\n    parser.add_argument('--nostore',\n                        required=False, action='store_true',\n                        help='Do not Use the store pattern')\n\n    parser.add_argument('--qcheck', default=0.5, type=float,\n                        required=False, action='store',\n                        help=('Timeout for periodic '\n                              'notification/resampling/replaying check'))\n\n    parser.add_argument('--no-timeoffset',\n                        required=False, action='store_true',\n                        help=('Do not Use TWS/System time offset for non '\n                              'timestamped prices and to align resampling'))\n\n    parser.add_argument('--data0', default=None,\n                        required=True, action='store',\n                        help='data 0 into the system')\n\n    parser.add_argument('--tradename', default=None,\n                        required=False, action='store',\n                        help='Actual Trading Name of the asset')\n\n    parser.add_argument('--data1', default=None,\n                        required=False, action='store',\n                        help='data 1 into the system')\n\n    parser.add_argument('--timezone', default=None,\n                        required=False, action='store',\n                        help='timezone to get time output into (pytz names)')\n\n    parser.add_argument('--historical',\n                        required=False, action='store_true',\n                        help='do only historical download')\n\n    parser.add_argument('--fromdate',\n                        required=False, action='store',\n                        help=('Starting date for historical download '\n                              'with format: YYYY-MM-DD[THH:MM:SS]'))\n\n    parser.add_argument('--todate',\n                        required=False, action='store',\n                        help=('End date for historical download '\n                              'with format: YYYY-MM-DD[THH:MM:SS]'))\n\n    parser.add_argument('--smaperiod', default=5, type=int,\n                        required=False, action='store',\n                        help='Period to apply to the Simple Moving Average')\n\n    pgroup = parser.add_mutually_exclusive_group(required=False)\n\n    pgroup.add_argument('--replay',\n                        required=False, action='store_true',\n                        help='replay to chosen timeframe')\n\n    pgroup.add_argument('--resample',\n                        required=False, action='store_true',\n                        help='resample to chosen timeframe')\n\n    parser.add_argument('--timeframe', default=bt.TimeFrame.Names[0],\n                        choices=bt.TimeFrame.Names,\n                        required=False, action='store',\n                        help='TimeFrame for Resample/Replay')\n\n    parser.add_argument('--compression', default=1, type=int,\n                        required=False, action='store',\n                        help='Compression for Resample/Replay')\n\n    parser.add_argument('--no-bar2edge',\n                        required=False, action='store_true',\n                        help='no bar2edge for resample/replay')\n\n    parser.add_argument('--no-adjbartime',\n                        required=False, action='store_true',\n                        help='no adjbartime for resample/replay')\n\n    parser.add_argument('--no-rightedge',\n                        required=False, action='store_true',\n                        help='no rightedge for resample/replay')\n\n    parser.add_argument('--broker',\n                        required=False, action='store_true',\n                        help='Use VisualChart as broker')\n\n    parser.add_argument('--account', default=None,\n                        required=False, action='store',\n                        help='Choose broker account (else first)')\n\n    parser.add_argument('--trade',\n                        required=False, action='store_true',\n                        help='Do Sample Buy/Sell operations')\n\n    parser.add_argument('--donotsell',\n                        required=False, action='store_true',\n                        help='Do not sell after a buy')\n\n    parser.add_argument('--exectype', default=bt.Order.ExecTypes[0],\n                        choices=bt.Order.ExecTypes,\n                        required=False, action='store',\n                        help='Execution to Use when opening position')\n\n    parser.add_argument('--price', default=None, type=float,\n                        required=False, action='store',\n                        help='Price in Limit orders or Stop Trigger Price')\n\n    parser.add_argument('--pstoplimit', default=None, type=float,\n                        required=False, action='store',\n                        help='Price for the limit in StopLimit')\n\n    parser.add_argument('--stake', default=10, type=int,\n                        required=False, action='store',\n                        help='Stake to use in buy operations')\n\n    parser.add_argument('--valid', default=None,\n                        required=False, action='store',\n                        help='Seconds or YYYY-MM-DD')\n\n    parser.add_argument('--cancel', default=0, type=int,\n                        required=False, action='store',\n                        help=('Cancel a buy order after n bars in operation,'\n                              ' to be combined with orders like Limit'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]