["```py\n`BP = Close - Minimum(Low or Prior Close)\n\nTR = Maximum(High or Prior Close)  -  Minimum(Low or Prior Close)\n\nAverage7 = (7-period BP Sum) / (7-period TR Sum)\nAverage14 = (14-period BP Sum) / (14-period TR Sum)\nAverage28 = (28-period BP Sum) / (28-period TR Sum)\n\nUO = 100 x [(4 x Average7)+(2 x Average14)+Average28]/(4+2+1)` \n```", "```py\n    `class UltimateOscillator(bt.Indicator):` \n    ```", "```py\n    `lines = ('uo',)` \n    ```", "```py\n    `params = (('p1', 7),\n              ('p2', 14),\n              ('p3', 28),\n    )` \n    ```", "```py\n    `bp = self.data.close - TrueLow(self.data)` \n    ```", "```py\n    `tr = TrueRange(self.data)` \n    ```", "```py\n    `av7 = SumN(bp, period=self.p.p1) / SumN(tr, period=self.p.p1)\n    av14 = SumN(bp, period=self.p.p2) / SumN(tr, period=self.p.p2)\n    av28 = SumN(bp, period=self.p.p3) / SumN(tr, period=self.p.p3)\n\n    uo = 100.0 * (4.0 * av7 + 2.0 * av14 + av28) / (4.0 + 2.0 + 1.0)` \n    ```", "```py\n    `self.lines.uo = uo` \n    ```", "```py\n    `('upperband', 70.0),\n    ('lowerband', 30.0),` \n    ```", "```py\n    `def _plotinit(self):\n        baseticks = [10.0, 50.0, 90.0]\n        hlines = [self.p.upperband, self.p.lowerband]\n\n        self.plotinfo.plotyhlines = hlines\n        self.plotinfo.plotyticks = baseticks + hlines` \n    ```", "```py\n`btrun \\\n  --nostdstats \\\n  --data 2005-2006-day-001.txt \\\n  --indicator ultimateoscillator:UltimateOscillator \\\n  --indicator ultimateoscillator:UltimateOscillator:p1=4,p2=8,p3=16 \\\n  --plot` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nfrom backtrader.indicators import SumN, TrueLow, TrueRange\n\nclass UltimateOscillator(bt.Indicator):\n    '''\n    Formula:\n      # Buying Pressure = Close - TrueLow\n      BP = Close - Minimum(Low or Prior Close)\n\n      # TrueRange = TrueHigh - TrueLow\n      TR = Maximum(High or Prior Close)  -  Minimum(Low or Prior Close)\n\n      Average7 = (7-period BP Sum) / (7-period TR Sum)\n      Average14 = (14-period BP Sum) / (14-period TR Sum)\n      Average28 = (28-period BP Sum) / (28-period TR Sum)\n\n      UO = 100 x [(4 x Average7)+(2 x Average14)+Average28]/(4+2+1)\n\n    See:\n\n      - https://en.wikipedia.org/wiki/Ultimate_oscillator\n      - http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ultimate_oscillator\n    '''\n    lines = ('uo',)\n\n    params = (('p1', 7),\n              ('p2', 14),\n              ('p3', 28),\n              ('upperband', 70.0),\n              ('lowerband', 30.0),\n    )\n\n    def _plotinit(self):\n        baseticks = [10.0, 50.0, 90.0]\n        hlines = [self.p.upperband, self.p.lowerband]\n\n        self.plotinfo.plotyhlines = hlines\n        self.plotinfo.plotyticks = baseticks + hlines\n\n    def __init__(self):\n        bp = self.data.close - TrueLow(self.data)\n        tr = TrueRange(self.data)\n\n        av7 = SumN(bp, period=self.p.p1) / SumN(tr, period=self.p.p1)\n        av14 = SumN(bp, period=self.p.p2) / SumN(tr, period=self.p.p2)\n        av28 = SumN(bp, period=self.p.p3) / SumN(tr, period=self.p.p3)\n\n        uo = 100.0 * (4.0 * av7 + 2.0 * av14 + av28) / (4.0 + 2.0 + 1.0)\n        self.lines.uo = uo` \n```"]