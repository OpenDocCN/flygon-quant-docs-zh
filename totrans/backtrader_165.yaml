- en: Live Data/Live Trading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/blog/posts/2016-06-21-livedata-feed/live-data-feed/](https://www.backtrader.com/blog/posts/2016-06-21-livedata-feed/live-data-feed/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Starting with release *1.5.0*, backtrader supports Live Data Feeds and Live
    Trading. The first integrated entity is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Interactive Brokers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This was long sought goal since the inception of the platform as a small idea.
    The design ideas have proven to be flexible enough to accommodate the needed changes.
    All whilst keeping the same interface which means: *backtest once, trade many
    times*. The same code/api/primitives/notifications are meant for *backtesting*
    and *live data feeding/trading*.'
  prefs: []
  type: TYPE_NORMAL
- en: Naming the platform `back` + `trader` was intentional, although it could have
    well been that it had remained as a pure backtester. But no longer.
  prefs: []
  type: TYPE_NORMAL
- en: 'What’s new changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Store* concept to have a integrated concept for entities like *Interactive
    Brokers* which provide *data* and *brokering* facilities in one go'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New notifications to the *strategy* and/or *cerebro* from the *store* and/or
    *data feeds*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time management support … as one could be trading New York baed products from
    anywhere else and time has to be kept consistent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work on Resampling/Replaying to deliver bars as soon as possible or not too
    late if the market is not trading (nobody wants a 5 second resampled bar received
    30 seconds later, because there were no intervening ticks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course many small internal changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A great deal of testing has gone into the integration and a large sample called
    `ibtest` is integrated in the sources, but being this the 1^(st) release there
    could still be some edges. Should you decide to give this a try, execute 1^(st)
    against **Paper Trading** account provided by *Interactive Brokers* (usually running
    at port `7497` rather than `7496`)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to be comfortable with the inherent risks associated with data disconnection,
    bugs present in the software (*TWS* and *backtrader*), bugs in your own software
    and monitor your activities.
  prefs: []
  type: TYPE_NORMAL
- en: '`backtrader` cannot take any responsibility or be held responsible for any
    losses a trader may incur (it will also not take any of the winnings)'
  prefs: []
  type: TYPE_NORMAL
- en: 'What’s supported from *Interactive Brokers*:'
  prefs: []
  type: TYPE_NORMAL
- en: Indices (obviously not for trading), Stocks, Futures, Options, Futures Options
    and Forex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backfilling at the start of a connection and after a reconnection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications on change from live to backfilling and viceversa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The order types already existing in *backtrader*: `Market`, `Limit`, `StopLimit`
    and `Close` (aka *Market on Close**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is not the intention of the platform to reinvent the wheel, so the following
    is needed/optional to use the *Interactive Brokers* facilities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Required: `IbPy` to interface with *Interative Brokers’ TWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The documentation for *IB* indicates how to install it if not already part of
    your arsenal
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Optional: `pytz` to automatically set the timezone for the products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end-user may provide other `tzinfo` -compatible instances (from `pytz` or
    home-cooked) directly as a parameter to the data source rather than relying on
    automatic determination. See *Time Management* in the docs and the *IB* specific
    part of the documents.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '!!! note'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As much as possible has been documented and is available at the usual documentation
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Read The Docs](http://backtrader.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A couple of runs from the sample `ibtest` against the *TWS Demo*
  prefs: []
  type: TYPE_NORMAL
- en: 'First: `TWTR` with resampling to 5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The execution environment has `pytz` installed
  prefs: []
  type: TYPE_NORMAL
- en: 'The following can be observed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The 1^(st) lines (from `IbPy` itself) show the connection to the server has
    succeeded and the data feed has found out the operating timezone of the asset:
    `EST5EDT` (aka `EST` aka `US/Eastern`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice how the local time (in timezone `CET` aka `Europe/Berlin`) is reported
    by *TWS* at the beginning, but the asset is `6` hours behind.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset is reported in the time of the trading venue. Check the docs if you
    thing you really want to change this and the reasoning for this behavior.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some notifications from the *Store*, in this case *TWS* indicates that the connections
    to the different data farms is ok. This is being printed out by methods overriden
    in the *Strategy*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DATA NOTIFICATIONS** like'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONNECTED`: to tell the strategy connection to *TWS* is available'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELAYED`: the data to be received is NOT live data. Backfilling (historical
    data) is taking place.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Because the resampling parameters are *Seconds/5* the maximum number of 5 seconds
    bar fitting in a single request is downloaded, roughly 1440.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`LIVE`: as soon as the platform catches up with backfilling and the queue is
    reduced to live data, the notification tells the strategy about it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From bar 1443 onwards the data is real-time data.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: because resampling is taking place this data is NOT tick-data and is delivered
    at the end of the 5 second period. Please check the docs for the `qcheck` parameter
    docs in `IBData` to understand how quickly a resampled bar will be delayed if
    no new ticks are being sent by the platform (because with no new ticks, the platform
    cannot understand if the currently resampled bar is yet over or not)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s do the same but forcing a disconnection (the network interface is disabled
    20 seconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output (skipping the initial known part):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The narrative:'
  prefs: []
  type: TYPE_NORMAL
- en: After bar 1442, the WLAN interface has been disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TWS notifications arrive indicating the situation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar 1443 is delivered from the resampler, because the platform had some ticks
    in between `18:16:30.000000` and `18:16:35.000000`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity is restored at around `18:17:15`, but this data is not delivered
    at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The situation is identified and *backfilling* is attempted between `18:16:35`
    and `18:17:15`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can be seen with the notification `DELAYED`. The data is no longer `LIVE`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bars 1444 to 1450 (both incl.) deliver the missing time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The notification `LIVE` is received and bar 1451 contains a real-time packet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are some situations which `backtrader` cannot overcome, because **TWS**
    does not oblige. If TCP/IP packets are somehow lost and the *IB* Server is slow
    to react, it will take *TWS* a long time to react and notify the loss of connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: '*TWS* will even deliver packets clearly received late from the server with
    current timestamps (identified through a sudden burst of packets)'
  prefs: []
  type: TYPE_NORMAL
- en: And finally some trading, buying *20K* shares of `TWTR` with a single `Market`
    order and selling them in 2 orders of *10K* each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is rather verbose, showing all parts of the order exeuction. Summarising
    a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following happens:'
  prefs: []
  type: TYPE_NORMAL
- en: Data is received as normal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `BUY` for `20K` with execution type `Market` is issued
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Submitted` and `Accepted` notifications are received (only `Submitted` is
    shown above)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A streak of `Partial` executions (only 1 shown) until `Completed` is received.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual execution is not shown, but is available in the `order` instance
    received under `order.executed`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although not shown, 2 x `Market` `SELL` orders are issued to undo the operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The screenshot shows the logs in *TWS* after two different runs across an evening
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../Images/39cae87654a32f64cca1236b14e3afe2.png)'
  prefs: []
  type: TYPE_IMG
- en: The sample can do much more and is intended as a thorough test of the facilities
    and if possible to uncover any rough edges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
