["```py\n`pivotpoint = btind.PivotPoint(self.data1)\nsellsignal = self.data0.close < pivotpoint.s1` \n```", "```py\n`return self.array[self.idx + ago]\nIndexError: array index out of range` \n```", "```py\n`close1 = self.data.close(-1)` \n```", "```py\n`pivotpoint = btind.PivotPoint(self.data1)\nsellsignal = self.data0.close < pivotpoint.s1()` \n```", "```py\n`cerebro = bt.Cerebro(runonce=False)` \n```", "```py\n`cerebro.run(runonce=False)` \n```", "```py\n`$ ./mixing-timeframes.py` \n```", "```py\n`0021,0021,0001,2005-01-31,2984.75,2935.96,0.00\n0022,0022,0001,2005-02-01,3008.85,2935.96,0.00\n...\n0073,0073,0003,2005-04-15,3013.89,3010.76,0.00\n0074,0074,0003,2005-04-18,2947.79,3010.76,1.00\n...` \n```", "```py\n`self.sellsignal = self.data0.close < pp.s1()` \n```", "```py\n`pp1 = pp()\nself.sellsignal = self.data0.close < pp1.s1` \n```", "```py\n`$ ./mixing-timeframes.py --multi` \n```", "```py\n`0021,0021,0001,2005-01-31,2984.75,2935.96,0.00\n0022,0022,0001,2005-02-01,3008.85,2935.96,0.00\n...\n0073,0073,0003,2005-04-15,3013.89,3010.76,0.00\n0074,0074,0003,2005-04-18,2947.79,3010.76,1.00\n...` \n```", "```py\n`$ ./mixing-timeframes.py --multi --plot` \n```", "```py\n    `- If the default `-1` is given, all *lines* are coupled.\n\n    - If another integer (for example, `0` or `1`) a single line will be\n      coupled and fetched by index (from `obj.lines[x]`)\n\n    - If a string is passed, the line will be fetched by name.\n\n      In the sample the following could have been done:\n\n      ```", "```py` \n    ```", "```py\n`$ ./mixing-timeframes.py --help\nusage: mixing-timeframes.py [-h] [--data DATA] [--multi] [--plot]\n\nSample for pivot point and cross plotting\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --data DATA  Data to be read in (default: ../../datas/2005-2006-day-001.txt)\n  --multi      Couple all lines of the indicator (default: False)\n  --plot       Plot the result (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\nimport backtrader.utils.flushfile\n\nclass St(bt.Strategy):\n    params = dict(multi=True)\n\n    def __init__(self):\n        self.pp = pp = btind.PivotPoint(self.data1)\n        pp.plotinfo.plot = False  # deactivate plotting\n\n        if self.p.multi:\n            pp1 = pp()  # couple the entire indicators\n            self.sellsignal = self.data0.close < pp1.s1\n        else:\n            self.sellsignal = self.data0.close < pp.s1()\n\n    def next(self):\n        txt = ','.join(\n            ['%04d' % len(self),\n             '%04d' % len(self.data0),\n             '%04d' % len(self.data1),\n             self.data.datetime.date(0).isoformat(),\n             '%.2f' % self.data0.close[0],\n             '%.2f' % self.pp.s1[0],\n             '%.2f' % self.sellsignal[0]])\n\n        print(txt)\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n    data = btfeeds.BacktraderCSVData(dataname=args.data)\n    cerebro.adddata(data)\n    cerebro.resampledata(data, timeframe=bt.TimeFrame.Months)\n\n    cerebro.addstrategy(St, multi=args.multi)\n\n    cerebro.run(stdstats=False, runonce=False)\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for pivot point and cross plotting')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--multi', required=False, action='store_true',\n                        help='Couple all lines of the indicator')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]