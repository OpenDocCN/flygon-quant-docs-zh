["```py\n`Pivot Point (P) = (High + Low + Close)/3\nSupport 1 (S1) = (P x 2) - High\nSupport 2 (S2) = P  -  (High  -  Low)\nResistance 1 (R1) = (P x 2) - Low\nResistance 2 (R2) = P + (High  -  Low)` \n```", "```py\n`data = btfeeds.ADataFeed(..., timeframe=bt.TimeFrame.Days)\ncerebro.adddata(data)\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Months)` \n```", "```py\n`class MyStrategy(bt.Strategy):\n    def __init__(self):\n        self.pp = PivotPoint(self.data1)  # the resampled data` \n```", "```py\n`class PivotPoint1(bt.Indicator):\n    lines = ('p', 's1', 's2', 'r1', 'r2',)\n\n    def __init__(self):\n        h = self.data.high(-1)  # previous high\n        l = self.data.low(-1)  # previous low\n        c = self.data.close(-1)  # previous close\n\n        self.lines.p = p = (h + l + c) / 3.0\n\n        p2 = p * 2.0\n        self.lines.s1 = p2 - h  # (p x 2) - high\n        self.lines.r1 = p2 - l  # (p x 2) - low\n\n        hilo = h - l\n        self.lines.s2 = p - hilo  # p - (high - low)\n        self.lines.r2 = p + hilo  # p + (high - low)` \n```", "```py\n `def __init__(self):\n        if self.p.usepp1:\n            self.pp = PivotPoint1(self.data1)\n        else:\n            self.pp = PivotPoint(self.data1)` \n```", "```py\n `def next(self):\n        txt = ','.join(\n            ['%04d' % len(self),\n             '%04d' % len(self.data0),\n             '%04d' % len(self.data1),\n             self.data.datetime.date(0).isoformat(),\n             '%.2f' % self.pp[0]])\n\n        print(txt)` \n```", "```py\n`./ppsample --usepp1` \n```", "```py\n`0041,0041,0002,2005-02-28,2962.79\n0042,0042,0002,2005-03-01,2962.79\n...` \n```", "```py\n`class PivotPoint(bt.Indicator):\n    lines = ('p', 's1', 's2', 'r1', 'r2',)\n    plotinfo = dict(subplot=False)\n\n    def __init__(self):\n        h = self.data.high  # current high\n        l = self.data.low  # current high\n        c = self.data.close  # current high\n\n        self.lines.p = p = (h + l + c) / 3.0\n\n        p2 = p * 2.0\n        self.lines.s1 = p2 - h  # (p x 2) - high\n        self.lines.r1 = p2 - l  # (p x 2) - low\n\n        hilo = h - l\n        self.lines.s2 = p - hilo  # p - (high - low)\n        self.lines.r2 = p + hilo  # p + (high - low)` \n```", "```py\n`./ppsample` \n```", "```py\n`0021,0021,0001,2005-01-31,2962.79\n0022,0022,0001,2005-02-01,2962.79\n...` \n```", "```py\n`Once Pivot Points are set, they do not change and remain in play throughout ...` \n```", "```py\n `plotinfo = dict(subplot=False)` \n```", "```py\n`./ppsample --plot` \n```", "```py\n`./ppsample --plot --plot-on-daily` \n```", "```py\n`$ ./ppsample.py --help\nusage: ppsample.py [-h] [--data DATA] [--usepp1] [--plot] [--plot-on-daily]\n\nSample for pivot point and cross plotting\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --data DATA      Data to be read in (default:\n                   ../../datas/2005-2006-day-001.txt)\n  --usepp1         Have PivotPoint look 1 period backwards (default: False)\n  --plot           Plot the result (default: False)\n  --plot-on-daily  Plot the indicator on the daily data (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,)\n#                        unicode_literals)\n\nimport backtrader as bt\n\nclass PivotPoint1(bt.Indicator):\n    lines = ('p', 's1', 's2', 'r1', 'r2',)\n\n    def __init__(self):\n        h = self.data.high(-1)  # previous high\n        l = self.data.low(-1)  # previous low\n        c = self.data.close(-1)  # previous close\n\n        self.lines.p = p = (h + l + c) / 3.0\n\n        p2 = p * 2.0\n        self.lines.s1 = p2 - h  # (p x 2) - high\n        self.lines.r1 = p2 - l  # (p x 2) - low\n\n        hilo = h - l\n        self.lines.s2 = p - hilo  # p - (high - low)\n        self.lines.r2 = p + hilo  # p + (high - low)\n\nclass PivotPoint(bt.Indicator):\n    lines = ('p', 's1', 's2', 'r1', 'r2',)\n    plotinfo = dict(subplot=False)\n\n    def __init__(self):\n        h = self.data.high  # current high\n        l = self.data.low  # current high\n        c = self.data.close  # current high\n\n        self.lines.p = p = (h + l + c) / 3.0\n\n        p2 = p * 2.0\n        self.lines.s1 = p2 - h  # (p x 2) - high\n        self.lines.r1 = p2 - l  # (p x 2) - low\n\n        hilo = h - l\n        self.lines.s2 = p - hilo  # p - (high - low)\n        self.lines.r2 = p + hilo  # p + (high - low)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.utils.flushfile\n\nfrom pivotpoint import PivotPoint, PivotPoint1\n\nclass St(bt.Strategy):\n    params = (('usepp1', False),\n              ('plot_on_daily', False))\n\n    def __init__(self):\n        if self.p.usepp1:\n            self.pp = PivotPoint1(self.data1)\n        else:\n            self.pp = PivotPoint(self.data1)\n\n        if self.p.plot_on_daily:\n            self.pp.plotinfo.plotmaster = self.data0\n\n    def next(self):\n        txt = ','.join(\n            ['%04d' % len(self),\n             '%04d' % len(self.data0),\n             '%04d' % len(self.data1),\n             self.data.datetime.date(0).isoformat(),\n             '%.2f' % self.pp[0]])\n\n        print(txt)\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n    data = btfeeds.BacktraderCSVData(dataname=args.data)\n    cerebro.adddata(data)\n    cerebro.resampledata(data, timeframe=bt.TimeFrame.Months)\n\n    cerebro.addstrategy(St,\n                        usepp1=args.usepp1,\n                        plot_on_daily=args.plot_on_daily)\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for pivot point and cross plotting')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/2005-2006-day-001.txt',\n                        help='Data to be read in')\n\n    parser.add_argument('--usepp1', required=False, action='store_true',\n                        help='Have PivotPoint look 1 period backwards')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help=('Plot the result'))\n\n    parser.add_argument('--plot-on-daily', required=False, action='store_true',\n                        help=('Plot the indicator on the daily data'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]