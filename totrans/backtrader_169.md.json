["```py\n`$ ./weekdaysaligner.py --online --data1 '^GSPC' --data0 '^GDAXI'` \n```", "```py\n`0001,  True, data0, 2012-01-03T23:59:59, 2012-01-03T23:59:59, data1\n0002,  True, data0, 2012-01-04T23:59:59, 2012-01-04T23:59:59, data1\n0003,  True, data0, 2012-01-05T23:59:59, 2012-01-05T23:59:59, data1\n0004,  True, data0, 2012-01-06T23:59:59, 2012-01-06T23:59:59, data1\n0005,  True, data0, 2012-01-09T23:59:59, 2012-01-09T23:59:59, data1\n0006,  True, data0, 2012-01-10T23:59:59, 2012-01-10T23:59:59, data1\n0007,  True, data0, 2012-01-11T23:59:59, 2012-01-11T23:59:59, data1\n0008,  True, data0, 2012-01-12T23:59:59, 2012-01-12T23:59:59, data1\n0009,  True, data0, 2012-01-13T23:59:59, 2012-01-13T23:59:59, data1\n0010, False, data0, 2012-01-17T23:59:59, 2012-01-16T23:59:59, data1\n0011, False, data0, 2012-01-18T23:59:59, 2012-01-17T23:59:59, data1\n...` \n```", "```py\n`...\n0249, False, data0, 2012-12-28T23:59:59, 2012-12-19T23:59:59, data1\n0250, False, data0, 2012-12-31T23:59:59, 2012-12-20T23:59:59, data1` \n```", "```py\n`0009 : True : 2012-01-13 : close 1289.09 - 2012-01-13 :  close 6143.08\n0010 : False : 2012-01-13 : close 1289.09 - 2012-01-16 :  close 6220.01\n0011 : True : 2012-01-17 : close 1293.67 - 2012-01-17 :  close 6332.93` \n```", "```py\n`$ ./weekdaysaligner.py --online --data1 '^GSPC' --data0 '^GDAXI'` \n```", "```py\n`...\n0009,  True, data0, 2012-01-13T23:59:59, 2012-01-13T23:59:59, data1\n0010, False, data0, 2012-01-16T23:59:59, 2012-01-13T23:59:59, data1\n0011,  True, data0, 2012-01-17T23:59:59, 2012-01-17T23:59:59, data1\n...` \n```", "```py\n`...\n0034,  True, data0, 2012-02-17T23:59:59, 2012-02-17T23:59:59, data1\n0035, False, data0, 2012-02-20T23:59:59, 2012-02-17T23:59:59, data1\n0036,  True, data0, 2012-02-21T23:59:59, 2012-02-21T23:59:59, data1\n...` \n```", "```py\n`...\n0068,  True, data0, 2012-04-05T23:59:59, 2012-04-05T23:59:59, data1\n0069, False, data0, 2012-04-10T23:59:59, 2012-04-09T23:59:59, data1\n...\n0129, False, data0, 2012-07-04T23:59:59, 2012-07-03T23:59:59, data1\n0130,  True, data0, 2012-07-05T23:59:59, 2012-07-05T23:59:59, data1\n...` \n```", "```py\n`...\n0256,  True, data0, 2012-12-31T23:59:59, 2012-12-31T23:59:59, data1\n...` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport datetime\n\nclass WeekDaysFiller(object):\n    '''Bar Filler to add missing calendar days to trading days'''\n    # kickstart value for date comparisons\n    lastdt = datetime.datetime.max.toordinal()\n\n    def __init__(self, data, fillclose=False):\n        self.fillclose = fillclose\n        self.voidbar = [float('Nan')] * data.size()  # init a void bar\n\n    def __call__(self, data):\n        '''Empty bars (NaN) or with last close price are added for weekdays with no\n        data\n\n        Params:\n          - data: the data source to filter/process\n\n        Returns:\n          - True (always): bars are removed (even if put back on the stack)\n\n        '''\n        dt = data.datetime.dt()  # current date in int format\n        lastdt = self.lastdt + 1  # move the last seen data once forward\n\n        while lastdt < dt:  # loop over gap bars\n            if datetime.date.fromordinal(lastdt).isoweekday() < 6:  # Mon-Fri\n                # Fill in date and add new bar to the stack\n                if self.fillclose:\n                    self.voidbar = [self.lastclose] * data.size()\n                self.voidbar[-1] = float(lastdt) + data.sessionend\n                data._add2stack(self.voidbar[:])\n\n            lastdt += 1  # move lastdt forward\n\n        self.lastdt = dt  # keep a record of the last seen date\n\n        self.lastclose = data.close[0]\n        data._save2stack(erase=True)  # dt bar to the stack and out of stream\n        return True  # bars are on the stack (new and original)` \n```", "```py\n`$ ./weekdaysaligner.py --online --data0 '^GSPC' --data1 '^GDAXI' --filler` \n```", "```py\n`0001,  True, data0, 2012-01-03T23:59:59, 2012-01-03T23:59:59, data1\n...\n0009,  True, data0, 2012-01-13T23:59:59, 2012-01-13T23:59:59, data1\n0010,  True, data0, 2012-01-16T23:59:59, 2012-01-16T23:59:59, data1\n0011,  True, data0, 2012-01-17T23:59:59, 2012-01-17T23:59:59, data1\n...` \n```", "```py\n`...\n0256,  True, data0, 2012-12-25T23:59:59, 2012-12-25T23:59:59, data1\n0257,  True, data0, 2012-12-26T23:59:59, 2012-12-26T23:59:59, data1\n0258,  True, data0, 2012-12-27T23:59:59, 2012-12-27T23:59:59, data1\n0259,  True, data0, 2012-12-28T23:59:59, 2012-12-28T23:59:59, data1\n0260,  True, data0, 2012-12-31T23:59:59, 2012-12-31T23:59:59, data1` \n```", "```py\n`$ ./weekdaysaligner.py --online --data0 '^GSPC' --data1 '^GDAXI' --filler --plot` \n```", "```py\n`$ ./weekdaysaligner.py --online --data0 '^GSPC' --data1 '^GDAXI' --filler --plot --sma 10` \n```", "```py\n`$ ./weekdaysaligner.py --online --data0 '^GSPC' --data1 '^GDAXI' --filler --plot --sma 10 --fillclose` \n```", "```py\n`$ ./weekdaysaligner.py --help\nusage: weekdaysaligner.py [-h] [--online] --data0 DATA0 [--data1 DATA1]\n                          [--sma SMA] [--fillclose] [--filler] [--filler0]\n                          [--filler1] [--fromdate FROMDATE] [--todate TODATE]\n                          [--plot]\n\nSample for aligning with trade\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --online              Fetch data online from Yahoo (default: False)\n  --data0 DATA0         Data 0 to be read in (default: None)\n  --data1 DATA1         Data 1 to be read in (default: None)\n  --sma SMA             Add a sma to the datas (default: 0)\n  --fillclose           Fill with Close price instead of NaN (default: False)\n  --filler              Add Filler to Datas 0 and 1 (default: False)\n  --filler0             Add Filler to Data 0 (default: False)\n  --filler1             Add Filler to Data 1 (default: False)\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format (default:\n                        2012-01-01)\n  --todate TODATE, -t TODATE\n                        Ending date in YYYY-MM-DD format (default: 2012-12-31)\n  --plot                Do plot (default: False)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\nimport backtrader.utils.flushfile\n\n# from wkdaysfiller import WeekDaysFiller\nfrom weekdaysfiller import WeekDaysFiller\n\nclass St(bt.Strategy):\n    params = (('sma', 0),)\n\n    def __init__(self):\n        if self.p.sma:\n            btind.SMA(self.data0, period=self.p.sma)\n            btind.SMA(self.data1, period=self.p.sma)\n\n    def next(self):\n        dtequal = (self.data0.datetime.datetime() ==\n                   self.data1.datetime.datetime())\n\n        txt = ''\n        txt += '%04d, %5s' % (len(self), str(dtequal))\n        txt += ', data0, %s' % self.data0.datetime.datetime().isoformat()\n        txt += ', %s, data1' % self.data1.datetime.datetime().isoformat()\n        print(txt)\n\ndef runstrat():\n    args = parse_args()\n\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    cerebro = bt.Cerebro(stdstats=False)\n\n    DataFeed = btfeeds.YahooFinanceCSVData\n    if args.online:\n        DataFeed = btfeeds.YahooFinanceData\n\n    data0 = DataFeed(dataname=args.data0, fromdate=fromdate, todate=todate)\n\n    if args.data1:\n        data1 = DataFeed(dataname=args.data1, fromdate=fromdate, todate=todate)\n    else:\n        data1 = data0.clone()\n\n    if args.filler or args.filler0:\n        data0.addfilter(WeekDaysFiller, fillclose=args.fillclose)\n\n    if args.filler or args.filler1:\n        data1.addfilter(WeekDaysFiller, fillclose=args.fillclose)\n\n    cerebro.adddata(data0)\n    cerebro.adddata(data1)\n\n    cerebro.addstrategy(St, sma=args.sma)\n    cerebro.run(runonce=True, preload=True)\n\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='Sample for aligning with trade ')\n\n    parser.add_argument('--online', required=False, action='store_true',\n                        help='Fetch data online from Yahoo')\n\n    parser.add_argument('--data0', required=True, help='Data 0 to be read in')\n    parser.add_argument('--data1', required=False, help='Data 1 to be read in')\n\n    parser.add_argument('--sma', required=False, default=0, type=int,\n                        help='Add a sma to the datas')\n\n    parser.add_argument('--fillclose', required=False, action='store_true',\n                        help='Fill with Close price instead of NaN')\n\n    parser.add_argument('--filler', required=False, action='store_true',\n                        help='Add Filler to Datas 0 and 1')\n\n    parser.add_argument('--filler0', required=False, action='store_true',\n                        help='Add Filler to Data 0')\n\n    parser.add_argument('--filler1', required=False, action='store_true',\n                        help='Add Filler to Data 1')\n\n    parser.add_argument('--fromdate', '-f', default='2012-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t', default='2012-12-31',\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help='Do plot')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]