- en: Synchronizing different markets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.backtrader.com/blog/posts/2016-04-19-sync-different-markets/sync-different-markets/](https://www.backtrader.com/blog/posts/2016-04-19-sync-different-markets/sync-different-markets/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The more the usage the more the mix of ideas and unexpected scenarios that backtrader
    has to face. And with each new one, a challenge to see if the platform can live
    up to the expectations set forth when development started, flexibility and ease
    of use were the targets and *Python* was chosen as the cornerstone.
  prefs: []
  type: TYPE_NORMAL
- en: '[Ticket #76](https://github.com/mementum/backtrader/issues/76) raises the question
    as to whether synchronizing markets with different trading calendars can be done.
    Direct attempts to do so fail and the issue creator wonders why `backtrader` is
    not looking at the date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before any answer is delivered some thought has to be put into:'
  prefs: []
  type: TYPE_NORMAL
- en: Behavior of indicators for the days which do not align
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The answer to the latter is:'
  prefs: []
  type: TYPE_NORMAL
- en: The platform is as much as possible `date` and `time` agnostic and will not
    look at the contents of the fields to evaluate those concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Taken into account the fact that stock market prices are `datetime` series
    the above can hold up true up to certain limits. In the case of multiple datas
    the following design considerations apply:'
  prefs: []
  type: TYPE_NORMAL
- en: The 1^(st) data added to `cerebro` is the `datamaster`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other datas have to be time aligned/synchronized with it never being able
    to overtake (in `datetime` terms) the `datamaster`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Putting together the 3 bullet points from above delivers the mix experienced
    by the issue creator. The scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calendar Year: `2012`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data 0: `^GSPC` (or S&P 500 for friends)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data 1: `^GDAXI` (or Dax Index for friends)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running a custom script to see how the data is synchronized by `backtrader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As soon as `2012-01-16` the trading calendars diverge. The `data0` is the `datamaster`
    (`^GSPC`) and even if `data1` (`^GDAXI`) would have a bar to deliver on `2012-01-16`,
    **this wasn’t a trading day** for the *S&P 500*.
  prefs: []
  type: TYPE_NORMAL
- en: The best that `backtrader` can do with the aforementioned design restrictions
    when the next trading day for the `^GSPC` comes in, the `2012-01-17` is deliver
    the next not yet processed date for `^GDAXI` which is the `2012-01-16`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the synchronization problem accumulates with each diverging day. At the
    end of `2012` it looks like follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason should be obvious: *the Europeans trade more days than the Americans*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Ticket #76 [https://github.com/mementum/backtrader/issues/76](https://github.com/mementum/backtrader/issues/76)
    the poster shows what `zipline` does. Let’s look at the `2012-01-13` - `2012-01-17`
    conundrum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Blistering barnacles! The data for `2012-01-13` has been simply **duplicated**
    without apparently asking the user for permission. Imho, this shouldn’t be because
    the end user of the platform cannot undo this spontaneous addition.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Except for a brief look at `zipline`, the author doesn’t know if this is the
    standard behavior, configured by the script developer and if it can be undone
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have seen that the *others* let’s try again with `backtrader` using
    the accumulated wisdom: *the Europeans trade more often than the Americans*. Let’s
    reverse the roles of `^GSPC` and `^GDAXI` and see the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output (skipping to `2012-01-13` directly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Blistering barnacles again! `backtrader` has also *duplicated* the `2012-01-13`
    value for `data1` (in this case `^GSPC`) as a match for `data0` (now `^GDAXI`)
    delivery of `2012-01-16`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And even better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Synchronization is reachieved with the next date: `2012-01-17`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The same re-synchronization is seen again soon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Followed by not such an easy re-sync:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Such episodes keep repeating until the last bar for `^GDAXI` is delivered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The reason for this *synchronization* issues is that `backtrader` does NOT duplicate
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `datamaster` has delivered a new bar the other `datas` are asked to
    deliver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no bar can be delivered for the current `datetime` of the `datamaster` (because
    it, for example, would be overtaken) the next best data is, so to say, *re-delivered*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And this is a bar with an already seen `date`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Proper Synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But not all hope is lost. `backtrader` can deliver. Let’s use **filters**. This
    piece of technology in `backtrader` allows manipulating the data before it hits
    the deepest parts of the platform and for example *indicators* are calculated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`delivering` is a perception matter and therefore what `backtrader` delivers
    may not be what the recipient is expecting as the `delivery`'
  prefs: []
  type: TYPE_NORMAL
- en: The actual code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The test script is already fitted with the capability to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With `--filler` the `WeekDaysFiller` is added to both `data0` and `data1`.
    And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The 1^(st) *conundrum* at `2012-01-13` - `2012-01-17` is gone. And the entire
    set is *synchronized*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Something worth noticing:'
  prefs: []
  type: TYPE_NORMAL
- en: With `^GSPC` as `data0` we had `250` lines (the index traded `250` days in `2012`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `^GDAXI` we `data0` had `256` lines (the index traded `256` days in `2012`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And with the `WeekDaysFiller` in place the length of both *datas* has been extended
    to `260`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding `52` * `2` (weekends and days in a weekend), we would end up with `364`.
    The remaining day until the regular `365` days in a year was for sure a *Saturday*
    or a *Sunday*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The *filter* is *filling* with `NaN` values for the days in which no trading
    took place for the given data. Let’s plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../Images/52cbd847e4685be8fedc6dbfb9938df4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Filled days are quite obvious:'
  prefs: []
  type: TYPE_NORMAL
- en: The gap in between bars is there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gap is even more obvious for the *volume* plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A 2^(nd) plot will try to answer the question at the top: *what happens with
    indicators?*. Remember that the new bars have been given a value of `NaN` (that’s
    why they are not displayed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../Images/83d5c0836f090ea5ab87d3f558256ae6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Re-blistering barnacles! The *Simple Moving Average* has broken the space time
    continuum and jumps some bars with no solution of continuity. This is of course
    the effect of filling up with *Not a Number* aka `NaN`: *mathematic operations
    no longer make sense*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If instead of `NaN` the last seen closing price is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The plot looks a lot nicer with a regular *SMA* for the entire 260 days
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/dc9ed3b7dcc240548ad5370f2a12c2ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Synchronizing two instruments with different trading calendars is a matter of
    making decisions and compromises. `backtrader` needs time aligned data to work
    with multiple datas and different trading calendars don’t help.
  prefs: []
  type: TYPE_NORMAL
- en: The use of the `WeekDaysFiller` described here can alleviate the situation but
    it is by no means a universal panacea, because with which values to fill is a
    matter of long and prolonged consideration.
  prefs: []
  type: TYPE_NORMAL
- en: Script Code and Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Available as sample in the sources of `backtrader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
