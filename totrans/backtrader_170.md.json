["```py\n`Date,Time,Symbol,Status,Bid,Ask,Bid Vol,Ask Vol\n01/03/16,23:43:11,EUR/JPY,D,,130.520,,1000000\n01/03/16,23:43:27,EUR/JPY,D,,130.520,,2000000\n01/03/16,23:49:19,EUR/JPY,D,,130.510,,500000\n01/03/16,23:49:22,EUR/JPY,D,,130.530,,1500000\n01/03/16,23:49:25,EUR/JPY,D,,130.540,,750000\n01/03/16,23:49:27,EUR/JPY,D,,130.550,,900000\n01/03/16,23:51:25,EUR/JPY,D,,130.500,,1200000\n01/03/16,23:52:27,EUR/JPY,D,,130.495,,1100000\n01/03/16,23:53:25,EUR/JPY,D,,130.480,,600000\n01/03/16,23:54:27,EUR/JPY,D,,130.470,,900000` \n```", "```py\n `data = btfeeds.GenericCSVData(\n        dataname=args.data,\n        dtformat='%d/%m/%y',\n        # tmformat='%H%M%S',  # already the default value\n        # datetime=0,  # position at default\n        time=1,  # position of time\n        open=5,  # position of open\n        high=5,\n        low=5,\n        close=5,\n        volume=7,\n        openinterest=-1,  # -1 for not present\n        timeframe=bt.TimeFrame.Ticks)` \n```", "```py\n `cerebro.resampledata(data,\n                         timeframe=bt.TimeFrame.Ticks,\n                         compression=args.compression)` \n```", "```py\n`$ ./bidask-to-ohlc.py --compression 2\n2016-03-01 23:43:27,130.52,130.52,130.52,130.52,3000000.0\n2016-03-01 23:49:22,130.51,130.53,130.53,130.53,2000000.0\n2016-03-01 23:49:27,130.54,130.55,130.55,130.55,1650000.0\n2016-03-01 23:52:27,130.5,130.5,130.5,130.495,2300000.0\n2016-03-01 23:54:27,130.48,130.48,130.48,130.47,1500000.0` \n```", "```py\n`$ ./bidask-to-ohlc.py --compression 3\n2016-03-01 23:49:19,130.52,130.52,130.52,130.51,3500000.0\n2016-03-01 23:49:27,130.53,130.55,130.55,130.55,3150000.0\n2016-03-01 23:53:25,130.5,130.5,130.5,130.48,2900000.0\n2016-03-01 23:54:27,130.47,130.47,130.47,130.47,900000.0` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,)\n#                        unicode_literals)\n\nimport argparse\nimport datetime\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\nclass St(bt.Strategy):\n    def next(self):\n        print(','.join(str(x) for x in [\n            self.data.datetime.datetime(),\n            self.data.open[0], self.data.high[0],\n            self.data.high[0], self.data.close[0],\n            self.data.volume[0]]))\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n\n    data = btfeeds.GenericCSVData(\n        dataname=args.data,\n        dtformat='%d/%m/%y',\n        # tmformat='%H%M%S',  # already the default value\n        # datetime=0,  # position at default\n        time=1,  # position of time\n        open=5,  # position of open\n        high=5,\n        low=5,\n        close=5,\n        volume=7,\n        openinterest=-1,  # -1 for not present\n        timeframe=bt.TimeFrame.Ticks)\n\n    cerebro.resampledata(data,\n                         timeframe=bt.TimeFrame.Ticks,\n                         compression=args.compression)\n\n    cerebro.addstrategy(St)\n\n    cerebro.run()\n    if args.plot:\n        cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description='BidAsk to OHLC')\n\n    parser.add_argument('--data', required=False,\n                        default='../../datas/bidask2.csv',\n                        help='Data file to be read in')\n\n    parser.add_argument('--compression', required=False, default=2, type=int,\n                        help='How much to compress the bars')\n\n    parser.add_argument('--plot', required=False, action='store_true',\n                        help='Plot the vars')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]