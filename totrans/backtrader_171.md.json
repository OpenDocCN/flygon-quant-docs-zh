["```py\n`from backtrader.feeds import GenericCSVData\n\nclass GenericCSV_PE(GenericCSVData):\n    lines = ('pe',)  # Add 'pe' to already defined lines` \n```", "```py\n`('close', 'open', 'high', 'low', 'volume', 'openinterest', 'datetime', 'pe',)` \n```", "```py\n`from backtrader.feeds import GenericCSVData\n\nclass GenericCSV_BidAsk(GenericCSVData):\n    linesoverride = True\n    lines = ('bid', 'ask', 'datetime')  # Replace hierarchy with this one` \n```", "```py\n`class GenericCSVData(feed.CSVDataBase):\n    params = (\n        ('nullvalue', float('NaN')),\n        ('dtformat', '%Y-%m-%d %H:%M:%S'),\n        ('tmformat', '%H:%M:%S'),\n\n        ('datetime', 0),\n        ('time', -1),  # -1 means not present\n        ('open', 1),\n        ('high', 2),\n        ('low', 3),\n        ('close', 4),\n        ('volume', 5),\n        ('openinterest', 6),\n    )` \n```", "```py\n`from backtrader.feeds import GenericCSVData\n\nclass GenericCSV_BidAsk(GenericCSVData):\n    linesoverride = True\n    lines = ('bid', 'ask', 'datetime')  # Replace hierarchy with this one\n\n    params = (('bid', 1), ('ask', 2))` \n```", "```py\n`TIMESTAMP,BID,ASK\n02/03/2010 16:53:50,0.5346,0.5347\n02/03/2010 16:53:51,0.5343,0.5347\n02/03/2010 16:53:52,0.5543,0.5545\n02/03/2010 16:53:53,0.5342,0.5344\n02/03/2010 16:53:54,0.5245,0.5464\n02/03/2010 16:53:54,0.5460,0.5470\n02/03/2010 16:53:56,0.5824,0.5826\n02/03/2010 16:53:57,0.5371,0.5374\n02/03/2010 16:53:58,0.5793,0.5794\n02/03/2010 16:53:59,0.5684,0.5688` \n```", "```py\n`$ ./bidask.py` \n```", "```py\n `1: 2010-02-03T16:53:50 - Bid 0.5346 - 0.5347 Ask\n 2: 2010-02-03T16:53:51 - Bid 0.5343 - 0.5347 Ask\n 3: 2010-02-03T16:53:52 - Bid 0.5543 - 0.5545 Ask\n 4: 2010-02-03T16:53:53 - Bid 0.5342 - 0.5344 Ask\n 5: 2010-02-03T16:53:54 - Bid 0.5245 - 0.5464 Ask\n 6: 2010-02-03T16:53:54 - Bid 0.5460 - 0.5470 Ask\n 7: 2010-02-03T16:53:56 - Bid 0.5824 - 0.5826 Ask\n 8: 2010-02-03T16:53:57 - Bid 0.5371 - 0.5374 Ask\n 9: 2010-02-03T16:53:58 - Bid 0.5793 - 0.5794 Ask\n10: 2010-02-03T16:53:59 - Bid 0.5684 - 0.5688 Ask` \n```", "```py\n    `mysma = backtrader.indicators.SMA(self.data.bid, period=5)` \n    ```", "```py\n`$ ./bidask.py --sma --period=3` \n```", "```py\n `3: 2010-02-03T16:53:52 - Bid 0.5543 - 0.5545 Ask - SMA: 0.5411\n 4: 2010-02-03T16:53:53 - Bid 0.5342 - 0.5344 Ask - SMA: 0.5409\n 5: 2010-02-03T16:53:54 - Bid 0.5245 - 0.5464 Ask - SMA: 0.5377\n 6: 2010-02-03T16:53:54 - Bid 0.5460 - 0.5470 Ask - SMA: 0.5349\n 7: 2010-02-03T16:53:56 - Bid 0.5824 - 0.5826 Ask - SMA: 0.5510\n 8: 2010-02-03T16:53:57 - Bid 0.5371 - 0.5374 Ask - SMA: 0.5552\n 9: 2010-02-03T16:53:58 - Bid 0.5793 - 0.5794 Ask - SMA: 0.5663\n10: 2010-02-03T16:53:59 - Bid 0.5684 - 0.5688 Ask - SMA: 0.5616` \n```", "```py\n`$ ./bidask.py --help\nusage: bidask.py [-h] [--data DATA] [--dtformat DTFORMAT] [--sma]\n                 [--period PERIOD]\n\nBid/Ask Line Hierarchy\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system (default:\n                        ../../datas/bidask.csv)\n  --dtformat DTFORMAT, -dt DTFORMAT\n                        Format of datetime in input (default: %m/%d/%Y\n                        %H:%M:%S)\n  --sma, -s             Add an SMA to the mix (default: False)\n  --period PERIOD, -p PERIOD\n                        Period for the sma (default: 5)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass BidAskCSV(btfeeds.GenericCSVData):\n    linesoverride = True  # discard usual OHLC structure\n    # datetime must be present and last\n    lines = ('bid', 'ask', 'datetime')\n    # datetime (always 1st) and then the desired order for\n    params = (\n        # (datetime, 0), # inherited from parent class\n        ('bid', 1),  # default field pos 1\n        ('ask', 2),  # default field pos 2\n    )\n\nclass St(bt.Strategy):\n    params = (('sma', False), ('period', 3))\n\n    def __init__(self):\n        if self.p.sma:\n            self.sma = btind.SMA(self.data, period=self.p.period)\n\n    def next(self):\n        dtstr = self.data.datetime.datetime().isoformat()\n        txt = '%4d: %s - Bid %.4f - %.4f Ask' % (\n            (len(self), dtstr, self.data.bid[0], self.data.ask[0]))\n\n        if self.p.sma:\n            txt += ' - SMA: %.4f' % self.sma[0]\n        print(txt)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Bid/Ask Line Hierarchy',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser.add_argument('--data', '-d', action='store',\n                        required=False, default='../../datas/bidask.csv',\n                        help='data to add to the system')\n\n    parser.add_argument('--dtformat', '-dt',\n                        required=False, default='%m/%d/%Y %H:%M:%S',\n                        help='Format of datetime in input')\n\n    parser.add_argument('--sma', '-s', action='store_true',\n                        required=False,\n                        help='Add an SMA to the mix')\n\n    parser.add_argument('--period', '-p', action='store',\n                        required=False, default=5, type=int,\n                        help='Period for the sma')\n\n    return parser.parse_args()\n\ndef runstrategy():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()  # Create a cerebro\n\n    data = BidAskCSV(dataname=args.data, dtformat=args.dtformat)\n    cerebro.adddata(data)  # Add the 1st data to cerebro\n    # Add the strategy to cerebro\n    cerebro.addstrategy(St, sma=args.sma, period=args.period)\n    cerebro.run()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]