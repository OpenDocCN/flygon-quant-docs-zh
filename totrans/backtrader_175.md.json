["```py\n    `class CommInfo_Futures_Fixed(CommInfoBase):\n        params = (\n            ('stocklike', False),\n            ('commtype', CommInfoBase.COMM_FIXED),\n        )` \n    ```", "```py\n    `class CommInfo_Stocks_Perc(CommInfoBase):\n        params = (\n            ('stocklike', True),\n            ('commtype', CommInfoBase.COMM_PERC),\n        )` \n    ```", "```py\n    `class CommInfo_Stocks_PercAbs(CommInfoBase):\n        params = (\n            ('stocklike', True),\n            ('commtype', CommInfoBase.COMM_PERC),\n            ('percabs', True),\n        )` \n    ```", "```py\n    `def _getcommission(self, size, price, pseudoexec):\n       '''Calculates the commission of an operation at a given price\n\n       pseudoexec: if True the operation has not yet been executed\n       '''` \n    ```", "```py\n`...\n\ncomminfo = CommInfo_Stocks_PercAbs(commission=0.005)  # 0.5%\ncerebro.broker.addcommissioninfo(comminfo)` \n```", "```py\n`def addcommissioninfo(self, comminfo, name=None):\n    self.comminfo[name] = comminfo` \n```", "```py\n`import backtrader as bt\n\nclass CommInfo_Fut_Perc_Mult(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_PERC),  # Apply % Commission\n    # ('percabs', False),  # pass perc as xx% which is the default\n    )\n\n    def _getcommission(self, size, price, pseudoexec):\n        return size * price * self.p.commission * self.p.mult` \n```", "```py\n`comminfo = CommInfo_Fut_Perc_Mult(\n    commission=0.1,  # 0.1%\n    mult=10,\n    margin=2000  # Margin is needed for futures-like instruments\n)\n\ncerebro.broker.addcommission(comminfo)` \n```", "```py\n`class CommInfo_Fut_Perc_Mult(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_PERC),  # Apply % Commission\n      ('percabs', True),  # pass perc as 0.xx\n    )\n\ncomminfo = CommInfo_Fut_Perc_Mult(\n    commission=0.001,  # 0.1%\n    mult=10,\n    margin=2000  # Margin is needed for futures-like instruments\n)\n\ncerebro.broker.addcommissioninfo(comminfo)` \n```", "```py\n`def _getcommission(self, size, price, pseudoexec):\n    '''Calculates the commission of an operation at a given price\n\n    pseudoexec: if True the operation has not yet been executed\n    '''` \n```", "```py\n`import backtrader as bt\n\nclass CommInfo_Fut_Discount(bt.CommInfoBase):\n    params = (\n      ('stocklike', False),  # Futures\n      ('commtype', bt.CommInfoBase.COMM_FIXED),  # Apply Commission\n\n      # Custom params for the discount\n      ('discount_volume', 5000),  # minimum contracts to achieve discount\n      ('discount_perc', 50.0),  # 50.0% discount\n    )\n\n    negotiated_volume = 0  # attribute to keep track of the actual volume\n\n    def _getcommission(self, size, price, pseudoexec):\n        if self.negotiated_volume > self.p.discount_volume:\n           actual_discount = self.p.discount_perc / 100.0\n        else:\n           actual_discount = 0.0\n\n        commission = self.p.commission * (1.0 - actual_discount)\n        commvalue = size * price * commission\n\n        if not pseudoexec:\n           # keep track of actual real executed size for future discounts\n           self.negotiated_volume += size\n\n        return commvalue` \n```", "```py\n`class CommInfoBase(with_metaclass(MetaParams)):\n    '''Base Class for the Commission Schemes.\n\n    Params:\n\n      - commission (def: 0.0): base commission value in percentage or monetary\n        units\n\n      - mult (def 1.0): multiplier applied to the asset for value/profit\n\n      - margin (def: None): amount of monetary units needed to open/hold an\n        operation. It only applies if the final ``_stocklike`` attribute in the\n        class is set to False\n\n      - commtype (def: None): Supported values are CommInfoBase.COMM_PERC\n        (commission to be understood as %) and CommInfoBase.COMM_FIXED\n        (commission to be understood as monetary units)\n\n        The default value of ``None`` is a supported value to retain\n        compatibility with the legacy ``CommissionInfo`` object. If\n        ``commtype`` is set to None, then the following applies:\n\n          - margin is None: Internal _commtype is set to COMM_PERC and\n            _stocklike is set to True (Operating %-wise with Stocks)\n\n          - margin is not None: _commtype set to COMM_FIXED and _stocklike set\n            to False (Operating with fixed rount-trip commission with Futures)\n\n        If this param is set to something else than None, then it will be\n        passed to the internal ``_commtype`` attribute and the same will be\n        done with the param ``stocklike`` and the internal attribute\n        ``_stocklike``\n\n      - stocklike (def: False):  Indicates if the instrument is Stock-like or\n        Futures-like (see the ``commtype`` discussion above)\n\n      - percabs (def: False): when ``commtype`` is set to COMM_PERC, whether\n        the parameter ``commission`` has to be understood as XX% or 0.XX\n\n        If this param is True: 0.XX\n        If this param is False: XX%\n\n    Attributes:\n\n      - _stocklike: Final value to use for Stock-like/Futures-like behavior\n      - _commtype: Final value to use for PERC vs FIXED commissions\n\n      This two are used internally instead of the declared params to enable the\n      compatibility check described above for the legacy ``CommissionInfo``\n      object\n    '''\n\n    COMM_PERC, COMM_FIXED = range(2)\n\n    params = (\n        ('commission', 0.0), ('mult', 1.0), ('margin', None),\n        ('commtype', None),\n        ('stocklike', False),\n        ('percabs', False),\n    )` \n```"]