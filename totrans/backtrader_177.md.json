["```py\n`$ ./multitrades.py --plot` \n```", "```py\n`$ ./multitrades.py --plot --mtrade` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport math\n\nimport backtrader as bt\n\nclass MTradeObserver(bt.observer.Observer):\n    lines = ('Id_0', 'Id_1', 'Id_2')\n\n    plotinfo = dict(plot=True, subplot=True, plotlinelabels=True)\n\n    plotlines = dict(\n        Id_0=dict(marker='*', markersize=8.0, color='lime', fillstyle='full'),\n        Id_1=dict(marker='o', markersize=8.0, color='red', fillstyle='full'),\n        Id_2=dict(marker='s', markersize=8.0, color='blue', fillstyle='full')\n    )\n\n    def next(self):\n        for trade in self._owner._tradespending:\n\n            if trade.data is not self.data:\n                continue\n\n            if not trade.isclosed:\n                continue\n\n            self.lines[trade.tradeid][0] = trade.pnlcomm` \n```", "```py\n`$ ./multitrades.py --help\nusage: multitrades.py [-h] [--data DATA] [--fromdate FROMDATE]\n                      [--todate TODATE] [--mtrade] [--period PERIOD]\n                      [--onlylong] [--cash CASH] [--comm COMM] [--mult MULT]\n                      [--margin MARGIN] [--stake STAKE] [--plot]\n                      [--numfigs NUMFIGS]\n\nMultiTrades\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format\n  --mtrade              Activate MultiTrade Ids\n  --period PERIOD       Period to apply to the Simple Moving Average\n  --onlylong, -ol       Do only long operations\n  --cash CASH           Starting Cash\n  --comm COMM           Commission for operation\n  --mult MULT           Multiplier for futures\n  --margin MARGIN       Margin for each future\n  --stake STAKE         Stake to apply in each operation\n  --plot, -p            Plot the read data\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using numfigs figures` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport itertools\n\n# The above could be sent to an independent module\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nimport mtradeobserver\n\nclass MultiTradeStrategy(bt.Strategy):\n    '''This strategy buys/sells upong the close price crossing\n    upwards/downwards a Simple Moving Average.\n\n    It can be a long-only strategy by setting the param \"onlylong\" to True\n    '''\n    params = dict(\n        period=15,\n        stake=1,\n        printout=False,\n        onlylong=False,\n        mtrade=False,\n    )\n\n    def log(self, txt, dt=None):\n        if self.p.printout:\n            dt = dt or self.data.datetime[0]\n            dt = bt.num2date(dt)\n            print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):\n        # To control operation entries\n        self.order = None\n\n        # Create SMA on 2nd data\n        sma = btind.MovAv.SMA(self.data, period=self.p.period)\n        # Create a CrossOver Signal from close an moving average\n        self.signal = btind.CrossOver(self.data.close, sma)\n\n        # To alternate amongst different tradeids\n        if self.p.mtrade:\n            self.tradeid = itertools.cycle([0, 1, 2])\n        else:\n            self.tradeid = itertools.cycle([0])\n\n    def next(self):\n        if self.order:\n            return  # if an order is active, no new orders are allowed\n\n        if self.signal > 0.0:  # cross upwards\n            if self.position:\n                self.log('CLOSE SHORT , %.2f' % self.data.close[0])\n                self.close(tradeid=self.curtradeid)\n\n            self.log('BUY CREATE , %.2f' % self.data.close[0])\n            self.curtradeid = next(self.tradeid)\n            self.buy(size=self.p.stake, tradeid=self.curtradeid)\n\n        elif self.signal < 0.0:\n            if self.position:\n                self.log('CLOSE LONG , %.2f' % self.data.close[0])\n                self.close(tradeid=self.curtradeid)\n\n            if not self.p.onlylong:\n                self.log('SELL CREATE , %.2f' % self.data.close[0])\n                self.curtradeid = next(self.tradeid)\n                self.sell(size=self.p.stake, tradeid=self.curtradeid)\n\n    def notify_order(self, order):\n        if order.status in [bt.Order.Submitted, bt.Order.Accepted]:\n            return  # Await further notifications\n\n        if order.status == order.Completed:\n            if order.isbuy():\n                buytxt = 'BUY COMPLETE, %.2f' % order.executed.price\n                self.log(buytxt, order.executed.dt)\n            else:\n                selltxt = 'SELL COMPLETE, %.2f' % order.executed.price\n                self.log(selltxt, order.executed.dt)\n\n        elif order.status in [order.Expired, order.Canceled, order.Margin]:\n            self.log('%s ,' % order.Status[order.status])\n            pass  # Simply log\n\n        # Allow new orders\n        self.order = None\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            self.log('TRADE PROFIT, GROSS %.2f, NET %.2f' %\n                     (trade.pnl, trade.pnlcomm))\n\n        elif trade.justopened:\n            self.log('TRADE OPENED, SIZE %2d' % trade.size)\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data = btfeeds.BacktraderCSVData(\n        dataname=args.data,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 1st data to cerebro\n    cerebro.adddata(data)\n\n    # Add the strategy\n    cerebro.addstrategy(MultiTradeStrategy,\n                        period=args.period,\n                        onlylong=args.onlylong,\n                        stake=args.stake,\n                        mtrade=args.mtrade)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcash(args.cash)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcommission(commission=args.comm,\n                                 mult=args.mult,\n                                 margin=args.margin)\n\n    # Add the MultiTradeObserver\n    cerebro.addobserver(mtradeobserver.MTradeObserver)\n\n    # And run it\n    cerebro.run()\n\n    # Plot if requested\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, volume=False, zdown=False)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='MultiTrades')\n\n    parser.add_argument('--data', '-d',\n                        default='../../datas/2006-day-001.txt',\n                        help='data to add to the system')\n\n    parser.add_argument('--fromdate', '-f',\n                        default='2006-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default='2006-12-31',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--mtrade', action='store_true',\n                        help='Activate MultiTrade Ids')\n\n    parser.add_argument('--period', default=15, type=int,\n                        help='Period to apply to the Simple Moving Average')\n\n    parser.add_argument('--onlylong', '-ol', action='store_true',\n                        help='Do only long operations')\n\n    parser.add_argument('--cash', default=100000, type=int,\n                        help='Starting Cash')\n\n    parser.add_argument('--comm', default=2, type=float,\n                        help='Commission for operation')\n\n    parser.add_argument('--mult', default=10, type=int,\n                        help='Multiplier for futures')\n\n    parser.add_argument('--margin', default=2000.0, type=float,\n                        help='Margin for each future')\n\n    parser.add_argument('--stake', default=1, type=int,\n                        help='Stake to apply in each operation')\n\n    parser.add_argument('--plot', '-p', action='store_true',\n                        help='Plot the read data')\n\n    parser.add_argument('--numfigs', '-n', default=1,\n                        help='Plot using numfigs figures')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]