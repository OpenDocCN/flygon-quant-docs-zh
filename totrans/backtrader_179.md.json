["```py\n`$ ./resample-tickdata.py` \n```", "```py\n`$ ./resample-tickdata.py --timeframe ticks --compression 3` \n```", "```py\n`$ ./resample-tickdata.py --timeframe seconds --compression 5` \n```", "```py\n`$ ./resample-tickdata.py --timeframe minutes` \n```", "```py\n`$ ./resample-tickdata.py --help\nusage: resample-tickdata.py [-h] [--dataname DATANAME]\n                            [--timeframe {ticks,microseconds,seconds,minutes,daily,weekly,monthly}]\n                            [--compression COMPRESSION]\n\nResampling script down to tick data\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dataname DATANAME   File Data to Load\n  --timeframe {ticks,microseconds,seconds,minutes,daily,weekly,monthly}\n                        Timeframe to resample to\n  --compression COMPRESSION\n                        Compress n bars into 1` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(stdstats=False)\n\n    # Add a strategy\n    cerebro.addstrategy(bt.Strategy)\n\n    # Load the Data\n    datapath = args.dataname or '../../datas/ticksample.csv'\n\n    data = btfeeds.GenericCSVData(\n        dataname=datapath,\n        dtformat='%Y-%m-%dT%H:%M:%S.%f',\n        timeframe=bt.TimeFrame.Ticks,\n    )\n\n    # Handy dictionary for the argument timeframe conversion\n    tframes = dict(\n        ticks=bt.TimeFrame.Ticks,\n        microseconds=bt.TimeFrame.MicroSeconds,\n        seconds=bt.TimeFrame.Seconds,\n        minutes=bt.TimeFrame.Minutes,\n        daily=bt.TimeFrame.Days,\n        weekly=bt.TimeFrame.Weeks,\n        monthly=bt.TimeFrame.Months)\n\n    # Resample the data\n    data = cerebro.resampledata(data,\n                                timeframe=tframes[args.timeframe],\n                                compression=args.compression)\n\n    # add a writer\n    cerebro.addwriter(bt.WriterFile, csv=True)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Resampling script down to tick data')\n\n    parser.add_argument('--dataname', default='', required=False,\n                        help='File Data to Load')\n\n    parser.add_argument('--timeframe', default='ticks', required=False,\n                        choices=['ticks', 'microseconds', 'seconds',\n                                 'minutes', 'daily', 'weekly', 'monthly'],\n                        help='Timeframe to resample to')\n\n    parser.add_argument('--compression', default=1, required=False, type=int,\n                        help=('Compress n bars into 1'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]