["```py\n`$ ./plot-same-axis.py` \n```", "```py\n    `rsi.plotinfo.plotmaster = stoc` \n    ```", "```py\n`$ ./plot-same-axis.py --smasubplot --nomacdplot --rsioverstoc` \n```", "```py\n`$ ./plot-same-axis.py --rsiovermacd` \n```", "```py\n`$ ./plot-same-axis.py --stocrsi` \n```", "```py\n`stoc.plotinfo.plotmaster = rsi` \n```", "```py\n`stoc.plotinfo.plotlinelabels = True` \n```", "```py\n`$ ./plot-same-axis.py --stocrsi --stocrsilabels` \n```", "```py\n`$ ./plot-same-axis.py --help\nusage: plot-same-axis.py [-h] [--data DATA] [--fromdate FROMDATE]\n                         [--todate TODATE] [--stdstats] [--smasubplot]\n                         [--nomacdplot]\n                         [--rsioverstoc | --rsioversma | --stocrsi]\n                         [--stocrsilabels] [--numfigs NUMFIGS]\n\nPlotting Example\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format\n  --stdstats, -st       Show standard observers\n  --smasubplot, -ss     Put SMA on own subplot/axis\n  --nomacdplot, -nm     Hide the indicator from the plot\n  --rsioverstoc, -ros   Plot the RSI indicator on the Stochastic axis\n  --rsioversma, -rom    Plot the RSI indicator on the SMA axis\n  --stocrsi, -strsi     Plot the Stochastic indicator on the RSI axis\n  --stocrsilabels       Plot line names instead of indicator name\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using numfigs figures` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\n# The above could be sent to an independent module\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass PlotStrategy(bt.Strategy):\n    '''\n    The strategy does nothing but create indicators for plotting purposes\n    '''\n    params = dict(\n        smasubplot=False,  # default for Moving averages\n        nomacdplot=False,\n        rsioverstoc=False,\n        rsioversma=False,\n        stocrsi=False,\n        stocrsilabels=False,\n    )\n\n    def __init__(self):\n        sma = btind.SMA(subplot=self.params.smasubplot)\n\n        macd = btind.MACD()\n        # In SMA we passed plot directly as kwarg, here the plotinfo.plot\n        # attribute is changed - same effect\n        macd.plotinfo.plot = not self.params.nomacdplot\n\n        # Let's put rsi on stochastic/sma or the other way round\n        stoc = btind.Stochastic()\n        rsi = btind.RSI()\n        if self.params.stocrsi:\n            stoc.plotinfo.plotmaster = rsi\n            stoc.plotinfo.plotlinelabels = self.p.stocrsilabels\n        elif self.params.rsioverstoc:\n            rsi.plotinfo.plotmaster = stoc\n        elif self.params.rsioversma:\n            rsi.plotinfo.plotmaster = sma\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data = btfeeds.BacktraderCSVData(\n        dataname=args.data,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 1st data to cerebro\n    cerebro.adddata(data)\n\n    # Add the strategy\n    cerebro.addstrategy(PlotStrategy,\n                        smasubplot=args.smasubplot,\n                        nomacdplot=args.nomacdplot,\n                        rsioverstoc=args.rsioverstoc,\n                        rsioversma=args.rsioversma,\n                        stocrsi=args.stocrsi,\n                        stocrsilabels=args.stocrsilabels)\n\n    # And run it\n    cerebro.run(stdstats=args.stdstats)\n\n    # Plot\n    cerebro.plot(numfigs=args.numfigs, volume=False)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Plotting Example')\n\n    parser.add_argument('--data', '-d',\n                        default='../../datas/2006-day-001.txt',\n                        help='data to add to the system')\n\n    parser.add_argument('--fromdate', '-f',\n                        default='2006-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default='2006-12-31',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--stdstats', '-st', action='store_true',\n                        help='Show standard observers')\n\n    parser.add_argument('--smasubplot', '-ss', action='store_true',\n                        help='Put SMA on own subplot/axis')\n\n    parser.add_argument('--nomacdplot', '-nm', action='store_true',\n                        help='Hide the indicator from the plot')\n\n    group = parser.add_mutually_exclusive_group(required=False)\n\n    group.add_argument('--rsioverstoc', '-ros', action='store_true',\n                       help='Plot the RSI indicator on the Stochastic axis')\n\n    group.add_argument('--rsioversma', '-rom', action='store_true',\n                       help='Plot the RSI indicator on the SMA axis')\n\n    group.add_argument('--stocrsi', '-strsi', action='store_true',\n                       help='Plot the Stochastic indicator on the RSI axis')\n\n    parser.add_argument('--stocrsilabels', action='store_true',\n                        help='Plot line names instead of indicator name')\n\n    parser.add_argument('--numfigs', '-n', default=1,\n                        help='Plot using numfigs figures')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]