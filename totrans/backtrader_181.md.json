["```py\n    `- `datas` added to the system (can be switched off)\n\n    - `strategies` (a Strategy can have named lines)\n\n    - `indicators` inside the strategies (only 1st level)\n\n    - `observers` inside the strategies (only 1st level)\n\n    Which `indicators` and `observers` output data to the CSV stream is\n    controlled by the attribute:\n\n      `csv` in each instance\n\n    The defaults are:\n\n      - Observers have `csv = True`\n\n      - Indicators have `csv = False`\n\n    The value can be overriden for any instance created inside a strategy` \n    ```", "```py\n    `cerebro = bt.Cerebro(writer=True)` \n    ```", "```py\n    `cerebro = bt.Cerebro()\n\n    cerebro.addwriter(bt.WriterFile, csv=False)` \n    ```", "```py\n`$ ./writer-test.py` \n```", "```py\n`===============================================================================\nCerebro:\n  -----------------------------------------------------------------------------\n  - Datas:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data0:\n      - Name: 2006-day-001\n      - Timeframe: Days\n      - Compression: 1\n  -----------------------------------------------------------------------------\n  - Strategies:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - LongShortStrategy:\n      *************************************************************************\n      - Params:\n        - csvcross: False\n        - printout: False\n        - onlylong: False\n        - stake: 1\n        - period: 15\n      *************************************************************************\n      - Indicators:\n        .......................................................................\n        - SMA:\n          - Lines: sma\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 15\n        .......................................................................\n        - CrossOver:\n          - Lines: crossover\n          - Params: None\n      *************************************************************************\n      - Observers:\n        .......................................................................\n        - Broker:\n          - Lines: cash, value\n          - Params: None\n        .......................................................................\n        - BuySell:\n          - Lines: buy, sell\n          - Params: None\n        .......................................................................\n        - Trades:\n          - Lines: pnlplus, pnlminus\n          - Params: None\n      *************************************************************************\n      - Analyzers:\n        .......................................................................\n        - Value:\n          - Begin: 100000\n          - End: 100826.1\n        .......................................................................\n        - SQN:\n          - Params: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - sqn: 0.05\n            - trades: 22` \n```", "```py\n`$ ./writer-test.py --onlylong --plot` \n```", "```py\n`===============================================================================\nCerebro:\n  -----------------------------------------------------------------------------\n  - Datas:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - Data0:\n      - Name: 2006-day-001\n      - Timeframe: Days\n      - Compression: 1\n  -----------------------------------------------------------------------------\n  - Strategies:\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    - LongShortStrategy:\n      *************************************************************************\n      - Params:\n        - csvcross: False\n        - printout: False\n        - onlylong: True\n        - stake: 1\n        - period: 15\n      *************************************************************************\n      - Indicators:\n        .......................................................................\n        - SMA:\n          - Lines: sma\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Params:\n            - period: 15\n        .......................................................................\n        - CrossOver:\n          - Lines: crossover\n          - Params: None\n      *************************************************************************\n      - Observers:\n        .......................................................................\n        - Broker:\n          - Lines: cash, value\n          - Params: None\n        .......................................................................\n        - BuySell:\n          - Lines: buy, sell\n          - Params: None\n        .......................................................................\n        - Trades:\n          - Lines: pnlplus, pnlminus\n          - Params: None\n      *************************************************************************\n      - Analyzers:\n        .......................................................................\n        - Value:\n          - Begin: 100000\n          - End: 102795.0\n        .......................................................................\n        - SQN:\n          - Params: None\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          - Analysis:\n            - sqn: 0.91\n            - trades: 11` \n```", "```py\n`$ ./writer-test.py --onlylong --writercsv` \n```", "```py\n`===============================================================================\nId,2006-day-001,len,datetime,open,high,low,close,volume,openinterest,LongShortStrategy,len,Broker,len,cash,value,Buy\nSell,len,buy,sell,Trades,len,pnlplus,pnlminus\n1,2006-day-001,1,2006-01-02 23:59:59+00:00,3578.73,3605.95,3578.73,3604.33,0.0,0.0,LongShortStrategy,1,Broker,1,1000\n00.0,100000.0,BuySell,1,,,Trades,1,,\n2,2006-day-001,2,2006-01-03 23:59:59+00:00,3604.08,3638.42,3601.84,3614.34,0.0,0.0,LongShortStrategy,2,Broker,2,1000\n00.0,100000.0,BuySell,2,,,Trades,2,,\n...\n...\n...\n255,2006-day-001,255,2006-12-29 23:59:59+00:00,4130.12,4142.01,4119.94,4119.94,0.0,0.0,LongShortStrategy,255,Broker,255,100795.0,102795.0,BuySell,255,,,Trades,255,,\n===============================================================================\nCerebro:\n  -----------------------------------------------------------------------------\n...\n...` \n```", "```py\n`$ ./writer-test.py --onlylong --writercsv --csvcross` \n```", "```py\n`===============================================================================\nId,2006-day-001,len,datetime,open,high,low,close,volume,openinterest,LongShortStrategy,len,CrossOver,len,crossover,B\nroker,len,cash,value,BuySell,len,buy,sell,Trades,len,pnlplus,pnlminus\n1,2006-day-001,1,2006-01-02 23:59:59+00:00,3578.73,3605.95,3578.73,3604.33,0.0,0.0,LongShortStrategy,1,CrossOver,1,,\nBroker,1,100000.0,100000.0,BuySell,1,,,Trades,1,,\n...\n...` \n```", "```py\n`$ ./writer-test.py --help\nusage: writer-test.py [-h] [--data DATA] [--fromdate FROMDATE]\n                      [--todate TODATE] [--period PERIOD] [--onlylong]\n                      [--writercsv] [--csvcross] [--cash CASH] [--comm COMM]\n                      [--mult MULT] [--margin MARGIN] [--stake STAKE] [--plot]\n                      [--numfigs NUMFIGS]\n\nMultiData Strategy\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --data DATA, -d DATA  data to add to the system\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Starting date in YYYY-MM-DD format\n  --period PERIOD       Period to apply to the Simple Moving Average\n  --onlylong, -ol       Do only long operations\n  --writercsv, -wcsv    Tell the writer to produce a csv stream\n  --csvcross            Output the CrossOver signals to CSV\n  --cash CASH           Starting Cash\n  --comm COMM           Commission for operation\n  --mult MULT           Multiplier for futures\n  --margin MARGIN       Margin for each future\n  --stake STAKE         Stake to apply in each operation\n  --plot, -p            Plot the read data\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using numfigs figures` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\n\n# The above could be sent to an independent module\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\nfrom backtrader.analyzers import SQN\n\nclass LongShortStrategy(bt.Strategy):\n    '''This strategy buys/sells upong the close price crossing\n    upwards/downwards a Simple Moving Average.\n\n    It can be a long-only strategy by setting the param \"onlylong\" to True\n    '''\n    params = dict(\n        period=15,\n        stake=1,\n        printout=False,\n        onlylong=False,\n        csvcross=False,\n    )\n\n    def start(self):\n        pass\n\n    def stop(self):\n        pass\n\n    def log(self, txt, dt=None):\n        if self.p.printout:\n            dt = dt or self.data.datetime[0]\n            dt = bt.num2date(dt)\n            print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):\n        # To control operation entries\n        self.orderid = None\n\n        # Create SMA on 2nd data\n        sma = btind.MovAv.SMA(self.data, period=self.p.period)\n        # Create a CrossOver Signal from close an moving average\n        self.signal = btind.CrossOver(self.data.close, sma)\n        self.signal.csv = self.p.csvcross\n\n    def next(self):\n        if self.orderid:\n            return  # if an order is active, no new orders are allowed\n\n        if self.signal > 0.0:  # cross upwards\n            if self.position:\n                self.log('CLOSE SHORT , %.2f' % self.data.close[0])\n                self.close()\n\n            self.log('BUY CREATE , %.2f' % self.data.close[0])\n            self.buy(size=self.p.stake)\n\n        elif self.signal < 0.0:\n            if self.position:\n                self.log('CLOSE LONG , %.2f' % self.data.close[0])\n                self.close()\n\n            if not self.p.onlylong:\n                self.log('SELL CREATE , %.2f' % self.data.close[0])\n                self.sell(size=self.p.stake)\n\n    def notify_order(self, order):\n        if order.status in [bt.Order.Submitted, bt.Order.Accepted]:\n            return  # Await further notifications\n\n        if order.status == order.Completed:\n            if order.isbuy():\n                buytxt = 'BUY COMPLETE, %.2f' % order.executed.price\n                self.log(buytxt, order.executed.dt)\n            else:\n                selltxt = 'SELL COMPLETE, %.2f' % order.executed.price\n                self.log(selltxt, order.executed.dt)\n\n        elif order.status in [order.Expired, order.Canceled, order.Margin]:\n            self.log('%s ,' % order.Status[order.status])\n            pass  # Simply log\n\n        # Allow new orders\n        self.orderid = None\n\n    def notify_trade(self, trade):\n        if trade.isclosed:\n            self.log('TRADE PROFIT, GROSS %.2f, NET %.2f' %\n                     (trade.pnl, trade.pnlcomm))\n\n        elif trade.justopened:\n            self.log('TRADE OPENED, SIZE %2d' % trade.size)\n\ndef runstrategy():\n    args = parse_args()\n\n    # Create a cerebro\n    cerebro = bt.Cerebro()\n\n    # Get the dates from the args\n    fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n    todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n\n    # Create the 1st data\n    data = btfeeds.BacktraderCSVData(\n        dataname=args.data,\n        fromdate=fromdate,\n        todate=todate)\n\n    # Add the 1st data to cerebro\n    cerebro.adddata(data)\n\n    # Add the strategy\n    cerebro.addstrategy(LongShortStrategy,\n                        period=args.period,\n                        onlylong=args.onlylong,\n                        csvcross=args.csvcross,\n                        stake=args.stake)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcash(args.cash)\n\n    # Add the commission - only stocks like a for each operation\n    cerebro.broker.setcommission(commission=args.comm,\n                                 mult=args.mult,\n                                 margin=args.margin)\n\n    cerebro.addanalyzer(SQN)\n\n    cerebro.addwriter(bt.WriterFile, csv=args.writercsv, rounding=2)\n\n    # And run it\n    cerebro.run()\n\n    # Plot if requested\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, volume=False, zdown=False)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='MultiData Strategy')\n\n    parser.add_argument('--data', '-d',\n                        default='../../datas/2006-day-001.txt',\n                        help='data to add to the system')\n\n    parser.add_argument('--fromdate', '-f',\n                        default='2006-01-01',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t',\n                        default='2006-12-31',\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--period', default=15, type=int,\n                        help='Period to apply to the Simple Moving Average')\n\n    parser.add_argument('--onlylong', '-ol', action='store_true',\n                        help='Do only long operations')\n\n    parser.add_argument('--writercsv', '-wcsv', action='store_true',\n                        help='Tell the writer to produce a csv stream')\n\n    parser.add_argument('--csvcross', action='store_true',\n                        help='Output the CrossOver signals to CSV')\n\n    parser.add_argument('--cash', default=100000, type=int,\n                        help='Starting Cash')\n\n    parser.add_argument('--comm', default=2, type=float,\n                        help='Commission for operation')\n\n    parser.add_argument('--mult', default=10, type=int,\n                        help='Multiplier for futures')\n\n    parser.add_argument('--margin', default=2000.0, type=float,\n                        help='Margin for each future')\n\n    parser.add_argument('--stake', default=1, type=int,\n                        help='Stake to apply in each operation')\n\n    parser.add_argument('--plot', '-p', action='store_true',\n                        help='Plot the read data')\n\n    parser.add_argument('--numfigs', '-n', default=1,\n                        help='Plot using numfigs figures')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrategy()` \n```"]