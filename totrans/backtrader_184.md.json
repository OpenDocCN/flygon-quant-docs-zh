["```py\n`Replay a daily bar using the 1 minute data` \n```", "```py\n`If the strategy operates in realtime during the formation of the daily bar,\nthe approximation of the formation of the bar gives a chance to replicate the\nactual behavior of the strategy under real conditions` \n```", "```py\n `dataname=datapath)\n\n    tframes = dict(\n        daily=bt.TimeFrame.Days,\n        weekly=bt.TimeFrame.Weeks,\n        monthly=bt.TimeFrame.Months)\n\n    # Handy dictionary for the argument timeframe conversion\n    # Resample the data\n    data_replayed = bt.DataReplayer(\n        dataname=data,\n        timeframe=tframes[args.timeframe],\n        compression=args.compression)\n\n    # First add the original data - smaller timeframe\n    cerebro.adddata(data_replayed)\n\n    # Run over everything\n    cerebro.run(preload=False)` \n```", "```py\n`$ ./data-replay.py --timeframe weekly --compression 1` \n```", "```py\n`prenext len 1 - counter 1\nprenext len 1 - counter 2\nprenext len 1 - counter 3\nprenext len 1 - counter 4\nprenext len 1 - counter 5\nprenext len 2 - counter 6\n...\n...\nprenext len 9 - counter 44\nprenext len 9 - counter 45\n---next len 10 - counter 46\n---next len 10 - counter 47\n---next len 10 - counter 48\n---next len 10 - counter 49\n---next len 10 - counter 50\n---next len 11 - counter 51\n---next len 11 - counter 52\n---next len 11 - counter 53\n...\n...\n---next len 51 - counter 248\n---next len 51 - counter 249\n---next len 51 - counter 250\n---next len 51 - counter 251\n---next len 51 - counter 252\n---next len 52 - counter 253\n---next len 52 - counter 254\n---next len 52 - counter 255` \n```", "```py\n`$ ./data-replay.py --timeframe daily --compression 2\nprenext len 1 - counter 1\nprenext len 1 - counter 2\nprenext len 2 - counter 3\nprenext len 2 - counter 4\nprenext len 3 - counter 5\nprenext len 3 - counter 6\nprenext len 4 - counter 7\n...\n...\n---next len 125 - counter 250\n---next len 126 - counter 251\n---next len 126 - counter 252\n---next len 127 - counter 253\n---next len 127 - counter 254\n---next len 128 - counter 255` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass SMAStrategy(bt.Strategy):\n    params = (\n        ('period', 10),\n        ('onlydaily', False),\n    )\n\n    def __init__(self):\n        self.sma = btind.SMA(self.data, period=self.p.period)\n\n    def start(self):\n        self.counter = 0\n\n    def prenext(self):\n        self.counter += 1\n        print('prenext len %d - counter %d' % (len(self), self.counter))\n\n    def next(self):\n        self.counter += 1\n        print('---next len %d - counter %d' % (len(self), self.counter))\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(stdstats=False)\n\n    cerebro.addstrategy(\n        SMAStrategy,\n        # args for the strategy\n        period=args.period,\n    )\n\n    # Load the Data\n    datapath = args.dataname or '../datas/sample/2006-day-001.txt'\n    data = btfeeds.BacktraderCSVData(\n        dataname=datapath)\n\n    tframes = dict(\n        daily=bt.TimeFrame.Days,\n        weekly=bt.TimeFrame.Weeks,\n        monthly=bt.TimeFrame.Months)\n\n    # Handy dictionary for the argument timeframe conversion\n    # Resample the data\n    data_replayed = bt.DataReplayer(\n        dataname=data,\n        timeframe=tframes[args.timeframe],\n        compression=args.compression)\n\n    # First add the original data - smaller timeframe\n    cerebro.adddata(data_replayed)\n\n    # Run over everything\n    cerebro.run(preload=False)\n\n    # Plot the result\n    cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Pandas test script')\n\n    parser.add_argument('--dataname', default='', required=False,\n                        help='File Data to Load')\n\n    parser.add_argument('--timeframe', default='weekly', required=False,\n                        choices=['daily', 'weekly', 'monhtly'],\n                        help='Timeframe to resample to')\n\n    parser.add_argument('--compression', default=1, required=False, type=int,\n                        help='Compress n bars into 1')\n\n    parser.add_argument('--period', default=10, required=False, type=int,\n                        help='Period to apply to indicator')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]