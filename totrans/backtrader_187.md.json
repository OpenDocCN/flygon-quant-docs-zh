["```py\n`class PandasData(feed.DataBase):\n    '''\n    The ``dataname`` parameter inherited from ``feed.DataBase``  is the pandas\n    Time Series\n    '''\n\n    params = (\n        # Possible values for datetime (must always be present)\n        #  None : datetime is the \"index\" in the Pandas Dataframe\n        #  -1 : autodetect position or case-wise equal name\n        #  >= 0 : numeric index to the colum in the pandas dataframe\n        #  string : column name (as index) in the pandas dataframe\n        ('datetime', None),\n\n        # Possible values below:\n        #  None : column not present\n        #  -1 : autodetect position or case-wise equal name\n        #  >= 0 : numeric index to the colum in the pandas dataframe\n        #  string : column name (as index) in the pandas dataframe\n        ('open', -1),\n        ('high', -1),\n        ('low', -1),\n        ('close', -1),\n        ('volume', -1),\n        ('openinterest', -1),\n    )` \n```", "```py\n`$ ./panda-test.py\n--------------------------------------------------\n               Open     High      Low    Close  Volume  OpenInterest\nDate\n2006-01-02  3578.73  3605.95  3578.73  3604.33       0             0\n2006-01-03  3604.08  3638.42  3601.84  3614.34       0             0\n2006-01-04  3615.23  3652.46  3615.23  3652.46       0             0` \n```", "```py\n`$ ./panda-test.py --noheaders\n--------------------------------------------------\n                  1        2        3        4  5  6\n0\n2006-01-02  3578.73  3605.95  3578.73  3604.33  0  0\n2006-01-03  3604.08  3638.42  3601.84  3614.34  0  0\n2006-01-04  3615.23  3652.46  3615.23  3652.46  0  0` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\nimport pandas\n\ndef runstrat():\n    args = parse_args()\n\n    # Create a cerebro entity\n    cerebro = bt.Cerebro(stdstats=False)\n\n    # Add a strategy\n    cerebro.addstrategy(bt.Strategy)\n\n    # Get a pandas dataframe\n    datapath = ('../datas/sample/2006-day-001.txt')\n\n    # Simulate the header row isn't there if noheaders requested\n    skiprows = 1 if args.noheaders else 0\n    header = None if args.noheaders else 0\n\n    dataframe = pandas.read_csv(datapath,\n                                skiprows=skiprows,\n                                header=header,\n                                parse_dates=True,\n                                index_col=0)\n\n    if not args.noprint:\n        print('--------------------------------------------------')\n        print(dataframe)\n        print('--------------------------------------------------')\n\n    # Pass it to the backtrader datafeed and add it to the cerebro\n    data = bt.feeds.PandasData(dataname=dataframe)\n\n    cerebro.adddata(data)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot(style='bar')\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Pandas test script')\n\n    parser.add_argument('--noheaders', action='store_true', default=False,\n                        required=False,\n                        help='Do not use header rows')\n\n    parser.add_argument('--noprint', action='store_true', default=False,\n                        help='Print the dataframe')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]