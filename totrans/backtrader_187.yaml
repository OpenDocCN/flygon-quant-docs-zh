- en: Pandas DataFeed Support
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas DataFeed 支持
- en: 原文：[https://www.backtrader.com/blog/posts/2015-08-21-pandas-datafeed/pandas-datafeed/](https://www.backtrader.com/blog/posts/2015-08-21-pandas-datafeed/pandas-datafeed/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.backtrader.com/blog/posts/2015-08-21-pandas-datafeed/pandas-datafeed/](https://www.backtrader.com/blog/posts/2015-08-21-pandas-datafeed/pandas-datafeed/)
- en: Amongst some minor enhancementss and some OrderedDict tweaks for better Python
    2.6 support, the latest release from backtrader adds support for analyzing data
    from a Pandas Dataframe or Time Series.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些小的增强和一些有序字典调整以更好地支持 Python 2.6 的情况下，backtrader 的最新版本增加了对从 Pandas Dataframe
    或时间序列分析数据的支持。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Obviously `pandas` and its dependencies have to be installed
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 显然必须安装 `pandas` 及其依赖项。
- en: This seems to be of concern to lots of people, who rely on the already available
    parsing code for different data sources (including CSV)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎引起了很多人的关注，他们依赖于已经可用的用于不同数据源（包括 CSV）的解析代码。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above excerpt from the `PandasData` class shows the keys:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上述从 `PandasData` 类中摘录的片段显示了键：
- en: The `dataname` parameter to the class during instantiation holds the Pandas
    Dataframe
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化期间 `dataname` 参数对应 Pandas Dataframe
- en: This parameter is inherited from the base class `feed.DataBase`
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数继承自基类 `feed.DataBase`
- en: The new parameters have the names of the regular fields in the `DataSeries`
    and follow these conventions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新参数使用了 `DataSeries` 中常规字段的名称，并遵循这些约定
- en: '`datetime` (default: None)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime`（默认：无）'
- en: 'None : datetime is the “index” in the Pandas Dataframe'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无：datetime 是 Pandas Dataframe 中的“index”
- en: '-1 : autodetect position or case-wise equal name'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -1：自动检测位置或大小写相等的名称
- en: '= 0 : numeric index to the colum in the pandas dataframe'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 0：Pandas 数据框中列的数值索引
- en: 'string : column name (as index) in the pandas dataframe'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: string：Pandas 数据框中的列名（作为索引）
- en: '`open`, `high`, `low`, `high`, `close`, `volume`, `openinterest` (default:
    -1 for all of them)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open`, `high`, `low`, `high`, `close`, `volume`, `openinterest`（默认：全部为 -1）'
- en: 'None : column not present'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无：列不存在
- en: '-1 : autodetect position or case-wise equal name'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -1：自动检测位置或大小写相等的名称
- en: '= 0 : numeric index to the colum in the pandas dataframe'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 0：Pandas 数据框中列的数值索引
- en: 'string : column name (as index) in the pandas dataframe'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: string：Pandas 数据框中的列名（作为索引）
- en: A small sample should be able to load the standar 2006 sample, having been parsed
    by `Pandas`, rather than directly by `backtrader`
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小的样本应该能够加载标准 2006 样本，已被 `Pandas` 解析，而不是直接由 `backtrader` 解析。
- en: 'Running the sample to use the exiting “headers” in the CSV data:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例以使用 CSV 数据中的现有“headers”：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same but telling the script to skip the headers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 相同，但告诉脚本跳过标题：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The 2^(nd) run is using tells `pandas.read_csv`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次运行是使用 tells `pandas.read_csv`：
- en: To skip the first input row (`skiprows` keyword argument set to 1)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过第一个输入行（`skiprows` 关键字参数设置为 1）
- en: Not to look for a headers row (`header` keyword argument set to None)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要寻找标题行（`header` 关键字参数设置为 None）
- en: The `backtrader` support for Pandas tries to automatically detect if column
    names have been used or else numeric indices and acts accordingly, trying to offer
    a best match.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: backtrader 对 Pandas 的支持尝试自动检测是否已使用列名，否则使用数值索引，并相应地采取行动，尝试提供最佳匹配。
- en: The following chart is the tribute to success. The Pandas Dataframe has been
    correctly loaded (in both cases)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表是成功的致敬。Pandas Dataframe 已被正确加载（在两种情况下）。
- en: '![image](../Images/6b486ca11d70278e98d124393346cf13.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/6b486ca11d70278e98d124393346cf13.png)'
- en: The sample code for the test.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的示例代码。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
