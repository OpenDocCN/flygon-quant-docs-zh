["```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.indicators as btind\n\nclass MyTest(bt.Strategy):\n    params = (('period', 15),)\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.data.datetime[0]\n        if isinstance(dt, float):\n            dt = bt.num2date(dt)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):\n        sma = btind.SMA(period=self.p.period)\n\n    def next(self):\n        ltxt = '%d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f'\n\n        self.log(ltxt %\n                 (len(self),\n                  self.data.open[0], self.data.high[0],\n                  self.data.low[0], self.data.close[0],\n                  self.data.volume[0], self.data.openinterest[0]))` \n```", "```py\n`./bt-run.py --csvformat btcsv \\\n            --data ../samples/data/sample/2006-day-001.txt \\\n            --strategy ./mymod.py` \n```", "```py\n`2006-01-20T23:59:59+00:00, 15, 3593.16, 3612.37, 3550.80, 3550.80, 0.00, 0.00\n2006-01-23T23:59:59+00:00, 16, 3550.24, 3550.24, 3515.07, 3544.31, 0.00, 0.00\n2006-01-24T23:59:59+00:00, 17, 3544.78, 3553.16, 3526.37, 3532.68, 0.00, 0.00\n2006-01-25T23:59:59+00:00, 18, 3532.72, 3578.00, 3532.72, 3578.00, 0.00, 0.00\n...\n...\n2006-12-22T23:59:59+00:00, 252, 4109.86, 4109.86, 4072.62, 4073.50, 0.00, 0.00\n2006-12-27T23:59:59+00:00, 253, 4079.70, 4134.86, 4079.70, 4134.86, 0.00, 0.00\n2006-12-28T23:59:59+00:00, 254, 4137.44, 4142.06, 4125.14, 4130.66, 0.00, 0.00\n2006-12-29T23:59:59+00:00, 255, 4130.12, 4142.01, 4119.94, 4119.94, 0.00, 0.00` \n```", "```py\n`./bt-run.py --csvformat btcsv \\\n            --data ../samples/data/sample/2006-day-001.txt \\\n            --strategy ./mymod.py \\\n            period 50` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.indicators as btind\n\nclass SMA_CrossOver(bt.Strategy):\n\n    params = (('fast', 10), ('slow', 30))\n\n    def __init__(self):\n\n        sma_fast = btind.SMA(period=self.p.fast)\n        sma_slow = btind.SMA(period=self.p.slow)\n\n        self.buysig = btind.CrossOver(sma_fast, sma_slow)\n\n    def next(self):\n        if self.position.size:\n            if self.buysig < 0:\n                self.sell()\n\n        elif self.buysig > 0:\n            self.buy()` \n```", "```py\n`./bt-run.py --csvformat btcsv \\\n            --data ../samples/data/sample/2006-day-001.txt \\\n            --strategy :SMA_CrossOver` \n```", "```py\n`./bt-run.py --csvformat btcsv \\\n            --data ../samples/data/sample/2006-day-001.txt \\\n            --cash 20000 \\\n            --commission 2.0 \\\n            --mult 10 \\\n            --margin 2000 \\\n            --strategy :SMA_CrossOver \\\n            fast 5 slow 20` \n```", "```py\n`./bt-run.py --csvformat btcsv \\\n            --data ../samples/data/sample/2005-2006-day-001.txt \\\n            --strategy :SMA_CrossOver \\\n            --analyzer :SharpeRatio` \n```", "```py\n`====================\n== Analyzers\n====================\n##  sharperatio\n--  sharperatio : 11.6473326097` \n```", "```py\n`$ ./bt-run.py --help\nusage: bt-run.py [-h] --data DATA\n                 [--csvformat {yahoocsv_unreversed,vchart,sierracsv,yahoocsv,vchartcsv,btcsv}]\n                 [--fromdate FROMDATE] [--todate TODATE] --strategy STRATEGY\n                 [--nostdstats] [--observer OBSERVERS] [--analyzer ANALYZERS]\n                 [--cash CASH] [--commission COMMISSION] [--margin MARGIN]\n                 [--mult MULT] [--noplot] [--plotstyle {bar,line,candle}]\n                 [--plotfigs PLOTFIGS]\n                 ...\n\nBacktrader Run Script\n\npositional arguments:\n  args                  args to pass to the loaded strategy\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nData options:\n  --data DATA, -d DATA  Data files to be added to the system\n  --csvformat {yahoocsv_unreversed,vchart,sierracsv,yahoocsv,vchartcsv,btcsv}, -c {yahoocsv_unreversed,vchart,sierracsv,yahoocsv,vchartcsv,btcsv}\n                        CSV Format\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD[THH:MM:SS] format\n  --todate TODATE, -t TODATE\n                        Ending date in YYYY-MM-DD[THH:MM:SS] format\n\nStrategy options:\n  --strategy STRATEGY, -st STRATEGY\n                        Module and strategy to load with format\n                        module_path:strategy_name. module_path:strategy_name\n                        will load strategy_name from the given module_path\n                        module_path will load the module and return the first\n                        available strategy in the module :strategy_name will\n                        load the given strategy from the set of built-in\n                        strategies\n\nObservers and statistics:\n  --nostdstats          Disable the standard statistics observers\n  --observer OBSERVERS, -ob OBSERVERS\n                        This option can be specified multiple times Module and\n                        observer to load with format\n                        module_path:observer_name. module_path:observer_name\n                        will load observer_name from the given module_path\n                        module_path will load the module and return all\n                        available observers in the module :observer_name will\n                        load the given strategy from the set of built-in\n                        strategies\n\nAnalyzers:\n  --analyzer ANALYZERS, -an ANALYZERS\n                        This option can be specified multiple times Module and\n                        analyzer to load with format\n                        module_path:analzyer_name. module_path:analyzer_name\n                        will load observer_name from the given module_path\n                        module_path will load the module and return all\n                        available analyzers in the module :anaylzer_name will\n                        load the given strategy from the set of built-in\n                        strategies\n\nCash and Commission Scheme Args:\n  --cash CASH, -cash CASH\n                        Cash to set to the broker\n  --commission COMMISSION, -comm COMMISSION\n                        Commission value to set\n  --margin MARGIN, -marg MARGIN\n                        Margin type to set\n  --mult MULT, -mul MULT\n                        Multiplier to use\n\nPlotting options:\n  --noplot, -np         Do not plot the read data\n  --plotstyle {bar,line,candle}, -ps {bar,line,candle}\n                        Plot style for the input data\n  --plotfigs PLOTFIGS, -pn PLOTFIGS\n                        Plot using n figures` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport inspect\nimport itertools\nimport random\nimport string\nimport sys\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btinds\nimport backtrader.observers as btobs\nimport backtrader.strategies as btstrats\nimport backtrader.analyzers as btanalyzers\n\nDATAFORMATS = dict(\n    btcsv=btfeeds.BacktraderCSVData,\n    vchartcsv=btfeeds.VChartCSVData,\n    vchart=btfeeds.VChartData,\n    sierracsv=btfeeds.SierraChartCSVData,\n    yahoocsv=btfeeds.YahooFinanceCSVData,\n    yahoocsv_unreversed=btfeeds.YahooFinanceCSVData\n)\n\ndef runstrat():\n    args = parse_args()\n\n    stdstats = not args.nostdstats\n\n    cerebro = bt.Cerebro(stdstats=stdstats)\n\n    for data in getdatas(args):\n        cerebro.adddata(data)\n\n    # Prepare a dictionary of extra args passed to push them to the strategy\n\n    # pack them in pairs\n    packedargs = itertools.izip_longest(*[iter(args.args)] * 2, fillvalue='')\n\n    # prepare a string for evaluation, eval and store the result\n    evalargs = 'dict('\n    for key, value in packedargs:\n        evalargs += key + '=' + value + ','\n    evalargs += ')'\n    stratkwargs = eval(evalargs)\n\n    # Get the strategy and add it with any arguments\n    strat = getstrategy(args)\n    cerebro.addstrategy(strat, **stratkwargs)\n\n    obs = getobservers(args)\n    for ob in obs:\n        cerebro.addobserver(ob)\n\n    ans = getanalyzers(args)\n    for an in ans:\n        cerebro.addanalyzer(an)\n\n    setbroker(args, cerebro)\n\n    runsts = cerebro.run()\n    runst = runsts[0]  # single strategy and no optimization\n\n    if runst.analyzers:\n        print('====================')\n        print('== Analyzers')\n        print('====================')\n        for name, analyzer in runst.analyzers.getitems():\n            print('## ', name)\n            analysis = analyzer.get_analysis()\n            for key, val in analysis.items():\n                print('-- ', key, ':', val)\n\n    if not args.noplot:\n        cerebro.plot(numfigs=args.plotfigs, style=args.plotstyle)\n\ndef setbroker(args, cerebro):\n    broker = cerebro.getbroker()\n\n    if args.cash is not None:\n        broker.setcash(args.cash)\n\n    commkwargs = dict()\n    if args.commission is not None:\n        commkwargs['commission'] = args.commission\n    if args.margin is not None:\n        commkwargs['margin'] = args.margin\n    if args.mult is not None:\n        commkwargs['mult'] = args.mult\n\n    if commkwargs:\n        broker.setcommission(**commkwargs)\n\ndef getdatas(args):\n    # Get the data feed class from the global dictionary\n    dfcls = DATAFORMATS[args.csvformat]\n\n    # Prepare some args\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n\n    fmtstr = '%Y-%m-%d'\n    if args.fromdate:\n        dtsplit = args.fromdate.split('T')\n        if len(dtsplit) > 1:\n            fmtstr += 'T%H:%M:%S'\n\n        fromdate = datetime.datetime.strptime(args.fromdate, fmtstr)\n        dfkwargs['fromdate'] = fromdate\n\n    fmtstr = '%Y-%m-%d'\n    if args.todate:\n        dtsplit = args.todate.split('T')\n        if len(dtsplit) > 1:\n            fmtstr += 'T%H:%M:%S'\n        todate = datetime.datetime.strptime(args.todate, fmtstr)\n        dfkwargs['todate'] = todate\n\n    datas = list()\n    for dname in args.data:\n        dfkwargs['dataname'] = dname\n        data = dfcls(**dfkwargs)\n        datas.append(data)\n\n    return datas\n\ndef getmodclasses(mod, clstype, clsname=None):\n    clsmembers = inspect.getmembers(mod, inspect.isclass)\n\n    clslist = list()\n    for name, cls in clsmembers:\n        if not issubclass(cls, clstype):\n            continue\n\n        if clsname:\n            if clsname == name:\n                clslist.append(cls)\n                break\n        else:\n            clslist.append(cls)\n\n    return clslist\n\ndef loadmodule(modpath, modname=''):\n    # generate a random name for the module\n    if not modname:\n        chars = string.ascii_uppercase + string.digits\n        modname = ''.join(random.choice(chars) for _ in range(10))\n\n    version = (sys.version_info[0], sys.version_info[1])\n\n    if version < (3, 3):\n        mod, e = loadmodule2(modpath, modname)\n    else:\n        mod, e = loadmodule3(modpath, modname)\n\n    return mod, e\n\ndef loadmodule2(modpath, modname):\n    import imp\n\n    try:\n        mod = imp.load_source(modname, modpath)\n    except Exception, e:\n        return (None, e)\n\n    return (mod, None)\n\ndef loadmodule3(modpath, modname):\n    import importlib.machinery\n\n    try:\n        loader = importlib.machinery.SourceFileLoader(modname, modpath)\n        mod = loader.load_module()\n    except Exception, e:\n        return (None, e)\n\n    return (mod, None)\n\ndef getstrategy(args):\n    sttokens = args.strategy.split(':')\n\n    if len(sttokens) == 1:\n        modpath = sttokens[0]\n        stname = None\n    else:\n        modpath, stname = sttokens\n\n    if modpath:\n        mod, e = loadmodule(modpath)\n\n        if not mod:\n            print('')\n            print('Failed to load module %s:' % modpath, e)\n            sys.exit(1)\n    else:\n        mod = btstrats\n\n    strats = getmodclasses(mod=mod, clstype=bt.Strategy, clsname=stname)\n\n    if not strats:\n        print('No strategy %s / module %s' % (str(stname), modpath))\n        sys.exit(1)\n\n    return strats[0]\n\ndef getanalyzers(args):\n    analyzers = list()\n    for anspec in args.analyzers or []:\n\n        tokens = anspec.split(':')\n\n        if len(tokens) == 1:\n            modpath = tokens[0]\n            name = None\n        else:\n            modpath, name = tokens\n\n        if modpath:\n            mod, e = loadmodule(modpath)\n\n            if not mod:\n                print('')\n                print('Failed to load module %s:' % modpath, e)\n                sys.exit(1)\n        else:\n            mod = btanalyzers\n\n        loaded = getmodclasses(mod=mod, clstype=bt.Analyzer, clsname=name)\n\n        if not loaded:\n            print('No analyzer %s / module %s' % ((str(name), modpath)))\n            sys.exit(1)\n\n        analyzers.extend(loaded)\n\n    return analyzers\n\ndef getobservers(args):\n    observers = list()\n    for obspec in args.observers or []:\n\n        tokens = obspec.split(':')\n\n        if len(tokens) == 1:\n            modpath = tokens[0]\n            name = None\n        else:\n            modpath, name = tokens\n\n        if modpath:\n            mod, e = loadmodule(modpath)\n\n            if not mod:\n                print('')\n                print('Failed to load module %s:' % modpath, e)\n                sys.exit(1)\n        else:\n            mod = btobs\n\n        loaded = getmodclasses(mod=mod, clstype=bt.Observer, clsname=name)\n\n        if not loaded:\n            print('No observer %s / module %s' % ((str(name), modpath)))\n            sys.exit(1)\n\n        observers.extend(loaded)\n\n    return observers\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Backtrader Run Script')\n\n    group = parser.add_argument_group(title='Data options')\n    # Data options\n    group.add_argument('--data', '-d', action='append', required=True,\n                       help='Data files to be added to the system')\n\n    datakeys = list(DATAFORMATS.keys())\n    group.add_argument('--csvformat', '-c', required=False,\n                       default='btcsv', choices=datakeys,\n                       help='CSV Format')\n\n    group.add_argument('--fromdate', '-f', required=False, default=None,\n                       help='Starting date in YYYY-MM-DD[THH:MM:SS] format')\n\n    group.add_argument('--todate', '-t', required=False, default=None,\n                       help='Ending date in YYYY-MM-DD[THH:MM:SS] format')\n\n    # Module where to read the strategy from\n    group = parser.add_argument_group(title='Strategy options')\n    group.add_argument('--strategy', '-st', required=True,\n                       help=('Module and strategy to load with format '\n                             'module_path:strategy_name.\\n'\n                             '\\n'\n                             'module_path:strategy_name will load '\n                             'strategy_name from the given module_path\\n'\n                             '\\n'\n                             'module_path will load the module and return '\n                             'the first available strategy in the module\\n'\n                             '\\n'\n                             ':strategy_name will load the given strategy '\n                             'from the set of built-in strategies'))\n\n    # Observers\n    group = parser.add_argument_group(title='Observers and statistics')\n    group.add_argument('--nostdstats', action='store_true',\n                       help='Disable the standard statistics observers')\n\n    group.add_argument('--observer', '-ob', dest='observers',\n                       action='append', required=False,\n                       help=('This option can be specified multiple times\\n'\n                             '\\n'\n                             'Module and observer to load with format '\n                             'module_path:observer_name.\\n'\n                             '\\n'\n                             'module_path:observer_name will load '\n                             'observer_name from the given module_path\\n'\n                             '\\n'\n                             'module_path will load the module and return '\n                             'all available observers in the module\\n'\n                             '\\n'\n                             ':observer_name will load the given strategy '\n                             'from the set of built-in strategies'))\n\n    # Anaylzers\n    group = parser.add_argument_group(title='Analyzers')\n    group.add_argument('--analyzer', '-an', dest='analyzers',\n                       action='append', required=False,\n                       help=('This option can be specified multiple times\\n'\n                             '\\n'\n                             'Module and analyzer to load with format '\n                             'module_path:analzyer_name.\\n'\n                             '\\n'\n                             'module_path:analyzer_name will load '\n                             'observer_name from the given module_path\\n'\n                             '\\n'\n                             'module_path will load the module and return '\n                             'all available analyzers in the module\\n'\n                             '\\n'\n                             ':anaylzer_name will load the given strategy '\n                             'from the set of built-in strategies'))\n\n    # Broker/Commissions\n    group = parser.add_argument_group(title='Cash and Commission Scheme Args')\n    group.add_argument('--cash', '-cash', required=False, type=float,\n                       help='Cash to set to the broker')\n    group.add_argument('--commission', '-comm', required=False, type=float,\n                       help='Commission value to set')\n    group.add_argument('--margin', '-marg', required=False, type=float,\n                       help='Margin type to set')\n\n    group.add_argument('--mult', '-mul', required=False, type=float,\n                       help='Multiplier to use')\n\n    # Plot options\n    group = parser.add_argument_group(title='Plotting options')\n    group.add_argument('--noplot', '-np', action='store_true', required=False,\n                       help='Do not plot the read data')\n\n    group.add_argument('--plotstyle', '-ps', required=False, default='bar',\n                       choices=['bar', 'line', 'candle'],\n                       help='Plot style for the input data')\n\n    group.add_argument('--plotfigs', '-pn', required=False, default=1,\n                       type=int, help='Plot using n figures')\n\n    # Extra arguments\n    parser.add_argument('args', nargs=argparse.REMAINDER,\n                        help='args to pass to the loaded strategy')\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]