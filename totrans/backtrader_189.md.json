["```py\n`import backtrader as bt\n\n...\n\ncerebro = bt.Cerebro()  # default kwarg: stdstats=True\n\ncerebro.addobserver(backtrader.observers.Broker)\ncerebro.addobserver(backtrader.observers.Trades)\ncerebro.addobserver(backtrader.observers.BuySell)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\nif __name__ == '__main__':\n    cerebro = bt.Cerebro(stdstats=False)\n    cerebro.addstrategy(bt.Strategy)\n\n    data = bt.feeds.BacktraderCSVData(dataname='../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n\n    cerebro.run()\n    cerebro.plot()` \n```", "```py\n`cerebro = bt.Cerebro(stdstats=False)` \n```", "```py\n`...\ncerebro.addobserver(backtrader.observers.Broker)\n...` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    def next(self):\n\n        if self.stats.broker.value[0] < 1000.0:\n           print('WHITE FLAG ... I LOST TOO MUCH')\n        elif self.stats.broker.value[0] > 10000000.0:\n           print('TIME FOR THE VIRGIN ISLANDS ....!!!')` \n```", "```py\n`class Broker(Observer):\n    alias = ('CashValue',)\n    lines = ('cash', 'value')\n\n    plotinfo = dict(plot=True, subplot=True)\n\n    def next(self):\n        self.lines.cash[0] = self._owner.broker.getcash()\n        self.lines.value[0] = value = self._owner.broker.getvalue()` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport os.path\nimport time\nimport sys\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass MyStrategy(bt.Strategy):\n    params = (('smaperiod', 15),)\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.data.datetime[0]\n        if isinstance(dt, float):\n            dt = bt.num2date(dt)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):` \n```", "```py\n`...\n2006-12-14T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-15T23:59:59+00:00, DrawDown: 0.22\n2006-12-15T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-18T23:59:59+00:00, DrawDown: 0.00\n2006-12-18T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-19T23:59:59+00:00, DrawDown: 0.00\n2006-12-19T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-20T23:59:59+00:00, DrawDown: 0.10\n2006-12-20T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-21T23:59:59+00:00, DrawDown: 0.39\n2006-12-21T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-22T23:59:59+00:00, DrawDown: 0.21\n2006-12-22T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-27T23:59:59+00:00, DrawDown: 0.28\n2006-12-27T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-28T23:59:59+00:00, DrawDown: 0.65\n2006-12-28T23:59:59+00:00, MaxDrawDown: 2.62\n2006-12-29T23:59:59+00:00, DrawDown: 0.06\n2006-12-29T23:59:59+00:00, MaxDrawDown: 2.62` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport math\n\nimport backtrader as bt\n\nclass OrderObserver(bt.observer.Observer):\n    lines = ('created', 'expired',)\n\n    plotinfo = dict(plot=True, subplot=True, plotlinelabels=True)\n\n    plotlines = dict(\n        created=dict(marker='*', markersize=8.0, color='lime', fillstyle='full'),\n        expired=dict(marker='s', markersize=8.0, color='red', fillstyle='full')\n    )\n\n    def next(self):\n        for order in self._owner._orderspending:\n            if order.data is not self.data:\n                continue\n\n            if not order.isbuy():\n                continue\n\n            # Only interested in \"buy\" orders, because the sell orders\n            # in the strategy are Market orders and will be immediately\n            # executed\n\n            if order.status in [bt.Order.Accepted, bt.Order.Submitted]:\n                self.lines.created[0] = order.created.price\n\n            elif order.status in [bt.Order.Expired]:\n                self.lines.expired[0] = order.created.price` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport datetime\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nfrom orderobserver import OrderObserver\n\nclass MyStrategy(bt.Strategy):\n    params = (\n        ('smaperiod', 15),\n        ('limitperc', 1.0),\n        ('valid', 7),\n    )\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.data.datetime[0]\n        if isinstance(dt, float):\n            dt = bt.num2date(dt)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n            self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n            self.order = order\n            return\n\n        if order.status in [order.Expired]:\n            self.log('BUY EXPIRED')\n\n        elif order.status in [order.Completed]:\n            if order.isbuy():\n                self.log(\n                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                    (order.executed.price,\n                     order.executed.value,\n                     order.executed.comm))\n\n            else:  # Sell\n                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                         (order.executed.price,\n                          order.executed.value,\n                          order.executed.comm))\n\n        # Sentinel to None: new orders allowed\n        self.order = None\n\n    def __init__(self):\n        # SimpleMovingAverage on main data\n        # Equivalent to -> sma = btind.SMA(self.data, period=self.p.smaperiod)\n        sma = btind.SMA(period=self.p.smaperiod)\n\n        # CrossOver (1: up, -1: down) close / sma\n        self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n\n        # Sentinel to None: new ordersa allowed\n        self.order = None\n\n    def next(self):\n        if self.order:\n            # pending order ... do nothing\n            return\n\n        # Check if we are in the market\n        if self.position:\n            if self.buysell < 0:\n                self.log('SELL CREATE, %.2f' % self.data.close[0])\n                self.sell()\n\n        elif self.buysell > 0:\n            plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n            valid = self.data.datetime.date(0) + \\\n                datetime.timedelta(days=self.p.valid)\n            self.log('BUY CREATE, %.2f' % plimit)\n            self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)\n\ndef runstrat():\n    cerebro = bt.Cerebro()\n\n    data = bt.feeds.BacktraderCSVData(dataname='../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n\n    cerebro.addobserver(OrderObserver)\n\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n\n    cerebro.plot()\n\nif __name__ == '__main__':\n    runstrat()` \n```", "```py\n`class MyStrategy(bt.Strategy):\n\n    def start(self):\n\n        self.mystats = open('mystats.csv', 'wb')\n        self.mystats.write('datetime,drawdown, maxdrawdown\\n')\n\n    def next(self):\n        self.mystats.write(self.data.datetime.date(0).strftime('%Y-%m-%d'))\n        self.mystats.write(',%.2f' % self.stats.drawdown.drawdown[-1])\n        self.mystats.write(',%.2f' % self.stats.drawdown.maxdrawdown-1])\n        self.mystats.write('\\n')` \n```"]