["```py\n`# buy the main date, with sizer default stake, Market order\norder = self.buy()\n\n# Market order - valid will be \"IGNORED\"\norder = self.buy(valid=datetime.datetime.now() + datetime.timedelta(days=3))\n\n# Market order - price will be IGNORED\norder = self.buy(price=self.data.close[0] * 1.02)\n\n# Market order - manual stake\norder = self.buy(size=25)\n\n# Limit order - want to set the price and can set a validity\norder = self.buy(exectype=Order.Limit,\n                 price=self.data.close[0] * 1.02,\n                 valid=datetime.datetime.now() + datetime.timedelta(days=3)))\n\n# StopLimit order - want to set the price, price limit\norder = self.buy(exectype=Order.StopLimit,\n                 price=self.data.close[0] * 1.02,\n                 plimit=self.data.close[0] * 1.07)\n\n# Canceling an existing order\nself.broker.cancel(order)` \n```", "```py\n`order = self.broker.submit(order)` \n```", "```py\n     `if self.data.close > self.sma:  # where sma is a Simple Moving Average\n         self.buy()\n\n    The expectation CANNOT be that the order will be executed with the\n    ``close`` price which is being examined in the logic BECAUSE it has already\n    happened.\n\n    The order CAN BE 1st EXECUTED withing the bounds of the next set of\n    Open/High/Low/Close price points (and the conditions set forth herein by\n    the order)` \n    ```", "```py\n`- Case 1:\n\n  If the `open` price of the bar is below the limit price the order\n  executes immediately with the `open` price. The order has been swept\n  during the opening phase of the session\n\n- Case 2:\n\n  If the `open` price has not penetrated below the limit price but the\n  `low` price is below the limit price, then the limit price has been\n  seen during the session and the order can be executed` \n```", "```py\n`- Case 1:\n\n  If the `open` price of the bar is above the stop price the order is\n  executed immediately with the `open` price.\n\n  Intended to stop a loss if the price is moving upwards against an\n  existing short position\n\n- Case 2:\n\n  If the `open` price has not penetrated above the stop price but the\n  `high` price is above the stop price, then the stop price has been\n  seen during the session and the order can be executed` \n```", "```py\n `if self.p.exectype == 'Market':\n                self.buy(exectype=bt.Order.Market)  # default if not given\n\n                self.log('BUY CREATE, exectype Market, price %.2f' %\n                         self.data.close[0])` \n```", "```py\n`$ ./order-execution-samples.py --exectype Market\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype Market, price 3641.42\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-01-27T23:59:59+00:00, BUY EXECUTED, Price: 3643.35, Cost: 3643.35, Comm 0.00\n2006-03-02T23:59:59+00:00, SELL CREATE, 3763.73\n2006-03-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-03T23:59:59+00:00, SELL EXECUTED, Price: 3763.95, Cost: 3763.95, Comm 0.00\n...\n...\n2006-12-11T23:59:59+00:00, BUY CREATE, exectype Market, price 4052.89\n2006-12-11T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-12-12T23:59:59+00:00, BUY EXECUTED, Price: 4052.55, Cost: 4052.55, Comm 0.00` \n```", "```py\n `elif self.p.exectype == 'Close':\n                self.buy(exectype=bt.Order.Close)\n\n                self.log('BUY CREATE, exectype Close, price %.2f' %\n                         self.data.close[0])` \n```", "```py\n`$ ./order-execution-samples.py --exectype Close\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype Close, price 3641.42\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-01-27T23:59:59+00:00, BUY EXECUTED, Price: 3685.48, Cost: 3685.48, Comm 0.00\n2006-03-02T23:59:59+00:00, SELL CREATE, 3763.73\n2006-03-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-03T23:59:59+00:00, SELL EXECUTED, Price: 3763.95, Cost: 3763.95, Comm 0.00\n...\n...\n2006-11-06T23:59:59+00:00, BUY CREATE, exectype Close, price 4045.22\n2006-11-06T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-07T23:59:59+00:00, BUY EXECUTED, Price: 4072.86, Cost: 4072.86, Comm 0.00\n2006-11-24T23:59:59+00:00, SELL CREATE, 4048.16\n2006-11-24T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-27T23:59:59+00:00, SELL EXECUTED, Price: 4045.05, Cost: 4045.05, Comm 0.00\n2006-12-11T23:59:59+00:00, BUY CREATE, exectype Close, price 4052.89\n2006-12-11T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-12-12T23:59:59+00:00, BUY EXECUTED, Price: 4059.74, Cost: 4059.74, Comm 0.00` \n```", "```py\n `if self.p.valid:\n                valid = self.data.datetime.date(0) + \\\n                        datetime.timedelta(days=self.p.valid)\n            else:\n                valid = None` \n```", "```py\n `elif self.p.exectype == 'Limit':\n                price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n\n                self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n\n                if self.p.valid:\n                    txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n                else:\n                    txt = 'BUY CREATE, exectype Limit, price %.2f'\n                    self.log(txt % price)` \n```", "```py\n`$ ./order-execution-samples.py --exectype Limit --perc1 1\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype Limit, price 3605.01\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-05-18T23:59:59+00:00, BUY EXECUTED, Price: 3605.01, Cost: 3605.01, Comm 0.00\n2006-06-05T23:59:59+00:00, SELL CREATE, 3604.33\n2006-06-05T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-06-06T23:59:59+00:00, SELL EXECUTED, Price: 3598.58, Cost: 3598.58, Comm 0.00\n2006-06-21T23:59:59+00:00, BUY CREATE, exectype Limit, price 3491.57\n2006-06-21T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-06-28T23:59:59+00:00, BUY EXECUTED, Price: 3491.57, Cost: 3491.57, Comm 0.00\n2006-07-13T23:59:59+00:00, SELL CREATE, 3562.56\n2006-07-13T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-07-14T23:59:59+00:00, SELL EXECUTED, Price: 3545.92, Cost: 3545.92, Comm 0.00\n2006-07-24T23:59:59+00:00, BUY CREATE, exectype Limit, price 3596.60\n2006-07-24T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED` \n```", "```py\n`$ ./order-execution-samples.py --exectype Limit --perc1 1 --valid 4\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype Limit, price 3605.01, valid: 2006-01-30\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-01-30T23:59:59+00:00, BUY EXPIRED\n2006-03-10T23:59:59+00:00, BUY CREATE, exectype Limit, price 3760.48, valid: 2006-03-14\n2006-03-10T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-14T23:59:59+00:00, BUY EXPIRED\n2006-03-30T23:59:59+00:00, BUY CREATE, exectype Limit, price 3835.86, valid: 2006-04-03\n2006-03-30T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-04-03T23:59:59+00:00, BUY EXPIRED\n2006-04-20T23:59:59+00:00, BUY CREATE, exectype Limit, price 3821.40, valid: 2006-04-24\n2006-04-20T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-04-24T23:59:59+00:00, BUY EXPIRED\n2006-05-04T23:59:59+00:00, BUY CREATE, exectype Limit, price 3804.65, valid: 2006-05-08\n2006-05-04T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-05-08T23:59:59+00:00, BUY EXPIRED\n2006-06-01T23:59:59+00:00, BUY CREATE, exectype Limit, price 3611.85, valid: 2006-06-05\n2006-06-01T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-06-05T23:59:59+00:00, BUY EXPIRED\n2006-06-21T23:59:59+00:00, BUY CREATE, exectype Limit, price 3491.57, valid: 2006-06-25\n2006-06-21T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-06-26T23:59:59+00:00, BUY EXPIRED\n2006-07-24T23:59:59+00:00, BUY CREATE, exectype Limit, price 3596.60, valid: 2006-07-28\n2006-07-24T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-07-28T23:59:59+00:00, BUY EXPIRED\n2006-09-12T23:59:59+00:00, BUY CREATE, exectype Limit, price 3751.07, valid: 2006-09-16\n2006-09-12T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-09-18T23:59:59+00:00, BUY EXPIRED\n2006-09-20T23:59:59+00:00, BUY CREATE, exectype Limit, price 3802.90, valid: 2006-09-24\n2006-09-20T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-09-22T23:59:59+00:00, BUY EXECUTED, Price: 3802.90, Cost: 3802.90, Comm 0.00\n2006-11-02T23:59:59+00:00, SELL CREATE, 3974.62\n2006-11-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-03T23:59:59+00:00, SELL EXECUTED, Price: 3979.73, Cost: 3979.73, Comm 0.00\n2006-11-06T23:59:59+00:00, BUY CREATE, exectype Limit, price 4004.77, valid: 2006-11-10\n2006-11-06T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-10T23:59:59+00:00, BUY EXPIRED\n2006-12-11T23:59:59+00:00, BUY CREATE, exectype Limit, price 4012.36, valid: 2006-12-15\n2006-12-11T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-12-15T23:59:59+00:00, BUY EXPIRED` \n```", "```py\n `elif self.p.exectype == 'Stop':\n                price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n\n                self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n\n                if self.p.valid:\n                    txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n                else:\n                    txt = 'BUY CREATE, exectype Stop, price %.2f'\n                    self.log(txt % price)` \n```", "```py\n`$ ./order-execution-samples.py --exectype Stop --perc1 1\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype Stop, price 3677.83\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-01-27T23:59:59+00:00, BUY EXECUTED, Price: 3677.83, Cost: 3677.83, Comm 0.00\n2006-03-02T23:59:59+00:00, SELL CREATE, 3763.73\n2006-03-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-03T23:59:59+00:00, SELL EXECUTED, Price: 3763.95, Cost: 3763.95, Comm 0.00\n2006-03-10T23:59:59+00:00, BUY CREATE, exectype Stop, price 3836.44\n2006-03-10T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-15T23:59:59+00:00, BUY EXECUTED, Price: 3836.44, Cost: 3836.44, Comm 0.00\n2006-03-28T23:59:59+00:00, SELL CREATE, 3811.45\n2006-03-28T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-29T23:59:59+00:00, SELL EXECUTED, Price: 3811.85, Cost: 3811.85, Comm 0.00\n2006-03-30T23:59:59+00:00, BUY CREATE, exectype Stop, price 3913.36\n2006-03-30T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-09-29T23:59:59+00:00, BUY EXECUTED, Price: 3913.36, Cost: 3913.36, Comm 0.00\n2006-11-02T23:59:59+00:00, SELL CREATE, 3974.62\n2006-11-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-03T23:59:59+00:00, SELL EXECUTED, Price: 3979.73, Cost: 3979.73, Comm 0.00\n2006-11-06T23:59:59+00:00, BUY CREATE, exectype Stop, price 4085.67\n2006-11-06T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-13T23:59:59+00:00, BUY EXECUTED, Price: 4085.67, Cost: 4085.67, Comm 0.00\n2006-11-24T23:59:59+00:00, SELL CREATE, 4048.16\n2006-11-24T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-11-27T23:59:59+00:00, SELL EXECUTED, Price: 4045.05, Cost: 4045.05, Comm 0.00\n2006-12-11T23:59:59+00:00, BUY CREATE, exectype Stop, price 4093.42\n2006-12-11T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-12-13T23:59:59+00:00, BUY EXECUTED, Price: 4093.42, Cost: 4093.42, Comm 0.00` \n```", "```py\n `elif self.p.exectype == 'StopLimit':\n                price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n\n                plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n\n                self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid,\n                         plimit=plimit)\n\n                if self.p.valid:\n                    txt = ('BUY CREATE, exectype StopLimit, price %.2f,'\n                           ' valid: %s, pricelimit: %.2f')\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n                else:\n                    txt = ('BUY CREATE, exectype StopLimit, price %.2f,'\n                           ' pricelimit: %.2f')\n                    self.log(txt % (price, plimit))` \n```", "```py\n`$ ./order-execution-samples.py --exectype StopLimit --perc1 1 --perc2 0.5 --valid 20\n2006-01-26T23:59:59+00:00, BUY CREATE, exectype StopLimit, price 3677.83, valid: 2006-02-15, pricelimit: 3659.63\n2006-01-26T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-02-03T23:59:59+00:00, BUY EXECUTED, Price: 3659.63, Cost: 3659.63, Comm 0.00\n2006-03-02T23:59:59+00:00, SELL CREATE, 3763.73\n2006-03-02T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-03T23:59:59+00:00, SELL EXECUTED, Price: 3763.95, Cost: 3763.95, Comm 0.00\n2006-03-10T23:59:59+00:00, BUY CREATE, exectype StopLimit, price 3836.44, valid: 2006-03-30, pricelimit: 3817.45\n2006-03-10T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-21T23:59:59+00:00, BUY EXECUTED, Price: 3817.45, Cost: 3817.45, Comm 0.00\n2006-03-28T23:59:59+00:00, SELL CREATE, 3811.45\n2006-03-28T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-03-29T23:59:59+00:00, SELL EXECUTED, Price: 3811.85, Cost: 3811.85, Comm 0.00\n2006-03-30T23:59:59+00:00, BUY CREATE, exectype StopLimit, price 3913.36, valid: 2006-04-19, pricelimit: 3893.98\n2006-03-30T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-04-19T23:59:59+00:00, BUY EXPIRED\n...\n...\n2006-12-11T23:59:59+00:00, BUY CREATE, exectype StopLimit, price 4093.42, valid: 2006-12-31, pricelimit: 4073.15\n2006-12-11T23:59:59+00:00, ORDER ACCEPTED/SUBMITTED\n2006-12-22T23:59:59+00:00, BUY EXECUTED, Price: 4073.15, Cost: 4073.15, Comm 0.00` \n```", "```py\n`$ ./order-execution-samples.py --help\nusage: order-execution-samples.py [-h] [--infile INFILE]\n                                  [--csvformat {bt,visualchart,sierrachart,yahoo,yahoo_unreversed}]\n                                  [--fromdate FROMDATE] [--todate TODATE]\n                                  [--plot] [--plotstyle {bar,line,candle}]\n                                  [--numfigs NUMFIGS] [--smaperiod SMAPERIOD]\n                                  [--exectype EXECTYPE] [--valid VALID]\n                                  [--perc1 PERC1] [--perc2 PERC2]\n\nShowcase for Order Execution Types\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --infile INFILE, -i INFILE\n                        File to be read in\n  --csvformat {bt,visualchart,sierrachart,yahoo,yahoo_unreversed},\n  -c {bt,visualchart,sierrachart,yahoo,yahoo_unreversed}\n                        CSV Format\n  --fromdate FROMDATE, -f FROMDATE\n                        Starting date in YYYY-MM-DD format\n  --todate TODATE, -t TODATE\n                        Ending date in YYYY-MM-DD format\n  --plot, -p            Plot the read data\n  --plotstyle {bar,line,candle}, -ps {bar,line,candle}\n                        Plot the read data\n  --numfigs NUMFIGS, -n NUMFIGS\n                        Plot using n figures\n  --smaperiod SMAPERIOD, -s SMAPERIOD\n                      Simple Moving Average Period\n  --exectype EXECTYPE, -e EXECTYPE\n                        Execution Type: Market (default), Close, Limit,\n                        Stop, StopLimit\n  --valid VALID, -v VALID\n                        Validity for Limit sample: default 0 days\n  --perc1 PERC1, -p1 PERC1\n                        % distance from close price at order creation time for\n                        the limit/trigger price in Limit/Stop orders\n  --perc2 PERC2, -p2 PERC2\n                        % distance from close price at order creation time for\n                        the limit price in StopLimit orders` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport argparse\nimport datetime\nimport os.path\nimport time\nimport sys\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nclass OrderExecutionStrategy(bt.Strategy):\n    params = (\n        ('smaperiod', 15),\n        ('exectype', 'Market'),\n        ('perc1', 3),\n        ('perc2', 1),\n        ('valid', 4),\n    )\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.data.datetime[0]\n        if isinstance(dt, float):\n            dt = bt.num2date(dt)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n            self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n            self.order = order\n            return\n\n        if order.status in [order.Expired]:\n            self.log('BUY EXPIRED')\n\n        elif order.status in [order.Completed]:\n            if order.isbuy():\n                self.log(\n                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                    (order.executed.price,\n                     order.executed.value,\n                     order.executed.comm))\n\n            else:  # Sell\n                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                         (order.executed.price,\n                          order.executed.value,\n                          order.executed.comm))\n\n        # Sentinel to None: new orders allowed\n        self.order = None\n\n    def __init__(self):\n        # SimpleMovingAverage on main data\n        # Equivalent to -> sma = btind.SMA(self.data, period=self.p.smaperiod)\n        sma = btind.SMA(period=self.p.smaperiod)\n\n        # CrossOver (1: up, -1: down) close / sma\n        self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n\n        # Sentinel to None: new ordersa allowed\n        self.order = None\n\n    def next(self):\n        if self.order:\n            # An order is pending ... nothing can be done\n            return\n\n        # Check if we are in the market\n        if self.position:\n            # In the maerket - check if it's the time to sell\n            if self.buysell < 0:\n                self.log('SELL CREATE, %.2f' % self.data.close[0])\n                self.sell()\n\n        elif self.buysell > 0:\n            if self.p.valid:\n                valid = self.data.datetime.date(0) + \\\n                        datetime.timedelta(days=self.p.valid)\n            else:\n                valid = None\n\n            # Not in the market and signal to buy\n            if self.p.exectype == 'Market':\n                self.buy(exectype=bt.Order.Market)  # default if not given\n\n                self.log('BUY CREATE, exectype Market, price %.2f' %\n                         self.data.close[0])\n\n            elif self.p.exectype == 'Close':\n                self.buy(exectype=bt.Order.Close)\n\n                self.log('BUY CREATE, exectype Close, price %.2f' %\n                         self.data.close[0])\n\n            elif self.p.exectype == 'Limit':\n                price = self.data.close * (1.0 - self.p.perc1 / 100.0)\n\n                self.buy(exectype=bt.Order.Limit, price=price, valid=valid)\n\n                if self.p.valid:\n                    txt = 'BUY CREATE, exectype Limit, price %.2f, valid: %s'\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n                else:\n                    txt = 'BUY CREATE, exectype Limit, price %.2f'\n                    self.log(txt % price)\n\n            elif self.p.exectype == 'Stop':\n                price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n\n                self.buy(exectype=bt.Order.Stop, price=price, valid=valid)\n\n                if self.p.valid:\n                    txt = 'BUY CREATE, exectype Stop, price %.2f, valid: %s'\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d')))\n                else:\n                    txt = 'BUY CREATE, exectype Stop, price %.2f'\n                    self.log(txt % price)\n\n            elif self.p.exectype == 'StopLimit':\n                price = self.data.close * (1.0 + self.p.perc1 / 100.0)\n\n                plimit = self.data.close * (1.0 + self.p.perc2 / 100.0)\n\n                self.buy(exectype=bt.Order.StopLimit, price=price, valid=valid,\n                         plimit=plimit)\n\n                if self.p.valid:\n                    txt = ('BUY CREATE, exectype StopLimit, price %.2f,'\n                           ' valid: %s, pricelimit: %.2f')\n                    self.log(txt % (price, valid.strftime('%Y-%m-%d'), plimit))\n                else:\n                    txt = ('BUY CREATE, exectype StopLimit, price %.2f,'\n                           ' pricelimit: %.2f')\n                    self.log(txt % (price, plimit))\n\ndef runstrat():\n    args = parse_args()\n\n    cerebro = bt.Cerebro()\n\n    data = getdata(args)\n    cerebro.adddata(data)\n\n    cerebro.addstrategy(\n        OrderExecutionStrategy,\n        exectype=args.exectype,\n        perc1=args.perc1,\n        perc2=args.perc2,\n        valid=args.valid,\n        smaperiod=args.smaperiod\n    )\n    cerebro.run()\n\n    if args.plot:\n        cerebro.plot(numfigs=args.numfigs, style=args.plotstyle)\n\ndef getdata(args):\n\n    dataformat = dict(\n        bt=btfeeds.BacktraderCSVData,\n        visualchart=btfeeds.VChartCSVData,\n        sierrachart=btfeeds.SierraChartCSVData,\n        yahoo=btfeeds.YahooFinanceCSVData,\n        yahoo_unreversed=btfeeds.YahooFinanceCSVData\n    )\n\n    dfkwargs = dict()\n    if args.csvformat == 'yahoo_unreversed':\n        dfkwargs['reverse'] = True\n\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dfkwargs['fromdate'] = fromdate\n\n    if args.todate:\n        fromdate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dfkwargs['todate'] = todate\n\n    dfkwargs['dataname'] = args.infile\n\n    dfcls = dataformat[args.csvformat]\n\n    return dfcls(**dfkwargs)\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description='Showcase for Order Execution Types')\n\n    parser.add_argument('--infile', '-i', required=False,\n                        default='../datas/2006-day-001.txt',\n                        help='File to be read in')\n\n    parser.add_argument('--csvformat', '-c', required=False, default='bt',\n                        choices=['bt', 'visualchart', 'sierrachart',\n                                 'yahoo', 'yahoo_unreversed'],\n                        help='CSV Format')\n\n    parser.add_argument('--fromdate', '-f', required=False, default=None,\n                        help='Starting date in YYYY-MM-DD format')\n\n    parser.add_argument('--todate', '-t', required=False, default=None,\n                        help='Ending date in YYYY-MM-DD format')\n\n    parser.add_argument('--plot', '-p', action='store_false', required=False,\n                        help='Plot the read data')\n\n    parser.add_argument('--plotstyle', '-ps', required=False, default='bar',\n                        choices=['bar', 'line', 'candle'],\n                        help='Plot the read data')\n\n    parser.add_argument('--numfigs', '-n', required=False, default=1,\n                        help='Plot using n figures')\n\n    parser.add_argument('--smaperiod', '-s', required=False, default=15,\n                        help='Simple Moving Average Period')\n\n    parser.add_argument('--exectype', '-e', required=False, default='Market',\n                        help=('Execution Type: Market (default), Close, Limit,'\n                              ' Stop, StopLimit'))\n\n    parser.add_argument('--valid', '-v', required=False, default=0, type=int,\n                        help='Validity for Limit sample: default 0 days')\n\n    parser.add_argument('--perc1', '-p1', required=False, default=0.0,\n                        type=float,\n                        help=('%% distance from close price at order creation'\n                              ' time for the limit/trigger price in Limit/Stop'\n                              ' orders'))\n\n    parser.add_argument('--perc2', '-p2', required=False, default=0.0,\n                        type=float,\n                        help=('%% distance from close price at order creation'\n                              ' time for the limit price in StopLimit orders'))\n\n    return parser.parse_args()\n\nif __name__ == '__main__':\n    runstrat()` \n```"]