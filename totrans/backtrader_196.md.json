["```py\n`cerebro.broker.setcommission(commission=2.0, margin=2000.0, mult=10.0)` \n```", "```py\n`cerebro.broker.setcommission(commission=2.0, margin=2000.0, mult=10.0,\nname='Eurostoxxx50')` \n```", "```py\n`cerebro.broker.setcommission(commission=2.0, margin=2000.0, mult=10.0)` \n```", "```py\n`cerebro.broker.setcommission(commission=0.005)  # 0.5% of the operation value` \n```", "```py\n`from bt import CommissionInfo\n\ncommEurostoxx50 = CommissionInfo(commission=2.0, margin=2000.0, mult=10.0)` \n```", "```py\n`from mycomm import commEurostoxx50\n\n...\n\ncerebro.broker.addcomissioninfo(commEuroStoxx50, name='Eurostoxxx50')` \n```", "```py\n`from bt import CommissionInfo\n\nclass CommEurostoxx50(CommissionInfo):\n    params = dict(commission=2.0, margin=2000.0, mult=10.0)` \n```", "```py\n`from mycomm import CommEurostoxx50\n\n...\n\ncerebro.broker.addcomissioninfoCommEuroStoxx50(), name='Eurostoxxx50')` \n```", "```py\n`futures_like = True\n\nif futures_like:\n    commission, margin, mult = 2.0, 2000.0, 10.0\nelse:\n    commission, margin, mult = 0.005, None, 1` \n```", "```py\n`2006-03-09, BUY CREATE, 3757.59\n2006-03-10, BUY EXECUTED, Price: 3754.13, Cost: 2000.00, Comm 2.00\n2006-04-11, SELL CREATE, 3788.81\n2006-04-12, SELL EXECUTED, Price: 3786.93, Cost: 2000.00, Comm 2.00\n2006-04-12, OPERATION PROFIT, GROSS 328.00, NET 324.00\n2006-04-20, BUY CREATE, 3860.00\n2006-04-21, BUY EXECUTED, Price: 3863.57, Cost: 2000.00, Comm 2.00\n2006-04-28, SELL CREATE, 3839.90\n2006-05-02, SELL EXECUTED, Price: 3839.24, Cost: 2000.00, Comm 2.00\n2006-05-02, OPERATION PROFIT, GROSS -243.30, NET -247.30` \n```", "```py\n`2006-03-09, BUY CREATE, 3757.59\n2006-03-10, BUY EXECUTED, Price: 3754.13, Cost: 3754.13, Comm 18.77\n2006-04-11, SELL CREATE, 3788.81\n2006-04-12, SELL EXECUTED, Price: 3786.93, Cost: 3786.93, Comm 18.93\n2006-04-12, OPERATION PROFIT, GROSS 32.80, NET -4.91\n2006-04-20, BUY CREATE, 3860.00\n2006-04-21, BUY EXECUTED, Price: 3863.57, Cost: 3863.57, Comm 19.32\n2006-04-28, SELL CREATE, 3839.90\n2006-05-02, SELL EXECUTED, Price: 3839.24, Cost: 3839.24, Comm 19.20\n2006-05-02, OPERATION PROFIT, GROSS -24.33, NET -62.84` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\nimport backtrader.indicators as btind\n\nfutures_like = True\n\nif futures_like:\n    commission, margin, mult = 2.0, 2000.0, 10.0\nelse:\n    commission, margin, mult = 0.005, None, 1\n\nclass SMACrossOver(bt.Strategy):\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.datas[0].datetime.date(0)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def notify(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n            return\n\n        # Check if an order has been completed\n        # Attention: broker could reject order if not enougth cash\n        if order.status in [order.Completed, order.Canceled, order.Margin]:\n            if order.isbuy():\n                self.log(\n                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                    (order.executed.price,\n                     order.executed.value,\n                     order.executed.comm))\n\n                self.buyprice = order.executed.price\n                self.buycomm = order.executed.comm\n                self.opsize = order.executed.size\n            else:  # Sell\n                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n                         (order.executed.price,\n                          order.executed.value,\n                          order.executed.comm))\n\n                gross_pnl = (order.executed.price - self.buyprice) * \\\n                    self.opsize\n\n                if margin:\n                    gross_pnl *= mult\n\n                net_pnl = gross_pnl - self.buycomm - order.executed.comm\n                self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' %\n                         (gross_pnl, net_pnl))\n\n    def __init__(self):\n        sma = btind.SMA(self.data)\n        # > 0 crossing up / < 0 crossing down\n        self.buysell_sig = btind.CrossOver(self.data, sma)\n\n    def next(self):\n        if self.buysell_sig > 0:\n            self.log('BUY CREATE, %.2f' % self.data.close[0])\n            self.buy()  # keep order ref to avoid 2nd orders\n\n        elif self.position and self.buysell_sig < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n\nif __name__ == '__main__':\n    # Create a cerebro entity\n    cerebro = bt.Cerebro()\n\n    # Add a strategy\n    cerebro.addstrategy(SMACrossOver)\n\n    # Create a Data Feed\n    datapath = ('../datas/2006-day-001.txt')\n    data = bt.feeds.BacktraderCSVData(dataname=datapath)\n\n    # Add the Data Feed to Cerebro\n    cerebro.adddata(data)\n\n    # set commission scheme -- CHANGE HERE TO PLAY\n    cerebro.broker.setcommission(\n        commission=commission, margin=margin, mult=mult)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot()` \n```"]