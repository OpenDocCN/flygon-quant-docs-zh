["```py\n`class MyTrixSignalComposed(bt.Indicator):\n\n    lines = ('trix', 'signal')\n    params = (('period', 15), ('sigperiod', 9))\n\n    def __init__(self):\n        self.lines.trix = MyTrix(self.data, period=self.p.period)\n        self.lines.signal = btind.EMA(self.lines.trix, period=self.p.sigperiod)` \n```", "```py\n`class MyTrix(bt.Indicator):\n\n    lines = ('trix',)\n    params = (('period', 15),)\n\n    def __init__(self):\n        ema1 = btind.EMA(self.data, period=self.p.period)\n        ema2 = btind.EMA(ema1, period=self.p.period)\n        ema3 = btind.EMA(ema2, period=self.p.period)\n\n        self.lines.trix = 100.0 * (ema3 - ema3(-1)) / ema3(-1)` \n```", "```py\n`class MyTrixSignalInherited(MyTrix):\n\n    lines = ('signal',)\n    params = (('sigperiod', 9),)\n\n    def __init__(self):\n        super(MyTrixSignalInherited, self).__init__()\n        self.lines.signal = btind.EMA(self.lines.trix, period=self.p.sigperiod)` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\nfrom mytrix import MyTrixSignalInherited\n\nclass NoStrategy(bt.Strategy):\n    params = (('trixperiod', 15),\n              ('analyzer', False),)\n\n    def __init__(self):\n        MyTrixSignalInherited(self.data, period=self.p.trixperiod)\n\nif __name__ == '__main__':\n    # Create a cerebro entity\n    cerebro = bt.Cerebro()\n\n    # Add a strategy\n    cerebro.addstrategy(NoStrategy, trixperiod=15)\n\n    # Create a Data Feed\n    datapath = ('../datas/2006-day-001.txt')\n    data = bt.feeds.BacktraderCSVData(dataname=datapath)\n\n    # Add the Data Feed to Cerebro\n    cerebro.adddata(data)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot()` \n```", "```py\n`from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport backtrader as bt\nimport backtrader.feeds as btfeeds\n\nfrom mytrix import MyTrixSignalComposed\n\nclass NoStrategy(bt.Strategy):\n    params = (('trixperiod', 15),\n              ('analyzer', False),)\n\n    def __init__(self):\n        MyTrixSignalComposed(self.data, period=self.p.trixperiod)\n\nif __name__ == '__main__':\n    # Create a cerebro entity\n    cerebro = bt.Cerebro()\n\n    # Add a strategy\n    cerebro.addstrategy(NoStrategy, trixperiod=15)\n\n    # Create a Data Feed\n    datapath = ('../datas/2006-day-001.txt')\n    data = bt.feeds.BacktraderCSVData(dataname=datapath)\n\n    # Add the Data Feed to Cerebro\n    cerebro.adddata(data)\n\n    # Run over everything\n    cerebro.run()\n\n    # Plot the result\n    cerebro.plot()` \n```"]