["```py\n `# p0 is the current price and p1 is the previous price\n  if mode is RSI:\n    bulls = 0.5 * abs(p0 - p1) + p0 - p1\n    bears = 0.5 * abs(p0 - p1) - p0 + p1\n  elif mode is STOCH:\n    bulls = p0 - lowest(period)\n    bears = highest(period - p1\n\n  avgbulls = moving_average(bulls, period)\n  avgbears = moving_average(bears, period)\n\n  smoothedbulls = moving_average(bulls, smoothing_period) / pointsize\n  smoothedbears = moving_average(bears, smoothing_period) / pointsize\n\n  ash = smoothedbulls - smoothedbears` \n```", "```py\n`class ASH(bt.Indicator):\n    alias = ('AbsoluteStrengthOscilator',)\n\n    lines = ('ash', 'bulls', 'bears',)  # output lines\n\n    # customize the plotting of the *ash* line\n    plotlines = dict(ash=dict(_method='bar', alpha=0.33, width=0.66))\n\n    RSI, STOCH = range(0, 2)  # enum values for the parameter mode\n\n    params = dict(\n        period=9,\n        smoothing=2,\n        mode=RSI,\n        rsifactor=0.5,\n        movav=bt.ind.WMA,  # WeightedMovingAverage\n        smoothav=None,  # use movav if not specified\n        pointsize=None,  # use only if specified\n    )\n\n    def __init__(self):\n        # Start calcs according to selected mode\n        if self.p.mode == self.RSI:\n            p0p1 = self.data - self.data(-1)  # used twice below\n            half_abs_p0p1 = self.p.rsifactor * abs(p0p1)  # used twice below\n\n            bulls = half_abs_p0p1 + p0p1\n            bears = half_abs_p0p1 - p0p1\n        else:\n            bulls = self.data - bt.ind.Lowest(self.data, period=self.p.period)\n            bears = bt.ind.Highest(self.data, period=self.p.period) - self.data\n\n        avbulls = self.p.movav(bulls, period=self.p.period)\n        avbears = self.p.movav(bears, period=self.p.period)\n\n        # choose smoothing average and smooth the already averaged values\n        smoothav = self.p.smoothav or self.p.movav  # choose smoothav\n        smoothbulls = smoothav(avbulls, period=self.p.smoothing)\n        smoothbears = smoothav(avbears, period=self.p.smoothing)\n\n        if self.p.pointsize:  # apply only if it makes sense\n            smoothbulls /= self.p.pointsize\n            smoothbears /= self.p.pointsize\n\n        # Assign the final values to the output lines\n        self.l.bulls = smoothbulls\n        self.l.bears = smoothbears\n        self.l.ash = smoothbulls - smoothbears` \n```"]