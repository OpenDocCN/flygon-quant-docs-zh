["```py\n `CRSI(3, 2, 100) = [RSI(3) + RSI(Streak, 2) + PercentRank(100)] / 3` \n```", "```py\n`class Streak(bt.ind.PeriodN):\n  '''\n Keeps a counter of the current upwards/downwards/neutral streak\n '''\n    lines = ('streak',)\n    params = dict(period=2)  # need prev/cur days (2) for comparisons\n\n    curstreak = 0\n\n    def next(self):\n        d0, d1 = self.data[0], self.data[-1]\n\n        if d0 > d1:\n            self.l.streak[0] = self.curstreak = max(1, self.curstreak + 1)\n        elif d0 < d1:\n            self.l.streak[0] = self.curstreak = min(-1, self.curstreak - 1)\n        else:\n            self.l.streak[0] = self.curstreak = 0\n\nclass ConnorsRSI(bt.Indicator):\n  '''\n Calculates the ConnorsRSI as:\n - (RSI(per_rsi) + RSI(Streak, per_streak) + PctRank(per_rank)) / 3\n '''\n    lines = ('crsi',)\n    params = dict(prsi=3, pstreak=2, prank=100)\n\n    def __init__(self):\n        # Calculate the components\n        rsi = bt.ind.RSI(self.data, period=self.p.prsi)\n\n        streak = Streak(self.data)\n        rsi_streak = bt.ind.RSI(streak, period=self.p.pstreak)\n\n        prank = bt.ind.PercentRank(self.data, period=self.p.prank)\n\n        # Apply the formula\n        self.l.crsi = (rsi + rsi_streak + prank) / 3.0` \n```"]