["```py\n`class Stochastic_Generic(bt.Indicator):\n  '''\n This generic indicator doesn't assume the data feed has the components\n ``high``, ``low`` and ``close``. It needs three data sources passed to it,\n which whill considered in that order. (following the OHLC standard naming)\n '''\n    lines = ('k', 'd', 'dslow',)\n    params = dict(\n        pk=14,\n        pd=3,\n        pdslow=3,\n        movav=bt.ind.SMA,\n        slowav=None,\n    )\n\n    def __init__(self):\n        # Get highest from period k from 1st data\n        highest = bt.ind.Highest(self.data0, period=self.p.pk)\n        # Get lowest from period k from 2nd data\n        lowest = bt.ind.Lowest(self.data1, period=self.p.pk)\n\n        # Apply the formula to get raw K\n        kraw = 100.0 * (self.data2 - lowest) / (highest - lowest)\n\n        # The standard k in the indicator is a smoothed versin of K\n        self.l.k = k = self.p.movav(kraw, period=self.p.pd)\n\n        # Smooth k => d\n        slowav = self.p.slowav or self.p.movav  # chose slowav\n        self.l.d = slowav(k, period=self.p.pdslow)` \n```", "```py\n `# Generate 3 data feeds\n        d0 = bt.ind.EMA(self.data.high, period=14)\n        d1 = bt.ind.EMA(self.data.low, period=14)\n        d2 = bt.ind.EMA(self.data.close, period=14)\n\n        Stochastic_Generic(d0, d1, d2)  # customized stochastic\n\n        # These two have generate the same results\n        Stochastic_Generic(self.data.high, self.data.low, self.data.close)\n        bt.ind.Stochastic(self.data)` \n```"]