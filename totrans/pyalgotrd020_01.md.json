["```py\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"ORCL\" --from-year=2000 --to-year=2000 --storage=. --force-download --frequency=daily\n```", "```py\nDate,Open,High,Low,Close,Volume,Ex-Dividend,Split Ratio,Adj. Open,Adj. High,Adj. Low,Adj. Close,Adj. Volume\n2000-12-29,30.88,31.31,28.69,29.06,31702200.0,0.0,1.0,28.121945213877797,28.513539658242028,26.127545601883227,26.46449896098733,31702200.0\n2000-12-28,30.56,31.63,30.38,31.06,25053600.0,0.0,1.0,27.830526092490462,28.804958779629363,27.666602836710087,28.285868469658173,25053600.0\n2000-12-27,30.38,31.06,29.38,30.69,26437500.0,0.0,1.0,27.666602836710087,28.285868469658173,26.755918082374667,27.94891511055407,26437500.0\n2000-12-26,31.5,32.19,30.0,30.94,20589500.0,0.0,1.0,28.68656976156576,29.3149422420572,27.32054263006263,28.176586299137927,20589500.0\n2000-12-22,30.38,31.98,30.0,31.88,35568200.0,0.0,1.0,27.666602836710087,29.123698443646763,27.32054263006263,29.032629968213218,35568200.0\n2000-12-21,27.81,30.25,27.31,29.5,46719700.0,0.0,1.0,25.326143018068056,27.548213818646484,24.870800640900345,26.86520025289492,46719700.0\n2000-12-20,28.06,29.81,27.5,28.5,54440500.0,0.0,1.0,25.55381420665191,27.147512526738897,25.043830744224078,25.9545154985595,54440500.0\n2000-12-19,31.81,33.13,30.13,30.63,58653700.0,0.0,1.0,28.968882035409738,30.170985911132497,27.438931648126232,27.894274025293942,58653700.0\n2000-12-18,30.0,32.44,29.94,32.0,61640100.0,0.0,1.0,27.32054263006263,29.542613430641055,27.265901544802503,29.14191213873347,61640100.0\n```", "```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.barfeed import quandlfeed\n\nclass MyStrategy(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument):\n        super(MyStrategy, self).__init__(feed)\n        self.__instrument = instrument\n\n    def onBars(self, bars):\n        bar = bars[self.__instrument]\n        self.info(bar.getClose())\n\n# Load the bar feed from the CSV file\nfeed = quandlfeed.Feed()\nfeed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2000-quandl.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = MyStrategy(feed, \"orcl\")\nmyStrategy.run() \n```", "```py\n2000-01-03 00:00:00 strategy [INFO] 118.1\n2000-01-04 00:00:00 strategy [INFO] 107.7\n2000-01-05 00:00:00 strategy [INFO] 103.5\n.\n.\n.\n2000-12-27 00:00:00 strategy [INFO] 30.69\n2000-12-28 00:00:00 strategy [INFO] 31.06\n2000-12-29 00:00:00 strategy [INFO] 29.06\n\n```", "```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.barfeed import quandlfeed\nfrom pyalgotrade.technical import ma\n\ndef safe_round(value, digits):\n    if value is not None:\n        value = round(value, digits)\n    return value\n\nclass MyStrategy(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument):\n        super(MyStrategy, self).__init__(feed)\n        # We want a 15 period SMA over the closing prices.\n        self.__sma = ma.SMA(feed[instrument].getCloseDataSeries(), 15)\n        self.__instrument = instrument\n\n    def onBars(self, bars):\n        bar = bars[self.__instrument]\n        self.info(\"%s  %s\" % (bar.getClose(), safe_round(self.__sma[-1], 2)))\n\n# Load the bar feed from the CSV file\nfeed = quandlfeed.Feed()\nfeed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2000-quandl.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = MyStrategy(feed, \"orcl\")\nmyStrategy.run() \n```", "```py\n2000-01-03 00:00:00 strategy [INFO] 118.1 None\n2000-01-04 00:00:00 strategy [INFO] 107.7 None\n2000-01-05 00:00:00 strategy [INFO] 103.5 None\n2000-01-06 00:00:00 strategy [INFO] 96.0 None\n2000-01-07 00:00:00 strategy [INFO] 103.4 None\n2000-01-10 00:00:00 strategy [INFO] 115.8 None\n2000-01-11 00:00:00 strategy [INFO] 112.4 None\n2000-01-12 00:00:00 strategy [INFO] 105.6 None\n2000-01-13 00:00:00 strategy [INFO] 105.1 None\n2000-01-14 00:00:00 strategy [INFO] 106.8 None\n2000-01-18 00:00:00 strategy [INFO] 111.3 None\n2000-01-19 00:00:00 strategy [INFO] 57.13 None\n2000-01-20 00:00:00 strategy [INFO] 59.25 None\n2000-01-21 00:00:00 strategy [INFO] 59.69 None\n2000-01-24 00:00:00 strategy [INFO] 54.19 94.4\n2000-01-25 00:00:00 strategy [INFO] 56.44 90.29\n.\n.\n.\n2000-12-27 00:00:00 strategy [INFO] 30.69 29.99\n2000-12-28 00:00:00 strategy [INFO] 31.06 30.05\n2000-12-29 00:00:00 strategy [INFO] 29.06 30.1\n\n```", "```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.barfeed import quandlfeed\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import rsi\n\ndef safe_round(value, digits):\n    if value is not None:\n        value = round(value, digits)\n    return value\n\nclass MyStrategy(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument):\n        super(MyStrategy, self).__init__(feed)\n        self.__rsi = rsi.RSI(feed[instrument].getCloseDataSeries(), 14)\n        self.__sma = ma.SMA(self.__rsi, 15)\n        self.__instrument = instrument\n\n    def onBars(self, bars):\n        bar = bars[self.__instrument]\n        self.info(\"%s  %s  %s\" % (\n            bar.getClose(), safe_round(self.__rsi[-1], 2), safe_round(self.__sma[-1], 2)\n        ))\n\n# Load the bar feed from the CSV file\nfeed = quandlfeed.Feed()\nfeed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2000-quandl.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = MyStrategy(feed, \"orcl\")\nmyStrategy.run() \n```", "```py\n2000-01-03 00:00:00 strategy [INFO] 118.1 None None\n2000-01-04 00:00:00 strategy [INFO] 107.7 None None\n2000-01-05 00:00:00 strategy [INFO] 103.5 None None\n2000-01-06 00:00:00 strategy [INFO] 96.0 None None\n2000-01-07 00:00:00 strategy [INFO] 103.4 None None\n2000-01-10 00:00:00 strategy [INFO] 115.8 None None\n2000-01-11 00:00:00 strategy [INFO] 112.4 None None\n2000-01-12 00:00:00 strategy [INFO] 105.6 None None\n2000-01-13 00:00:00 strategy [INFO] 105.1 None None\n2000-01-14 00:00:00 strategy [INFO] 106.8 None None\n2000-01-18 00:00:00 strategy [INFO] 111.3 None None\n2000-01-19 00:00:00 strategy [INFO] 57.13 None None\n2000-01-20 00:00:00 strategy [INFO] 59.25 None None\n2000-01-21 00:00:00 strategy [INFO] 59.69 None None\n2000-01-24 00:00:00 strategy [INFO] 54.19 23.6 None\n2000-01-25 00:00:00 strategy [INFO] 56.44 25.1 None\n2000-01-26 00:00:00 strategy [INFO] 55.06 24.78 None\n2000-01-27 00:00:00 strategy [INFO] 51.81 24.0 None\n2000-01-28 00:00:00 strategy [INFO] 47.38 22.94 None\n2000-01-31 00:00:00 strategy [INFO] 49.95 25.01 None\n2000-02-01 00:00:00 strategy [INFO] 54.0 28.27 None\n2000-02-02 00:00:00 strategy [INFO] 54.31 28.53 None\n2000-02-03 00:00:00 strategy [INFO] 56.69 30.58 None\n2000-02-04 00:00:00 strategy [INFO] 57.81 31.58 None\n2000-02-07 00:00:00 strategy [INFO] 59.94 33.53 None\n2000-02-08 00:00:00 strategy [INFO] 59.56 33.35 None\n2000-02-09 00:00:00 strategy [INFO] 59.94 33.73 None\n2000-02-10 00:00:00 strategy [INFO] 62.31 36.23 None\n2000-02-11 00:00:00 strategy [INFO] 59.69 34.68 29.06\n2000-02-14 00:00:00 strategy [INFO] 62.19 37.44 29.98\n.\n.\n.\n2000-12-27 00:00:00 strategy [INFO] 30.69 51.31 49.85\n2000-12-28 00:00:00 strategy [INFO] 31.06 52.16 50.0\n2000-12-29 00:00:00 strategy [INFO] 29.06 47.37 50.08\n\n```", "```py\nfrom __future__ import print_function\n\nfrom pyalgotrade import strategy\nfrom pyalgotrade.barfeed import quandlfeed\nfrom pyalgotrade.technical import ma\n\nclass MyStrategy(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, smaPeriod):\n        super(MyStrategy, self).__init__(feed, 1000)\n        self.__position = None\n        self.__instrument = instrument\n        # We'll use adjusted close values instead of regular close values.\n        self.setUseAdjustedValues(True)\n        self.__sma = ma.SMA(feed[instrument].getPriceDataSeries(), smaPeriod)\n\n    def onEnterOk(self, position):\n        execInfo = position.getEntryOrder().getExecutionInfo()\n        self.info(\"BUY at $%.2f\" % (execInfo.getPrice()))\n\n    def onEnterCanceled(self, position):\n        self.__position = None\n\n    def onExitOk(self, position):\n        execInfo = position.getExitOrder().getExecutionInfo()\n        self.info(\"SELL at $%.2f\" % (execInfo.getPrice()))\n        self.__position = None\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        self.__position.exitMarket()\n\n    def onBars(self, bars):\n        # Wait for enough bars to be available to calculate a SMA.\n        if self.__sma[-1] is None:\n            return\n\n        bar = bars[self.__instrument]\n        # If a position was not opened, check if we should enter a long position.\n        if self.__position is None:\n            if bar.getPrice() > self.__sma[-1]:\n                # Enter a buy market order for 10 shares. The order is good till canceled.\n                self.__position = self.enterLong(self.__instrument, 10, True)\n        # Check if we have to exit the position.\n        elif bar.getPrice() < self.__sma[-1] and not self.__position.exitActive():\n            self.__position.exitMarket()\n\ndef run_strategy(smaPeriod):\n    # Load the bar feed from the CSV file\n    feed = quandlfeed.Feed()\n    feed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2000-quandl.csv\")\n\n    # Evaluate the strategy with the feed.\n    myStrategy = MyStrategy(feed, \"orcl\", smaPeriod)\n    myStrategy.run()\n    print(\"Final portfolio value: $%.2f\" % myStrategy.getBroker().getEquity())\n\nrun_strategy(15) \n```", "```py\n2000-01-26 00:00:00 strategy [INFO] BUY at $25.84\n2000-01-28 00:00:00 strategy [INFO] SELL at $23.45\n2000-02-03 00:00:00 strategy [INFO] BUY at $25.22\n2000-02-22 00:00:00 strategy [INFO] SELL at $26.92\n2000-02-23 00:00:00 strategy [INFO] BUY at $27.41\n2000-03-31 00:00:00 strategy [INFO] SELL at $36.51\n2000-04-07 00:00:00 strategy [INFO] BUY at $38.11\n2000-04-12 00:00:00 strategy [INFO] SELL at $35.49\n2000-04-19 00:00:00 strategy [INFO] BUY at $35.80\n2000-04-20 00:00:00 strategy [INFO] SELL at $33.61\n2000-04-28 00:00:00 strategy [INFO] BUY at $35.74\n2000-05-05 00:00:00 strategy [INFO] SELL at $33.70\n2000-05-08 00:00:00 strategy [INFO] BUY at $34.29\n2000-05-09 00:00:00 strategy [INFO] SELL at $33.55\n2000-05-16 00:00:00 strategy [INFO] BUY at $35.35\n2000-05-19 00:00:00 strategy [INFO] SELL at $32.78\n2000-05-31 00:00:00 strategy [INFO] BUY at $33.35\n2000-06-23 00:00:00 strategy [INFO] SELL at $36.80\n2000-06-27 00:00:00 strategy [INFO] BUY at $37.51\n2000-06-28 00:00:00 strategy [INFO] SELL at $37.37\n2000-06-29 00:00:00 strategy [INFO] BUY at $37.37\n2000-06-30 00:00:00 strategy [INFO] SELL at $36.60\n2000-07-03 00:00:00 strategy [INFO] BUY at $36.94\n2000-07-05 00:00:00 strategy [INFO] SELL at $34.97\n2000-07-21 00:00:00 strategy [INFO] BUY at $35.26\n2000-07-24 00:00:00 strategy [INFO] SELL at $35.12\n2000-07-26 00:00:00 strategy [INFO] BUY at $34.06\n2000-07-28 00:00:00 strategy [INFO] SELL at $34.21\n2000-08-01 00:00:00 strategy [INFO] BUY at $34.24\n2000-08-02 00:00:00 strategy [INFO] SELL at $33.24\n2000-08-04 00:00:00 strategy [INFO] BUY at $35.66\n2000-09-11 00:00:00 strategy [INFO] SELL at $39.19\n2000-09-29 00:00:00 strategy [INFO] BUY at $37.05\n2000-10-02 00:00:00 strategy [INFO] SELL at $36.31\n2000-10-20 00:00:00 strategy [INFO] BUY at $32.90\n2000-10-31 00:00:00 strategy [INFO] SELL at $29.72\n2000-11-20 00:00:00 strategy [INFO] BUY at $22.14\n2000-11-21 00:00:00 strategy [INFO] SELL at $22.59\n2000-12-01 00:00:00 strategy [INFO] BUY at $24.02\n2000-12-15 00:00:00 strategy [INFO] SELL at $26.81\n2000-12-18 00:00:00 strategy [INFO] BUY at $27.32\n2000-12-21 00:00:00 strategy [INFO] SELL at $25.33\n2000-12-22 00:00:00 strategy [INFO] BUY at $27.67\nFinal portfolio value: $974.87\n\n```", "```py\nfor i in range(10, 30):\n    run_strategy(i) \n```", "```py\nFinal portfolio value: $1071.03\n```", "```py\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"IBM\" --from-year=2009 --to-year=2011 --storage=. --force-download --frequency=daily\n```", "```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import rsi\nfrom pyalgotrade.technical import cross\n\nclass RSI2(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, entrySMA, exitSMA, rsiPeriod, overBoughtThreshold, overSoldThreshold):\n        super(RSI2, self).__init__(feed)\n        self.__instrument = instrument\n        # We'll use adjusted close values, if available, instead of regular close values.\n        if feed.barsHaveAdjClose():\n            self.setUseAdjustedValues(True)\n        self.__priceDS = feed[instrument].getPriceDataSeries()\n        self.__entrySMA = ma.SMA(self.__priceDS, entrySMA)\n        self.__exitSMA = ma.SMA(self.__priceDS, exitSMA)\n        self.__rsi = rsi.RSI(self.__priceDS, rsiPeriod)\n        self.__overBoughtThreshold = overBoughtThreshold\n        self.__overSoldThreshold = overSoldThreshold\n        self.__longPos = None\n        self.__shortPos = None\n\n    def getEntrySMA(self):\n        return self.__entrySMA\n\n    def getExitSMA(self):\n        return self.__exitSMA\n\n    def getRSI(self):\n        return self.__rsi\n\n    def onEnterCanceled(self, position):\n        if self.__longPos == position:\n            self.__longPos = None\n        elif self.__shortPos == position:\n            self.__shortPos = None\n        else:\n            assert(False)\n\n    def onExitOk(self, position):\n        if self.__longPos == position:\n            self.__longPos = None\n        elif self.__shortPos == position:\n            self.__shortPos = None\n        else:\n            assert(False)\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        position.exitMarket()\n\n    def onBars(self, bars):\n        # Wait for enough bars to be available to calculate SMA and RSI.\n        if self.__exitSMA[-1] is None or self.__entrySMA[-1] is None or self.__rsi[-1] is None:\n            return\n\n        bar = bars[self.__instrument]\n        if self.__longPos is not None:\n            if self.exitLongSignal():\n                self.__longPos.exitMarket()\n        elif self.__shortPos is not None:\n            if self.exitShortSignal():\n                self.__shortPos.exitMarket()\n        else:\n            if self.enterLongSignal(bar):\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                self.__longPos = self.enterLong(self.__instrument, shares, True)\n            elif self.enterShortSignal(bar):\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                self.__shortPos = self.enterShort(self.__instrument, shares, True)\n\n    def enterLongSignal(self, bar):\n        return bar.getPrice() > self.__entrySMA[-1] and self.__rsi[-1] <= self.__overSoldThreshold\n\n    def exitLongSignal(self):\n        return cross.cross_above(self.__priceDS, self.__exitSMA) and not self.__longPos.exitActive()\n\n    def enterShortSignal(self, bar):\n        return bar.getPrice() < self.__entrySMA[-1] and self.__rsi[-1] >= self.__overBoughtThreshold\n\n    def exitShortSignal(self):\n        return cross.cross_below(self.__priceDS, self.__exitSMA) and not self.__shortPos.exitActive() \n```", "```py\nimport itertools\nfrom pyalgotrade.optimizer import server\nfrom pyalgotrade.barfeed import quandlfeed\n\ndef parameters_generator():\n    instrument = [\"ibm\"]\n    entrySMA = range(150, 251)\n    exitSMA = range(5, 16)\n    rsiPeriod = range(2, 11)\n    overBoughtThreshold = range(75, 96)\n    overSoldThreshold = range(5, 26)\n    return itertools.product(instrument, entrySMA, exitSMA, rsiPeriod, overBoughtThreshold, overSoldThreshold)\n\n# The if __name__ == '__main__' part is necessary if running on Windows.\nif __name__ == '__main__':\n    # Load the bar feed from the CSV files.\n    feed = quandlfeed.Feed()\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2009-quandl.csv\")\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2010-quandl.csv\")\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2011-quandl.csv\")\n\n    # Run the server.\n    server.serve(feed, parameters_generator(), \"localhost\", 5000) \n```", "```py\nfrom pyalgotrade.optimizer import worker\nimport rsi2\n\n# The if __name__ == '__main__' part is necessary if running on Windows.\nif __name__ == '__main__':\n    worker.run(rsi2.RSI2, \"localhost\", 5000, workerName=\"localworker\") \n```", "```py\n2017-07-21 22:56:51,944 pyalgotrade.optimizer.server [INFO] Starting server\n2017-07-21 22:56:51,944 pyalgotrade.optimizer.xmlrpcserver [INFO] Loading bars\n2017-07-21 22:56:52,609 pyalgotrade.optimizer.xmlrpcserver [INFO] Started serving\n2017-07-21 22:58:50,073 pyalgotrade.optimizer.xmlrpcserver [INFO] Best result so far 1261295.07089 with parameters ('ibm', 150, 5, 2, 83, 24)\n.\n.\n```", "```py\n2017-07-21 22:56:57,884 localworker [INFO] Started running\n2017-07-21 22:56:57,884 localworker [INFO] Started running\n2017-07-21 22:56:58,439 localworker [INFO] Running strategy with parameters ('ibm', 150, 5, 2, 84, 15)\n2017-07-21 22:56:58,498 localworker [INFO] Running strategy with parameters ('ibm', 150, 5, 2, 94, 5)\n2017-07-21 22:56:58,918 localworker [INFO] Result 1137855.88871\n2017-07-21 22:56:58,918 localworker [INFO] Running strategy with parameters ('ibm', 150, 5, 2, 84, 14)\n2017-07-21 22:56:58,996 localworker [INFO] Result 1027761.85581\n2017-07-21 22:56:58,997 localworker [INFO] Running strategy with parameters ('ibm', 150, 5, 2, 93, 25)\n2017-07-21 22:56:59,427 localworker [INFO] Result 1092194.67448\n2017-07-21 22:57:00,016 localworker [INFO] Result 1260766.64479\n.\n.\n```", "```py\nimport itertools\nfrom pyalgotrade.optimizer import local\nfrom pyalgotrade.barfeed import quandlfeed\nimport rsi2\n\ndef parameters_generator():\n    instrument = [\"ibm\"]\n    entrySMA = range(150, 251)\n    exitSMA = range(5, 16)\n    rsiPeriod = range(2, 11)\n    overBoughtThreshold = range(75, 96)\n    overSoldThreshold = range(5, 26)\n    return itertools.product(instrument, entrySMA, exitSMA, rsiPeriod, overBoughtThreshold, overSoldThreshold)\n\n# The if __name__ == '__main__' part is necessary if running on Windows.\nif __name__ == '__main__':\n    # Load the bar feed from the CSV files.\n    feed = quandlfeed.Feed()\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2009-quandl.csv\")\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2010-quandl.csv\")\n    feed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2011-quandl.csv\")\n\n    local.run(rsi2.RSI2, feed, parameters_generator()) \n```", "```py\n2017-07-21 22:59:26,921 pyalgotrade.optimizer.local [INFO] Starting server\n2017-07-21 22:59:26,922 pyalgotrade.optimizer.xmlrpcserver [INFO] Loading bars\n2017-07-21 22:59:26,922 pyalgotrade.optimizer.local [INFO] Starting workers\n2017-07-21 22:59:27,642 pyalgotrade.optimizer.xmlrpcserver [INFO] Started serving\n2017-07-21 23:01:14,306 pyalgotrade.optimizer.xmlrpcserver [INFO] Best result so far 1261295.07089 with parameters ('ibm', 150, 5, 2, 83, 24)\n.\n.\n```", "```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import cross\n\nclass SMACrossOver(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, smaPeriod):\n        super(SMACrossOver, self).__init__(feed)\n        self.__instrument = instrument\n        self.__position = None\n        # We'll use adjusted close values instead of regular close values.\n        self.setUseAdjustedValues(True)\n        self.__prices = feed[instrument].getPriceDataSeries()\n        self.__sma = ma.SMA(self.__prices, smaPeriod)\n\n    def getSMA(self):\n        return self.__sma\n\n    def onEnterCanceled(self, position):\n        self.__position = None\n\n    def onExitOk(self, position):\n        self.__position = None\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        self.__position.exitMarket()\n\n    def onBars(self, bars):\n        # If a position was not opened, check if we should enter a long position.\n        if self.__position is None:\n            if cross.cross_above(self.__prices, self.__sma) > 0:\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                # Enter a buy market order. The order is good till canceled.\n                self.__position = self.enterLong(self.__instrument, shares, True)\n        # Check if we have to exit the position.\n        elif not self.__position.exitActive() and cross.cross_below(self.__prices, self.__sma) > 0:\n            self.__position.exitMarket() \n```", "```py\nfrom pyalgotrade import plotter\nfrom pyalgotrade.barfeed import quandlfeed\nfrom pyalgotrade.stratanalyzer import returns\nimport sma_crossover\n\n# Load the bar feed from the CSV file\nfeed = quandlfeed.Feed()\nfeed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2000-quandl.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = sma_crossover.SMACrossOver(feed, \"orcl\", 20)\n\n# Attach a returns analyzers to the strategy.\nreturnsAnalyzer = returns.Returns()\nmyStrategy.attachAnalyzer(returnsAnalyzer)\n\n# Attach the plotter to the strategy.\nplt = plotter.StrategyPlotter(myStrategy)\n# Include the SMA in the instrument's subplot to get it displayed along with the closing prices.\nplt.getInstrumentSubplot(\"orcl\").addDataSeries(\"SMA\", myStrategy.getSMA())\n# Plot the simple returns on each bar.\nplt.getOrCreateSubplot(\"returns\").addDataSeries(\"Simple returns\", returnsAnalyzer.getReturns())\n\n# Run the strategy.\nmyStrategy.run()\nmyStrategy.info(\"Final portfolio value: $%.2f\" % myStrategy.getResult())\n\n# Plot the strategy.\nplt.plot() \n```"]