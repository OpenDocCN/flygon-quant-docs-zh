- en: Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/tutorial.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The goal of this tutorial is to give you a quick introduction to PyAlgoTrade.
    As described in the introduction, the goal of PyAlgoTrade is to help you backtest
    stock trading strategies. Let’s say you have an idea for a trading strategy and
    you’d like to evaluate it with historical data and see how it behaves, then PyAlgoTrade
    should allow you to do so with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: Before I move on I would like to thank Pablo Jorge who helped reviewing the
    initial design and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**This tutorial was developed on a UNIX environment, but the steps to adapt
    it to a Windows environment should be straightforward.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyAlgoTrade has 6 main components:'
  prefs: []
  type: TYPE_NORMAL
- en: Strategies
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeds
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Brokers
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: DataSeries
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Technicals
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizer
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies
  prefs: []
  type: TYPE_NORMAL
- en: These are the classes that you define that implement the trading logic. When
    to buy, when to sell, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Feeds
  prefs: []
  type: TYPE_NORMAL
- en: These are data providing abstractions. For example, you’ll use a CSV feed that
    loads bars from a CSV (Comma-separated values) formatted file to feed data to
    a strategy. Feeds are not limited to bars. For example, there is a Twitter feed
    that allows incorporating Twitter events into trading decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Brokers
  prefs: []
  type: TYPE_NORMAL
- en: Brokers are responsible for executing orders.
  prefs: []
  type: TYPE_NORMAL
- en: DataSeries
  prefs: []
  type: TYPE_NORMAL
- en: A data series is an abstraction used to manage time series data.
  prefs: []
  type: TYPE_NORMAL
- en: Technicals
  prefs: []
  type: TYPE_NORMAL
- en: These are a set of filters that you use to make calculations on top of DataSeries.
    For example SMA (Simple Moving Average), RSI (Relative Strength Index), etc. These
    filters are modeled as DataSeries decorators.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizer
  prefs: []
  type: TYPE_NORMAL
- en: These are a set of classes that allow you to distribute backtesting among different
    computers, or different processes running in the same computer, or a combination
    of both. They make horizontal scaling easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said all that, the first thing that we’ll need to test our strategies
    is some data. Let’s use Oracle’s stock prices for year 2000, which we’ll download
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The pyalgotrade.tools.quandl tool downloads CSV formatted data from [Quandl](https://www.quandl.com/).
    The first few lines of `WIKI-ORCL-2000-quandl.csv` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start with a simple strategy, that is, one that just prints closing prices
    as they are processed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is doing 3 main things:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a new strategy. There is only one method that has to be defined, *onBars*,
    which is called for every bar in the feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading the feed from a CSV file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the strategy with the bars supplied by the feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you run the script you should see the closing prices in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s move on with a strategy that prints closing SMA prices, to illustrate
    how technicals are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is very similar to the previous example, except that:'
  prefs: []
  type: TYPE_NORMAL
- en: We’re initializing an SMA filter over the closing price data series.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re printing the current SMA value along with the closing price.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you run the script you should see the closing prices and the corresponding
    SMA values, but in this case the first 14 SMA values are None. That is because
    we need at least 15 values to get something out of the SMA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All the technicals will return None when the value can’t be calculated at a
    given time.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important thing about technicals is that they can be combined. That is
    because they’re modeled as DataSeries as well. For example, getting an SMA over
    the RSI over the closing prices is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the script you should see a bunch of values on the screen where:'
  prefs: []
  type: TYPE_NORMAL
- en: The first 14 RSI values are None. That is because we need at least 15 values
    to get an RSI value.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The first 28 SMA values are None. That is because the first 14 RSI values are
    None, and the 15th one is the first not None value that the SMA filter receives.
    We can calculate the SMA(15) only when we have 15 not None values .
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Trading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s move on with a simple strategy, this time simulating actual trading.
    The idea is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: If the adjusted close price is above the SMA(15) we enter a long position (we
    place a buy market order).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If a long position is in place, and the adjusted close price drops below the
    SMA(15) we exit the long position (we place a sell market order).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the script you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'But what if we used 30 as the SMA period instead of 15 ? Would that yield better
    results or worse ? We could certainly do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and we would find out that we can get better results with a SMA(20):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is ok if we only have to try a limited set of parameters values. But if
    we have to test a strategy with multiple parameters, then the serial approach
    is definitely not going to scale as strategies get more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Meet the optimizer component. The idea is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one server responsible for:'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Providing the bars to run the strategy.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing the parameters to run the strategy.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording the strategy results from each of the workers.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are multiple workers responsible for:'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Running the strategy with the bars and parameters provided by the server.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To illustrate this we’ll use a strategy known as [RSI2](http://stockcharts.com/school/doku.php?id=chart_school:trading_strategies:rsi2)
    which requires the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: An SMA period for trend identification. We’ll call this entrySMA and will range
    between 150 and 250.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: A smaller SMA period for the exit point. We’ll call this exitSMA and will range
    between 5 and 15.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: An RSI period for entering both short/long positions. We’ll call this rsiPeriod
    and will range between 2 and 10.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: An RSI oversold threshold for long position entry. We’ll call this overSoldThreshold
    and will range between 5 and 25.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: An RSI overbought threshold for short position entry. We’ll call this overBoughtThreshold
    and will range between 75 and 95.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If my math is ok, those are 4409559 different combinations.
  prefs: []
  type: TYPE_NORMAL
- en: Testing this strategy for one set of parameters took me about 0.16 seconds.
    If I execute all the combinations serially it’ll take me about 8.5 days to evaluate
    all of them and find the best set of parameters. That is a long time, but if I
    can get ten 8-core computers to do the job then the total time will go down to
    about 2.5 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Long story short, **we need to go parallel**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by downloading 3 years of daily bars for ‘IBM’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this code as rsi2.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the server script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The server code is doing 3 things:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a generator function that yields different parameter combinations
    for the strategy.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading the feed with the CSV files we downloaded.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the server that will wait for incoming connections on port 5000.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the worker script that uses the **pyalgotrade.optimizer.worker** module
    to run the strategy in parallel with the data supplied by the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the server and the client/s you’ll see something like this on
    the server console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'and something like this on the worker/s console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that you should run **only one server and one or more workers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just want to run strategies in parallel in your own desktop you can
    take advantage of the **pyalgotrade.optimizer.local** module like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is doing 3 things:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a generator function that yields different parameter combinations.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading the feed with the CSV files we downloaded.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **pyalgotrade.optimizer.local** module to run the strategy in parallel
    and find the best result.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run this code you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyAlgoTrade makes it very easy to plot a strategy execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this as sma_crossover.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'and save this code to a different file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is doing 3 things:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading the feed from a CSV file.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the strategy with the bars supplied by the feed and a StrategyPlotter
    attached.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Plotting the strategy.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the plot looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/tutorial-5.png](../Images/adf109cd9cbc1bdf84dfc928d2c438d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I hope you enjoyed this quick introduction. I’d recommend you to download PyAlgoTrade
    here: [http://gbeced.github.io/pyalgotrade/downloads/index.html](http://gbeced.github.io/pyalgotrade/downloads/index.html)
    and get started writing you own strategies.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also find more examples in the [*Sample strategies*](samples.html#samples-label)
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table Of Contents](index.html)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Tutorial](#)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Trading](#trading)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing](#optimizing)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plotting](#plotting)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Introduction](intro.html "previous chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: Next topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Documentation for the code](code.html "next chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: This Page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Show Source](_sources/tutorial.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick search
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enter search terms or a module, class or function name.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[index](genindex.html "General Index")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[modules](py-modindex.html "Python Module Index") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[next](code.html "Documentation for the code") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[previous](intro.html "Introduction") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyAlgoTrade 0.20 documentation](index.html) »'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
