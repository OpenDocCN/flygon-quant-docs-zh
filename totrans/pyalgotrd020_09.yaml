- en: strategy – Basic strategy classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: strategy – 基本策略类
- en: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/strategy.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/strategy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/strategy.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/strategy.html)
- en: Strategies are the classes that you define that implement the trading logic,
    when to buy, when to sell, etc.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是您定义的类，实现交易逻辑，何时买入，何时卖出等。
- en: 'Buying and selling can be done in two ways:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 买卖可以通过两种方式进行：
- en: 'Placing individual orders using any of the following methods:'
  id: totrans-4
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下任何方法进行个别订单的下单：
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`pyalgotrade.strategy.BaseStrategy.marketOrder()`](#pyalgotrade.strategy.BaseStrategy.marketOrder
    "pyalgotrade.strategy.BaseStrategy.marketOrder")'
  id: totrans-6
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.marketOrder()`](#pyalgotrade.strategy.BaseStrategy.marketOrder
    "pyalgotrade.strategy.BaseStrategy.marketOrder")'
- en: '[`pyalgotrade.strategy.BaseStrategy.limitOrder()`](#pyalgotrade.strategy.BaseStrategy.limitOrder
    "pyalgotrade.strategy.BaseStrategy.limitOrder")'
  id: totrans-7
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.limitOrder()`](#pyalgotrade.strategy.BaseStrategy.limitOrder
    "pyalgotrade.strategy.BaseStrategy.limitOrder")'
- en: '[`pyalgotrade.strategy.BaseStrategy.stopOrder()`](#pyalgotrade.strategy.BaseStrategy.stopOrder
    "pyalgotrade.strategy.BaseStrategy.stopOrder")'
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.stopOrder()`](#pyalgotrade.strategy.BaseStrategy.stopOrder
    "pyalgotrade.strategy.BaseStrategy.stopOrder")'
- en: '[`pyalgotrade.strategy.BaseStrategy.stopLimitOrder()`](#pyalgotrade.strategy.BaseStrategy.stopLimitOrder
    "pyalgotrade.strategy.BaseStrategy.stopLimitOrder")'
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.stopLimitOrder()`](#pyalgotrade.strategy.BaseStrategy.stopLimitOrder
    "pyalgotrade.strategy.BaseStrategy.stopLimitOrder")'
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using a higher level interface that wrap a pair of entry/exit orders:'
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包装一对进入/退出订单的更高级别接口：
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`pyalgotrade.strategy.BaseStrategy.enterLong()`](#pyalgotrade.strategy.BaseStrategy.enterLong
    "pyalgotrade.strategy.BaseStrategy.enterLong")'
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.enterLong()`](#pyalgotrade.strategy.BaseStrategy.enterLong
    "pyalgotrade.strategy.BaseStrategy.enterLong")'
- en: '[`pyalgotrade.strategy.BaseStrategy.enterShort()`](#pyalgotrade.strategy.BaseStrategy.enterShort
    "pyalgotrade.strategy.BaseStrategy.enterShort")'
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.enterShort()`](#pyalgotrade.strategy.BaseStrategy.enterShort
    "pyalgotrade.strategy.BaseStrategy.enterShort")'
- en: '[`pyalgotrade.strategy.BaseStrategy.enterLongLimit()`](#pyalgotrade.strategy.BaseStrategy.enterLongLimit
    "pyalgotrade.strategy.BaseStrategy.enterLongLimit")'
  id: totrans-15
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.enterLongLimit()`](#pyalgotrade.strategy.BaseStrategy.enterLongLimit
    "pyalgotrade.strategy.BaseStrategy.enterLongLimit")'
- en: '[`pyalgotrade.strategy.BaseStrategy.enterShortLimit()`](#pyalgotrade.strategy.BaseStrategy.enterShortLimit
    "pyalgotrade.strategy.BaseStrategy.enterShortLimit")'
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pyalgotrade.strategy.BaseStrategy.enterShortLimit()`](#pyalgotrade.strategy.BaseStrategy.enterShortLimit
    "pyalgotrade.strategy.BaseStrategy.enterShortLimit")'
- en: Positions are higher level abstractions for placing orders. They are escentially
    a pair of entry-exit orders and provide easier tracking for returns and PnL than
    using individual orders.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 位置是用于下单的高级抽象。它们本质上是一对进入-退出订单，并提供比使用个别订单更容易跟踪回报和损益的方式。
- en: '## Strategy'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '## 策略'
- en: '*class* `pyalgotrade.strategy.``BaseStrategy`(*barFeed*, *broker*)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*class* `pyalgotrade.strategy.``BaseStrategy`(*barFeed*, *broker*)'
- en: 'Bases: `object`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基类： `object`
- en: Base class for strategies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 策略的基类。
- en: '| Parameters: |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 参数： |'
- en: '**barFeed** ([`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed").) – The bar feed that will supply the bars.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**barFeed** ([`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed").) – 将提供 bars 的 bar feed。'
- en: '**broker** ([`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker").) – The broker that will handle orders.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**broker** ([`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker").) – 处理订单的经纪人。'
- en: '|'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is a base class and should not be used directly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基类，不应直接使用。
- en: '`getFeed`()'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFeed`()'
- en: Returns the [`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed") that this strategy is using.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此策略正在使用的[`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed")。
- en: '`getBroker`()'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`getBroker`()'
- en: Returns the [`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker") used to handle order executions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于处理订单执行的[`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker")。
- en: '`getCurrentDateTime`()'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCurrentDateTime`()'
- en: Returns the `datetime.datetime` for the current [`pyalgotrade.bar.Bars`](bar.html#pyalgotrade.bar.Bars
    "pyalgotrade.bar.Bars").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前[`pyalgotrade.bar.Bars`](bar.html#pyalgotrade.bar.Bars "pyalgotrade.bar.Bars")的`datetime.datetime`。
- en: '`marketOrder`(*instrument*, *quantity*, *onClose=False*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`marketOrder`(*instrument*, *quantity*, *onClose=False*, *goodTillCanceled=False*,
    *allOrNone=False*)'
- en: Submits a market order.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 提交市价订单。
- en: '| Parameters: |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 参数： |'
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int/float.*) – The amount of shares. Positive means buy, negative
    means sell.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**onClose** (*boolean.*) – True if the order should be filled as close to the
    closing price as possible (Market-On-Close order). Default is False.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the order should be completely filled
    or not at all.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.broker.MarketOrder`](broker.html#pyalgotrade.broker.MarketOrder
    "pyalgotrade.broker.MarketOrder") submitted. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '`limitOrder`(*instrument*, *limitPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Submits a limit order.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int/float.*) – The amount of shares. Positive means buy, negative
    means sell.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the order should be completely filled
    or not at all.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.broker.LimitOrder`](broker.html#pyalgotrade.broker.LimitOrder
    "pyalgotrade.broker.LimitOrder") submitted. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '`stopOrder`(*instrument*, *stopPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Submits a stop order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – Stop price.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int/float.*) – The amount of shares. Positive means buy, negative
    means sell.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the order should be completely filled
    or not at all.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.broker.StopOrder`](broker.html#pyalgotrade.broker.StopOrder
    "pyalgotrade.broker.StopOrder") submitted. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '`stopLimitOrder`(*instrument*, *stopPrice*, *limitPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Submits a stop limit order.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – Stop price.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int/float.*) – The amount of shares. Positive means buy, negative
    means sell.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the order should be completely filled
    or not at all.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.broker.StopLimitOrder`](broker.html#pyalgotrade.broker.StopLimitOrder
    "pyalgotrade.broker.StopLimitOrder") submitted. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '`enterLong`(*instrument*, *quantity*, *goodTillCanceled=False*, *allOrNone=False*)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Generates a buy [`pyalgotrade.broker.MarketOrder`](broker.html#pyalgotrade.broker.MarketOrder
    "pyalgotrade.broker.MarketOrder") to enter a long position.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '`enterShort`(*instrument*, *quantity*, *goodTillCanceled=False*, *allOrNone=False*)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Generates a sell short [`pyalgotrade.broker.MarketOrder`](broker.html#pyalgotrade.broker.MarketOrder
    "pyalgotrade.broker.MarketOrder") to enter a short position.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
- en: '`enterLongLimit`(*instrument*, *limitPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Generates a buy [`pyalgotrade.broker.LimitOrder`](broker.html#pyalgotrade.broker.LimitOrder
    "pyalgotrade.broker.LimitOrder") to enter a long position.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '`enterShortLimit`(*instrument*, *limitPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Generates a sell short [`pyalgotrade.broker.LimitOrder`](broker.html#pyalgotrade.broker.LimitOrder
    "pyalgotrade.broker.LimitOrder") to enter a short position.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '`enterLongStop`(*instrument*, *stopPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Generates a buy [`pyalgotrade.broker.StopOrder`](broker.html#pyalgotrade.broker.StopOrder
    "pyalgotrade.broker.StopOrder") to enter a long position.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – Stop price.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '`enterShortStop`(*instrument*, *stopPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Generates a sell short [`pyalgotrade.broker.StopOrder`](broker.html#pyalgotrade.broker.StopOrder
    "pyalgotrade.broker.StopOrder") to enter a short position.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – Stop price.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '`enterLongStopLimit`(*instrument*, *stopPrice*, *limitPrice*, *quantity*, *goodTillCanceled=False*,
    *allOrNone=False*)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Generates a buy [`pyalgotrade.broker.StopLimitOrder`](broker.html#pyalgotrade.broker.StopLimitOrder
    "pyalgotrade.broker.StopLimitOrder") order to enter a long position.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – Stop price.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '`enterShortStopLimit`(*instrument*, *stopPrice*, *limitPrice*, *quantity*,
    *goodTillCanceled=False*, *allOrNone=False*)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Generates a sell short [`pyalgotrade.broker.StopLimitOrder`](broker.html#pyalgotrade.broker.StopLimitOrder
    "pyalgotrade.broker.StopLimitOrder") order to enter a short position.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stopPrice** (*float.*) – The Stop price.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – Limit price.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**quantity** (*int.*) – Entry order quantity.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order is good till canceled.
    If False then the order gets automatically canceled when the session closes.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | The [`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position") entered. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '`onEnterOk`(*position*)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the order submitted to enter a position
    was filled. The default implementation is empty.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **position** ([`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position").) – A position returned by any of the
    enterLongXXX or enterShortXXX methods. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '`onEnterCanceled`(*position*)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the order submitted to enter a position
    was canceled. The default implementation is empty.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **position** ([`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position").) – A position returned by any of the
    enterLongXXX or enterShortXXX methods. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '`onExitOk`(*position*)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the order submitted to exit a position
    was filled. The default implementation is empty.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **position** ([`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position").) – A position returned by any of the
    enterLongXXX or enterShortXXX methods. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '`onExitCanceled`(*position*)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the order submitted to exit a position
    was canceled. The default implementation is empty.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **position** ([`pyalgotrade.strategy.position.Position`](#pyalgotrade.strategy.position.Position
    "pyalgotrade.strategy.position.Position").) – A position returned by any of the
    enterLongXXX or enterShortXXX methods. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '`onStart`()'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the strategy starts executing. The
    default implementation is empty.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`onFinish`(*bars*)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when the strategy finished executing. The
    default implementation is empty.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **bars** ([`pyalgotrade.bar.Bars`](bar.html#pyalgotrade.bar.Bars
    "pyalgotrade.bar.Bars").) – The last bars processed. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '`onIdle`()'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when there are no events.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In a pure backtesting scenario this will not be called.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`onBars`(*bars*)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Override (**mandatory**) to get notified when new bars are available. The default
    implementation raises an Exception.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '**This is the method to override to enter your trading logic and enter/exit
    positions**.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **bars** ([`pyalgotrade.bar.Bars`](bar.html#pyalgotrade.bar.Bars
    "pyalgotrade.bar.Bars").) – The current bars. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
- en: '`onOrderUpdated`(*order*)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Override (optional) to get notified when an order gets updated.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **order** ([`pyalgotrade.broker.Order`](broker.html#pyalgotrade.broker.Order
    "pyalgotrade.broker.Order").) – The order updated. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '`run`()'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Call once (**and only once**) to run the strategy.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`stop`()'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Stops a running strategy.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`attachAnalyzer`(*strategyAnalyzer*)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Adds a [`pyalgotrade.stratanalyzer.StrategyAnalyzer`](stratanalyzer.html#pyalgotrade.stratanalyzer.StrategyAnalyzer
    "pyalgotrade.stratanalyzer.StrategyAnalyzer").
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`debug`(*msg*)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Logs a message with level DEBUG on the strategy logger.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '`info`(*msg*)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Logs a message with level INFO on the strategy logger.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`warning`(*msg*)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Logs a message with level WARNING on the strategy logger.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '`error`(*msg*)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Logs a message with level ERROR on the strategy logger.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`critical`(*msg*)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Logs a message with level CRITICAL on the strategy logger.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`resampleBarFeed`(*frequency*, *callback*)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Builds a resampled barfeed that groups bars by a certain frequency.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: '**frequency** – The grouping frequency in seconds. Must be > 0.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**callback** – A function similar to onBars that will be called when new bars
    are available.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | [`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed"). |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
- en: '*class* `pyalgotrade.strategy.``BacktestingStrategy`(*barFeed*, *cash_or_brk=1000000*)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: [`pyalgotrade.strategy.BaseStrategy`](#pyalgotrade.strategy.BaseStrategy
    "pyalgotrade.strategy.BaseStrategy")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Base class for backtesting strategies.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
- en: '**barFeed** ([`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed").) – The bar feed to use to backtest the strategy.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cash_or_brk** (int/float or [`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker").) – The starting capital or a broker instance.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: This is a base class and should not be used directly.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`setDebugMode`(*debugOn*)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable/disable debug level messages in the strategy and backtesting broker.
    This is enabled by default.  ## Position'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.strategy.position.``Position`(*strategy*, *entryOrder*,
    *goodTillCanceled*, *allOrNone*)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `object`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Base class for positions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Positions are higher level abstractions for placing orders. They are escentially
    a pair of entry-exit orders and allow to track returns and PnL easier that placing
    orders manually.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '**strategy** ([`pyalgotrade.strategy.BaseStrategy`](#pyalgotrade.strategy.BaseStrategy
    "pyalgotrade.strategy.BaseStrategy").) – The strategy that this position belongs
    to.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**entryOrder** ([`pyalgotrade.broker.Order`](broker.html#pyalgotrade.broker.Order
    "pyalgotrade.broker.Order")) – The order used to enter the position.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the entry order should be set as
    good till canceled.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allOrNone** (*boolean.*) – True if the orders should be completely filled
    or not at all.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: This is a base class and should not be used directly.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`getShares`()'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of shares. This will be a possitive number for a long position,
    and a negative number for a short position.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: If the entry order was not filled, or if the position is closed, then the number
    of shares will be 0.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`entryActive`()'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the entry order is active.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '`entryFilled`()'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the entry order was filled.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`exitActive`()'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the exit order is active.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`exitFilled`()'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the exit order was filled.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '`getEntryOrder`()'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Returns the [`pyalgotrade.broker.Order`](broker.html#pyalgotrade.broker.Order
    "pyalgotrade.broker.Order") used to enter the position.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`getExitOrder`()'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Returns the [`pyalgotrade.broker.Order`](broker.html#pyalgotrade.broker.Order
    "pyalgotrade.broker.Order") used to exit the position. If this position hasn’t
    been closed yet, None is returned.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`getInstrument`()'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Returns the instrument used for this position.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`getReturn`(*includeCommissions=True*)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Calculates cumulative percentage returns up to this point. If the position is
    not closed, these will be unrealized returns.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`getPnL`(*includeCommissions=True*)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Calculates PnL up to this point. If the position is not closed, these will be
    unrealized PnL.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`cancelEntry`()'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Cancels the entry order if its active.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`cancelExit`()'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Cancels the exit order if its active.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '`exitMarket`(*goodTillCanceled=None*)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Submits a market order to close this position.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **goodTillCanceled** (*boolean.*) – True if the exit order
    is good till canceled. If False then the order gets automatically canceled when
    the session closes. If None, then it will match the entry order. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: If the position is closed (entry canceled or exit filled) this won’t have any
    effect.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the exit order for this position is pending, an exception will be raised.
    The exit order should be canceled first.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the entry order is active, cancellation will be requested.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exitLimit`(*limitPrice*, *goodTillCanceled=None*)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Submits a limit order to close this position.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '**limitPrice** (*float.*) – The limit price.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the exit order is good till canceled.
    If False then the order gets automatically canceled when the session closes. If
    None, then it will match the entry order.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: If the position is closed (entry canceled or exit filled) this won’t have any
    effect.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the exit order for this position is pending, an exception will be raised.
    The exit order should be canceled first.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the entry order is active, cancellation will be requested.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exitStop`(*stopPrice*, *goodTillCanceled=None*)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Submits a stop order to close this position.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: '**stopPrice** (*float.*) – The stop price.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the exit order is good till canceled.
    If False then the order gets automatically canceled when the session closes. If
    None, then it will match the entry order.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: If the position is closed (entry canceled or exit filled) this won’t have any
    effect.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the exit order for this position is pending, an exception will be raised.
    The exit order should be canceled first.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the entry order is active, cancellation will be requested.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exitStopLimit`(*stopPrice*, *limitPrice*, *goodTillCanceled=None*)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Submits a stop limit order to close this position.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
- en: '**stopPrice** (*float.*) – The stop price.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limitPrice** (*float.*) – The limit price.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**goodTillCanceled** (*boolean.*) – True if the exit order is good till canceled.
    If False then the order gets automatically canceled when the session closes. If
    None, then it will match the entry order.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: If the position is closed (entry canceled or exit filled) this won’t have any
    effect.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the exit order for this position is pending, an exception will be raised.
    The exit order should be canceled first.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the entry order is active, cancellation will be requested.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isOpen`()'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the position is open.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '`getAge`()'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Returns the duration in open state.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | datetime.timedelta. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: If the position is open, then the difference between the entry datetime and
    the datetime of the last bar is returned.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the position is closed, then the difference between the entry datetime and
    the exit datetime is returned.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Table Of Contents](index.html)'
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[strategy – Basic strategy classes](#)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Strategy](#module-pyalgotrade.strategy)'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Position](#module-pyalgotrade.strategy.position)'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous topic
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[broker – Order management classes](broker.html "previous chapter")'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Next topic
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[stratanalyzer – Strategy analyzers](stratanalyzer.html "next chapter")'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: This Page
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Show Source](_sources/strategy.txt)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick search
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enter search terms or a module, class or function name.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[index](genindex.html "General Index")'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[modules](py-modindex.html "Python Module Index") |'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[next](stratanalyzer.html "stratanalyzer – Strategy analyzers") |'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[previous](broker.html "broker – Order management classes") |'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyAlgoTrade 0.20 documentation](index.html) »'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation for the code](code.html) »'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
