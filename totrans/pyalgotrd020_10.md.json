["```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import cross\n\nclass SMACrossOver(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, smaPeriod):\n        super(SMACrossOver, self).__init__(feed)\n        self.__instrument = instrument\n        self.__position = None\n        # We'll use adjusted close values instead of regular close values.\n        self.setUseAdjustedValues(True)\n        self.__prices = feed[instrument].getPriceDataSeries()\n        self.__sma = ma.SMA(self.__prices, smaPeriod)\n\n    def getSMA(self):\n        return self.__sma\n\n    def onEnterCanceled(self, position):\n        self.__position = None\n\n    def onExitOk(self, position):\n        self.__position = None\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        self.__position.exitMarket()\n\n    def onBars(self, bars):\n        # If a position was not opened, check if we should enter a long position.\n        if self.__position is None:\n            if cross.cross_above(self.__prices, self.__sma) > 0:\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                # Enter a buy market order. The order is good till canceled.\n                self.__position = self.enterLong(self.__instrument, shares, True)\n        # Check if we have to exit the position.\n        elif not self.__position.exitActive() and cross.cross_below(self.__prices, self.__sma) > 0:\n            self.__position.exitMarket() \n```", "```py\nfrom __future__ import print_function\n\nfrom pyalgotrade.barfeed import yahoofeed\nfrom pyalgotrade.stratanalyzer import returns\nfrom pyalgotrade.stratanalyzer import sharpe\nfrom pyalgotrade.stratanalyzer import drawdown\nfrom pyalgotrade.stratanalyzer import trades\n\nfrom . import sma_crossover\n\n# Load the bars. This file was manually downloaded from Yahoo Finance.\nfeed = yahoofeed.Feed()\nfeed.addBarsFromCSV(\"orcl\", \"orcl-2000-yahoofinance.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = sma_crossover.SMACrossOver(feed, \"orcl\", 20)\n\n# Attach different analyzers to a strategy before executing it.\nretAnalyzer = returns.Returns()\nmyStrategy.attachAnalyzer(retAnalyzer)\nsharpeRatioAnalyzer = sharpe.SharpeRatio()\nmyStrategy.attachAnalyzer(sharpeRatioAnalyzer)\ndrawDownAnalyzer = drawdown.DrawDown()\nmyStrategy.attachAnalyzer(drawDownAnalyzer)\ntradesAnalyzer = trades.Trades()\nmyStrategy.attachAnalyzer(tradesAnalyzer)\n\n# Run the strategy.\nmyStrategy.run()\n\nprint(\"Final portfolio value: $%.2f\" % myStrategy.getResult())\nprint(\"Cumulative returns: %.2f  %%\" % (retAnalyzer.getCumulativeReturns()[-1] * 100))\nprint(\"Sharpe ratio: %.2f\" % (sharpeRatioAnalyzer.getSharpeRatio(0.05)))\nprint(\"Max. drawdown: %.2f  %%\" % (drawDownAnalyzer.getMaxDrawDown() * 100))\nprint(\"Longest drawdown duration: %s\" % (drawDownAnalyzer.getLongestDrawDownDuration()))\n\nprint(\"\")\nprint(\"Total trades: %d\" % (tradesAnalyzer.getCount()))\nif tradesAnalyzer.getCount() > 0:\n    profits = tradesAnalyzer.getAll()\n    print(\"Avg. profit: $%2.f\" % (profits.mean()))\n    print(\"Profits std. dev.: $%2.f\" % (profits.std()))\n    print(\"Max. profit: $%2.f\" % (profits.max()))\n    print(\"Min. profit: $%2.f\" % (profits.min()))\n    returns = tradesAnalyzer.getAllReturns()\n    print(\"Avg. return: %2.f %%\" % (returns.mean() * 100))\n    print(\"Returns std. dev.: %2.f %%\" % (returns.std() * 100))\n    print(\"Max. return: %2.f %%\" % (returns.max() * 100))\n    print(\"Min. return: %2.f %%\" % (returns.min() * 100))\n\nprint(\"\")\nprint(\"Profitable trades: %d\" % (tradesAnalyzer.getProfitableCount()))\nif tradesAnalyzer.getProfitableCount() > 0:\n    profits = tradesAnalyzer.getProfits()\n    print(\"Avg. profit: $%2.f\" % (profits.mean()))\n    print(\"Profits std. dev.: $%2.f\" % (profits.std()))\n    print(\"Max. profit: $%2.f\" % (profits.max()))\n    print(\"Min. profit: $%2.f\" % (profits.min()))\n    returns = tradesAnalyzer.getPositiveReturns()\n    print(\"Avg. return: %2.f %%\" % (returns.mean() * 100))\n    print(\"Returns std. dev.: %2.f %%\" % (returns.std() * 100))\n    print(\"Max. return: %2.f %%\" % (returns.max() * 100))\n    print(\"Min. return: %2.f %%\" % (returns.min() * 100))\n\nprint(\"\")\nprint(\"Unprofitable trades: %d\" % (tradesAnalyzer.getUnprofitableCount()))\nif tradesAnalyzer.getUnprofitableCount() > 0:\n    losses = tradesAnalyzer.getLosses()\n    print(\"Avg. loss: $%2.f\" % (losses.mean()))\n    print(\"Losses std. dev.: $%2.f\" % (losses.std()))\n    print(\"Max. loss: $%2.f\" % (losses.min()))\n    print(\"Min. loss: $%2.f\" % (losses.max()))\n    returns = tradesAnalyzer.getNegativeReturns()\n    print(\"Avg. return: %2.f %%\" % (returns.mean() * 100))\n    print(\"Returns std. dev.: %2.f %%\" % (returns.std() * 100))\n    print(\"Max. return: %2.f %%\" % (returns.max() * 100))\n    print(\"Min. return: %2.f %%\" % (returns.min() * 100)) \n```", "```py\nFinal portfolio value: $1295462.60\nCumulative returns: 29.55 %\nSharpe ratio: 0.70\nMax. drawdown: 24.58 %\nLongest drawdown duration: 277 days, 0:00:00\n\nTotal trades: 13\nAvg. profit: $14391\nProfits std. dev.: $127520\nMax. profit: $420782\nMin. profit: $-89317\nAvg. return:  2 %\nReturns std. dev.: 13 %\nMax. return: 46 %\nMin. return: -7 %\n\nProfitable trades: 3\nAvg. profit: $196972\nProfits std. dev.: $158985\nMax. profit: $420782\nMin. profit: $66466\nAvg. return: 21 %\nReturns std. dev.: 18 %\nMax. return: 46 %\nMin. return:  6 %\n\nUnprofitable trades: 10\nAvg. loss: $-40383\nLosses std. dev.: $23579\nMax. loss: $-89317\nMin. loss: $-4702\nAvg. return: -3 %\nReturns std. dev.:  2 %\nMax. return: -0 %\nMin. return: -7 %\n\n```"]