["```py\nfrom __future__ import print_function\n\nfrom pyalgotrade import eventprofiler\nfrom pyalgotrade.technical import stats\nfrom pyalgotrade.technical import roc\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.tools import quandl\n\n# Event inspired on an example from Ernie Chan's book:\n# 'Algorithmic Trading: Winning Strategies and Their Rationale'\n\nclass BuyOnGap(eventprofiler.Predicate):\n    def __init__(self, feed):\n        super(BuyOnGap, self).__init__()\n\n        stdDevPeriod = 90\n        smaPeriod = 20\n        self.__returns = {}\n        self.__stdDev = {}\n        self.__ma = {}\n        for instrument in feed.getRegisteredInstruments():\n            priceDS = feed[instrument].getAdjCloseDataSeries()\n            # Returns over the adjusted close values.\n            self.__returns[instrument] = roc.RateOfChange(priceDS, 1)\n            # StdDev over those returns.\n            self.__stdDev[instrument] = stats.StdDev(self.__returns[instrument], stdDevPeriod)\n            # MA over the adjusted close values.\n            self.__ma[instrument] = ma.SMA(priceDS, smaPeriod)\n\n    def __gappedDown(self, instrument, bards):\n        ret = False\n        if self.__stdDev[instrument][-1] is not None:\n            prevBar = bards[-2]\n            currBar = bards[-1]\n            low2OpenRet = (currBar.getOpen(True) - prevBar.getLow(True)) / float(prevBar.getLow(True))\n            if low2OpenRet < (self.__returns[instrument][-1] - self.__stdDev[instrument][-1]):\n                ret = True\n        return ret\n\n    def __aboveSMA(self, instrument, bards):\n        ret = False\n        if self.__ma[instrument][-1] is not None and bards[-1].getOpen(True) > self.__ma[instrument][-1]:\n            ret = True\n        return ret\n\n    def eventOccurred(self, instrument, bards):\n        ret = False\n        if self.__gappedDown(instrument, bards) and self.__aboveSMA(instrument, bards):\n            ret = True\n        return ret\n\ndef main(plot):\n    instruments = [\"IBM\", \"AES\", \"AIG\"]\n    feed = quandl.build_feed(\"WIKI\", instruments, 2008, 2009, \".\")\n\n    predicate = BuyOnGap(feed)\n    eventProfiler = eventprofiler.Profiler(predicate, 5, 5)\n    eventProfiler.run(feed, True)\n\n    results = eventProfiler.getResults()\n    print(\"%d events found\" % (results.getEventCount()))\n    if plot:\n        eventprofiler.plot(results)\n\nif __name__ == \"__main__\":\n    main(True) \n```", "```py\n2017-07-22 00:26:06,574 quandl [INFO] Downloading IBM 2008 to ./WIKI-IBM-2008-quandl.csv\n2017-07-22 00:26:08,299 quandl [INFO] Downloading AES 2008 to ./WIKI-AES-2008-quandl.csv\n2017-07-22 00:26:09,849 quandl [INFO] Downloading AIG 2008 to ./WIKI-AIG-2008-quandl.csv\n2017-07-22 00:26:11,513 quandl [INFO] Downloading IBM 2009 to ./WIKI-IBM-2009-quandl.csv\n2017-07-22 00:26:13,128 quandl [INFO] Downloading AES 2009 to ./WIKI-AES-2009-quandl.csv\n2017-07-22 00:26:14,626 quandl [INFO] Downloading AIG 2009 to ./WIKI-AIG-2009-quandl.csv\n15 events found\n\n```"]