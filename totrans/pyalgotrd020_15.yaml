- en: Event profiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/eventprofiler.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/eventprofiler.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Inspired in [QSTK](http://wiki.quantsoftware.org/index.php?title=QSTK_Tutorial_9),
    the **eventprofiler** module is a tool to analyze, statistically, how events affect
    future equity prices. The event profiler scans over historical data for a specified
    event and then calculates the impact of that event on the equity prices in the
    past and the future over a certain lookback period.
  prefs: []
  type: TYPE_NORMAL
- en: '**The goal of this tool is to help you quickly validate an idea, before moving
    forward with the backtesting process.**'
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.eventprofiler.``Results`(*eventsDict*, *lookBack*, *lookForward*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `object`'
  prefs: []
  type: TYPE_NORMAL
- en: Results from the profiler.
  prefs: []
  type: TYPE_NORMAL
- en: '`getEventCount`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of events occurred. Events that are on the boundary are skipped.
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.eventprofiler.``Predicate`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `object`'
  prefs: []
  type: TYPE_NORMAL
- en: Base class for event identification. You should subclass this to implement the
    event identification logic.
  prefs: []
  type: TYPE_NORMAL
- en: '`eventOccurred`(*instrument*, *bards*)'
  prefs: []
  type: TYPE_NORMAL
- en: Override (**mandatory**) to determine if an event took place in the last bar
    (bards[-1]).
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  prefs: []
  type: TYPE_TB
- en: '**instrument** (*string.*) – Instrument identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bards** ([`pyalgotrade.dataseries.bards.BarDataSeries`](dataseries.html#pyalgotrade.dataseries.bards.BarDataSeries
    "pyalgotrade.dataseries.bards.BarDataSeries").) – The BarDataSeries for the given
    instrument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | boolean. |'
  prefs: []
  type: TYPE_TB
- en: '*class* `pyalgotrade.eventprofiler.``Profiler`(*predicate*, *lookBack*, *lookForward*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `object`'
  prefs: []
  type: TYPE_NORMAL
- en: This class is responsible for scanning over historical data and analyzing returns
    before and after the events.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  prefs: []
  type: TYPE_TB
- en: '**predicate** ([`Predicate`](#pyalgotrade.eventprofiler.Predicate "pyalgotrade.eventprofiler.Predicate").)
    – A [`Predicate`](#pyalgotrade.eventprofiler.Predicate "pyalgotrade.eventprofiler.Predicate")
    subclass responsible for identifying events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lookBack** (*int.*) – The number of bars before the event to analyze. Must
    be > 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lookForward** (*int.*) – The number of bars after the event to analyze. Must
    be > 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`getResults`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the results of the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '| Return type: | [`Results`](#pyalgotrade.eventprofiler.Results "pyalgotrade.eventprofiler.Results").
    |'
  prefs: []
  type: TYPE_TB
- en: '`run`(*feed*, *useAdjustedCloseForReturns=True*)'
  prefs: []
  type: TYPE_NORMAL
- en: Runs the analysis using the bars supplied by the feed.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  prefs: []
  type: TYPE_TB
- en: '**barFeed** (`pyalgotrade.barfeed.BarFeed`.) – The bar feed to use to run the
    analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**useAdjustedCloseForReturns** (*boolean.*) – True if adjusted close values
    should be used to calculate returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`pyalgotrade.eventprofiler.``plot`(*profilerResults*)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the result of the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **profilerResults** ([`Results`](#pyalgotrade.eventprofiler.Results
    "pyalgotrade.eventprofiler.Results").) – The result of the analysis |'
  prefs: []
  type: TYPE_TB
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following example is inspired on the ‘Buy-on-Gap Model’ from Ernie Chan’s
    book: ‘Algorithmic Trading: Winning Strategies and Their Rationale’:'
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to select a stock near the market open whose returns from their
    previous day’s lows to today’s open are lower that one standard deviation. The
    standard deviation is computed using the daily close-to-close returns of the last
    90 days. These are the stocks that “gapped down”.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: This is narrowed down by requiring the open price to be higher than the 20-day
    moving average of the closing price.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is doing 4 things:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a [`Predicate`](#pyalgotrade.eventprofiler.Predicate "pyalgotrade.eventprofiler.Predicate")
    that implements the ‘Buy-on-Gap Model’ event identification.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading bars for some stocks.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the analysis.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Plotting the results.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/eventstudy.png](../Images/a03a792a6355509ff13bc5bf73fd3938.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that **Cummulative returns are normalized to the time of the event**.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table Of Contents](index.html)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Event profiler](#)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example](#example)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Tools](tools.html "previous chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: Next topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Bitcoin](bitcoin.html "next chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: This Page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Show Source](_sources/eventprofiler.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick search
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enter search terms or a module, class or function name.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[index](genindex.html "General Index")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[modules](py-modindex.html "Python Module Index") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[next](bitcoin.html "Bitcoin") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[previous](tools.html "Tools") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyAlgoTrade 0.20 documentation](index.html) »'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
