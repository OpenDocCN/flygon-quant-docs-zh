- en: bitstamp – Bitstamp reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This package has classes for the events emitted by Bitstamp’s streaming service.
    Check [https://www.bitstamp.net/websocket/](https://www.bitstamp.net/websocket/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.wsclient.``OrderBookUpdate`(*dateTime*, *eventDict*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `pyalgotrade.websocket.pusher.Event`'
  prefs: []
  type: TYPE_NORMAL
- en: An order book update event.
  prefs: []
  type: TYPE_NORMAL
- en: '`getAskPrices`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list with the top 20 ask prices.
  prefs: []
  type: TYPE_NORMAL
- en: '`getAskVolumes`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list with the top 20 ask volumes.
  prefs: []
  type: TYPE_NORMAL
- en: '`getBidPrices`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list with the top 20 bid prices.
  prefs: []
  type: TYPE_NORMAL
- en: '`getBidVolumes`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list with the top 20 bid volumes.
  prefs: []
  type: TYPE_NORMAL
- en: '`getDateTime`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the `datetime.datetime` when this event was received.
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.wsclient.``Trade`(*dateTime*, *eventDict*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `pyalgotrade.websocket.pusher.Event`'
  prefs: []
  type: TYPE_NORMAL
- en: A trade event.
  prefs: []
  type: TYPE_NORMAL
- en: '`getAmount`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the trade amount.
  prefs: []
  type: TYPE_NORMAL
- en: '`getDateTime`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the `datetime.datetime` when this event was received.
  prefs: []
  type: TYPE_NORMAL
- en: '`getId`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the trade id.
  prefs: []
  type: TYPE_NORMAL
- en: '`getPrice`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the trade price.
  prefs: []
  type: TYPE_NORMAL
- en: '`isBuy`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the trade was a buy.
  prefs: []
  type: TYPE_NORMAL
- en: '`isSell`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the trade was a sell.
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.wsclient.``WebSocketClient`(*queue*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `pyalgotrade.websocket.pusher.WebSocketClient`'
  prefs: []
  type: TYPE_NORMAL
- en: This websocket client class is designed to be running in a separate thread and
    for that reason events are pushed into a queue.
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.wsclient.``WebSocketClientThread`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `pyalgotrade.websocket.client.WebSocketClientThreadBase`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This thread class is responsible for running a WebSocketClient.  ## Feeds'
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.barfeed.``LiveTradeFeed`(*maxLen=None*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: [`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed")'
  prefs: []
  type: TYPE_NORMAL
- en: A real-time BarFeed that builds bars from live trades.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: | **maxLen** (*int.*) – The maximum number of values that the
    [`pyalgotrade.dataseries.bards.BarDataSeries`](dataseries.html#pyalgotrade.dataseries.bards.BarDataSeries
    "pyalgotrade.dataseries.bards.BarDataSeries") will hold. Once a bounded length
    is full, when new items are added, a corresponding number of items are discarded
    from the opposite end. If None then dataseries.DEFAULT_MAX_LEN is used. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that a Bar will be created for every trade, so open, high, low and close
    values will all be the same.
  prefs: []
  type: TYPE_NORMAL
- en: '`getOrderBookUpdateEvent`()'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the event that will be emitted when the orderbook gets updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eventh handlers should receive one parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`pyalgotrade.bitstamp.wsclient.OrderBookUpdate`](#pyalgotrade.bitstamp.wsclient.OrderBookUpdate
    "pyalgotrade.bitstamp.wsclient.OrderBookUpdate") instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Return type: | `pyalgotrade.observer.Event`. |  ## Brokers'
  prefs: []
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.broker.``PaperTradingBroker`(*cash*, *barFeed*,
    *fee=0.0025*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: `pyalgotrade.bitstamp.broker.BacktestingBroker`'
  prefs: []
  type: TYPE_NORMAL
- en: A Bitstamp paper trading broker.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  prefs: []
  type: TYPE_TB
- en: '**cash** (*int/float.*) – The initial amount of cash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**barFeed** (`pyalgotrade.barfeed.BarFeed`) – The bar feed that will provide
    the bars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fee** (*float.*) – The fee percentage for each order. Defaults to 0.5%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Only limit orders are supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orders are automatically set as **goodTillCanceled=True** and **allOrNone=False**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BUY_TO_COVER orders are mapped to BUY orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SELL_SHORT orders are mapped to SELL orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*class* `pyalgotrade.bitstamp.broker.``LiveBroker`(*clientId*, *key*, *secret*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bases: [`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker")'
  prefs: []
  type: TYPE_NORMAL
- en: A Bitstamp live broker.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters: |'
  prefs: []
  type: TYPE_TB
- en: '**clientId** (*string.*) – Client id.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**key** (*string.*) – API key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**secret** (*string.*) – API secret.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Only limit orders are supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orders are automatically set as **goodTillCanceled=True** and **allOrNone=False**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BUY_TO_COVER orders are mapped to BUY orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SELL_SHORT orders are mapped to SELL orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'API access permissions should include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account balance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Open orders
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy limit order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User transactions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancel order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sell limit order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshAccountBalance`()'
  prefs: []
  type: TYPE_NORMAL
- en: Refreshes cash and BTC balance.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table Of Contents](index.html)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[bitstamp – Bitstamp reference](#)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[WebSocket](#websocket)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Feeds](#module-pyalgotrade.bitstamp.barfeed)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Brokers](#module-pyalgotrade.bitstamp.broker)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Bitstamp support](bitstamp.html "previous chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: Next topic
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Bitstamp Example](bitstamp_example.html "next chapter")'
  prefs: []
  type: TYPE_NORMAL
- en: This Page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Show Source](_sources/bitstamp_ref.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick search
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enter search terms or a module, class or function name.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[index](genindex.html "General Index")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[modules](py-modindex.html "Python Module Index") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[next](bitstamp_example.html "Bitstamp Example") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[previous](bitstamp.html "Bitstamp support") |'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyAlgoTrade 0.20 documentation](index.html) »'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitcoin](bitcoin.html) »'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitstamp support](bitstamp.html) »'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
