- en: bitstamp – Bitstamp reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bitstamp – Bitstamp参考
- en: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html](https://gbeced.github.io/pyalgotrade/docs/v0.20/html/bitstamp_ref.html)
- en: WebSocket
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebSocket
- en: This package has classes for the events emitted by Bitstamp’s streaming service.
    Check [https://www.bitstamp.net/websocket/](https://www.bitstamp.net/websocket/)
    for more information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此包包含由Bitstamp的流媒体服务发出的事件的类。有关更多信息，请查看[https://www.bitstamp.net/websocket/](https://www.bitstamp.net/websocket/)。
- en: '*class* `pyalgotrade.bitstamp.wsclient.``OrderBookUpdate`(*dateTime*, *eventDict*)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.wsclient.``OrderBookUpdate`(*dateTime*, *eventDict*)'
- en: 'Bases: `pyalgotrade.websocket.pusher.Event`'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`pyalgotrade.websocket.pusher.Event`
- en: An order book update event.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个订单簿更新事件。
- en: '`getAskPrices`()'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAskPrices`()'
- en: Returns a list with the top 20 ask prices.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含前20个卖价的列表。
- en: '`getAskVolumes`()'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAskVolumes`() '
- en: Returns a list with the top 20 ask volumes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含前20个卖量的列表。
- en: '`getBidPrices`()'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`getBidPrices`()'
- en: Returns a list with the top 20 bid prices.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含前20个买价的列表。
- en: '`getBidVolumes`()'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`getBidVolumes`()'
- en: Returns a list with the top 20 bid volumes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含前20个买量的列表。
- en: '`getDateTime`()'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`getDateTime`()'
- en: Returns the `datetime.datetime` when this event was received.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此事件被接收的`datetime.datetime`。
- en: '*class* `pyalgotrade.bitstamp.wsclient.``Trade`(*dateTime*, *eventDict*)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.wsclient.``Trade`(*dateTime*, *eventDict*)'
- en: 'Bases: `pyalgotrade.websocket.pusher.Event`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`pyalgotrade.websocket.pusher.Event`
- en: A trade event.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个交易事件。
- en: '`getAmount`()'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAmount`()'
- en: Returns the trade amount.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 返回交易金额。
- en: '`getDateTime`()'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`getDateTime`()'
- en: Returns the `datetime.datetime` when this event was received.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此事件被接收的`datetime.datetime`。
- en: '`getId`()'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`getId`()'
- en: Returns the trade id.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 返回交易ID。
- en: '`getPrice`()'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPrice`()'
- en: Returns the trade price.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 返回交易价格。
- en: '`isBuy`()'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`isBuy`()'
- en: Returns True if the trade was a buy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交易是买入，则返回True。
- en: '`isSell`()'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`isSell`()'
- en: Returns True if the trade was a sell.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交易是卖出，则返回True。
- en: '*class* `pyalgotrade.bitstamp.wsclient.``WebSocketClient`(*queue*)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.wsclient.``WebSocketClient`(*queue*)'
- en: 'Bases: `pyalgotrade.websocket.pusher.WebSocketClient`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`pyalgotrade.websocket.pusher.WebSocketClient`
- en: This websocket client class is designed to be running in a separate thread and
    for that reason events are pushed into a queue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此websocket客户端类设计为在单独的线程中运行，因此事件被推送到队列中。
- en: '*class* `pyalgotrade.bitstamp.wsclient.``WebSocketClientThread`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.wsclient.``WebSocketClientThread`'
- en: 'Bases: `pyalgotrade.websocket.client.WebSocketClientThreadBase`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`pyalgotrade.websocket.client.WebSocketClientThreadBase`
- en: 'This thread class is responsible for running a WebSocketClient.  ## Feeds'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '此线程类负责运行WebSocketClient。  ## 数据源'
- en: '*class* `pyalgotrade.bitstamp.barfeed.``LiveTradeFeed`(*maxLen=None*)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.barfeed.``LiveTradeFeed`(*maxLen=None*)'
- en: 'Bases: [`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`pyalgotrade.barfeed.BaseBarFeed`](barfeed.html#pyalgotrade.barfeed.BaseBarFeed
    "pyalgotrade.barfeed.BaseBarFeed")
- en: A real-time BarFeed that builds bars from live trades.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从实时交易构建条形图的实时BarFeed。
- en: '| Parameters: | **maxLen** (*int.*) – The maximum number of values that the
    [`pyalgotrade.dataseries.bards.BarDataSeries`](dataseries.html#pyalgotrade.dataseries.bards.BarDataSeries
    "pyalgotrade.dataseries.bards.BarDataSeries") will hold. Once a bounded length
    is full, when new items are added, a corresponding number of items are discarded
    from the opposite end. If None then dataseries.DEFAULT_MAX_LEN is used. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 参数： | **maxLen** (*int.*) – [`pyalgotrade.dataseries.bards.BarDataSeries`](dataseries.html#pyalgotrade.dataseries.bards.BarDataSeries
    "pyalgotrade.dataseries.bards.BarDataSeries")将保存的值的最大数量。一旦有界长度已满，当添加新项时，相应数量的项将从相反的一端丢弃。如果为None，则使用dataseries.DEFAULT_MAX_LEN。'
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that a Bar will be created for every trade, so open, high, low and close
    values will all be the same.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每笔交易都将创建一个Bar，因此开盘价、最高价、最低价和收盘价将全部相同。
- en: '`getOrderBookUpdateEvent`()'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`getOrderBookUpdateEvent`()'
- en: Returns the event that will be emitted when the orderbook gets updated.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当订单簿更新时将发出的事件。
- en: 'Eventh handlers should receive one parameter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序应接收一个参数：
- en: A [`pyalgotrade.bitstamp.wsclient.OrderBookUpdate`](#pyalgotrade.bitstamp.wsclient.OrderBookUpdate
    "pyalgotrade.bitstamp.wsclient.OrderBookUpdate") instance.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个[`pyalgotrade.bitstamp.wsclient.OrderBookUpdate`](#pyalgotrade.bitstamp.wsclient.OrderBookUpdate
    "pyalgotrade.bitstamp.wsclient.OrderBookUpdate")实例。
- en: '| Return type: | `pyalgotrade.observer.Event`. |  ## Brokers'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| 返回类型： | `pyalgotrade.observer.Event`。 |  ## 经纪商'
- en: '*class* `pyalgotrade.bitstamp.broker.``PaperTradingBroker`(*cash*, *barFeed*,
    *fee=0.0025*)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*类* `pyalgotrade.bitstamp.broker.``PaperTradingBroker`(*cash*, *barFeed*, *fee=0.0025*)'
- en: 'Bases: `pyalgotrade.bitstamp.broker.BacktestingBroker`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bases: `pyalgotrade.bitstamp.broker.BacktestingBroker`'
- en: A Bitstamp paper trading broker.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Bitstamp模拟交易经纪人。
- en: '| Parameters: |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 参数: |'
- en: '**cash** (*int/float.*) – The initial amount of cash.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cash** (*int/float.*) – 初始现金金额。'
- en: '**barFeed** (`pyalgotrade.barfeed.BarFeed`) – The bar feed that will provide
    the bars.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**barFeed** (`pyalgotrade.barfeed.BarFeed`) – 提供K线图的数据源。'
- en: '**fee** (*float.*) – The fee percentage for each order. Defaults to 0.5%.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fee** (*float.*) – 每笔订单的手续费百分比。默认为0.5%。'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Only limit orders are supported.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持限价订单。
- en: Orders are automatically set as **goodTillCanceled=True** and **allOrNone=False**.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单自动设置为**goodTillCanceled=True**和**allOrNone=False**。
- en: BUY_TO_COVER orders are mapped to BUY orders.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BUY_TO_COVER订单映射到BUY订单。
- en: SELL_SHORT orders are mapped to SELL orders.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELL_SHORT订单映射到SELL订单。
- en: '*class* `pyalgotrade.bitstamp.broker.``LiveBroker`(*clientId*, *key*, *secret*)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*class* `pyalgotrade.bitstamp.broker.``LiveBroker`(*clientId*, *key*, *secret*)'
- en: 'Bases: [`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bases: [`pyalgotrade.broker.Broker`](broker.html#pyalgotrade.broker.Broker
    "pyalgotrade.broker.Broker")'
- en: A Bitstamp live broker.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Bitstamp实时交易经纪人。
- en: '| Parameters: |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 参数: |'
- en: '**clientId** (*string.*) – Client id.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**clientId** (*string.*) – 客户端ID。'
- en: '**key** (*string.*) – API key.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**key** (*string.*) – API密钥。'
- en: '**secret** (*string.*) – API secret.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**secret** (*string.*) – API密钥。'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Only limit orders are supported.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持限价订单。
- en: Orders are automatically set as **goodTillCanceled=True** and **allOrNone=False**.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单自动设置为**goodTillCanceled=True**和**allOrNone=False**。
- en: BUY_TO_COVER orders are mapped to BUY orders.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BUY_TO_COVER订单映射到BUY订单。
- en: SELL_SHORT orders are mapped to SELL orders.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELL_SHORT订单映射到SELL订单。
- en: 'API access permissions should include:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'API访问权限应包括:'
- en: Account balance
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户余额
- en: Open orders
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂单
- en: Buy limit order
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 买入限价单
- en: User transactions
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户交易
- en: Cancel order
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消订单
- en: Sell limit order
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卖出限价单
- en: '`refreshAccountBalance`()'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`refreshAccountBalance`()'
- en: Refreshes cash and BTC balance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新现金和BTC余额。
- en: '[Table Of Contents](index.html)'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[目录](index.html)'
- en: '[bitstamp – Bitstamp reference](#)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bitstamp – Bitstamp 参考](#)'
- en: '[WebSocket](#websocket)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[WebSocket](#websocket)'
- en: '[Feeds](#module-pyalgotrade.bitstamp.barfeed)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据源](#module-pyalgotrade.bitstamp.barfeed)'
- en: '[Brokers](#module-pyalgotrade.bitstamp.broker)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[经纪人](#module-pyalgotrade.bitstamp.broker)'
- en: Previous topic
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 前一个主题
- en: '[Bitstamp support](bitstamp.html "previous chapter")'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bitstamp 支持](bitstamp.html "上一章")'
- en: Next topic
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 下一个主题
- en: '[Bitstamp Example](bitstamp_example.html "next chapter")'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bitstamp 示例](bitstamp_example.html "下一章")'
- en: This Page
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本页
- en: '[Show Source](_sources/bitstamp_ref.txt)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[显示源代码](_sources/bitstamp_ref.txt)'
- en: Quick search
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速搜索
- en: Enter search terms or a module, class or function name.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输入搜索词或模块、类或函数名。
- en: Navigation
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: '[index](genindex.html "General Index")'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](genindex.html "总目录")'
- en: '[modules](py-modindex.html "Python Module Index") |'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模块](py-modindex.html "Python 模块索引") |'
- en: '[next](bitstamp_example.html "Bitstamp Example") |'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[下一页](bitstamp_example.html "Bitstamp 示例") |'
- en: '[previous](bitstamp.html "Bitstamp support") |'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[上一页](bitstamp.html "Bitstamp 支持") |'
- en: '[PyAlgoTrade 0.20 documentation](index.html) »'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyAlgoTrade 0.20 文档](index.html) »'
- en: '[Bitcoin](bitcoin.html) »'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比特币](bitcoin.html) »'
- en: '[Bitstamp support](bitstamp.html) »'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bitstamp 支持](bitstamp.html) »'
