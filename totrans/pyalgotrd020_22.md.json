["```py\nfrom pyalgotrade.bitcoincharts import barfeed\nfrom pyalgotrade.tools import resample\nfrom pyalgotrade import bar\n\nimport datetime\n\ndef main():\n    barFeed = barfeed.CSVTradeFeed()\n    barFeed.addBarsFromCSV(\"bitstampUSD.csv\", fromDateTime=datetime.datetime(2014, 1, 1))\n    resample.resample_to_csv(barFeed, bar.Frequency.MINUTE*30, \"30min-bitstampUSD.csv\")\n\nif __name__ == \"__main__\":\n    main() \n```", "```py\nDate Time,Open,High,Low,Close,Volume,Adj Close\n2014-01-01 00:00:00,732.0,738.25,729.01,734.81,266.17955488,\n2014-01-01 00:30:00,734.81,739.9,734.47,739.02,308.96802502,\n2014-01-01 01:00:00,739.02,739.97,737.65,738.11,65.66924473,\n2014-01-01 01:30:00,738.0,742.0,737.65,741.89,710.27165024,\n2014-01-01 02:00:00,741.89,757.99,741.89,752.23,1085.13335011,\n2014-01-01 02:30:00,752.23,755.0,747.0,747.2,272.03949342,\n2014-01-01 04:00:00,744.98,748.02,744.98,747.19,104.65989075,\n.\n.\n```", "```py\nfrom pyalgotrade import bar\nfrom pyalgotrade import strategy\nfrom pyalgotrade import plotter\nfrom pyalgotrade.technical import vwap\nfrom pyalgotrade.barfeed import csvfeed\nfrom pyalgotrade.bitstamp import broker\nfrom pyalgotrade import broker as basebroker\n\nclass VWAPMomentum(strategy.BacktestingStrategy):\n    MIN_TRADE = 5\n\n    def __init__(self, feed, brk, instrument, vwapWindowSize, buyThreshold, sellThreshold):\n        super(VWAPMomentum, self).__init__(feed, brk)\n        self.__instrument = instrument\n        self.__vwap = vwap.VWAP(feed[instrument], vwapWindowSize)\n        self.__buyThreshold = buyThreshold\n        self.__sellThreshold = sellThreshold\n\n    def _getActiveOrders(self):\n        orders = self.getBroker().getActiveOrders()\n        buy = [o for o in orders if o.isBuy()]\n        sell = [o for o in orders if o.isSell()]\n        return buy, sell\n\n    def _cancelOrders(self, orders):\n        brk = self.getBroker()\n        for o in orders:\n            self.info(\"Canceling order %s\" % (o.getId()))\n            brk.cancelOrder(o)\n\n    def _buySignal(self, price):\n        buyOrders, sellOrders = self._getActiveOrders()\n        self._cancelOrders(sellOrders)\n\n        brk = self.getBroker()\n        cashAvail = brk.getCash() * 0.98\n        size = round(cashAvail / price, 3)\n        if len(buyOrders) == 0 and price*size > VWAPMomentum.MIN_TRADE:\n            self.info(\"Buy %s at %s\" % (size, price))\n            try:\n                self.limitOrder(self.__instrument, price, size)\n            except Exception as e:\n                self.error(\"Failed to buy: %s\" % (e))\n\n    def _sellSignal(self, price):\n        buyOrders, sellOrders = self._getActiveOrders()\n        self._cancelOrders(buyOrders)\n\n        brk = self.getBroker()\n        shares = brk.getShares(self.__instrument)\n        if len(sellOrders) == 0 and shares > 0:\n            self.info(\"Sell %s at %s\" % (shares, price))\n            self.limitOrder(self.__instrument, price, shares*-1)\n\n    def getVWAP(self):\n        return self.__vwap\n\n    def onBars(self, bars):\n        vwap = self.__vwap[-1]\n        if vwap is None:\n            return\n\n        price = bars[self.__instrument].getClose()\n        if price > vwap * (1 + self.__buyThreshold):\n            self._buySignal(price)\n        elif price < vwap * (1 - self.__sellThreshold):\n            self._sellSignal(price)\n\n    def onOrderUpdated(self, order):\n        if order.isBuy():\n            orderType = \"Buy\"\n        else:\n            orderType = \"Sell\"\n\n        exec_info_str = \"\"\n        if order.getExecutionInfo():\n            exec_info_str = \" - Price: %s - Amount: %s - Fee: %s\" % (\n                order.getExecutionInfo().getPrice(), order.getExecutionInfo().getQuantity(),\n                round(order.getExecutionInfo().getCommission(), 2)\n            )\n\n        self.info(\"%s order %d updated - Status: %s%s\" % (\n            orderType,\n            order.getId(),\n            basebroker.Order.State.toString(order.getState()),\n            exec_info_str\n        ))\n\ndef main(plot):\n    instrument = \"BTC\"\n    initialCash = 1000\n    vwapWindowSize = 100\n    buyThreshold = 0.02\n    sellThreshold = 0.01\n\n    barFeed = csvfeed.GenericBarFeed(bar.Frequency.MINUTE*30)\n    barFeed.addBarsFromCSV(instrument, \"30min-bitstampUSD.csv\")\n    brk = broker.BacktestingBroker(initialCash, barFeed)\n    strat = VWAPMomentum(barFeed, brk, instrument, vwapWindowSize, buyThreshold, sellThreshold)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat)\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"VWAP\", strat.getVWAP())\n\n    strat.run()\n\n    if plot:\n        plt.plot()\n\nif __name__ == \"__main__\":\n    main(True) \n```"]