["```py\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"IBM\" --from-year=2011 --to-year=2011 --storage=. --force-download --frequency=daily\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"AES\" --from-year=2011 --to-year=2011 --storage=. --force-download --frequency=daily\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"AIG\" --from-year=2011 --to-year=2011 --storage=. --force-download --frequency=daily\npython -m \"pyalgotrade.tools.quandl\" --source-code=\"WIKI\" --table-code=\"ORCL\" --from-year=2011 --to-year=2011 --storage=. --force-download --frequency=daily\n```", "```py\nfrom __future__ import print_function\n\nfrom pyalgotrade import strategy\nfrom pyalgotrade.barfeed import quandlfeed\nfrom pyalgotrade.stratanalyzer import returns\nfrom pyalgotrade.stratanalyzer import sharpe\nfrom pyalgotrade.utils import stats\n\nclass MyStrategy(strategy.BacktestingStrategy):\n    def __init__(self, feed):\n        super(MyStrategy, self).__init__(feed, 1000000)\n\n        # We wan't to use adjusted close prices instead of close.\n        self.setUseAdjustedValues(True)\n\n        # Place the orders to get them processed on the first bar.\n        orders = {\n            \"ibm\": 1996,\n            \"aes\": 22565,\n            \"aig\": 5445,\n            \"orcl\": 8582,\n        }\n        for instrument, quantity in orders.items():\n            self.marketOrder(instrument, quantity, onClose=True, allOrNone=True)\n\n    def onBars(self, bars):\n        pass\n\n# Load the bar feed from the CSV file\nfeed = quandlfeed.Feed()\nfeed.addBarsFromCSV(\"ibm\", \"WIKI-IBM-2011-quandl.csv\")\nfeed.addBarsFromCSV(\"aes\", \"WIKI-AES-2011-quandl.csv\")\nfeed.addBarsFromCSV(\"aig\", \"WIKI-AIG-2011-quandl.csv\")\nfeed.addBarsFromCSV(\"orcl\", \"WIKI-ORCL-2011-quandl.csv\")\n\n# Evaluate the strategy with the feed's bars.\nmyStrategy = MyStrategy(feed)\n\n# Attach returns and sharpe ratio analyzers.\nretAnalyzer = returns.Returns()\nmyStrategy.attachAnalyzer(retAnalyzer)\nsharpeRatioAnalyzer = sharpe.SharpeRatio()\nmyStrategy.attachAnalyzer(sharpeRatioAnalyzer)\n\n# Run the strategy\nmyStrategy.run()\n\n# Print the results.\nprint(\"Final portfolio value: $%.2f\" % myStrategy.getResult())\nprint(\"Anual return: %.2f  %%\" % (retAnalyzer.getCumulativeReturns()[-1] * 100))\nprint(\"Average daily return: %.2f  %%\" % (stats.mean(retAnalyzer.getReturns()) * 100))\nprint(\"Std. dev. daily return: %.4f\" % (stats.stddev(retAnalyzer.getReturns())))\nprint(\"Sharpe ratio: %.2f\" % (sharpeRatioAnalyzer.getSharpeRatio(0))) \n```", "```py\nFinal portfolio value: $876350.83\nAnual return: -12.36 %\nAverage daily return: -0.04 %\nStd. dev. daily return: 0.0176\nSharpe ratio: -0.33\n\n```"]