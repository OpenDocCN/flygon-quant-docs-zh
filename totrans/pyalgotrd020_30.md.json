["```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import cross\n\nclass SMACrossOver(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, smaPeriod):\n        super(SMACrossOver, self).__init__(feed)\n        self.__instrument = instrument\n        self.__position = None\n        # We'll use adjusted close values instead of regular close values.\n        self.setUseAdjustedValues(True)\n        self.__prices = feed[instrument].getPriceDataSeries()\n        self.__sma = ma.SMA(self.__prices, smaPeriod)\n\n    def getSMA(self):\n        return self.__sma\n\n    def onEnterCanceled(self, position):\n        self.__position = None\n\n    def onExitOk(self, position):\n        self.__position = None\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        self.__position.exitMarket()\n\n    def onBars(self, bars):\n        # If a position was not opened, check if we should enter a long position.\n        if self.__position is None:\n            if cross.cross_above(self.__prices, self.__sma) > 0:\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                # Enter a buy market order. The order is good till canceled.\n                self.__position = self.enterLong(self.__instrument, shares, True)\n        # Check if we have to exit the position.\n        elif not self.__position.exitActive() and cross.cross_below(self.__prices, self.__sma) > 0:\n            self.__position.exitMarket() \n```", "```py\nfrom __future__ import print_function\n\nimport sma_crossover\nfrom pyalgotrade import plotter\nfrom pyalgotrade.tools import quandl\nfrom pyalgotrade.stratanalyzer import sharpe\n\ndef main(plot):\n    instrument = \"AAPL\"\n    smaPeriod = 163\n\n    # Download the bars.\n    feed = quandl.build_feed(\"WIKI\", [instrument], 2011, 2012, \".\")\n\n    strat = sma_crossover.SMACrossOver(feed, instrument, smaPeriod)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, True, False, True)\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"sma\", strat.getSMA())\n\n    strat.run()\n    print(\"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05))\n\n    if plot:\n        plt.plot()\n\nif __name__ == \"__main__\":\n    main(True) \n```", "```py\n2017-07-24 22:56:58,112 quandl [INFO] Downloading AAPL 2011 to ./WIKI-AAPL-2011-quandl.csv\n2017-07-24 22:57:02,364 quandl [INFO] Downloading AAPL 2012 to ./WIKI-AAPL-2012-quandl.csv\nSharpe ratio: 1.12\n\n```"]