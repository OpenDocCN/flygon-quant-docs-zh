["```py\nfrom __future__ import print_function\n\nfrom pyalgotrade import strategy\nfrom pyalgotrade import plotter\nfrom pyalgotrade.barfeed import yahoofeed\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import cumret\nfrom pyalgotrade.stratanalyzer import sharpe\nfrom pyalgotrade.stratanalyzer import returns\n\nclass MarketTiming(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrumentsByClass, initialCash):\n        super(MarketTiming, self).__init__(feed, initialCash)\n        self.setUseAdjustedValues(True)\n        self.__instrumentsByClass = instrumentsByClass\n        self.__rebalanceMonth = None\n        self.__sharesToBuy = {}\n        # Initialize indicators for each instrument.\n        self.__sma = {}\n        for assetClass in instrumentsByClass:\n            for instrument in instrumentsByClass[assetClass]:\n                priceDS = feed[instrument].getPriceDataSeries()\n                self.__sma[instrument] = ma.SMA(priceDS, 200)\n\n    def _shouldRebalance(self, dateTime):\n        return dateTime.month != self.__rebalanceMonth\n\n    def _getRank(self, instrument):\n        # If the price is below the SMA, then this instrument doesn't rank at\n        # all.\n        smas = self.__sma[instrument]\n        price = self.getLastPrice(instrument)\n        if len(smas) == 0 or smas[-1] is None or price < smas[-1]:\n            return None\n\n        # Rank based on 20 day returns.\n        ret = None\n        lookBack = 20\n        priceDS = self.getFeed()[instrument].getPriceDataSeries()\n        if len(priceDS) >= lookBack and smas[-1] is not None and smas[-1*lookBack] is not None:\n            ret = (priceDS[-1] - priceDS[-1*lookBack]) / float(priceDS[-1*lookBack])\n        return ret\n\n    def _getTopByClass(self, assetClass):\n        # Find the instrument with the highest rank.\n        ret = None\n        highestRank = None\n        for instrument in self.__instrumentsByClass[assetClass]:\n            rank = self._getRank(instrument)\n            if rank is not None and (highestRank is None or rank > highestRank):\n                highestRank = rank\n                ret = instrument\n        return ret\n\n    def _getTop(self):\n        ret = {}\n        for assetClass in self.__instrumentsByClass:\n            ret[assetClass] = self._getTopByClass(assetClass)\n        return ret\n\n    def _placePendingOrders(self):\n        # Use less chash just in case price changes too much.\n        remainingCash = round(self.getBroker().getCash() * 0.9, 2)\n\n        for instrument in self.__sharesToBuy:\n            orderSize = self.__sharesToBuy[instrument]\n            if orderSize > 0:\n                # Adjust the order size based on available cash.\n                lastPrice = self.getLastPrice(instrument)\n                cost = orderSize * lastPrice\n                while cost > remainingCash and orderSize > 0:\n                    orderSize -= 1\n                    cost = orderSize * lastPrice\n                if orderSize > 0:\n                    remainingCash -= cost\n                    assert(remainingCash >= 0)\n\n            if orderSize != 0:\n                self.info(\"Placing market order for %d  %s shares\" % (orderSize, instrument))\n                self.marketOrder(instrument, orderSize, goodTillCanceled=True)\n                self.__sharesToBuy[instrument] -= orderSize\n\n    def _logPosSize(self):\n        totalEquity = self.getBroker().getEquity()\n        positions = self.getBroker().getPositions()\n        for instrument in self.getBroker().getPositions():\n            posSize = positions[instrument] * self.getLastPrice(instrument) / totalEquity * 100\n            self.info(\"%s - %0.2f  %%\" % (instrument, posSize))\n\n    def _rebalance(self):\n        self.info(\"Rebalancing\")\n\n        # Cancel all active/pending orders.\n        for order in self.getBroker().getActiveOrders():\n            self.getBroker().cancelOrder(order)\n\n        cashPerAssetClass = round(self.getBroker().getEquity() / float(len(self.__instrumentsByClass)), 2)\n        self.__sharesToBuy = {}\n\n        # Calculate which positions should be open during the next period.\n        topByClass = self._getTop()\n        for assetClass in topByClass:\n            instrument = topByClass[assetClass]\n            self.info(\"Best for class %s: %s\" % (assetClass, instrument))\n            if instrument is not None:\n                lastPrice = self.getLastPrice(instrument)\n                cashForInstrument = round(cashPerAssetClass - self.getBroker().getShares(instrument) * lastPrice, 2)\n                # This may yield a negative value and we have to reduce this\n                # position.\n                self.__sharesToBuy[instrument] = int(cashForInstrument / lastPrice)\n\n        # Calculate which positions should be closed.\n        for instrument in self.getBroker().getPositions():\n            if instrument not in topByClass.values():\n                currentShares = self.getBroker().getShares(instrument)\n                assert(instrument not in self.__sharesToBuy)\n                self.__sharesToBuy[instrument] = currentShares * -1\n\n    def getSMA(self, instrument):\n        return self.__sma[instrument]\n\n    def onBars(self, bars):\n        currentDateTime = bars.getDateTime()\n\n        if self._shouldRebalance(currentDateTime):\n            self.__rebalanceMonth = currentDateTime.month\n            self._rebalance()\n\n        self._placePendingOrders()\n\ndef main(plot):\n    initialCash = 10000\n    instrumentsByClass = {\n        \"US Stocks\": [\"VTI\"],\n        \"Foreign Stocks\": [\"VEU\"],\n        \"US 10 Year Government Bonds\": [\"IEF\"],\n        \"Real Estate\": [\"VNQ\"],\n        \"Commodities\": [\"DBC\"],\n    }\n\n    # Load the bars. These files were manually downloaded from Yahoo Finance.\n    feed = yahoofeed.Feed()\n    instruments = [\"SPY\"]\n    for assetClass in instrumentsByClass:\n        instruments.extend(instrumentsByClass[assetClass])\n\n    for year in range(2007, 2013+1):\n        for instrument in instruments:\n            fileName = \"%s-%d-yahoofinance.csv\" % (instrument, year)\n            print(\"Loading bars from %s\" % fileName)\n            feed.addBarsFromCSV(instrument, fileName)\n\n    # Build the strategy and attach some metrics.\n    strat = MarketTiming(feed, instrumentsByClass, initialCash)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n    returnsAnalyzer = returns.Returns()\n    strat.attachAnalyzer(returnsAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, False, False, True)\n        plt.getOrCreateSubplot(\"cash\").addCallback(\"Cash\", lambda x: strat.getBroker().getCash())\n        # Plot strategy vs. SPY cumulative returns.\n        plt.getOrCreateSubplot(\"returns\").addDataSeries(\"SPY\", cumret.CumulativeReturn(feed[\"SPY\"].getPriceDataSeries()))\n        plt.getOrCreateSubplot(\"returns\").addDataSeries(\"Strategy\", returnsAnalyzer.getCumulativeReturns())\n\n    strat.run()\n    print(\"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05))\n    print(\"Returns: %.2f  %%\" % (returnsAnalyzer.getCumulativeReturns()[-1] * 100))\n\n    if plot:\n        plt.plot()\n\nif __name__ == \"__main__\":\n    main(True) \n```", "```py\nLoading bars from SPY-2007-yahoofinance.csv\nLoading bars from VTI-2007-yahoofinance.csv\nLoading bars from DBC-2007-yahoofinance.csv\nLoading bars from IEF-2007-yahoofinance.csv\nLoading bars from VEU-2007-yahoofinance.csv\nLoading bars from VNQ-2007-yahoofinance.csv\nLoading bars from SPY-2008-yahoofinance.csv\nLoading bars from VTI-2008-yahoofinance.csv\nLoading bars from DBC-2008-yahoofinance.csv\nLoading bars from IEF-2008-yahoofinance.csv\n.\n.\n.\n2013-10-01 00:00:00 strategy [INFO] Best for class US Stocks: VTI\n2013-10-01 00:00:00 strategy [INFO] Best for class Commodities: None\n2013-10-01 00:00:00 strategy [INFO] Best for class US 10 Year Government Bonds: None\n2013-10-01 00:00:00 strategy [INFO] Best for class Foreign Stocks: VEU\n2013-10-01 00:00:00 strategy [INFO] Best for class Real Estate: None\n2013-10-01 00:00:00 strategy [INFO] Placing market order for -2 VEU shares\n2013-11-01 00:00:00 strategy [INFO] Rebalancing\n2013-11-01 00:00:00 strategy [INFO] Best for class US Stocks: VTI\n2013-11-01 00:00:00 strategy [INFO] Best for class Commodities: None\n2013-11-01 00:00:00 strategy [INFO] Best for class US 10 Year Government Bonds: None\n2013-11-01 00:00:00 strategy [INFO] Best for class Foreign Stocks: VEU\n2013-11-01 00:00:00 strategy [INFO] Best for class Real Estate: VNQ\n2013-11-01 00:00:00 strategy [INFO] Placing market order for -1 VTI shares\n2013-11-01 00:00:00 strategy [INFO] Placing market order for -1 VEU shares\n2013-11-01 00:00:00 strategy [INFO] Placing market order for 39 VNQ shares\n2013-12-02 00:00:00 strategy [INFO] Rebalancing\n2013-12-02 00:00:00 strategy [INFO] Best for class US Stocks: VTI\n2013-12-02 00:00:00 strategy [INFO] Best for class Commodities: None\n2013-12-02 00:00:00 strategy [INFO] Best for class US 10 Year Government Bonds: None\n2013-12-02 00:00:00 strategy [INFO] Best for class Foreign Stocks: VEU\n2013-12-02 00:00:00 strategy [INFO] Best for class Real Estate: None\n2013-12-02 00:00:00 strategy [INFO] Placing market order for -1 VTI shares\n2013-12-02 00:00:00 strategy [INFO] Placing market order for -39 VNQ shares\nSharpe ratio: -0.06\nReturns: 32.97 %\n\n```"]