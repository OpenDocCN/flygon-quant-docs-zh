["```py\nfrom __future__ import print_function\n\nfrom pyalgotrade import strategy\nfrom pyalgotrade import dataseries\nfrom pyalgotrade.dataseries import aligned\nfrom pyalgotrade import plotter\nfrom pyalgotrade.barfeed import yahoofeed\nfrom pyalgotrade.stratanalyzer import sharpe\n\nimport numpy as np\nimport statsmodels.api as sm\n\ndef get_beta(values1, values2):\n    # http://statsmodels.sourceforge.net/stable/regression.html\n    model = sm.OLS(values1, values2)\n    results = model.fit()\n    return results.params[0]\n\nclass StatArbHelper:\n    def __init__(self, ds1, ds2, windowSize):\n        # We're going to use datetime aligned versions of the dataseries.\n        self.__ds1, self.__ds2 = aligned.datetime_aligned(ds1, ds2)\n        self.__windowSize = windowSize\n        self.__hedgeRatio = None\n        self.__spread = None\n        self.__spreadMean = None\n        self.__spreadStd = None\n        self.__zScore = None\n\n    def getSpread(self):\n        return self.__spread\n\n    def getSpreadMean(self):\n        return self.__spreadMean\n\n    def getSpreadStd(self):\n        return self.__spreadStd\n\n    def getZScore(self):\n        return self.__zScore\n\n    def getHedgeRatio(self):\n        return self.__hedgeRatio\n\n    def __updateHedgeRatio(self, values1, values2):\n        self.__hedgeRatio = get_beta(values1, values2)\n\n    def __updateSpreadMeanAndStd(self, values1, values2):\n        if self.__hedgeRatio is not None:\n            spread = values1 - values2 * self.__hedgeRatio\n            self.__spreadMean = spread.mean()\n            self.__spreadStd = spread.std(ddof=1)\n\n    def __updateSpread(self):\n        if self.__hedgeRatio is not None:\n            self.__spread = self.__ds1[-1] - self.__hedgeRatio * self.__ds2[-1]\n\n    def __updateZScore(self):\n        if self.__spread is not None and self.__spreadMean is not None and self.__spreadStd is not None:\n            self.__zScore = (self.__spread - self.__spreadMean) / float(self.__spreadStd)\n\n    def update(self):\n        if len(self.__ds1) >= self.__windowSize:\n            values1 = np.asarray(self.__ds1[-1*self.__windowSize:])\n            values2 = np.asarray(self.__ds2[-1*self.__windowSize:])\n            self.__updateHedgeRatio(values1, values2)\n            self.__updateSpread()\n            self.__updateSpreadMeanAndStd(values1, values2)\n            self.__updateZScore()\n\nclass StatArb(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument1, instrument2, windowSize):\n        super(StatArb, self).__init__(feed)\n        self.setUseAdjustedValues(True)\n        self.__statArbHelper = StatArbHelper(feed[instrument1].getAdjCloseDataSeries(), feed[instrument2].getAdjCloseDataSeries(), windowSize)\n        self.__i1 = instrument1\n        self.__i2 = instrument2\n\n        # These are used only for plotting purposes.\n        self.__spread = dataseries.SequenceDataSeries()\n        self.__hedgeRatio = dataseries.SequenceDataSeries()\n\n    def getSpreadDS(self):\n        return self.__spread\n\n    def getHedgeRatioDS(self):\n        return self.__hedgeRatio\n\n    def __getOrderSize(self, bars, hedgeRatio):\n        cash = self.getBroker().getCash(False)\n        price1 = bars[self.__i1].getAdjClose()\n        price2 = bars[self.__i2].getAdjClose()\n        size1 = int(cash / (price1 + hedgeRatio * price2))\n        size2 = int(size1 * hedgeRatio)\n        return (size1, size2)\n\n    def buySpread(self, bars, hedgeRatio):\n        amount1, amount2 = self.__getOrderSize(bars, hedgeRatio)\n        self.marketOrder(self.__i1, amount1)\n        self.marketOrder(self.__i2, amount2 * -1)\n\n    def sellSpread(self, bars, hedgeRatio):\n        amount1, amount2 = self.__getOrderSize(bars, hedgeRatio)\n        self.marketOrder(self.__i1, amount1 * -1)\n        self.marketOrder(self.__i2, amount2)\n\n    def reducePosition(self, instrument):\n        currentPos = self.getBroker().getShares(instrument)\n        if currentPos > 0:\n            self.marketOrder(instrument, currentPos * -1)\n        elif currentPos < 0:\n            self.marketOrder(instrument, currentPos * -1)\n\n    def onBars(self, bars):\n        self.__statArbHelper.update()\n\n        # These is used only for plotting purposes.\n        self.__spread.appendWithDateTime(bars.getDateTime(), self.__statArbHelper.getSpread())\n        self.__hedgeRatio.appendWithDateTime(bars.getDateTime(), self.__statArbHelper.getHedgeRatio())\n\n        if bars.getBar(self.__i1) and bars.getBar(self.__i2):\n            hedgeRatio = self.__statArbHelper.getHedgeRatio()\n            zScore = self.__statArbHelper.getZScore()\n            if zScore is not None:\n                currentPos = abs(self.getBroker().getShares(self.__i1)) + abs(self.getBroker().getShares(self.__i2))\n                if abs(zScore) <= 1 and currentPos != 0:\n                    self.reducePosition(self.__i1)\n                    self.reducePosition(self.__i2)\n                elif zScore <= -2 and currentPos == 0:  # Buy spread when its value drops below 2 standard deviations.\n                    self.buySpread(bars, hedgeRatio)\n                elif zScore >= 2 and currentPos == 0:  # Short spread when its value rises above 2 standard deviations.\n                    self.sellSpread(bars, hedgeRatio)\n\ndef main(plot):\n    instruments = [\"gld\", \"gdx\"]\n    windowSize = 50\n\n    # Load the bars. These files were manually downloaded from Yahoo Finance.\n    feed = yahoofeed.Feed()\n    for year in range(2006, 2012+1):\n        for instrument in instruments:\n            fileName = \"%s-%d-yahoofinance.csv\" % (instrument, year)\n            print(\"Loading bars from %s\" % fileName)\n            feed.addBarsFromCSV(instrument, fileName)\n\n    strat = StatArb(feed, instruments[0], instruments[1], windowSize)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, False, False, True)\n        plt.getOrCreateSubplot(\"hedge\").addDataSeries(\"Hedge Ratio\", strat.getHedgeRatioDS())\n        plt.getOrCreateSubplot(\"spread\").addDataSeries(\"Spread\", strat.getSpreadDS())\n\n    strat.run()\n    print(\"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05))\n\n    if plot:\n        plt.plot()\n\nif __name__ == \"__main__\":\n    main(True) \n```", "```py\nLoading bars from gld-2006-yahoofinance.csv\nLoading bars from gdx-2006-yahoofinance.csv\nLoading bars from gld-2007-yahoofinance.csv\nLoading bars from gdx-2007-yahoofinance.csv\nLoading bars from gld-2008-yahoofinance.csv\nLoading bars from gdx-2008-yahoofinance.csv\nLoading bars from gld-2009-yahoofinance.csv\nLoading bars from gdx-2009-yahoofinance.csv\nLoading bars from gld-2010-yahoofinance.csv\nLoading bars from gdx-2010-yahoofinance.csv\nLoading bars from gld-2011-yahoofinance.csv\nLoading bars from gdx-2011-yahoofinance.csv\nLoading bars from gld-2012-yahoofinance.csv\nLoading bars from gdx-2012-yahoofinance.csv\nSharpe ratio: -0.20\n\n```"]