["```py\nfrom pyalgotrade import strategy\nfrom pyalgotrade.technical import ma\nfrom pyalgotrade.technical import rsi\nfrom pyalgotrade.technical import cross\n\nclass RSI2(strategy.BacktestingStrategy):\n    def __init__(self, feed, instrument, entrySMA, exitSMA, rsiPeriod, overBoughtThreshold, overSoldThreshold):\n        super(RSI2, self).__init__(feed)\n        self.__instrument = instrument\n        # We'll use adjusted close values, if available, instead of regular close values.\n        if feed.barsHaveAdjClose():\n            self.setUseAdjustedValues(True)\n        self.__priceDS = feed[instrument].getPriceDataSeries()\n        self.__entrySMA = ma.SMA(self.__priceDS, entrySMA)\n        self.__exitSMA = ma.SMA(self.__priceDS, exitSMA)\n        self.__rsi = rsi.RSI(self.__priceDS, rsiPeriod)\n        self.__overBoughtThreshold = overBoughtThreshold\n        self.__overSoldThreshold = overSoldThreshold\n        self.__longPos = None\n        self.__shortPos = None\n\n    def getEntrySMA(self):\n        return self.__entrySMA\n\n    def getExitSMA(self):\n        return self.__exitSMA\n\n    def getRSI(self):\n        return self.__rsi\n\n    def onEnterCanceled(self, position):\n        if self.__longPos == position:\n            self.__longPos = None\n        elif self.__shortPos == position:\n            self.__shortPos = None\n        else:\n            assert(False)\n\n    def onExitOk(self, position):\n        if self.__longPos == position:\n            self.__longPos = None\n        elif self.__shortPos == position:\n            self.__shortPos = None\n        else:\n            assert(False)\n\n    def onExitCanceled(self, position):\n        # If the exit was canceled, re-submit it.\n        position.exitMarket()\n\n    def onBars(self, bars):\n        # Wait for enough bars to be available to calculate SMA and RSI.\n        if self.__exitSMA[-1] is None or self.__entrySMA[-1] is None or self.__rsi[-1] is None:\n            return\n\n        bar = bars[self.__instrument]\n        if self.__longPos is not None:\n            if self.exitLongSignal():\n                self.__longPos.exitMarket()\n        elif self.__shortPos is not None:\n            if self.exitShortSignal():\n                self.__shortPos.exitMarket()\n        else:\n            if self.enterLongSignal(bar):\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                self.__longPos = self.enterLong(self.__instrument, shares, True)\n            elif self.enterShortSignal(bar):\n                shares = int(self.getBroker().getCash() * 0.9 / bars[self.__instrument].getPrice())\n                self.__shortPos = self.enterShort(self.__instrument, shares, True)\n\n    def enterLongSignal(self, bar):\n        return bar.getPrice() > self.__entrySMA[-1] and self.__rsi[-1] <= self.__overSoldThreshold\n\n    def exitLongSignal(self):\n        return cross.cross_above(self.__priceDS, self.__exitSMA) and not self.__longPos.exitActive()\n\n    def enterShortSignal(self, bar):\n        return bar.getPrice() < self.__entrySMA[-1] and self.__rsi[-1] >= self.__overBoughtThreshold\n\n    def exitShortSignal(self):\n        return cross.cross_below(self.__priceDS, self.__exitSMA) and not self.__shortPos.exitActive() \n```", "```py\nfrom __future__ import print_function\n\nimport rsi2\nfrom pyalgotrade import plotter\nfrom pyalgotrade.barfeed import yahoofeed\nfrom pyalgotrade.stratanalyzer import sharpe\n\ndef main(plot):\n    instrument = \"DIA\"\n    entrySMA = 200\n    exitSMA = 5\n    rsiPeriod = 2\n    overBoughtThreshold = 90\n    overSoldThreshold = 10\n\n    # Load the bars. These files were manually downloaded from Yahoo Finance.\n    feed = yahoofeed.Feed()\n    for year in range(2009, 2013):\n        fileName = \"%s-%d-yahoofinance.csv\" % (instrument, year)\n        print(\"Loading bars from %s\" % fileName)\n        feed.addBarsFromCSV(instrument, fileName)\n\n    strat = rsi2.RSI2(feed, instrument, entrySMA, exitSMA, rsiPeriod, overBoughtThreshold, overSoldThreshold)\n    sharpeRatioAnalyzer = sharpe.SharpeRatio()\n    strat.attachAnalyzer(sharpeRatioAnalyzer)\n\n    if plot:\n        plt = plotter.StrategyPlotter(strat, True, False, True)\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"Entry SMA\", strat.getEntrySMA())\n        plt.getInstrumentSubplot(instrument).addDataSeries(\"Exit SMA\", strat.getExitSMA())\n        plt.getOrCreateSubplot(\"rsi\").addDataSeries(\"RSI\", strat.getRSI())\n        plt.getOrCreateSubplot(\"rsi\").addLine(\"Overbought\", overBoughtThreshold)\n        plt.getOrCreateSubplot(\"rsi\").addLine(\"Oversold\", overSoldThreshold)\n\n    strat.run()\n    print(\"Sharpe ratio: %.2f\" % sharpeRatioAnalyzer.getSharpeRatio(0.05))\n\n    if plot:\n        plt.plot()\n\nif __name__ == \"__main__\":\n    main(True) \n```", "```py\nLoading bars from DIA-2009-yahoofinance.csv\nLoading bars from DIA-2010-yahoofinance.csv\nLoading bars from DIA-2011-yahoofinance.csv\nLoading bars from DIA-2012-yahoofinance.csv\nSharpe ratio: -0.11\n\n```"]