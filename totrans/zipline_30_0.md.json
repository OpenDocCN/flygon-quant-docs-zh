["```py\npip  install  zipline-reloaded \n```", "```py\nconda  install  -c  conda-forge  zipline-reloaded \n```", "```py\nfrom zipline.api import order_target, record, symbol\n\ndef initialize(context):\n    context.i = 0\n    context.asset = symbol('AAPL')\n\ndef handle_data(context, data):\n    # Skip first 300 days to get full windows\n    context.i += 1\n    if context.i < 300:\n        return\n\n    # Compute averages\n    # data.history() has to be called with the same params\n    # from above and returns a pandas dataframe.\n    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency=\"1d\").mean()\n    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency=\"1d\").mean()\n\n    # Trading logic\n    if short_mavg > long_mavg:\n        # order_target orders as many shares as needed to\n        # achieve the desired number of shares.\n        order_target(context.asset, 100)\n    elif short_mavg < long_mavg:\n        order_target(context.asset, 0)\n\n    # Save values for later inspection\n    record(AAPL=data.current(context.asset, 'price'),\n           short_mavg=short_mavg,\n           long_mavg=long_mavg) \n```", "```py\n$  zipline  ingest  -b  quandl\n$  zipline  run  -f  dual_moving_average.py  --start  2014-1-1  --end  2018-1-1  -o  dma.pickle  --no-benchmark \n```", "```py\npip  install  zipline-reloaded \n```", "```py\nconda  install  -c  conda-forge  zipline-reloaded \n```", "```py\npip  install  zipline-reloaded \n```", "```py\nconda  install  -c  conda-forge  zipline-reloaded \n```", "```py\nfrom zipline.api import order_target, record, symbol\n\ndef initialize(context):\n    context.i = 0\n    context.asset = symbol('AAPL')\n\ndef handle_data(context, data):\n    # Skip first 300 days to get full windows\n    context.i += 1\n    if context.i < 300:\n        return\n\n    # Compute averages\n    # data.history() has to be called with the same params\n    # from above and returns a pandas dataframe.\n    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency=\"1d\").mean()\n    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency=\"1d\").mean()\n\n    # Trading logic\n    if short_mavg > long_mavg:\n        # order_target orders as many shares as needed to\n        # achieve the desired number of shares.\n        order_target(context.asset, 100)\n    elif short_mavg < long_mavg:\n        order_target(context.asset, 0)\n\n    # Save values for later inspection\n    record(AAPL=data.current(context.asset, 'price'),\n           short_mavg=short_mavg,\n           long_mavg=long_mavg) \n```", "```py\n$  zipline  ingest  -b  quandl\n$  zipline  run  -f  dual_moving_average.py  --start  2014-1-1  --end  2018-1-1  -o  dma.pickle  --no-benchmark \n```"]