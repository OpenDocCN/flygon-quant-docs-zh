["```py\nfrom zipline.examples import buyapple \n```", "```py\nfrom zipline.api import order, record, symbol\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), 'price')) \n```", "```py\n$  zipline  ingest  -b  <bundle> \n```", "```py\n$  zipline  run  --help \n```", "```py\nUsage: zipline run [OPTIONS]\n\nRun a backtest for the given algorithm.\n\nOptions:\n -f, --algofile FILENAME         The file that contains the algorithm to run.\n -t, --algotext TEXT             The algorithm script to run.\n -D, --define TEXT               Define a name to be bound in the namespace\n                                 before executing the algotext. For example\n                                 '-Dname=value'. The value may be any python\n                                 expression. These are evaluated in order so\n                                 they may refer to previously defined names.\n --data-frequency [daily|minute]\n                                 The data frequency of the simulation.\n                                 [default: daily]\n --capital-base FLOAT            The starting capital for the simulation.\n                                 [default: 10000000.0]\n -b, --bundle BUNDLE-NAME        The data bundle to use for the simulation.\n                                 [default: quandl]\n --bundle-timestamp TIMESTAMP    The date to lookup data on or before.\n                                 [default: <current-time>]\n -s, --start DATE                The start date of the simulation.\n -e, --end DATE                  The end date of the simulation.\n -o, --output FILENAME           The location to write the perf data. If this\n                                 is '-' the perf will be written to stdout.\n                                 [default: -]\n --trading-calendar TRADING-CALENDAR\n                                 The calendar you want to use e.g. LSE. NYSE\n                                 is the default.\n --print-algo / --no-print-algo  Print the algorithm to stdout.\n --benchmark-file                The csv file that contains the benchmark\n                                 returns (date, returns columns)\n --benchmark-symbol              The instrument's symbol to be used as\n                                 a benchmark.\n                                 (should exist in the ingested bundle)\n --benchmark-sid                 The sid of the instrument to be used as a\n                                 benchmark.\n                                 (should exist in the ingested bundle)\n --no-benchmark                  This flag is used to set the benchmark to\n                                 zero. Alpha, beta and benchmark metrics\n                                 are not calculated\n --help                          Show this message and exit. \n```", "```py\nzipline  run  -f  ../zipline/examples/buyapple.py  --start  2016-1-1  --end  2018-1-1  -o  buyapple_out.pickle  --no-benchmark \n```", "```py\nAAPL\n[2018-01-03 04:30:51.843465] INFO: Performance: Simulated 503 trading days out of 503.\n[2018-01-03 04:30:51.843598] INFO: Performance: first open: 2016-01-04 14:31:00+00:00\n[2018-01-03 04:30:51.843672] INFO: Performance: last close: 2017-12-29 21:00:00+00:00 \n```", "```py\nimport pandas as pd\nperf = pd.read_pickle('buyapple_out.pickle') # read in perf DataFrame\nperf.head() \n```", "```py\n%pylab inline\nfigsize(12, 12)\nimport matplotlib.pyplot as plt\n\nax1 = plt.subplot(211)\nperf.portfolio_value.plot(ax=ax1)\nax1.set_ylabel('Portfolio Value')\nax2 = plt.subplot(212, sharex=ax1)\nperf.AAPL.plot(ax=ax2)\nax2.set_ylabel('AAPL Stock Price') \n```", "```py\nPopulating the interactive namespace from numpy and matplotlib \n```", "```py\n<matplotlib.text.Text at 0x10c48c198> \n```", "```py\n%load_ext zipline \n```", "```py\n%%zipline --start 2016-1-1 --end 2018-1-1\nfrom zipline.api import symbol, order, record\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), \"price\") \n```", "```py\n_.head() \n```", "```py\nfrom zipline import run_algorithm\nimport pandas as pd\nimport pandas_datareader.data as web\n\ndef initialize(context):\n    ...\n\ndef handle_data(context, data):\n    ...\n\nstart = pd.Timestamp('2014')\nend = pd.Timestamp('2018')\n\nsp500 = web.DataReader('SP500', 'fred', start, end).SP500\nbenchmark_returns = sp500.pct_change()\n\nresult = run_algorithm(start=start.tz_localize('UTC'),\n                       end=end.tz_localize('UTC'),\n                       initialize=initialize,\n                       handle_data=handle_data,\n                       capital_base=100000,\n                       benchmark_returns=benchmark_returns,\n                       bundle='quandl',\n                       data_frequency='daily') \n```", "```py\n%%zipline --start 2014-1-1 --end 2018-1-1 -o dma.pickle\n\nfrom zipline.api import order_target, record, symbol\nimport matplotlib.pyplot as plt\n\ndef initialize(context):\n    context.i = 0\n    context.asset = symbol('AAPL')\n\ndef handle_data(context, data):\n    # Skip first 300 days to get full windows\n    context.i += 1\n    if context.i < 300:\n        return\n\n    # Compute averages\n    # data.history() has to be called with the same params\n    # from above and returns a pandas dataframe.\n    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency=\"1d\").mean()\n    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency=\"1d\").mean()\n\n    # Trading logic\n    if short_mavg > long_mavg:\n        # order_target orders as many shares as needed to\n        # achieve the desired number of shares.\n        order_target(context.asset, 100)\n    elif short_mavg < long_mavg:\n        order_target(context.asset, 0)\n\n    # Save values for later inspection\n    record(AAPL=data.current(context.asset, 'price'),\n           short_mavg=short_mavg,\n           long_mavg=long_mavg)\n\ndef analyze(context, perf):\n    fig = plt.figure()\n    ax1 = fig.add_subplot(211)\n    perf.portfolio_value.plot(ax=ax1)\n    ax1.set_ylabel('portfolio value in $')\n\n    ax2 = fig.add_subplot(212)\n    perf['AAPL'].plot(ax=ax2)\n    perf[['short_mavg', 'long_mavg']].plot(ax=ax2)\n\n    perf_trans = perf.loc[[t != [] for t in perf.transactions]]\n    buys = perf_trans.loc[[t[0]['amount'] > 0 for t in perf_trans.transactions]]\n    sells = perf_trans.loc[\n        [t[0]['amount'] < 0 for t in perf_trans.transactions]]\n    ax2.plot(buys.index, perf.short_mavg.loc[buys.index],\n             '^', markersize=10, color='m')\n    ax2.plot(sells.index, perf.short_mavg.loc[sells.index],\n             'v', markersize=10, color='k')\n    ax2.set_ylabel('price in $')\n    plt.legend(loc=0)\n    plt.show() \n```", "```py\nfrom zipline.examples import buyapple \n```", "```py\nfrom zipline.api import order, record, symbol\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), 'price')) \n```", "```py\nfrom zipline.examples import buyapple \n```", "```py\nfrom zipline.api import order, record, symbol\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), 'price')) \n```", "```py\n$  zipline  ingest  -b  <bundle> \n```", "```py\n$  zipline  run  --help \n```", "```py\nUsage: zipline run [OPTIONS]\n\nRun a backtest for the given algorithm.\n\nOptions:\n -f, --algofile FILENAME         The file that contains the algorithm to run.\n -t, --algotext TEXT             The algorithm script to run.\n -D, --define TEXT               Define a name to be bound in the namespace\n                                 before executing the algotext. For example\n                                 '-Dname=value'. The value may be any python\n                                 expression. These are evaluated in order so\n                                 they may refer to previously defined names.\n --data-frequency [daily|minute]\n                                 The data frequency of the simulation.\n                                 [default: daily]\n --capital-base FLOAT            The starting capital for the simulation.\n                                 [default: 10000000.0]\n -b, --bundle BUNDLE-NAME        The data bundle to use for the simulation.\n                                 [default: quandl]\n --bundle-timestamp TIMESTAMP    The date to lookup data on or before.\n                                 [default: <current-time>]\n -s, --start DATE                The start date of the simulation.\n -e, --end DATE                  The end date of the simulation.\n -o, --output FILENAME           The location to write the perf data. If this\n                                 is '-' the perf will be written to stdout.\n                                 [default: -]\n --trading-calendar TRADING-CALENDAR\n                                 The calendar you want to use e.g. LSE. NYSE\n                                 is the default.\n --print-algo / --no-print-algo  Print the algorithm to stdout.\n --benchmark-file                The csv file that contains the benchmark\n                                 returns (date, returns columns)\n --benchmark-symbol              The instrument's symbol to be used as\n                                 a benchmark.\n                                 (should exist in the ingested bundle)\n --benchmark-sid                 The sid of the instrument to be used as a\n                                 benchmark.\n                                 (should exist in the ingested bundle)\n --no-benchmark                  This flag is used to set the benchmark to\n                                 zero. Alpha, beta and benchmark metrics\n                                 are not calculated\n --help                          Show this message and exit. \n```", "```py\nzipline  run  -f  ../zipline/examples/buyapple.py  --start  2016-1-1  --end  2018-1-1  -o  buyapple_out.pickle  --no-benchmark \n```", "```py\nAAPL\n[2018-01-03 04:30:51.843465] INFO: Performance: Simulated 503 trading days out of 503.\n[2018-01-03 04:30:51.843598] INFO: Performance: first open: 2016-01-04 14:31:00+00:00\n[2018-01-03 04:30:51.843672] INFO: Performance: last close: 2017-12-29 21:00:00+00:00 \n```", "```py\nimport pandas as pd\nperf = pd.read_pickle('buyapple_out.pickle') # read in perf DataFrame\nperf.head() \n```", "```py\n%pylab inline\nfigsize(12, 12)\nimport matplotlib.pyplot as plt\n\nax1 = plt.subplot(211)\nperf.portfolio_value.plot(ax=ax1)\nax1.set_ylabel('Portfolio Value')\nax2 = plt.subplot(212, sharex=ax1)\nperf.AAPL.plot(ax=ax2)\nax2.set_ylabel('AAPL Stock Price') \n```", "```py\nPopulating the interactive namespace from numpy and matplotlib \n```", "```py\n<matplotlib.text.Text at 0x10c48c198> \n```", "```py\n%load_ext zipline \n```", "```py\n%%zipline --start 2016-1-1 --end 2018-1-1\nfrom zipline.api import symbol, order, record\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), \"price\") \n```", "```py\n_.head() \n```", "```py\nfrom zipline import run_algorithm\nimport pandas as pd\nimport pandas_datareader.data as web\n\ndef initialize(context):\n    ...\n\ndef handle_data(context, data):\n    ...\n\nstart = pd.Timestamp('2014')\nend = pd.Timestamp('2018')\n\nsp500 = web.DataReader('SP500', 'fred', start, end).SP500\nbenchmark_returns = sp500.pct_change()\n\nresult = run_algorithm(start=start.tz_localize('UTC'),\n                       end=end.tz_localize('UTC'),\n                       initialize=initialize,\n                       handle_data=handle_data,\n                       capital_base=100000,\n                       benchmark_returns=benchmark_returns,\n                       bundle='quandl',\n                       data_frequency='daily') \n```", "```py\n$  zipline  ingest  -b  <bundle> \n```", "```py\n$  zipline  run  --help \n```", "```py\nUsage: zipline run [OPTIONS]\n\nRun a backtest for the given algorithm.\n\nOptions:\n -f, --algofile FILENAME         The file that contains the algorithm to run.\n -t, --algotext TEXT             The algorithm script to run.\n -D, --define TEXT               Define a name to be bound in the namespace\n                                 before executing the algotext. For example\n                                 '-Dname=value'. The value may be any python\n                                 expression. These are evaluated in order so\n                                 they may refer to previously defined names.\n --data-frequency [daily|minute]\n                                 The data frequency of the simulation.\n                                 [default: daily]\n --capital-base FLOAT            The starting capital for the simulation.\n                                 [default: 10000000.0]\n -b, --bundle BUNDLE-NAME        The data bundle to use for the simulation.\n                                 [default: quandl]\n --bundle-timestamp TIMESTAMP    The date to lookup data on or before.\n                                 [default: <current-time>]\n -s, --start DATE                The start date of the simulation.\n -e, --end DATE                  The end date of the simulation.\n -o, --output FILENAME           The location to write the perf data. If this\n                                 is '-' the perf will be written to stdout.\n                                 [default: -]\n --trading-calendar TRADING-CALENDAR\n                                 The calendar you want to use e.g. LSE. NYSE\n                                 is the default.\n --print-algo / --no-print-algo  Print the algorithm to stdout.\n --benchmark-file                The csv file that contains the benchmark\n                                 returns (date, returns columns)\n --benchmark-symbol              The instrument's symbol to be used as\n                                 a benchmark.\n                                 (should exist in the ingested bundle)\n --benchmark-sid                 The sid of the instrument to be used as a\n                                 benchmark.\n                                 (should exist in the ingested bundle)\n --no-benchmark                  This flag is used to set the benchmark to\n                                 zero. Alpha, beta and benchmark metrics\n                                 are not calculated\n --help                          Show this message and exit. \n```", "```py\nzipline  run  -f  ../zipline/examples/buyapple.py  --start  2016-1-1  --end  2018-1-1  -o  buyapple_out.pickle  --no-benchmark \n```", "```py\nAAPL\n[2018-01-03 04:30:51.843465] INFO: Performance: Simulated 503 trading days out of 503.\n[2018-01-03 04:30:51.843598] INFO: Performance: first open: 2016-01-04 14:31:00+00:00\n[2018-01-03 04:30:51.843672] INFO: Performance: last close: 2017-12-29 21:00:00+00:00 \n```", "```py\nimport pandas as pd\nperf = pd.read_pickle('buyapple_out.pickle') # read in perf DataFrame\nperf.head() \n```", "```py\n%pylab inline\nfigsize(12, 12)\nimport matplotlib.pyplot as plt\n\nax1 = plt.subplot(211)\nperf.portfolio_value.plot(ax=ax1)\nax1.set_ylabel('Portfolio Value')\nax2 = plt.subplot(212, sharex=ax1)\nperf.AAPL.plot(ax=ax2)\nax2.set_ylabel('AAPL Stock Price') \n```", "```py\nPopulating the interactive namespace from numpy and matplotlib \n```", "```py\n<matplotlib.text.Text at 0x10c48c198> \n```", "```py\n%load_ext zipline \n```", "```py\n%%zipline --start 2016-1-1 --end 2018-1-1\nfrom zipline.api import symbol, order, record\n\ndef initialize(context):\n    pass\n\ndef handle_data(context, data):\n    order(symbol('AAPL'), 10)\n    record(AAPL=data.current(symbol('AAPL'), \"price\") \n```", "```py\n_.head() \n```", "```py\nfrom zipline import run_algorithm\nimport pandas as pd\nimport pandas_datareader.data as web\n\ndef initialize(context):\n    ...\n\ndef handle_data(context, data):\n    ...\n\nstart = pd.Timestamp('2014')\nend = pd.Timestamp('2018')\n\nsp500 = web.DataReader('SP500', 'fred', start, end).SP500\nbenchmark_returns = sp500.pct_change()\n\nresult = run_algorithm(start=start.tz_localize('UTC'),\n                       end=end.tz_localize('UTC'),\n                       initialize=initialize,\n                       handle_data=handle_data,\n                       capital_base=100000,\n                       benchmark_returns=benchmark_returns,\n                       bundle='quandl',\n                       data_frequency='daily') \n```", "```py\n%%zipline --start 2014-1-1 --end 2018-1-1 -o dma.pickle\n\nfrom zipline.api import order_target, record, symbol\nimport matplotlib.pyplot as plt\n\ndef initialize(context):\n    context.i = 0\n    context.asset = symbol('AAPL')\n\ndef handle_data(context, data):\n    # Skip first 300 days to get full windows\n    context.i += 1\n    if context.i < 300:\n        return\n\n    # Compute averages\n    # data.history() has to be called with the same params\n    # from above and returns a pandas dataframe.\n    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency=\"1d\").mean()\n    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency=\"1d\").mean()\n\n    # Trading logic\n    if short_mavg > long_mavg:\n        # order_target orders as many shares as needed to\n        # achieve the desired number of shares.\n        order_target(context.asset, 100)\n    elif short_mavg < long_mavg:\n        order_target(context.asset, 0)\n\n    # Save values for later inspection\n    record(AAPL=data.current(context.asset, 'price'),\n           short_mavg=short_mavg,\n           long_mavg=long_mavg)\n\ndef analyze(context, perf):\n    fig = plt.figure()\n    ax1 = fig.add_subplot(211)\n    perf.portfolio_value.plot(ax=ax1)\n    ax1.set_ylabel('portfolio value in $')\n\n    ax2 = fig.add_subplot(212)\n    perf['AAPL'].plot(ax=ax2)\n    perf[['short_mavg', 'long_mavg']].plot(ax=ax2)\n\n    perf_trans = perf.loc[[t != [] for t in perf.transactions]]\n    buys = perf_trans.loc[[t[0]['amount'] > 0 for t in perf_trans.transactions]]\n    sells = perf_trans.loc[\n        [t[0]['amount'] < 0 for t in perf_trans.transactions]]\n    ax2.plot(buys.index, perf.short_mavg.loc[buys.index],\n             '^', markersize=10, color='m')\n    ax2.plot(sells.index, perf.short_mavg.loc[sells.index],\n             'v', markersize=10, color='k')\n    ax2.set_ylabel('price in $')\n    plt.legend(loc=0)\n    plt.show() \n```"]