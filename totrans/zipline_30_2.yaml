- en: Tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 教程
- en: 原文：[https://zipline.ml4trading.io/beginner-tutorial.html](https://zipline.ml4trading.io/beginner-tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://zipline.ml4trading.io/beginner-tutorial.html](https://zipline.ml4trading.io/beginner-tutorial.html)
- en: Zipline is an [open-source](https://github.com/stefan-jansen/zipline-reloaded)
    algorithmic trading simulator written in Python.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline 是一个用 Python 编写的 [开源](https://github.com/stefan-jansen/zipline-reloaded)
    算法交易模拟器。
- en: 'Some benefits include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些好处包括：
- en: '**Realistic**: slippage, transaction costs, order delays.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真实**：滑点、交易成本、订单延迟。'
- en: '**Stream-based**: Process each event individually, avoids look-ahead bias.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于流**：逐个处理每个事件，避免前瞻性偏差。'
- en: '**Batteries included**: Common transforms (moving average) as well as common
    risk calculations (Sharpe) can be computed efficiently while executing a backtest.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含电池**：常见的转换（移动平均线）以及常见的风险计算（夏普比率）可以在执行回测时高效计算。'
- en: This tutorial assumes that you have Zipline correctly installed, see the [Installation](install.html#install)
    instructions if you haven’t done so yet.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设您已正确安装 Zipline，如果您尚未完成，请参阅 [安装](install.html#install) 说明。
- en: How to construct an algorithm
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何构建算法
- en: 'Every Zipline algorithm consists of two functions you have to define:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Zipline 算法都由您必须定义的两个函数组成：
- en: '`initialize(context)`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize(context)`'
- en: '`handle_data(context, data)`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_data(context, data)`'
- en: Before the start of the algorithm, Zipline calls the `initialize()` function
    and passes in a `context` variable. `context` is a persistent namespace for you
    to store variables you need to access from one algorithm iteration to the next.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法开始之前，Zipline 调用 `initialize()` 函数并传入一个 `context` 变量。`context` 是一个持久的命名空间，用于存储您需要从一个算法迭代到下一个迭代访问的变量。
- en: After the algorithm has been initialized, Zipline calls the `handle_data()`
    function once for each event. At every call, it passes the same `context` variable
    and an event-frame called `data` containing the current trading bar with open,
    high, low, and close (OHLC) prices as well as volume for each stock in your universe.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 算法初始化后，Zipline 为每个事件调用 `handle_data()` 函数一次。在每次调用时，它传递相同的 `context` 变量和一个名为
    `data` 的事件帧，其中包含当前交易栏的开盘、最高、最低和收盘（OHLC）价格以及您投资组合中每只股票的成交量。
- en: A simple example
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: Let’s take a look at a very simple algorithm from the [zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)
    directory, `buyapple.py`. Each period, which is a trading day, it orders 10 shares
    of the Apple stock and records the price.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个来自 [zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)
    目录的非常简单的算法，`buyapple.py`。每个周期，即一个交易日，它订购 10 股苹果股票并记录价格。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, we first have to import some functions we would like to use.
    All functions commonly used in your algorithm can be found in `zipline.api`. Here
    we are using [`order()`](api-reference.html#zipline.api.order "zipline.api.order")
    which takes two arguments: a security object, and a number specifying how many
    stocks you would like to order (if negative, [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") will sell/short stocks). In this case we want to order 10
    shares of Apple at each iteration.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们首先必须导入一些我们想要使用的函数。所有在您的算法中常用的函数都可以在 `zipline.api` 中找到。这里我们使用 [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order")，它接受两个参数：一个证券对象和一个指定您想要订购多少股票的数字（如果是负数，[`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") 将卖出/做空股票）。在这种情况下，我们希望在每次迭代中订购 10 股苹果股票。
- en: 'Finally, the [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    function allows you to save the value of a variable at each iteration. You provide
    it with a name for the variable together with the variable itself: `varname=var`.
    After the algorithm finished running you will have access to each variable value
    you tracked with [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    under the name you provided (we will see this further below). You also see how
    we can access the current price data of the AAPL stock in the `data` event frame.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    函数允许您在每次迭代时保存变量的值。您向其提供变量的名称以及变量本身：`varname=var`。算法运行完成后，您将能够访问您使用 [`record()`](api-reference.html#zipline.api.record
    "zipline.api.record") 跟踪的每个变量值，并使用您提供的名称（我们将在下面进一步看到）。您还可以看到我们如何访问 AAPL 股票在 `data`
    事件帧中的当前价格数据。
- en: How to run the algorithm
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运行算法
- en: 'To now test this algorithm on financial data, Zipline provides three interfaces:
    1\. the command line via the `zipline` command, 2\. the `Jupyter Notebook` via
    the `zipline` magic, and 3\. the [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") to execute your algo like any Python script, for example
    in your IDE.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要在金融数据上测试此算法，Zipline 提供了三种接口：1. 通过 `zipline` 命令的命令行，2. 通过 `zipline` 魔法在 `Jupyter
    Notebook` 中，3. 通过 [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") 执行你的算法，就像任何 Python 脚本一样，例如在你的 IDE 中。
- en: Before we can run any algorithms, we need some data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行任何算法之前，我们需要一些数据。
- en: Ingesting Data
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据摄取
- en: 'If you haven’t ingested data yet, then run:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有摄取数据，那么运行：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where `<bundle>` is the name of the bundle to ingest. You can use the default
    quandl for now to work with the [Quandl WIKI price data](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies).
    Check out the [ingesting data](bundles.html#ingesting-data) section for more detail
    on how to obtain other new data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `<bundle>` 是你要摄取的 bundle 的名称。目前你可以使用默认的 quandl 来处理 [Quandl WIKI 价格数据](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies)。有关如何获取其他新数据的更多详细信息，请查看
    [数据摄取](bundles.html#ingesting-data) 部分。
- en: Command Line Interface
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行界面
- en: 'After you installed Zipline you should be able to execute the following from
    your command line (e.g. `cmd.exe` on Windows, the Terminal app on OSX, or e.g.
    the bash shell on Linux):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Zipline 后，你应该能够从命令行执行以下操作（例如在 Windows 上的 `cmd.exe`，在 OSX 上的终端应用程序，或在 Linux
    上的 bash shell）：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see there are a couple of flags that specify where to find your algorithm
    (`-f`) as well as parameters specifying which data to use, defaulting to `quandl`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有一些标志指定了算法的位置（`-f`），以及指定使用哪些数据的参数，默认为 `quandl`。
- en: There are also arguments for the date range to run the algorithm over (`--start`
    and `--end`).To use a benchmark, you need to choose one of the benchmark options
    listed before. You can always use the option (`--no-benchmark`) that uses zero
    returns as a benchmark ( alpha, beta and benchmark metrics are not calculated
    in this case).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运行算法的日期范围（`--start` 和 `--end`）也存在一些争议。要使用基准测试，你需要在前面列出的基准选项中选择一个。你始终可以使用不使用基准的选项（`--no-benchmark`），在这种情况下，将零回报作为基准（此时不计算alpha、beta和基准指标）。
- en: Finally, you’ll want to save the performance metrics of your algorithm so that
    you can analyze how it performed. This is done via the `--output` flag and will
    cause it to write the performance `DataFrame` in the pickle Python file format.
    Note that you can also define a configuration file with these parameters that
    you can then conveniently pass to the `-c` option so that you don’t have to supply
    the command line args all the time (see the .conf files in the examples directory).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你会想要保存算法的性能指标，以便你可以分析它的表现。这是通过 `--output` 标志完成的，它将导致它将性能 `DataFrame` 写入 pickle
    Python 文件格式。请注意，你还可以定义一个配置文件，其中包含这些参数，然后你可以方便地将其传递给 `-c` 选项，这样你就不必每次都提供命令行参数了（请参见示例目录中的
    .conf 文件）。
- en: 'Thus, to execute our algorithm from above and save the results to `buyapple_out.pickle`,
    we call `zipline run` as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要执行上述算法并将结果保存到 `buyapple_out.pickle`，我们按如下方式调用 `zipline run`：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`run` first calls the `initialize()` function, and then streams the historical
    stock price day-by-day through `handle_data()`. After each call to `handle_data()`
    we instruct `zipline` to order 10 stocks of AAPL. After the call of the `order()`
    function, `zipline` enters the ordered stock and amount in the order book. After
    the `handle_data()` function has finished, `zipline` looks for any open orders
    and tries to fill them. If the trading volume is high enough for this stock, the
    order is executed after adding the commission and applying the slippage model
    which models the influence of your order on the stock price, so your algorithm
    will be charged more than just the stock price * 10\. (Note, that you can also
    change the commission and slippage model that `zipline` uses, see the.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`run` 首先调用 `initialize()` 函数，然后逐日流式传输历史股票价格通过 `handle_data()`。在每次调用 `handle_data()`
    后，我们指示 `zipline` 订购 10 股 AAPL。在调用 `order()` 函数后，`zipline` 将订购的股票和数量输入订单簿。在 `handle_data()`
    函数完成后，`zipline` 查找任何未完成的订单并尝试填充它们。如果该股票的交易量足够大，订单将在添加佣金并应用滑点模型后执行，该模型模拟了你的订单对股票价格的影响，因此你的算法将被收取比股票价格
    * 10 更多的费用。（注意，你也可以更改 `zipline` 使用的佣金和滑点模型，请参见。'
- en: Let’s take a quick look at the performance `DataFrame`. For this, we use `pandas`
    from inside the IPython Notebook and print the first ten rows. Note that `zipline`
    makes heavy usage of `pandas`, especially for data input and outputting so it’s
    worth spending some time to learn it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看一下性能`DataFrame`。为此，我们在IPython Notebook中使用`pandas`并打印前10行。请注意，`zipline`大量使用`pandas`，尤其是在数据输入和输出方面，因此值得花时间学习它。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 |
    0.000000e+00 | 0.0 | 0.000000 | [{\''dt\'': 2016-01-04 21:00:00+00:00, \''reason\'':
    N... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 |
    10000000.0 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0
    | 1 | [] | 0.0 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 |
    0.000000e+00 | 0.0 | 0.000000 | [{\''dt\'': 2016-01-04 21:00:00+00:00, \''reason\'':
    N... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 |
    10000000.0 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0
    | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
- en: As you can see, there is a row for each trading day, starting on the first business
    day of 2016\. In the columns you can find various information about the state
    of your algorithm. The very first column `AAPL` was placed there by the `record()`
    function mentioned earlier and allows us to plot the price of apple. For example,
    we could easily examine now how our portfolio value changed over time compared
    to the AAPL stock price.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个交易日都有一行，从2016年的第一个工作日开始。在列中，你可以找到有关你的算法状态的各种信息。第一列`AAPL`是由前面提到的`record()`函数放置在那里的，它允许我们绘制苹果的价格。例如，我们现在可以很容易地检查我们的投资组合价值如何随时间变化，与AAPL股票价格相比。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
- en: As you can see, our algorithm performance as assessed by the `portfolio_value`
    closely matches that of the AAPL stock price. This is not surprising as our algorithm
    only bought AAPL every chance it got.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的算法表现，通过`portfolio_value`评估，与AAPL股票价格紧密匹配。这并不奇怪，因为我们的算法只要有机会就会买入AAPL。
- en: Jupyter Notebook
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jupyter Notebook
- en: The [Jupyter Notebook](https://jupyter.org/) is a very powerful browser-based
    interface to a Python interpreter (this tutorial was written in it). As it is
    a very popular interface for many quantitative researchers, Zipline provides an
    easy way to run your algorithm inside the Notebook without requiring you to use
    the CLI.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter Notebook](https://jupyter.org/)是一个非常强大的基于浏览器的Python解释器界面（本教程就是在其中编写的）。由于它是许多量化研究人员非常流行的界面，Zipline提供了一种简单的方法，可以在不要求你使用CLI的情况下在Notebook内运行你的算法。'
- en: To use it you have to write your algorithm in a cell and let Zipline know that
    it is supposed to run this algorithm. This is done via the `%%zipline` IPython
    magic command that is available after you `import zipline` from within the IPython
    Notebook. This magic takes the same arguments as the command line interface described
    above. Thus to run the algorithm from above with the same parameters we just have
    to execute the following cell after importing `zipline` to register the magic.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，你需要在一个单元格中编写你的算法，并让Zipline知道它应该运行这个算法。这是通过`%%zipline` IPython魔术命令完成的，该命令在你从IPython
    Notebook中`import zipline`后可用。这个魔术命令接受与上述命令行界面相同的参数。因此，要使用相同的参数运行上述算法，我们只需在导入`zipline`后执行以下单元格来注册魔术命令。
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we did not have to specify an input file as above since the magic
    will use the contents of the cell and look for your algorithm functions there.
    Also, instead of defining an output file we are specifying a variable name with
    `-o` that will be created in the name space and contain the performance `DataFrame`
    we looked at above.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不需要像上面那样指定输入文件，因为魔术将使用单元格的内容并在那里查找您的算法函数。此外，我们没有定义输出文件，而是使用`-o`指定了一个变量名，该变量名将在名称空间中创建，并包含我们在上面查看的性能`DataFrame`。
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: IDE via [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE通过[`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
- en: To execute an algorithm like a Python script in your favorite IDE, use the [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") (see [API Reference](api-reference.html#api-reference)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您喜欢的IDE中执行类似于Python脚本的算法，请使用[`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm")（参见[API参考](api-reference.html#api-reference)）。
- en: 'To adapt the `buyapple.py` example from above (see `buyapple_ide.py` in the
    same directory), simply add the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整上述`buyapple.py`示例（参见同一目录中的`buyapple_ide.py`），只需添加以下内容：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We pass the key algo parameters to [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"), including some benchmark data for the S&P 500 that we
    download from the [Federal Reserve Economic Data Service](https://fred.stlouisfed.org/series/SP500)
    (available for the last 10 years).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关键算法参数传递给[`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")，包括我们从[联邦储备经济数据服务](https://fred.stlouisfed.org/series/SP500)（过去10年可用）下载的S&P
    500的一些基准数据。
- en: The `result` return value contains the same `DataFrame` as in the previous example.
    Instead of defining an `analyze()` function as part of the algorithm, you can
    apply your preferred logic to this `DataFrame`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的`result`值包含与前一个示例相同的`DataFrame`。您可以对`DataFrame`应用您喜欢的逻辑，而不是将`analyze()`函数定义为算法的一部分。
- en: 'How to use historical prices: a dual Moving Average Cross-Over example'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用历史价格：双移动平均线交叉示例
- en: The Dual Moving Average (DMA) is a classic momentum strategy. It’s probably
    not used by any serious trader anymore but is still very instructive. The basic
    idea is that we compute two rolling or moving averages (mavg) – one with a longer
    window that is supposed to capture long-term trends and one shorter window that
    is supposed to capture short-term trends. Once the short-mavg crosses the long-mavg
    from below we assume that the stock price has upwards momentum and long the stock.
    If the short-mavg crosses from above we exit the positions as we assume the stock
    to go down further.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 双移动平均线（DMA）是一种经典的动量策略。它可能不再被任何严肃的交易者使用，但仍然非常有教育意义。基本思想是我们计算两个滚动或移动平均线（mavg）——一个具有较长窗口，旨在捕捉长期趋势，另一个具有较短窗口，旨在捕捉短期趋势。一旦短期mavg从下方穿过长期mavg，我们就假设股票价格具有上升趋势，并买入股票。如果短期mavg从上方穿过，我们退出头寸，因为我们假设股票会进一步下跌。
- en: 'As we need to have access to previous prices to implement this strategy we
    need a new concept: History'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要访问先前的价格来实施此策略，因此我们需要一个新概念：历史
- en: '`data.history()` is a convenience function that keeps a rolling window of data
    for you. The first argument is the number of bars you want to collect, the second
    argument is the unit (either `''1d''` or `''1m''`, but note that you need to have
    minute-level data for using `1m`). For a more detailed description of `history()`’s
    features, see the [API Reference](api-reference.html#api-reference). Let’s look
    at the strategy which should make this clear:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`data.history()`是一个方便的函数，它为您保留了一个数据滚动窗口。第一个参数是您想要收集的条形图数量，第二个参数是单位（`''1d''`或`''1m''`，但请注意，您需要有分钟级别的数据才能使用`1m`）。有关`history()`功能的更详细描述，请参阅[API参考](api-reference.html#api-reference)。让我们来看一个策略，这将使这一点变得清晰：'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![_images/tutorial_22_1.png](../Images/fb9083c2bb352fd43c1bf11750fbc684.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![_images/tutorial_22_1.png](../Images/fb9083c2bb352fd43c1bf11750fbc684.png)'
- en: Here we are explicitly defining an `analyze()` function that gets automatically
    called once the backtest is done.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们明确地定义了一个`analyze()`函数，该函数会在回测完成后自动被调用。
- en: Although it might not be directly apparent, the power of `history()` (pun intended)
    can not be under-estimated as most algorithms make use of prior market developments
    in one form or another. You could easily devise a strategy that trains a classifier
    with [scikit-learn](https://scikit-learn.org/stable/) which tries to predict future
    market movements based on past prices (note, that most of the `scikit-learn` functions
    require `numpy.ndarray`s rather than `pandas.DataFrame`s, so you can simply pass
    the underlying `ndarray` of a `DataFrame` via `.to_numpy()`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能不那么直接明显，但`history()`（双关语）的强大功能不容小觑，因为大多数算法都会以某种形式利用过去的市场发展。您可以轻松设计一个策略，使用[scikit-learn](https://scikit-learn.org/stable/)训练一个分类器，该分类器试图根据过去的价格预测未来的市场走势，（注意，大多数`scikit-learn`函数需要`numpy.ndarray`而不是`pandas.DataFrame`，因此您可以通过`.to_numpy()`简单地传递`DataFrame`的底层`ndarray`）。
- en: We also used the `order_target()` function above. This and other functions like
    it can make order management and portfolio rebalancing much easier. See the [API
    Reference](api-reference.html#api-reference) for more details.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了上面的`order_target()`函数。像这样的其他函数可以使订单管理和投资组合再平衡变得更加容易。有关更多详细信息，请参阅[API参考](api-reference.html#api-reference)。
- en: Conclusions
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: We hope that this tutorial gave you a little insight into the architecture,
    API, and features of `zipline`. For next steps, check out some of the [examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望本教程能为您提供一些关于`zipline`架构、API和功能的初步了解。下一步，可以查看一些[示例](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)。
- en: Feel free to ask questions on [our mailing list](https://groups.google.com/forum/#!forum/zipline),
    report problems on our [GitHub issue tracker](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open),
    or [get involved](https://exchange.ml4trading.io).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎在[我们的邮件列表](https://groups.google.com/forum/#!forum/zipline)上提问，在我们的[GitHub问题跟踪器](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open)上报问题，或[参与进来](https://exchange.ml4trading.io)。
- en: How to construct an algorithm
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何构建算法
- en: 'Every Zipline algorithm consists of two functions you have to define:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Zipline算法都由您必须定义的两个函数组成：
- en: '`initialize(context)`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize(context)`'
- en: '`handle_data(context, data)`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_data(context, data)`'
- en: Before the start of the algorithm, Zipline calls the `initialize()` function
    and passes in a `context` variable. `context` is a persistent namespace for you
    to store variables you need to access from one algorithm iteration to the next.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法开始之前，Zipline会调用`initialize()`函数并传递一个`context`变量。`context`是一个持久的命名空间，用于存储您需要从一个算法迭代访问到下一个算法的变量。
- en: After the algorithm has been initialized, Zipline calls the `handle_data()`
    function once for each event. At every call, it passes the same `context` variable
    and an event-frame called `data` containing the current trading bar with open,
    high, low, and close (OHLC) prices as well as volume for each stock in your universe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 算法初始化后，Zipline会为每个事件调用一次`handle_data()`函数。每次调用时，它都会传递相同的`context`变量和一个名为`data`的事件框架，其中包含当前交易时段的开盘、最高、最低和收盘（OHLC）价格以及您投资组合中每只股票的成交量。
- en: A simple example
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: Let’s take a look at a very simple algorithm from the [zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)
    directory, `buyapple.py`. Each period, which is a trading day, it orders 10 shares
    of the Apple stock and records the price.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个非常简单的算法，来自[zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)目录，`buyapple.py`。每个周期，即交易日，它都会订购10股苹果股票并记录价格。
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, we first have to import some functions we would like to use.
    All functions commonly used in your algorithm can be found in `zipline.api`. Here
    we are using [`order()`](api-reference.html#zipline.api.order "zipline.api.order")
    which takes two arguments: a security object, and a number specifying how many
    stocks you would like to order (if negative, [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") will sell/short stocks). In this case we want to order 10
    shares of Apple at each iteration.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们首先需要导入一些我们想要使用的函数。所有在您的算法中常用的函数都可以在`zipline.api`中找到。这里我们使用的是[`order()`](api-reference.html#zipline.api.order
    "zipline.api.order")，它接受两个参数：一个证券对象和一个指定您想要订购多少股票的数字（如果是负数，[`order()`](api-reference.html#zipline.api.order
    "zipline.api.order")将卖出/做空股票）。在这种情况下，我们希望在每次迭代中订购10股苹果股票。
- en: 'Finally, the [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    function allows you to save the value of a variable at each iteration. You provide
    it with a name for the variable together with the variable itself: `varname=var`.
    After the algorithm finished running you will have access to each variable value
    you tracked with [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    under the name you provided (we will see this further below). You also see how
    we can access the current price data of the AAPL stock in the `data` event frame.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`record()`](api-reference.html#zipline.api.record "zipline.api.record")函数允许您在每次迭代中保存变量的值。您向它提供变量的名称以及变量本身：`varname=var`。算法运行完成后，您将能够访问您使用[`record()`](api-reference.html#zipline.api.record
    "zipline.api.record")跟踪的每个变量值，并使用您提供的名称（我们将在下面进一步看到）。您还可以看到我们如何访问`data`事件帧中AAPL股票的当前价格数据。
- en: A simple example
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: Let’s take a look at a very simple algorithm from the [zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)
    directory, `buyapple.py`. Each period, which is a trading day, it orders 10 shares
    of the Apple stock and records the price.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下[zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)目录中的一个非常简单的算法，`buyapple.py`。每个周期，即交易日，它都会下单购买10股苹果股票并记录价格。
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see, we first have to import some functions we would like to use.
    All functions commonly used in your algorithm can be found in `zipline.api`. Here
    we are using [`order()`](api-reference.html#zipline.api.order "zipline.api.order")
    which takes two arguments: a security object, and a number specifying how many
    stocks you would like to order (if negative, [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") will sell/short stocks). In this case we want to order 10
    shares of Apple at each iteration.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们首先需要导入一些我们想要使用的函数。所有在您的算法中常用的函数都可以在`zipline.api`中找到。这里我们使用的是[`order()`](api-reference.html#zipline.api.order
    "zipline.api.order")，它接受两个参数：一个证券对象和一个指定您想要订购多少股票的数字（如果是负数，[`order()`](api-reference.html#zipline.api.order
    "zipline.api.order")将卖出/做空股票）。在这种情况下，我们希望在每次迭代中订购10股苹果股票。
- en: 'Finally, the [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    function allows you to save the value of a variable at each iteration. You provide
    it with a name for the variable together with the variable itself: `varname=var`.
    After the algorithm finished running you will have access to each variable value
    you tracked with [`record()`](api-reference.html#zipline.api.record "zipline.api.record")
    under the name you provided (we will see this further below). You also see how
    we can access the current price data of the AAPL stock in the `data` event frame.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`record()`](api-reference.html#zipline.api.record "zipline.api.record")函数允许您在每次迭代中保存变量的值。您向它提供变量的名称以及变量本身：`varname=var`。算法运行完成后，您将能够访问您使用[`record()`](api-reference.html#zipline.api.record
    "zipline.api.record")跟踪的每个变量值，并使用您提供的名称（我们将在下面进一步看到）。您还可以看到我们如何访问`data`事件帧中AAPL股票的当前价格数据。
- en: How to run the algorithm
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运行算法
- en: 'To now test this algorithm on financial data, Zipline provides three interfaces:
    1\. the command line via the `zipline` command, 2\. the `Jupyter Notebook` via
    the `zipline` magic, and 3\. the [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") to execute your algo like any Python script, for example
    in your IDE.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要在金融数据上测试这个算法，Zipline提供了三个接口：1. 通过`zipline`命令的命令行，2. 通过`zipline`魔法的`Jupyter
    Notebook`，以及3. [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")来像任何Python脚本一样执行您的算法，例如在您的IDE中。
- en: Before we can run any algorithms, we need some data.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够运行任何算法之前，我们需要一些数据。
- en: Ingesting Data
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据摄取
- en: 'If you haven’t ingested data yet, then run:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有摄取数据，请运行：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: where `<bundle>` is the name of the bundle to ingest. You can use the default
    quandl for now to work with the [Quandl WIKI price data](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies).
    Check out the [ingesting data](bundles.html#ingesting-data) section for more detail
    on how to obtain other new data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`<bundle>`是要摄取的bundle的名称。您现在可以使用默认的quandl来处理[Quandl WIKI价格数据](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies)。有关如何获取其他新数据的更多详细信息，请查看[摄取数据](bundles.html#ingesting-data)部分。
- en: Command Line Interface
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行界面
- en: 'After you installed Zipline you should be able to execute the following from
    your command line (e.g. `cmd.exe` on Windows, the Terminal app on OSX, or e.g.
    the bash shell on Linux):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Zipline后，您应该能够从命令行执行以下操作（例如在Windows上的`cmd.exe`，在OSX上的Terminal应用程序，或在Linux上的bash
    shell）：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see there are a couple of flags that specify where to find your algorithm
    (`-f`) as well as parameters specifying which data to use, defaulting to `quandl`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有几个标志指定了算法的位置（`-f`）以及指定使用哪些数据的参数，默认为`quandl`。
- en: There are also arguments for the date range to run the algorithm over (`--start`
    and `--end`).To use a benchmark, you need to choose one of the benchmark options
    listed before. You can always use the option (`--no-benchmark`) that uses zero
    returns as a benchmark ( alpha, beta and benchmark metrics are not calculated
    in this case).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有用于指定算法运行时间范围的参数（`--start`和`--end`）。要使用基准，您需要选择列出的基准选项之一。您始终可以使用使用零回报作为基准的选项（`--no-benchmark`）（在这种情况下，不计算alpha，beta和基准指标）。
- en: Finally, you’ll want to save the performance metrics of your algorithm so that
    you can analyze how it performed. This is done via the `--output` flag and will
    cause it to write the performance `DataFrame` in the pickle Python file format.
    Note that you can also define a configuration file with these parameters that
    you can then conveniently pass to the `-c` option so that you don’t have to supply
    the command line args all the time (see the .conf files in the examples directory).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将希望保存算法的性能指标，以便您可以分析其表现。这是通过`--output`标志完成的，这将导致它以pickle Python文件格式编写性能`DataFrame`。请注意，您还可以使用这些参数定义一个配置文件，然后方便地将其传递给`-c`选项，这样您就不必一直提供命令行参数（请参见示例目录中的.conf文件）。
- en: 'Thus, to execute our algorithm from above and save the results to `buyapple_out.pickle`,
    we call `zipline run` as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要执行上述算法并将结果保存到`buyapple_out.pickle`，我们按如下方式调用`zipline run`：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`run` first calls the `initialize()` function, and then streams the historical
    stock price day-by-day through `handle_data()`. After each call to `handle_data()`
    we instruct `zipline` to order 10 stocks of AAPL. After the call of the `order()`
    function, `zipline` enters the ordered stock and amount in the order book. After
    the `handle_data()` function has finished, `zipline` looks for any open orders
    and tries to fill them. If the trading volume is high enough for this stock, the
    order is executed after adding the commission and applying the slippage model
    which models the influence of your order on the stock price, so your algorithm
    will be charged more than just the stock price * 10\. (Note, that you can also
    change the commission and slippage model that `zipline` uses, see the.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`首先调用`initialize()`函数，然后通过`handle_data()`逐日流式传输历史股票价格。在每次调用`handle_data()`之后，我们指示`zipline`订购10股AAPL。在调用`order()`函数之后，`zipline`将订购的股票和数量输入订单簿。在`handle_data()`函数完成后，`zipline`查找任何未完成的订单并尝试填充它们。如果该股票的交易量足够高，订单将在添加佣金并应用滑点模型后执行，该模型模拟了您的订单对股票价格的影响，因此您的算法将被收取的费用不仅仅是股票价格*
    10。（请注意，您也可以更改`zipline`使用的佣金和滑点模型，请参见。'
- en: Let’s take a quick look at the performance `DataFrame`. For this, we use `pandas`
    from inside the IPython Notebook and print the first ten rows. Note that `zipline`
    makes heavy usage of `pandas`, especially for data input and outputting so it’s
    worth spending some time to learn it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下性能`DataFrame`。为此，我们在IPython Notebook中使用`pandas`并打印前10行。请注意，`zipline`大量使用`pandas`，特别是在数据输入和输出方面，因此值得花时间学习它。
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 |
    0.000000e+00 | 0.0 | 0.000000 | [{\''dt\'': 2016-01-04 21:00:00+00:00, \''reason\'':
    N... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 |
    10000000.0 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0
    | 1 | [] | 0.0 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 |
    0.000000e+00 | 0.0 | 0.000000 | [{\''dt\'': 2016-01-04 21:00:00+00:00, \''reason\'':
    N... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 |
    10000000.0 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0
    | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
- en: As you can see, there is a row for each trading day, starting on the first business
    day of 2016\. In the columns you can find various information about the state
    of your algorithm. The very first column `AAPL` was placed there by the `record()`
    function mentioned earlier and allows us to plot the price of apple. For example,
    we could easily examine now how our portfolio value changed over time compared
    to the AAPL stock price.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，每行代表一个交易日，从2016年的第一个工作日开始。在列中，您可以找到有关您的算法状态的各种信息。第一列`AAPL`是由前面提到的`record()`函数放置在那里的，它允许我们绘制苹果的价格。例如，我们现在可以很容易地检查我们的投资组合价值随时间的变化与AAPL股票价格相比。
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
- en: As you can see, our algorithm performance as assessed by the `portfolio_value`
    closely matches that of the AAPL stock price. This is not surprising as our algorithm
    only bought AAPL every chance it got.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们的算法性能通过`portfolio_value`评估，与AAPL股票价格紧密匹配。这并不令人惊讶，因为我们的算法只要有机会就会买入AAPL。
- en: Jupyter Notebook
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jupyter Notebook
- en: The [Jupyter Notebook](https://jupyter.org/) is a very powerful browser-based
    interface to a Python interpreter (this tutorial was written in it). As it is
    a very popular interface for many quantitative researchers, Zipline provides an
    easy way to run your algorithm inside the Notebook without requiring you to use
    the CLI.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter Notebook](https://jupyter.org/)是一个非常强大的基于浏览器的Python解释器界面（本教程就是在其中编写的）。由于它是许多定量研究人员非常流行的界面，Zipline提供了一种简单的方法，可以在不要求您使用CLI的情况下在Notebook中运行您的算法。'
- en: To use it you have to write your algorithm in a cell and let Zipline know that
    it is supposed to run this algorithm. This is done via the `%%zipline` IPython
    magic command that is available after you `import zipline` from within the IPython
    Notebook. This magic takes the same arguments as the command line interface described
    above. Thus to run the algorithm from above with the same parameters we just have
    to execute the following cell after importing `zipline` to register the magic.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，您必须在单元格中编写您的算法，并让Zipline知道它应该运行此算法。这是通过`%%zipline` IPython魔法命令完成的，该命令在您从IPython
    Notebook中`import zipline`后可用。此魔法接受与上面描述的命令行界面相同的参数。因此，要使用相同的参数运行上面的算法，我们只需在导入`zipline`以注册魔法后执行以下单元格。
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that we did not have to specify an input file as above since the magic
    will use the contents of the cell and look for your algorithm functions there.
    Also, instead of defining an output file we are specifying a variable name with
    `-o` that will be created in the name space and contain the performance `DataFrame`
    we looked at above.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要像上面那样指定输入文件，因为魔法将使用单元格的内容并在那里查找您的算法函数。此外，我们没有定义输出文件，而是使用`-o`指定了一个变量名，该变量名将在名称空间中创建，并包含我们上面查看的性能`DataFrame`。
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: IDE via [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE通过[`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
- en: To execute an algorithm like a Python script in your favorite IDE, use the [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") (see [API Reference](api-reference.html#api-reference)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您喜欢的IDE中像Python脚本一样执行算法，请使用[`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm")（参见[API参考](api-reference.html#api-reference)）。
- en: 'To adapt the `buyapple.py` example from above (see `buyapple_ide.py` in the
    same directory), simply add the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据上述的`buyapple.py`示例进行调整（参见同一目录中的`buyapple_ide.py`），只需添加以下内容：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We pass the key algo parameters to [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"), including some benchmark data for the S&P 500 that we
    download from the [Federal Reserve Economic Data Service](https://fred.stlouisfed.org/series/SP500)
    (available for the last 10 years).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关键算法参数传递给[`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")，包括我们从[联邦储备经济数据服务](https://fred.stlouisfed.org/series/SP500)下载的S&P
    500的一些基准数据（过去10年内的数据）。
- en: The `result` return value contains the same `DataFrame` as in the previous example.
    Instead of defining an `analyze()` function as part of the algorithm, you can
    apply your preferred logic to this `DataFrame`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`result`返回值包含与前一个示例相同的`DataFrame`。您可以对`DataFrame`应用您喜欢的逻辑，而不是将`analyze()`函数定义为算法的一部分。'
- en: Ingesting Data
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据摄取
- en: 'If you haven’t ingested data yet, then run:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未摄取数据，请运行：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: where `<bundle>` is the name of the bundle to ingest. You can use the default
    quandl for now to work with the [Quandl WIKI price data](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies).
    Check out the [ingesting data](bundles.html#ingesting-data) section for more detail
    on how to obtain other new data.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`<bundle>`是将要摄取的bundle的名称。您现在可以使用默认的quandl来处理[Quandl WIKI价格数据](https://www.quandl.com/databases/WIKIP/documentation?anchor=companies)。有关如何获取其他新数据的更多详细信息，请查看[数据摄取](bundles.html#ingesting-data)部分。
- en: Command Line Interface
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行界面
- en: 'After you installed Zipline you should be able to execute the following from
    your command line (e.g. `cmd.exe` on Windows, the Terminal app on OSX, or e.g.
    the bash shell on Linux):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Zipline后，您应该能够从命令行执行以下操作（例如，在Windows上的`cmd.exe`，在OSX上的Terminal应用程序，或在Linux上的bash
    shell）：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see there are a couple of flags that specify where to find your algorithm
    (`-f`) as well as parameters specifying which data to use, defaulting to `quandl`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有几个标志指定了算法的位置（`-f`）以及指定使用哪些数据的参数，默认为`quandl`。
- en: There are also arguments for the date range to run the algorithm over (`--start`
    and `--end`).To use a benchmark, you need to choose one of the benchmark options
    listed before. You can always use the option (`--no-benchmark`) that uses zero
    returns as a benchmark ( alpha, beta and benchmark metrics are not calculated
    in this case).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还有用于指定算法运行时间范围的参数（`--start`和`--end`）。要使用基准，您需要选择前面列出的基准选项之一。您始终可以使用将零回报作为基准的选项（`--no-benchmark`）（在这种情况下，不计算alpha、beta和基准指标）。
- en: Finally, you’ll want to save the performance metrics of your algorithm so that
    you can analyze how it performed. This is done via the `--output` flag and will
    cause it to write the performance `DataFrame` in the pickle Python file format.
    Note that you can also define a configuration file with these parameters that
    you can then conveniently pass to the `-c` option so that you don’t have to supply
    the command line args all the time (see the .conf files in the examples directory).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您会希望保存算法的性能指标，以便分析其表现。这是通过`--output`标志完成的，它将导致它以pickle Python文件格式编写性能`DataFrame`。请注意，您还可以使用这些参数定义一个配置文件，然后方便地将其传递给`-c`选项，这样您就不必每次都提供命令行参数（请参阅示例目录中的.conf文件）。
- en: 'Thus, to execute our algorithm from above and save the results to `buyapple_out.pickle`,
    we call `zipline run` as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要执行上述算法并将结果保存到`buyapple_out.pickle`，我们按如下方式调用`zipline run`：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`run` first calls the `initialize()` function, and then streams the historical
    stock price day-by-day through `handle_data()`. After each call to `handle_data()`
    we instruct `zipline` to order 10 stocks of AAPL. After the call of the `order()`
    function, `zipline` enters the ordered stock and amount in the order book. After
    the `handle_data()` function has finished, `zipline` looks for any open orders
    and tries to fill them. If the trading volume is high enough for this stock, the
    order is executed after adding the commission and applying the slippage model
    which models the influence of your order on the stock price, so your algorithm
    will be charged more than just the stock price * 10\. (Note, that you can also
    change the commission and slippage model that `zipline` uses, see the.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`首先调用`initialize()`函数，然后通过`handle_data()`逐日流式传输历史股票价格。在每次调用`handle_data()`之后，我们指示`zipline`订购10股AAPL。在调用`order()`函数之后，`zipline`将订购的股票和数量输入订单簿。在`handle_data()`函数完成后，`zipline`查找任何未完成的订单并尝试填充它们。如果该股票的交易量足够大，订单在添加佣金并应用滑点模型（该模型模拟您的订单对股票价格的影响）后执行，因此您的算法将被收取的费用不仅仅是股票价格
    * 10。（请注意，您也可以更改`zipline`使用的佣金和滑点模型，请参阅。'
- en: Let’s take a quick look at the performance `DataFrame`. For this, we use `pandas`
    from inside the IPython Notebook and print the first ten rows. Note that `zipline`
    makes heavy usage of `pandas`, especially for data input and outputting so it’s
    worth spending some time to learn it.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看一下`DataFrame`的表现。为此，我们在IPython Notebook中使用`pandas`并打印前10行。请注意，`zipline`大量使用`pandas`，尤其是在数据输入和输出方面，因此值得花时间学习它。
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 |
    0.000000e+00 | 0.0 | 0.000000 | [{\''dt\'': 2016-01-04 21:00:00+00:00, \''reason\'':
    N... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 |
    10000000.0 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0
    | 1 | [] | 0.0 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983 |
    NaN | NaN | 0.0 | 10000000.0 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0 | 0.000000e+00
    | 0.0 | 0.000000 | [{''dt'': 2016-01-04 21:00:00+00:00, ''reason'': N... | 2016-01-04
    21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00 | 0.0 | 10000000.0 | [] |
    0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.0 | 0.0 | 0.0 | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 0.000001 | -1.000000e-07 | -0.000022
    | -0.012312 | 0.175994 | -0.000006 | -1028.1 | 9998971.9 | 1027.1 | 1027.1 | 0.0
    | 0.000103 | 1027.1 | 1027.1 | 1 | -1.000000e-07 | 0.0 | 0.000103 | [{\''dt\'':
    2016-01-05 21:00:00+00:00, \''reason\'': N... | 2016-01-05 21:00:00+00:00 | 2016-01
    | 2016-01-05 14:31:00+00:00 | -1.0 | 9999999.0 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -1.000000e-07 | -11.224972 | 0 | 0 | 0 | -11.224972
    | 10000000.0 | 0.0 | 0.0 | 2 | [{\''order_id\'': \''4011063b5c094e82a5391527044098b...
    | 0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 0.000019 | -2.210000e-06 | -0.000073
    | -0.024771 | 0.137853 | 0.000054 | -1008.0 | 9997963.9 | 2014.0 | 2014.0 | 0.0
    | 0.000201 | 2014.0 | 2014.0 | 1 | -2.210000e-06 | 0.0 | 0.000201 | [{\''dt\'':
    2016-01-06 21:00:00+00:00, \''reason\'': N... | 2016-01-06 21:00:00+00:00 | 2016-01
    | 2016-01-06 14:31:00+00:00 | -21.1 | 9999977.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -2.110000e-06 | -9.823839 | 0 | 0 | 0 | -9.588756
    | 9998971.9 | 1027.1 | 1027.1 | 3 | [{\''order_id\'': \''3bf9fe20cc46468d99f741474226c03...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 0.000064 | -1.081000e-05 | 0.000243 |
    -0.048168 | 0.167868 | 0.000300 | -965.5 | 9996998.4 | 2893.5 | 2893.5 | 0.0 |
    0.000289 | 2893.5 | 2893.5 | 1 | -1.081000e-05 | 0.0 | 0.000289 | [{\''dt\'':
    2016-01-07 21:00:00+00:00, \''reason\'': N... | 2016-01-07 21:00:00+00:00 | 2016-01
    | 2016-01-07 14:31:00+00:00 | -86.0 | 9999891.9 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | -8.600019e-06 | -10.592737 | 0 | 0 | 0 | -9.688947
    | 9997963.9 | 2014.0 | 2014.0 | 4 | [{\''order_id\'': \''6af6aed9fbb44a6bba17e802051b94d...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 0.000063 | -9.380000e-06 | 0.000466 |
    -0.058601 | 0.145654 | 0.000311 | -970.6 | 9996027.8 | 3878.4 | 3878.4 | 0.0 |
    0.000388 | 3878.4 | 3878.4 | 1 | -1.081000e-05 | 0.0 | 0.000388 | [{\''dt\'':
    2016-01-08 21:00:00+00:00, \''reason\'': N... | 2016-01-08 21:00:00+00:00 | 2016-01
    | 2016-01-08 14:31:00+00:00 | 14.3 | 9999906.2 | [{\''sid\'': Equity(8 [AAPL]),
    \''last_sale_price\'': ... | 1.430015e-06 | -7.511729 | 0 | 0 | 0 | -7.519659
    | 9996998.4 | 2893.5 | 2893.5 | 5 | [{\''order_id\'': \''18f64975732449a18fca06e9c69bf5c...
    | 0.0 |'
- en: As you can see, there is a row for each trading day, starting on the first business
    day of 2016\. In the columns you can find various information about the state
    of your algorithm. The very first column `AAPL` was placed there by the `record()`
    function mentioned earlier and allows us to plot the price of apple. For example,
    we could easily examine now how our portfolio value changed over time compared
    to the AAPL stock price.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每行代表一个交易日，从2016年的第一个工作日开始。在列中，您可以找到有关算法状态的各种信息。最左边的列`AAPL`是由前面提到的`record()`函数放置的，它允许我们绘制苹果的价格。例如，我们现在可以很容易地检查我们的投资组合价值随时间的变化与AAPL股票价格相比如何。
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![_images/tutorial_11_2.png](../Images/b731cbe4c5b44f822b43d68ecaf39c56.png)'
- en: As you can see, our algorithm performance as assessed by the `portfolio_value`
    closely matches that of the AAPL stock price. This is not surprising as our algorithm
    only bought AAPL every chance it got.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的算法性能通过`portfolio_value`评估，与AAPL股票价格紧密匹配。这并不令人惊讶，因为我们的算法只要有机会就会购买AAPL。
- en: Jupyter Notebook
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jupyter Notebook
- en: The [Jupyter Notebook](https://jupyter.org/) is a very powerful browser-based
    interface to a Python interpreter (this tutorial was written in it). As it is
    a very popular interface for many quantitative researchers, Zipline provides an
    easy way to run your algorithm inside the Notebook without requiring you to use
    the CLI.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter Notebook](https://jupyter.org/)是一个非常强大的基于浏览器的Python解释器界面（本教程就是在其中编写的）。由于它是许多定量研究人员非常流行的界面，Zipline提供了一种简单的方法，可以在不要求你使用CLI的情况下在Notebook内部运行你的算法。'
- en: To use it you have to write your algorithm in a cell and let Zipline know that
    it is supposed to run this algorithm. This is done via the `%%zipline` IPython
    magic command that is available after you `import zipline` from within the IPython
    Notebook. This magic takes the same arguments as the command line interface described
    above. Thus to run the algorithm from above with the same parameters we just have
    to execute the following cell after importing `zipline` to register the magic.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，你需要在一个单元格中编写你的算法，并让Zipline知道它应该运行这个算法。这是通过`%%zipline` IPython魔术命令完成的，该命令在你从IPython
    Notebook中`import zipline`之后可用。这个魔术接受与上面描述的命令行界面相同的参数。因此，要使用相同的参数运行上面的算法，我们只需要在导入`zipline`以注册魔术之后执行以下单元格。
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note that we did not have to specify an input file as above since the magic
    will use the contents of the cell and look for your algorithm functions there.
    Also, instead of defining an output file we are specifying a variable name with
    `-o` that will be created in the name space and contain the performance `DataFrame`
    we looked at above.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要像上面那样指定输入文件，因为魔术将使用单元格的内容并在那里查找你的算法函数。此外，我们不是定义输出文件，而是使用`-o`指定一个变量名，该变量名将在名称空间中创建，并包含我们在上面查看的性能`DataFrame`。
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '|  | AAPL | algo_volatility | algorithm_period_return | alpha | benchmark_period_return
    | benchmark_volatility | beta | capital_used | ending_cash | ending_exposure |
    ending_value | excess_return | gross_leverage | long_exposure | long_value | longs_count
    | max_drawdown | max_leverage | net_leverage | orders | period_close | period_label
    | period_open | pnl | portfolio_value | positions | returns | sharpe | short_exposure
    | short_value | shorts_count | sortino | starting_cash | starting_exposure | starting_value
    | trading_days | transactions | treasury_period_return |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    |'
- en: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-04 21:00:00+00:00 | 105.35 | NaN | 0.000000e+00 | NaN | -0.013983
    | NaN | NaN | 0.00 | 10000000.00 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0
    | 0.000000e+00 | 0.0 | 0.000000 | [{\''created\'': 2016-01-04 21:00:00+00:00,
    \''reaso... | 2016-01-04 21:00:00+00:00 | 2016-01 | 2016-01-04 14:31:00+00:00
    | 0.00 | 10000000.00 | [] | 0.000000e+00 | NaN | 0 | 0 | 0 | NaN | 10000000.00
    | 0.0 | 0.0 | 1 | [] | 0.0 |'
- en: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-05 21:00:00+00:00 | 102.71 | 1.122497e-08 | -1.000000e-09 | -2.247510e-07
    | -0.012312 | 0.175994 | -6.378047e-08 | -1027.11 | 9998972.89 | 1027.1 | 1027.1
    | 0.0 | 0.000103 | 1027.1 | 1027.1 | 1 | -9.999999e-10 | 0.0 | 0.000103 | [{\''created\'':
    2016-01-04 21:00:00+00:00, \''reaso... | 2016-01-05 21:00:00+00:00 | 2016-01 |
    2016-01-05 14:31:00+00:00 | -0.01 | 9999999.99 | [{\''amount\'': 10, \''cost_basis\'':
    102.711000000000... | -1.000000e-09 | -11.224972 | 0 | 0 | 0 | -11.224972 | 10000000.00
    | 0.0 | 0.0 | 2 | [{\''dt\'': 2016-01-05 21:00:00+00:00, \''order_id\'':... |
    0.0 |'
- en: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-06 21:00:00+00:00 | 100.70 | 1.842654e-05 | -2.012000e-06 | -4.883861e-05
    | -0.024771 | 0.137853 | 5.744807e-05 | -1007.01 | 9997965.88 | 2014.0 | 2014.0
    | 0.0 | 0.000201 | 2014.0 | 2014.0 | 1 | -2.012000e-06 | 0.0 | 0.000201 | [{\''created\'':
    2016-01-05 21:00:00+00:00, \''reaso... | 2016-01-06 21:00:00+00:00 | 2016-01 |
    2016-01-06 14:31:00+00:00 | -20.11 | 9999979.88 | [{\''amount\'': 20, \''cost_basis\'':
    101.706000000000... | -2.011000e-06 | -9.171989 | 0 | 0 | 0 | -9.169708 | 9998972.89
    | 1027.1 | 1027.1 | 3 | [{\''dt\'': 2016-01-06 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-07 21:00:00+00:00 | 96.45 | 6.394658e-05 | -1.051300e-05 | 2.633450e-04
    | -0.048168 | 0.167868 | 3.005102e-04 | -964.51 | 9997001.37 | 2893.5 | 2893.5
    | 0.0 | 0.000289 | 2893.5 | 2893.5 | 1 | -1.051300e-05 | 0.0 | 0.000289 | [{\''created\'':
    2016-01-06 21:00:00+00:00, \''reaso... | 2016-01-07 21:00:00+00:00 | 2016-01 |
    2016-01-07 14:31:00+00:00 | -85.01 | 9999894.87 | [{\''amount\'': 30, \''cost_basis\'':
    99.9543333333335... | -8.501017e-06 | -10.357397 | 0 | 0 | 0 | -9.552189 | 9997965.88
    | 2014.0 | 2014.0 | 4 | [{\''dt\'': 2016-01-07 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 2016-01-08 21:00:00+00:00 | 96.96 | 6.275294e-05 | -8.984000e-06 | 4.879306e-04
    | -0.058601 | 0.145654 | 3.118401e-04 | -969.61 | 9996031.76 | 3878.4 | 3878.4
    | 0.0 | 0.000388 | 3878.4 | 3878.4 | 1 | -1.051300e-05 | 0.0 | 0.000388 | [{\''created\'':
    2016-01-07 21:00:00+00:00, \''reaso... | 2016-01-08 21:00:00+00:00 | 2016-01 |
    2016-01-08 14:31:00+00:00 | 15.29 | 9999910.16 | [{\''amount\'': 40, \''cost_basis\'':
    99.2060000000002... | 1.529016e-06 | -7.215497 | 0 | 0 | 0 | -7.301134 | 9997001.37
    | 2893.5 | 2893.5 | 5 | [{\''dt\'': 2016-01-08 21:00:00+00:00, \''order_id\'':...
    | 0.0 |'
- en: IDE via [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE通过 [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")
- en: To execute an algorithm like a Python script in your favorite IDE, use the [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm") (see [API Reference](api-reference.html#api-reference)).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您喜欢的IDE中像执行Python脚本一样执行算法，请使用 [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm")（参见[API参考](api-reference.html#api-reference)）。
- en: 'To adapt the `buyapple.py` example from above (see `buyapple_ide.py` in the
    same directory), simply add the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整上述`buyapple.py`示例（参见同一目录中的`buyapple_ide.py`），只需添加以下内容：
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We pass the key algo parameters to [`run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"), including some benchmark data for the S&P 500 that we
    download from the [Federal Reserve Economic Data Service](https://fred.stlouisfed.org/series/SP500)
    (available for the last 10 years).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关键算法参数传递给 [`run_algorithm()`](api-reference.html#zipline.run_algorithm "zipline.run_algorithm")，包括我们从[联邦储备经济数据服务](https://fred.stlouisfed.org/series/SP500)下载的S&P
    500的一些基准数据（过去10年可用）。
- en: The `result` return value contains the same `DataFrame` as in the previous example.
    Instead of defining an `analyze()` function as part of the algorithm, you can
    apply your preferred logic to this `DataFrame`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值`result`包含与前一个示例相同的`DataFrame`。您可以对这个`DataFrame`应用您喜欢的逻辑，而不是在算法中定义一个`analyze()`函数。
- en: 'How to use historical prices: a dual Moving Average Cross-Over example'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用历史价格：双移动平均线交叉示例
- en: The Dual Moving Average (DMA) is a classic momentum strategy. It’s probably
    not used by any serious trader anymore but is still very instructive. The basic
    idea is that we compute two rolling or moving averages (mavg) – one with a longer
    window that is supposed to capture long-term trends and one shorter window that
    is supposed to capture short-term trends. Once the short-mavg crosses the long-mavg
    from below we assume that the stock price has upwards momentum and long the stock.
    If the short-mavg crosses from above we exit the positions as we assume the stock
    to go down further.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 双移动平均线（DMA）是一种经典的动量策略。虽然现在可能没有哪个严肃的交易者会使用它，但它仍然非常有教育意义。基本思想是我们计算两个滚动或移动平均线（mavg）——一个较长窗口的平均线，用于捕捉长期趋势，另一个较短窗口的平均线，用于捕捉短期趋势。一旦短期mavg从下方穿过长期mavg，我们就认为股价具有上升动量，并买入股票。如果短期mavg从上方穿过，我们就退出仓位，因为我们认为股价会进一步下跌。
- en: 'As we need to have access to previous prices to implement this strategy we
    need a new concept: History'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要访问先前的价格来实现这个策略，我们需要一个新的概念：历史。
- en: '`data.history()` is a convenience function that keeps a rolling window of data
    for you. The first argument is the number of bars you want to collect, the second
    argument is the unit (either `''1d''` or `''1m''`, but note that you need to have
    minute-level data for using `1m`). For a more detailed description of `history()`’s
    features, see the [API Reference](api-reference.html#api-reference). Let’s look
    at the strategy which should make this clear:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`data.history()`是一个便捷函数，它为您保留了一个数据滚动窗口。第一个参数是您想要收集的条形图数量，第二个参数是单位（`''1d''`或`''1m''`，但请注意，使用`1m`需要有分钟级别的数据）。如需更详细地了解`history()`的功能，请参阅[API参考](api-reference.html#api-reference)。让我们来看一下这个策略，它应该能让你更清楚：'
- en: '[PRE46]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![_images/tutorial_22_1.png](../Images/fb9083c2bb352fd43c1bf11750fbc684.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![_images/tutorial_22_1.png](../Images/fb9083c2bb352fd43c1bf11750fbc684.png)'
- en: Here we are explicitly defining an `analyze()` function that gets automatically
    called once the backtest is done.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们明确地定义了一个`analyze()`函数，该函数在回测完成后会自动调用。
- en: Although it might not be directly apparent, the power of `history()` (pun intended)
    can not be under-estimated as most algorithms make use of prior market developments
    in one form or another. You could easily devise a strategy that trains a classifier
    with [scikit-learn](https://scikit-learn.org/stable/) which tries to predict future
    market movements based on past prices (note, that most of the `scikit-learn` functions
    require `numpy.ndarray`s rather than `pandas.DataFrame`s, so you can simply pass
    the underlying `ndarray` of a `DataFrame` via `.to_numpy()`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能不是直接显而易见的，但`history()`（双关语）的力量不容小觑，因为大多数算法都会以某种形式利用先前的市场发展。你可以轻松地设计一个策略，使用[scikit-learn](https://scikit-learn.org/stable/)训练一个分类器，试图根据过去的价格预测未来的市场走势，（注意，大多数`scikit-learn`函数需要`numpy.ndarray`而不是`pandas.DataFrame`，所以你可以简单地通过`.to_numpy()`传递`DataFrame`的底层`ndarray`）。
- en: We also used the `order_target()` function above. This and other functions like
    it can make order management and portfolio rebalancing much easier. See the [API
    Reference](api-reference.html#api-reference) for more details.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了上面的`order_target()`函数。这类函数可以使订单管理和投资组合再平衡变得更加容易。更多详情请参阅[API参考](api-reference.html#api-reference)。
- en: Conclusions
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: We hope that this tutorial gave you a little insight into the architecture,
    API, and features of `zipline`. For next steps, check out some of the [examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望本教程能为您提供一些关于`zipline`架构、API和功能的初步了解。下一步，可以查看一些[示例](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)。
- en: Feel free to ask questions on [our mailing list](https://groups.google.com/forum/#!forum/zipline),
    report problems on our [GitHub issue tracker](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open),
    or [get involved](https://exchange.ml4trading.io).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如有疑问，请随时在我们的[邮件列表](https://groups.google.com/forum/#!forum/zipline)上提问，在我们的[GitHub问题跟踪器](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open)上报告问题，或[参与进来](https://exchange.ml4trading.io)。
- en: Conclusions
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: We hope that this tutorial gave you a little insight into the architecture,
    API, and features of `zipline`. For next steps, check out some of the [examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望本教程能为您提供一些关于`zipline`架构、API和功能的初步了解。下一步，可以查看一些[示例](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples)。
- en: Feel free to ask questions on [our mailing list](https://groups.google.com/forum/#!forum/zipline),
    report problems on our [GitHub issue tracker](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open),
    or [get involved](https://exchange.ml4trading.io).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎在[我们的邮件列表](https://groups.google.com/forum/#!forum/zipline)上提问，在我们的[GitHub问题跟踪器](https://github.com/stefan-jansen/zipline-reloaded/issues?state=open)上报问题，或[参与进来](https://exchange.ml4trading.io)。
