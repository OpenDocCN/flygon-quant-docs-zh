- en: Calendars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://zipline.ml4trading.io/trading-calendars.html](https://zipline.ml4trading.io/trading-calendars.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## What is a Trading Calendar?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A trading calendar represents the timing information of a single market exchange.
    The timing information is made up of two parts: sessions, and opens/closes. This
    is represented by the Zipline `TradingCalendar` class, and is used as the parent
    class for all new `TradingCalendar` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: A session represents a contiguous set of minutes, and has a label that is midnight
    UTC. It is important to note that a session label should not be considered a specific
    point in time, and that midnight UTC is just being used for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: For an average day of the [New York Stock Exchange](https://www.nyse.com/index),
    the market opens at 9:30AM and closes at 4PM. Trading sessions can change depending
    on the exchange, day of the year, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Why Should You Care About Trading Calendars?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say you want to buy a share of some equity on Tuesday, and then sell it
    on Saturday. If the exchange in which you’re trading that equity is not open on
    Saturday, then in reality it would not be possible to trade that equity at that
    time, and you would have to wait until some other number of days past Saturday.
    Since you wouldn’t be able to place the trade in reality, it would also be unreasonable
    for your backtest to place a trade on Saturday.
  prefs: []
  type: TYPE_NORMAL
- en: In order for you to backtest your strategy, the dates in that are accounted
    for in your [data bundle](https://zipline.ml4trading.io/bundles.html) and the
    dates in your `TradingCalendar` should match up; if the dates don’t match up,
    then you you’re going to see some errors along the way. This holds for both minutely
    and daily data.
  prefs: []
  type: TYPE_NORMAL
- en: The TradingCalendar Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TradingCalendar` class has many properties we should be thinking about
    if we were to build our own `TradingCalendar` for an exchange. These include properties
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the Exchange
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Timezone
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Time
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Time
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Regular & Ad hoc Holidays
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Special Opens & Closes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: And several others. If you’d like to see all of the properties and methods available
    to you through the `TradingCalendar` API, please take a look at the [API Reference](https://ml4t.zipline.io/api_reference.html#trading-calendar-api)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll take a look at the London Stock Exchange Calendar `LSEExchangeCalendar`
    as an example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can create the `Holiday` objects mentioned in `def regular_holidays(self)`
    using the [pandas](https://pandas.pydata.org/pandas-docs/stable/) module `pandas.tseries.holiday.Holiday`.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the [LSEExchangeCalendar](https://github.com/quantopian/zipline/blob/master/zipline/utils/calendars/exchange_calendar_lse.py)
    code above as an example, as well as at the code snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Building a Custom Trading Calendar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we’ll build our own custom trading calendar. This calendar will be used
    for trading assets that can be traded on a 24/7 exchange calendar. This means
    that it will be open on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday,
    and Sunday, and the exchange will open at 12AM and close at 11:59PM. The timezone
    which we’ll use is UTC.
  prefs: []
  type: TYPE_NORMAL
- en: First we’ll start off by importing some modules that will be useful to us.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we’ll actually build this calendar, which we’ll call `TFSExchangeCalendar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for you to run your algorithm with this calendar, you’ll need have
    a data bundle in which your assets have dates that run through all days of the
    week. You can read about how to make your own data bundle in the section [Writing
    a New Bundle](bundles.html#new-bundle) of this documentation, or use the code
    in [csvdir bundle](https://github.com/stefan-jansen/zipline-reloaded/blob/master/zipline/data/bundles/csvdir.py)
    for creating a bundle from CSV files.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Trading Calendar?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A trading calendar represents the timing information of a single market exchange.
    The timing information is made up of two parts: sessions, and opens/closes. This
    is represented by the Zipline `TradingCalendar` class, and is used as the parent
    class for all new `TradingCalendar` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: A session represents a contiguous set of minutes, and has a label that is midnight
    UTC. It is important to note that a session label should not be considered a specific
    point in time, and that midnight UTC is just being used for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: For an average day of the [New York Stock Exchange](https://www.nyse.com/index),
    the market opens at 9:30AM and closes at 4PM. Trading sessions can change depending
    on the exchange, day of the year, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Why Should You Care About Trading Calendars?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say you want to buy a share of some equity on Tuesday, and then sell it
    on Saturday. If the exchange in which you’re trading that equity is not open on
    Saturday, then in reality it would not be possible to trade that equity at that
    time, and you would have to wait until some other number of days past Saturday.
    Since you wouldn’t be able to place the trade in reality, it would also be unreasonable
    for your backtest to place a trade on Saturday.
  prefs: []
  type: TYPE_NORMAL
- en: In order for you to backtest your strategy, the dates in that are accounted
    for in your [data bundle](https://zipline.ml4trading.io/bundles.html) and the
    dates in your `TradingCalendar` should match up; if the dates don’t match up,
    then you you’re going to see some errors along the way. This holds for both minutely
    and daily data.
  prefs: []
  type: TYPE_NORMAL
- en: The TradingCalendar Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TradingCalendar` class has many properties we should be thinking about
    if we were to build our own `TradingCalendar` for an exchange. These include properties
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the Exchange
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Timezone
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Time
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Time
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Regular & Ad hoc Holidays
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Special Opens & Closes
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: And several others. If you’d like to see all of the properties and methods available
    to you through the `TradingCalendar` API, please take a look at the [API Reference](https://ml4t.zipline.io/api_reference.html#trading-calendar-api)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll take a look at the London Stock Exchange Calendar `LSEExchangeCalendar`
    as an example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can create the `Holiday` objects mentioned in `def regular_holidays(self)`
    using the [pandas](https://pandas.pydata.org/pandas-docs/stable/) module `pandas.tseries.holiday.Holiday`.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the [LSEExchangeCalendar](https://github.com/quantopian/zipline/blob/master/zipline/utils/calendars/exchange_calendar_lse.py)
    code above as an example, as well as at the code snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Building a Custom Trading Calendar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we’ll build our own custom trading calendar. This calendar will be used
    for trading assets that can be traded on a 24/7 exchange calendar. This means
    that it will be open on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday,
    and Sunday, and the exchange will open at 12AM and close at 11:59PM. The timezone
    which we’ll use is UTC.
  prefs: []
  type: TYPE_NORMAL
- en: First we’ll start off by importing some modules that will be useful to us.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we’ll actually build this calendar, which we’ll call `TFSExchangeCalendar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for you to run your algorithm with this calendar, you’ll need have
    a data bundle in which your assets have dates that run through all days of the
    week. You can read about how to make your own data bundle in the section [Writing
    a New Bundle](bundles.html#new-bundle) of this documentation, or use the code
    in [csvdir bundle](https://github.com/stefan-jansen/zipline-reloaded/blob/master/zipline/data/bundles/csvdir.py)
    for creating a bundle from CSV files.
  prefs: []
  type: TYPE_NORMAL
