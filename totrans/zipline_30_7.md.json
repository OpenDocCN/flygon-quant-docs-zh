["```py\nzipline.run_algorithm(...)\n```", "```py\nclass zipline.protocol.BarData\n```", "```py\ncan_trade()\n```", "```py\ncurrent()\n```", "```py\nhistory()\n```", "```py\nis_stale()\n```", "```py\nzipline.api.schedule_function(self, func, date_rule=None, time_rule=None, half_days=True, calendar=None)\n```", "```py\nclass zipline.api.date_rules\n```", "```py\nstatic every_day()\n```", "```py\nstatic month_end(days_offset=0)\n```", "```py\nstatic month_start(days_offset=0)\n```", "```py\nstatic week_end(days_offset=0)\n```", "```py\nstatic week_start(days_offset=0)\n```", "```py\nclass zipline.api.time_rules\n```", "```py\nevery_minute\n```", "```py\nstatic market_close(offset=None, hours=None, minutes=None)\n```", "```py\nstatic market_open(offset=None, hours=None, minutes=None)\n```", "```py\nzipline.api.order(self, asset, amount, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_value(self, asset, value, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_percent(self, asset, percent, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_target(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target(sid(0), 10)\norder_target(sid(0), 10) \n```", "```py\nzipline.api.order_target_value(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_value(sid(0), 10)\norder_target_value(sid(0), 10) \n```", "```py\nzipline.api.order_target_percent(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_percent(sid(0), 10)\norder_target_percent(sid(0), 10) \n```", "```py\nclass zipline.finance.execution.ExecutionStyle\n```", "```py\nproperty exchange\n```", "```py\nabstract get_limit_price(is_buy)\n```", "```py\nabstract get_stop_price(is_buy)\n```", "```py\nclass zipline.finance.execution.MarketOrder(exchange=None)\n```", "```py\nclass zipline.finance.execution.LimitOrder(limit_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopOrder(stop_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopLimitOrder(limit_price, stop_price, asset=None, exchange=None)\n```", "```py\nzipline.api.get_order(self, order_id)\n```", "```py\nzipline.api.get_open_orders(self, asset=None)\n```", "```py\nzipline.api.cancel_order(self, order_param)\n```", "```py\nzipline.api.set_cancel_policy(self, cancel_policy)\n```", "```py\nclass zipline.finance.cancel_policy.CancelPolicy\n```", "```py\nabstract should_cancel(event)\n```", "```py\nzipline.api.EODCancel(warn_on_cancel=True)\n```", "```py\nzipline.api.NeverCancel()\n```", "```py\nzipline.api.symbol(self, symbol_str, country_code=None)\n```", "```py\nzipline.api.symbols(self, *args, **kwargs)\n```", "```py\nzipline.api.future_symbol(self, symbol)\n```", "```py\nzipline.api.set_symbol_lookup_date(self, dt)\n```", "```py\nzipline.api.sid(self, sid)\n```", "```py\nzipline.api.set_do_not_order_list(self, restricted_list, on_error='fail')\n```", "```py\nzipline.api.set_long_only(self, on_error='fail')\n```", "```py\nzipline.api.set_max_leverage(self, max_leverage)\n```", "```py\nzipline.api.set_max_order_count(self, max_count, on_error='fail')\n```", "```py\nzipline.api.set_max_order_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_max_position_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_benchmark(self, benchmark)\n```", "```py\nzipline.api.set_commission(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.commission.CommissionModel\n```", "```py\nabstract calculate(order, transaction)\n```", "```py\nclass zipline.finance.commission.PerShare(cost=0.001, min_trade_cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerTrade(cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerDollar(cost=0.0015)\n```", "```py\nzipline.api.set_slippage(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.slippage.SlippageModel\n```", "```py\nprocess_order(data, order)\n```", "```py\nvolume_for_bar\n```", "```py\nabstract process_order(data, order)\n```", "```py\nclass zipline.finance.slippage.FixedSlippage(spread=0.0)\n```", "```py\nclass zipline.finance.slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)\n```", "```py\nprice * (1 + price_impact * (volume_share ** 2)) \n```", "```py\nprice * (1 - price_impact * (volume_share ** 2)) \n```", "```py\nzipline.api.attach_pipeline(self, pipeline, name, chunks=None, eager=True)\n```", "```py\nzipline.api.pipeline_output(self, name)\n```", "```py\nzipline.api.record(self, *args, **kwargs)\n```", "```py\nzipline.api.get_environment(self, field='platform')\n```", "```py\nzipline.api.fetch_csv(self, url, pre_func=None, post_func=None, date_column='date', date_format=None, timezone='UTC', symbol=None, mask=True, symbol_column=None, special_params_checker=None, country_code=None, **kwargs)\n```", "```py\nclass zipline.finance.blotter.blotter.Blotter(cancel_policy=None)\n```", "```py\nbatch_order(order_arg_lists)\n```", "```py\nabstract cancel(order_id, relay_status=True)\n```", "```py\nabstract cancel_all_orders_for_asset(asset, warn=False, relay_status=True)\n```", "```py\nabstract get_transactions(bar_data)\n```", "```py\nabstract hold(order_id, reason='')\n```", "```py\nabstract order(asset, amount, style, order_id=None)\n```", "```py\nabstract process_splits(splits)\n```", "```py\nabstract prune_orders(closed_orders)\n```", "```py\nabstract reject(order_id, reason='')\n```", "```py\nclass zipline.finance.blotter.SimulationBlotter(equity_slippage=None, future_slippage=None, equity_commission=None, future_commission=None, cancel_policy=None)\n```", "```py\ncancel(order_id, relay_status=True)\n```", "```py\ncancel_all_orders_for_asset(asset, warn=False, relay_status=True)\n```", "```py\nget_transactions(bar_data)\n```", "```py\nhold(order_id, reason='')\n```", "```py\norder(asset, amount, style, order_id=None)\n```", "```py\nprocess_splits(splits)\n```", "```py\nprune_orders(closed_orders)\n```", "```py\nreject(order_id, reason='')\n```", "```py\nclass zipline.pipeline.Pipeline(columns=None, screen=None, domain=GENERIC)\n```", "```py\nadd(term, name, overwrite=False)\n```", "```py\ndomain(default)\n```", "```py\nremove(name)\n```", "```py\nset_screen(screen, overwrite=False)\n```", "```py\nshow_graph(format='svg')\n```", "```py\nto_execution_plan(domain, default_screen, start_date, end_date)\n```", "```py\nto_simple_graph(default_screen)\n```", "```py\nproperty columns\n```", "```py\nproperty screen\n```", "```py\nclass zipline.pipeline.CustomFactor(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ndef compute(self, today, assets, out, *inputs):\n   ... \n```", "```py\ntoday : np.datetime64[ns]\n    Row label for the last row of all arrays passed as `inputs`.\nassets : np.array[int64, ndim=1]\n    Column labels for `out` and`inputs`.\nout : np.array[self.dtype, ndim=1]\n    Output array of the same shape as `assets`.  `compute` should write\n    its desired return values into `out`. If multiple outputs are\n    specified, `compute` should write its desired return values into\n    `out.<output_name>` for each output name in `self.outputs`.\n*inputs : tuple of np.array\n    Raw data arrays corresponding to the values of `self.inputs`. \n```", "```py\nclass TenDayRange(CustomFactor):\n  \"\"\"\n Computes the difference between the highest high in the last 10\n days and the lowest low.\n\n Pre-declares high and low as default inputs and `window_length` as\n 10.\n \"\"\"\n\n    inputs = [USEquityPricing.high, USEquityPricing.low]\n    window_length = 10\n\n    def compute(self, today, assets, out, highs, lows):\n        from numpy import nanmin, nanmax\n\n        highest_highs = nanmax(highs, axis=0)\n        lowest_lows = nanmin(lows, axis=0)\n        out[:] = highest_highs - lowest_lows\n\n# Doesn't require passing inputs or window_length because they're\n# pre-declared as defaults for the TenDayRange class.\nten_day_range = TenDayRange() \n```", "```py\nclass MedianValue(CustomFactor):\n  \"\"\"\n Computes the median value of an arbitrary single input over an\n arbitrary window..\n\n Does not declare any defaults, so values for `window_length` and\n `inputs` must be passed explicitly on every construction.\n \"\"\"\n\n    def compute(self, today, assets, out, data):\n        from numpy import nanmedian\n        out[:] = data.nanmedian(data, axis=0)\n\n# Values for `inputs` and `window_length` must be passed explicitly to\n# MedianValue.\nmedian_close10 = MedianValue([USEquityPricing.close], window_length=10)\nmedian_low15 = MedianValue([USEquityPricing.low], window_length=15) \n```", "```py\nclass MultipleOutputs(CustomFactor):\n    inputs = [USEquityPricing.close]\n    outputs = ['alpha', 'beta']\n    window_length = N\n\n    def compute(self, today, assets, out, close):\n        computed_alpha, computed_beta = some_function(close)\n        out.alpha[:] = computed_alpha\n        out.beta[:] = computed_beta\n\n# Each output is returned as its own Factor upon instantiation.\nalpha, beta = MultipleOutputs()\n\n# Equivalently, we can create a single factor instance and access each\n# output as an attribute of that instance.\nmultiple_outputs = MultipleOutputs()\nalpha = multiple_outputs.alpha\nbeta = multiple_outputs.beta \n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.Filter(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> from zipline.pipeline.factors import VWAP\n>>> vwap_10 = VWAP(window_length=10)\n>>> vwaps_under_20 = (vwap_10 <= 20) \n```", "```py\n>>> short_vwap = VWAP(window_length=10)\n>>> long_vwap = VWAP(window_length=30)\n>>> higher_short_vwap = (short_vwap > long_vwap) \n```", "```py\n__and__(other)\n```", "```py\n__or__(other)\n```", "```py\nif_else(if_true, if_false)\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    2.0    3.0    4.0\n2017-03-14    5.0    6.0    7.0    8.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   10.0   20.0   30.0   40.0\n2017-03-14   50.0   60.0   70.0   80.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   True  False   True  False\n2017-03-14   True   True  False  False \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0   20.0    3.0   40.0\n2017-03-14    5.0    6.0   70.0   80.0 \n```", "```py\nclass zipline.pipeline.Factor(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> f1 = SomeFactor(...)  \n>>> f2 = SomeOtherFactor(...)  \n>>> average = (f1 + f2) / 2.0 \n```", "```py\neq(other)\n```", "```py\ndemean(mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    2.0    3.0    4.0\n2017-03-14    1.5    2.5    3.5    1.0\n2017-03-15    2.0    3.0    4.0    1.5\n2017-03-16    2.5    3.5    1.0    2.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13      1      1      2      2\n2017-03-14      1      1      2      2\n2017-03-15      1      1      2      2\n2017-03-16      1      1      2      2 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13  False   True   True   True\n2017-03-14   True  False   True   True\n2017-03-15   True   True  False   True\n2017-03-16   True   True   True  False \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13 -1.500 -0.500  0.500  1.500\n2017-03-14 -0.625  0.375  1.375 -1.125\n2017-03-15 -0.625  0.375  1.375 -1.125\n2017-03-16  0.250  1.250 -1.250 -0.250 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    NaN -1.000  0.000  1.000\n2017-03-14 -0.500    NaN  1.500 -1.000\n2017-03-15 -0.166  0.833    NaN -0.666\n2017-03-16  0.166  1.166 -1.333    NaN \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13 -0.500  0.500 -0.500  0.500\n2017-03-14 -0.500  0.500  1.250 -1.250\n2017-03-15 -0.500  0.500  1.250 -1.250\n2017-03-16 -0.500  0.500 -0.500  0.500 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    NaN  0.000 -0.500  0.500\n2017-03-14  0.000    NaN  1.250 -1.250\n2017-03-15 -0.500  0.500    NaN  0.000\n2017-03-16 -0.500  0.500  0.000    NaN \n```", "```py\n>>> base = MyFactor(...)  \n>>> normalized = base.demean(\n...     mask=base.percentile_between(1, 99),\n... ) \n```", "```py\nzscore(mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\n(row - row.mean()) / row.stddev() \n```", "```py\n>>> base = MyFactor(...)  \n>>> normalized = base.zscore(\n...    mask=base.percentile_between(1, 99),\n... ) \n```", "```py\nrank(method='ordinal', ascending=True, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\npearsonr(target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_correlations = returns.pearsonr(\n    target=returns_slice, correlation_length=30,\n) \n```", "```py\naapl_correlations = RollingPearsonOfReturns(\n    target=sid(24), returns_length=10, correlation_length=30,\n) \n```", "```py\nspearmanr(target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_correlations = returns.spearmanr(\n    target=returns_slice, correlation_length=30,\n) \n```", "```py\naapl_correlations = RollingSpearmanOfReturns(\n    target=sid(24), returns_length=10, correlation_length=30,\n) \n```", "```py\nlinear_regression(target, regression_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_regressions = returns.linear_regression(\n    target=returns_slice, regression_length=30,\n) \n```", "```py\naapl_regressions = RollingLinearRegressionOfReturns(\n    target=sid(24), returns_length=10, regression_length=30,\n) \n```", "```py\nwinsorize(min_percentile, max_percentile, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\nprice = USEquityPricing.close.latest\ncolumns={\n    'PRICE': price,\n    'WINSOR_1: price.winsorize(\n        min_percentile=0.25, max_percentile=0.75\n    ),\n    'WINSOR_2': price.winsorize(\n        min_percentile=0.50, max_percentile=1.0\n    ),\n    'WINSOR_3': price.winsorize(\n        min_percentile=0.0, max_percentile=0.5\n    ),\n\n} \n```", "```py\n 'PRICE' 'WINSOR_1' 'WINSOR_2' 'WINSOR_3'\nAsset_1    1        2          4          3\nAsset_2    2        2          4          3\nAsset_3    3        3          4          3\nAsset_4    4        4          4          4\nAsset_5    5        5          5          4\nAsset_6    6        5          5          4 \n```", "```py\nquantiles(bins, mask=sentinel('NotSpecified'))\n```", "```py\nquartiles(mask=sentinel('NotSpecified'))\n```", "```py\nquintiles(mask=sentinel('NotSpecified'))\n```", "```py\ndeciles(mask=sentinel('NotSpecified'))\n```", "```py\ntop(N, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\nbottom(N, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\npercentile_between(min_percentile, max_percentile, mask=sentinel('NotSpecified'))\n```", "```py\nisnan()\n```", "```py\nnotnan()\n```", "```py\nisfinite()\n```", "```py\nclip(min_bound, max_bound, mask=sentinel('NotSpecified'))\n```", "```py\nfactor.clip(min_bound=-np.inf, max_bound=user_provided_max) \n```", "```py\nclip(min_bound, max_bound, mask=sentinel('NotSpecified'))\n```", "```py\nfactor.clip(min_bound=-np.inf, max_bound=user_provided_max) \n```", "```py\n__add__(other)\n```", "```py\n__sub__(other)\n```", "```py\n__mul__(other)\n```", "```py\n__div__(other)\n```", "```py\n__mod__(other)\n```", "```py\n__pow__(other)\n```", "```py\n__lt__(other)\n```", "```py\n__le__(other)\n```", "```py\n__ne__(other)\n```", "```py\n__ge__(other)\n```", "```py\n__gt__(other)\n```", "```py\nfillna(fill_value)\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    NaN    3.0    4.0\n2017-03-14    1.5    2.5    NaN    NaN \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    0.0    3.0    4.0\n2017-03-14    1.5    2.5    0.0    0.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   10.0   20.0   30.0   40.0\n2017-03-14   15.0   25.0   35.0   45.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0   20.0    3.0    4.0\n2017-03-14    1.5    2.5   35.0   45.0 \n```", "```py\nmean(mask=sentinel('NotSpecified'))\n```", "```py\nstddev(mask=sentinel('NotSpecified'))\n```", "```py\nmax(mask=sentinel('NotSpecified'))\n```", "```py\nmin(mask=sentinel('NotSpecified'))\n```", "```py\nmedian(mask=sentinel('NotSpecified'))\n```", "```py\nsum(mask=sentinel('NotSpecified'))\n```", "```py\nclass zipline.pipeline.Term(domain=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), window_safe=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> from zipline.pipeline.data import EquityPricing\n>>> from zipline.pipeline.factors import SimpleMovingAverage\n>>> x = SimpleMovingAverage(inputs=[EquityPricing.close], window_length=5)\n>>> y = SimpleMovingAverage(inputs=[EquityPricing.close], window_length=5)\n>>> x is y\nTrue \n```", "```py\ngraph_repr()\n```", "```py\nrecursive_repr()\n```", "```py\nclass zipline.pipeline.data.DataSet\n```", "```py\nclass EquityPricing(DataSet):\n    open = Column(float)\n    high = Column(float)\n    low = Column(float)\n    close = Column(float)\n    volume = Column(float) \n```", "```py\nfrom zipline.pipeline.domain import US_EQUITIES\nUSEquityPricing = EquityPricing.specialize(US_EQUITIES) \n```", "```py\nclass CompanyMetadata(DataSet):\n    # Use float for semantically-numeric data, even if it's always\n    # integral valued (see Notes section below). The default missing\n    # value for floats is NaN.\n    shares_outstanding = Column(float)\n\n    # Use object for string columns. The default missing value for\n    # object-dtype columns is None.\n    ticker = Column(object)\n\n    # Use integers for integer-valued categorical data like sector or\n    # industry codes. Integer-dtype columns require an explicit missing\n    # value.\n    sector_code = Column(int, missing_value=-1)\n\n    # Use bool for boolean-valued flags. Note that the default missing\n    # value for bool-dtype columns is False.\n    is_primary_share = Column(bool) \n```", "```py\nclassmethod get_column(name)\n```", "```py\nclass zipline.pipeline.data.Column(dtype, missing_value=sentinel('NotSpecified'), doc=None, metadata=None, currency_aware=False)\n```", "```py\nbind(name)\n```", "```py\nclass zipline.pipeline.data.BoundColumn(dtype, missing_value, dataset, name, doc, metadata, currency_conversion, currency_aware)\n```", "```py\ndtype\n```", "```py\nlatest\n```", "```py\ndataset\n```", "```py\nname\n```", "```py\nmetadata\n```", "```py\ncurrency_aware\n```", "```py\nproperty currency_aware\n```", "```py\nproperty currency_conversion\n```", "```py\nproperty dataset\n```", "```py\nfx(currency)\n```", "```py\ngraph_repr()\n```", "```py\nproperty metadata\n```", "```py\nproperty name\n```", "```py\nproperty qualname\n```", "```py\nrecursive_repr()\n```", "```py\nspecialize(domain)\n```", "```py\nunspecialize()\n```", "```py\nclass zipline.pipeline.data.DataSetFamily\n```", "```py\nclass SomeDataSet(DataSetFamily):\n    extra_dims = [\n        ('dimension_0', {'a', 'b', 'c'}),\n        ('dimension_1', {'d', 'e', 'f'}),\n    ]\n\n    column_0 = Column(float)\n    column_1 = Column(bool) \n```", "```py\nsid :: int64\nasof_date :: datetime64[ns]\ntimestamp :: datetime64[ns]\ndimension_0 :: str\ndimension_1 :: str\ncolumn_0 :: float64\ncolumn_1 :: bool \n```", "```py\nDataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n```", "```py\nclassmethod slice(*args, **kwargs)\n```", "```py\nclass zipline.pipeline.data.EquityPricing\n```", "```py\nclose = EquityPricing.close::float64\n```", "```py\nhigh = EquityPricing.high::float64\n```", "```py\nlow = EquityPricing.low::float64\n```", "```py\nopen = EquityPricing.open::float64\n```", "```py\nvolume = EquityPricing.volume::float64\n```", "```py\nclass zipline.pipeline.factors.AverageDollarVolume(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, volume)\n```", "```py\nclass zipline.pipeline.factors.BollingerBands(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, k)\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysSincePreviousEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n# Factor computing number of days since most recent asof_date\n# per asset.\ndays_since_event = BusinessDaysSincePreviousEvent(\n    inputs=[MyDataset.asof_date]\n)\n\n# Filter returning True for each asset whose most recent asof_date\n# was in the last 5 business days.\nrecency_filter = (days_since_event <= 5) \n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysUntilNextEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.DailyReturns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingStdDev(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.Latest(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nzipline.pipeline.factors.MACDSignal\n```", "```py\nclass zipline.pipeline.factors.MaxDrawdown(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.Returns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close)\n```", "```py\nclass zipline.pipeline.factors.RollingPearson(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingSpearman(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingLinearRegressionOfReturns(target, returns_length, regression_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nregression_factor = RollingRegressionOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    regression_length=5,\n)\nalpha = regression_factor.alpha\nbeta = regression_factor.beta \n```", "```py\n SPY    MSFT     FB\n2017-03-17       0    .011   .003\n2017-03-20       0   -.004   .004\n2017-03-21       0    .007   .006\n2017-03-22       0    .002   .008 \n```", "```py\n SPY    MSFT     FB\n2017-03-17       1      .3   -1.1\n2017-03-20       1      .2     -1\n2017-03-21       1     -.3     -1\n2017-03-22       1     -.3    -.9 \n```", "```py\nclass zipline.pipeline.factors.RollingPearsonOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nrolling_correlations = RollingPearsonOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    correlation_length=5,\n) \n```", "```py\n SPY   MSFT     FB\n2017-03-17       1    .15   -.96\n2017-03-20       1    .10   -.96\n2017-03-21       1   -.16   -.94\n2017-03-22       1   -.16   -.85 \n```", "```py\nclass zipline.pipeline.factors.RollingSpearmanOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nclass zipline.pipeline.factors.SimpleBeta(target, regression_length, allowed_missing_percentage=0.25)\n```", "```py\ncompute(today, assets, out, all_returns, target_returns, allowed_missing_count)\n```", "```py\ndtype = dtype('float64')\n```", "```py\ngraph_repr()\n```", "```py\nproperty target\n```", "```py\nclass zipline.pipeline.factors.RSI(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, closes)\n```", "```py\nclass zipline.pipeline.factors.SimpleMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.VWAP(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.WeightedAverageValue(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, base, weight)\n```", "```py\nclass zipline.pipeline.factors.PercentChange(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, values)\n```", "```py\nclass zipline.pipeline.factors.PeerCount(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, classifier_values)\n```", "```py\nclass zipline.pipeline.filters.All(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AllPresent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, value)\n```", "```py\nclass zipline.pipeline.filters.Any(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AtLeastN(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg, N)\n```", "```py\nclass zipline.pipeline.filters.SingleAsset(asset)\n```", "```py\ngraph_repr()\n```", "```py\nclass zipline.pipeline.filters.StaticAssets(assets)\n```", "```py\nclass zipline.pipeline.filters.StaticSids(sids)\n```", "```py\nclass zipline.pipeline.engine.PipelineEngine\n```", "```py\nabstract run_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nabstract run_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nclass zipline.pipeline.engine.SimplePipelineEngine(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\n__init__(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\nrun_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nrun_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nzipline.pipeline.engine.default_populate_initial_workspace(initial_workspace, root_mask_term, execution_plan, dates, assets)\n```", "```py\nclass zipline.pipeline.loaders.base.PipelineLoader(*args, **kwargs)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\n__init__()\n```", "```py\nclass zipline.pipeline.loaders.frame.DataFrameLoader(column, baseline, adjustments=None)\n```", "```py\n__init__(column, baseline, adjustments=None)\n```", "```py\nformat_adjustments(dates, assets)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\nclass zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\n__init__(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\nzipline.pipeline.loaders.equity_pricing_loader.USEquityPricingLoader\n```", "```py\nclass zipline.pipeline.loaders.events.EventsLoader(events, next_value_columns, previous_value_columns)\n```", "```py\n__init__(events, next_value_columns, previous_value_columns)\n```", "```py\nclass zipline.pipeline.loaders.earnings_estimates.EarningsEstimatesLoader(estimates, name_map)\n```", "```py\n__init__(estimates, name_map)\n```", "```py\nclass zipline.assets.ExchangeInfo(name, canonical_name, country_code)\n```", "```py\nname\n```", "```py\ncanonical_name\n```", "```py\ncountry_code\n```", "```py\ncalendar\n```", "```py\nproperty calendar\n```", "```py\nclass zipline.assets.Asset\n```", "```py\nsid\n```", "```py\nsymbol\n```", "```py\nasset_name\n```", "```py\nexchange\n```", "```py\nexchange_full\n```", "```py\nexchange_info\n```", "```py\ncountry_code\n```", "```py\nstart_date\n```", "```py\nend_date\n```", "```py\ntick_size\n```", "```py\nauto_close_date\n```", "```py\nfrom_dict()\n```", "```py\nis_alive_for_session()\n```", "```py\nis_exchange_open()\n```", "```py\nto_dict()\n```", "```py\nclass zipline.assets.Equity\n```", "```py\nclass zipline.assets.Future\n```", "```py\nto_dict()\n```", "```py\nclass zipline.assets.AssetConvertible\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarWriter(filename, calendar, start_session, end_session)\n```", "```py\nwrite(data, assets=None, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nwrite_csvs(asset_map, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentWriter(conn_or_path, equity_daily_bar_reader, overwrite=False)\n```", "```py\ncalc_dividend_ratios(dividends)\n```", "```py\nwrite(splits=None, mergers=None, dividends=None, stock_dividends=None)\n```", "```py\nwrite_dividend_data(dividends, stock_dividends=None)\n```", "```py\nwrite_dividend_payouts(frame)\n```", "```py\nclass zipline.assets.AssetDBWriter(engine)\n```", "```py\ninit_db(txn=None)\n```", "```py\nwrite(equities=None, futures=None, exchanges=None, root_symbols=None, equity_supplementary_mappings=None, chunk_size=999)\n```", "```py\nwrite_direct(equities=None, equity_symbol_mappings=None, equity_supplementary_mappings=None, futures=None, exchanges=None, root_symbols=None, chunk_size=999)\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarReader(table, read_all_threshold=3000)\n```", "```py\nThe table with which this loader interacts contains the following\n```", "```py\nattributes\n```", "```py\nfirst_row\n```", "```py\nlast_row\n```", "```py\ncalendar_offset\n```", "```py\nstart_session_ns\n```", "```py\nend_session_ns\n```", "```py\ncalendar_name\n```", "```py\nWe use first_row and last_row together to quickly find ranges of rows to\n```", "```py\nload when reading an asset's data into memory.\n```", "```py\nWe use calendar_offset and calendar to orient loaded blocks within a\n```", "```py\nrange of queried dates.\n```", "```py\ncurrency_codes(sids)\n```", "```py\nget_last_traded_dt(asset, day)\n```", "```py\nget_value(sid, dt, field)\n```", "```py\nproperty last_available_dt\n```", "```py\nload_raw_arrays(columns, start_date, end_date, assets)\n```", "```py\nsid_day_index(sid, day)\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentReader(conn)\n```", "```py\nload_adjustments(dates, assets, should_include_splits, should_include_mergers, should_include_dividends, adjustment_type)\n```", "```py\nunpack_db_to_component_dfs(convert_dates=False)\n```", "```py\nclass zipline.assets.AssetFinder(engine, future_chain_predicates={'AD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'BP': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'CD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'EL': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'GC': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'JY': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'ME': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PA': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PL': functools.partial(<built-in function delivery_predicate>, {'J', 'F', 'V', 'N'}), 'SV': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'}), 'XG': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'YS': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'})})\n```", "```py\nproperty equities_sids\n```", "```py\nequities_sids_for_country_code(country_code)\n```", "```py\nequities_sids_for_exchange_name(exchange_name)\n```", "```py\nproperty futures_sids\n```", "```py\nget_supplementary_field(sid, field_name, as_of_date)\n```", "```py\ngroup_by_type(sids)\n```", "```py\nlifetimes(dates, include_start_date, country_codes)\n```", "```py\nlookup_asset_types(sids)\n```", "```py\nlookup_future_symbol(symbol)\n```", "```py\nlookup_generic(obj, as_of_date, country_code)\n```", "```py\nlookup_symbol(symbol, as_of_date, fuzzy=False, country_code=None)\n```", "```py\nlookup_symbols(symbols, as_of_date, fuzzy=False, country_code=None)\n```", "```py\n[finder.lookup_symbol(s, as_of, fuzzy) for s in symbols] \n```", "```py\nretrieve_all(sids, default_none=False)\n```", "```py\nretrieve_asset(sid, default_none=False)\n```", "```py\nretrieve_equities(sids)\n```", "```py\nretrieve_futures_contracts(sids)\n```", "```py\nproperty sids\n```", "```py\nclass zipline.data.data_portal.DataPortal(asset_finder, trading_calendar, first_trading_day, equity_daily_reader=None, equity_minute_reader=None, future_daily_reader=None, future_minute_reader=None, adjustment_reader=None, last_available_session=None, last_available_minute=None, minute_history_prefetch_length=1560, daily_history_prefetch_length=40)\n```", "```py\nget_adjusted_value(asset, field, dt, perspective_dt, data_frequency, spot_value=None)\n```", "```py\nget_adjustments(assets, field, dt, perspective_dt)\n```", "```py\nget_current_future_chain(continuous_future, dt)\n```", "```py\nget_fetcher_assets(dt)\n```", "```py\nget_history_window(assets, end_dt, bar_count, frequency, field, data_frequency, ffill=True)\n```", "```py\nget_last_traded_dt(asset, dt, data_frequency)\n```", "```py\nget_scalar_asset_spot_value(asset, field, dt, data_frequency)\n```", "```py\nget_splits(assets, dt)\n```", "```py\nget_spot_value(assets, field, dt, data_frequency)\n```", "```py\nget_stock_dividends(sid, trading_days)\n```", "```py\nhandle_extra_source(source_df, sim_params)\n```", "```py\nclass zipline.sources.benchmark_source.BenchmarkSource(benchmark_asset, trading_calendar, sessions, data_portal, emission_rate='daily', benchmark_returns=None)\n```", "```py\ndaily_returns(start, end=None)\n```", "```py\nget_range(start_dt, end_dt)\n```", "```py`\nget_value(dt)\n```", "```py\nzipline.data.bundles.register(name='__no__default__', f='__no__default__', calendar_name='NYSE', start_session=None, end_session=None, minutes_per_day=390, create_writers=True)\n```", "```py\n@register('quandl')\ndef quandl_ingest_function(...):\n    ... \n```", "```py\nzipline.data.bundles.ingest(name, environ=os.environ, date=None, show_progress=True)\n```", "```py\nzipline.data.bundles.load(name, environ=os.environ, date=None)\n```", "```py\nzipline.data.bundles.unregister(name)\n```", "```py\nzipline.data.bundles.bundles\n```", "```py\nclass zipline.finance.ledger.Ledger(trading_sessions, capital_base, data_frequency)\n```", "```py\nportfolio\n```", "```py\naccount\n```", "```py\nposition_tracker\n```", "```py\ntodays_returns\n```", "```py\ndaily_returns_series\n```", "```py\ndaily_returns_array\n```", "```py\norders(dt=None)\n```", "```py\noverride_account_fields(settled_cash=sentinel('not_overridden'), accrued_interest=sentinel('not_overridden'), buying_power=sentinel('not_overridden'), equity_with_loan=sentinel('not_overridden'), total_positions_value=sentinel('not_overridden'), total_positions_exposure=sentinel('not_overridden'), regt_equity=sentinel('not_overridden'), regt_margin=sentinel('not_overridden'), initial_margin_requirement=sentinel('not_overridden'), maintenance_margin_requirement=sentinel('not_overridden'), available_funds=sentinel('not_overridden'), excess_liquidity=sentinel('not_overridden'), cushion=sentinel('not_overridden'), day_trades_remaining=sentinel('not_overridden'), leverage=sentinel('not_overridden'), net_leverage=sentinel('not_overridden'), net_liquidation=sentinel('not_overridden'))\n```", "```py\nproperty portfolio\n```", "```py\nprocess_commission(commission)\n```", "```py\nprocess_dividends(next_session, asset_finder, adjustment_reader)\n```", "```py\nprocess_order(order)\n```", "```py\nprocess_splits(splits)\n```", "```py\nprocess_transaction(transaction)\n```", "```py\ntransactions(dt=None)\n```", "```py\nupdate_portfolio()\n```", "```py\nclass zipline.protocol.Portfolio(start_date=None, capital_base=0.0)\n```", "```py\npositions\n```", "```py\ncash\n```", "```py\nportfolio_value\n```", "```py\nstarting_cash\n```", "```py\nproperty current_portfolio_weights\n```", "```py\nclass zipline.protocol.Account\n```", "```py\nclass zipline.finance.ledger.PositionTracker(data_frequency)\n```", "```py\nearn_dividends(cash_dividends, stock_dividends)\n```", "```py\nhandle_splits(splits)\n```", "```py\npay_dividends(next_trading_day)\n```", "```py\nproperty stats\n```", "```py\nclass zipline.finance._finance_ext.PositionStats\n```", "```py\ngross_exposure\n```", "```py\ngross_value\n```", "```py\nlong_exposure\n```", "```py\nlong_value\n```", "```py\nnet_exposure\n```", "```py\nnet_value\n```", "```py\nshort_exposure\n```", "```py\nshort_value\n```", "```py\nlongs_count\n```", "```py\nshorts_count\n```", "```py\nposition_exposure_array\n```", "```py\nposition_exposure_series\n```", "```py\nclass zipline.finance.metrics.metric.SimpleLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.DailyLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.Returns\n```", "```py\nclass zipline.finance.metrics.metric.BenchmarkReturnsAndVolatility\n```", "```py\nclass zipline.finance.metrics.metric.CashFlow\n```", "```py\nclass zipline.finance.metrics.metric.Orders\n```", "```py\nclass zipline.finance.metrics.metric.Transactions\n```", "```py\nclass zipline.finance.metrics.metric.Positions\n```", "```py\nclass zipline.finance.metrics.metric.ReturnsStatistic(function, field_name=None)\n```", "```py\nclass zipline.finance.metrics.metric.AlphaBeta\n```", "```py\nclass zipline.finance.metrics.metric.MaxLeverage\n```", "```py\nzipline.finance.metrics.register(name, function=None)\n```", "```py\nzipline.finance.metrics.load(name)\n```", "```py\nzipline.finance.metrics.unregister(name)\n```", "```py\nzipline.data.finance.metrics.metrics_sets\n```", "```py\nclass zipline.utils.cache.CachedObject(value, expires)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> obj = CachedObject(1, expires)\n>>> obj.unwrap(expires - Timedelta('1 minute'))\n1\n>>> obj.unwrap(expires)\n1\n>>> obj.unwrap(expires + Timedelta('1 minute'))\n... \nTraceback (most recent call last):\n  ...\nExpired: 2014-01-01 00:00:00+00:00 \n```", "```py\nclass zipline.utils.cache.ExpiringCache(cache=None, cleanup=<function ExpiringCache.<lambda>>)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> value = 1\n>>> cache = ExpiringCache()\n>>> cache.set('foo', value, expires)\n>>> cache.get('foo', expires - Timedelta('1 minute'))\n1\n>>> cache.get('foo', expires + Timedelta('1 minute'))\nTraceback (most recent call last):\n  ...\nKeyError: 'foo' \n```", "```py\nclass zipline.utils.cache.dataframe_cache(path=None, lock=None, clean_on_failure=True, serialization='pickle')\n```", "```py\nclass zipline.utils.cache.working_file(final_path, *args, **kwargs)\n```", "```py\nclass zipline.utils.cache.working_dir(final_path, *args, **kwargs)\n```", "```py\nzipline.utils.cli.maybe_show_progress(it, show_progress, **kwargs)\n```", "```py\nwith maybe_show_progress([1, 2, 3], True) as ns:\n     for n in ns:\n         ... \n```", "```py\nzipline.run_algorithm(...)\n```", "```py\nclass zipline.protocol.BarData\n```", "```py\ncan_trade()\n```", "```py\ncurrent()\n```", "```py\nhistory()\n```", "```py\nis_stale()\n```", "```py\nzipline.api.schedule_function(self, func, date_rule=None, time_rule=None, half_days=True, calendar=None)\n```", "```py\nclass zipline.api.date_rules\n```", "```py\nstatic every_day()\n```", "```py\nstatic month_end(days_offset=0)\n```", "```py\nstatic month_start(days_offset=0)\n```", "```py\nstatic week_end(days_offset=0)\n```", "```py\nstatic week_start(days_offset=0)\n```", "```py\nclass zipline.api.time_rules\n```", "```py\nevery_minute\n```", "```py\nstatic market_close(offset=None, hours=None, minutes=None)\n```", "```py\nstatic market_open(offset=None, hours=None, minutes=None)\n```", "```py\nzipline.api.order(self, asset, amount, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_value(self, asset, value, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_percent(self, asset, percent, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_target(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target(sid(0), 10)\norder_target(sid(0), 10) \n```", "```py\nzipline.api.order_target_value(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_value(sid(0), 10)\norder_target_value(sid(0), 10) \n```", "```py\nzipline.api.order_target_percent(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_percent(sid(0), 10)\norder_target_percent(sid(0), 10) \n```", "```py\nclass zipline.finance.execution.ExecutionStyle\n```", "```py\nproperty exchange\n```", "```py\nabstract get_limit_price(is_buy)\n```", "```py\nabstract get_stop_price(is_buy)\n```", "```py\nclass zipline.finance.execution.MarketOrder(exchange=None)\n```", "```py\nclass zipline.finance.execution.LimitOrder(limit_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopOrder(stop_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopLimitOrder(limit_price, stop_price, asset=None, exchange=None)\n```", "```py\nzipline.api.get_order(self, order_id)\n```", "```py\nzipline.api.get_open_orders(self, asset=None)\n```", "```py\nzipline.api.cancel_order(self, order_param)\n```", "```py\nzipline.api.set_cancel_policy(self, cancel_policy)\n```", "```py\nclass zipline.finance.cancel_policy.CancelPolicy\n```", "```py\nabstract should_cancel(event)\n```", "```py\nzipline.api.EODCancel(warn_on_cancel=True)\n```", "```py\nzipline.api.NeverCancel()\n```", "```py\nzipline.api.symbol(self, symbol_str, country_code=None)\n```", "```py\nzipline.api.symbols(self, *args, **kwargs)\n```", "```py\nzipline.api.future_symbol(self, symbol)\n```", "```py\nzipline.api.set_symbol_lookup_date(self, dt)\n```", "```py\nzipline.api.sid(self, sid)\n```", "```py\nzipline.api.set_do_not_order_list(self, restricted_list, on_error='fail')\n```", "```py\nzipline.api.set_long_only(self, on_error='fail')\n```", "```py\nzipline.api.set_max_leverage(self, max_leverage)\n```", "```py\nzipline.api.set_max_order_count(self, max_count, on_error='fail')\n```", "```py\nzipline.api.set_max_order_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_max_position_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_benchmark(self, benchmark)\n```", "```py\nzipline.api.set_commission(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.commission.CommissionModel\n```", "```py\nabstract calculate(order, transaction)\n```", "```py\nclass zipline.finance.commission.PerShare(cost=0.001, min_trade_cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerTrade(cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerDollar(cost=0.0015)\n```", "```py\nzipline.api.set_slippage(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.slippage.SlippageModel\n```", "```py\nprocess_order(data, order)\n```", "```py\nvolume_for_bar\n```", "```py\nabstract process_order(data, order)\n```", "```py\nclass zipline.finance.slippage.FixedSlippage(spread=0.0)\n```", "```py\nclass zipline.finance.slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)\n```", "```py\nprice * (1 + price_impact * (volume_share ** 2)) \n```", "```py\nprice * (1 - price_impact * (volume_share ** 2)) \n```", "```py\nzipline.api.attach_pipeline(self, pipeline, name, chunks=None, eager=True)\n```", "```py\nzipline.api.pipeline_output(self, name)\n```", "```py\nzipline.api.record(self, *args, **kwargs)\n```", "```py\nzipline.api.get_environment(self, field='platform')\n```", "```py\nzipline.api.fetch_csv(self, url, pre_func=None, post_func=None, date_column='date', date_format=None, timezone='UTC', symbol=None, mask=True, symbol_column=None, special_params_checker=None, country_code=None, **kwargs)\n```", "```py\nclass zipline.protocol.BarData\n```", "```py\ncan_trade()\n```", "```py\ncurrent()\n```", "```py\nhistory()\n```", "```py\nis_stale()\n```", "```py\nzipline.api.schedule_function(self, func, date_rule=None, time_rule=None, half_days=True, calendar=None)\n```", "```py\nclass zipline.api.date_rules\n```", "```py\nstatic every_day()\n```", "```py\nstatic month_end(days_offset=0)\n```", "```py\nstatic month_start(days_offset=0)\n```", "```py\nstatic week_end(days_offset=0)\n```", "```py\nstatic week_start(days_offset=0)\n```", "```py\nclass zipline.api.time_rules\n```", "```py\nevery_minute\n```", "```py\nstatic market_close(offset=None, hours=None, minutes=None)\n```", "```py\nstatic market_open(offset=None, hours=None, minutes=None)\n```", "```py\nzipline.api.order(self, asset, amount, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_value(self, asset, value, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_percent(self, asset, percent, limit_price=None, stop_price=None, style=None)\n```", "```py\nzipline.api.order_target(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target(sid(0), 10)\norder_target(sid(0), 10) \n```", "```py\nzipline.api.order_target_value(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_value(sid(0), 10)\norder_target_value(sid(0), 10) \n```", "```py\nzipline.api.order_target_percent(self, asset, target, limit_price=None, stop_price=None, style=None)\n```", "```py\norder_target_percent(sid(0), 10)\norder_target_percent(sid(0), 10) \n```", "```py\nclass zipline.finance.execution.ExecutionStyle\n```", "```py\nproperty exchange\n```", "```py\nabstract get_limit_price(is_buy)\n```", "```py\nabstract get_stop_price(is_buy)\n```", "```py\nclass zipline.finance.execution.MarketOrder(exchange=None)\n```", "```py\nclass zipline.finance.execution.LimitOrder(limit_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopOrder(stop_price, asset=None, exchange=None)\n```", "```py\nclass zipline.finance.execution.StopLimitOrder(limit_price, stop_price, asset=None, exchange=None)\n```", "```py\nzipline.api.get_order(self, order_id)\n```", "```py\nzipline.api.get_open_orders(self, asset=None)\n```", "```py\nzipline.api.cancel_order(self, order_param)\n```", "```py\nzipline.api.set_cancel_policy(self, cancel_policy)\n```", "```py\nclass zipline.finance.cancel_policy.CancelPolicy\n```", "```py\nabstract should_cancel(event)\n```", "```py\nzipline.api.EODCancel(warn_on_cancel=True)\n```", "```py\nzipline.api.NeverCancel()\n```", "```py\nzipline.api.set_cancel_policy(self, cancel_policy)\n```", "```py\nclass zipline.finance.cancel_policy.CancelPolicy\n```", "```py\nabstract should_cancel(event)\n```", "```py\nzipline.api.EODCancel(warn_on_cancel=True)\n```", "```py\nzipline.api.NeverCancel()\n```", "```py\nzipline.api.symbol(self, symbol_str, country_code=None)\n```", "```py\nzipline.api.symbols(self, *args, **kwargs)\n```", "```py\nzipline.api.future_symbol(self, symbol)\n```", "```py\nzipline.api.set_symbol_lookup_date(self, dt)\n```", "```py\nzipline.api.sid(self, sid)\n```", "```py\nzipline.api.set_do_not_order_list(self, restricted_list, on_error='fail')\n```", "```py\nzipline.api.set_long_only(self, on_error='fail')\n```", "```py\nzipline.api.set_max_leverage(self, max_leverage)\n```", "```py\nzipline.api.set_max_order_count(self, max_count, on_error='fail')\n```", "```py\nzipline.api.set_max_order_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_max_position_size(self, asset=None, max_shares=None, max_notional=None, on_error='fail')\n```", "```py\nzipline.api.set_benchmark(self, benchmark)\n```", "```py\nzipline.api.set_commission(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.commission.CommissionModel\n```", "```py\nabstract calculate(order, transaction)\n```", "```py\nclass zipline.finance.commission.PerShare(cost=0.001, min_trade_cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerTrade(cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerDollar(cost=0.0015)\n```", "```py\nzipline.api.set_slippage(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.slippage.SlippageModel\n```", "```py\nprocess_order(data, order)\n```", "```py\nvolume_for_bar\n```", "```py\nabstract process_order(data, order)\n```", "```py\nclass zipline.finance.slippage.FixedSlippage(spread=0.0)\n```", "```py\nclass zipline.finance.slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)\n```", "```py\nprice * (1 + price_impact * (volume_share ** 2)) \n```", "```py\nprice * (1 - price_impact * (volume_share ** 2)) \n```", "```py\nzipline.api.set_commission(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.commission.CommissionModel\n```", "```py\nabstract calculate(order, transaction)\n```", "```py\nclass zipline.finance.commission.PerShare(cost=0.001, min_trade_cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerTrade(cost=0.0)\n```", "```py\nclass zipline.finance.commission.PerDollar(cost=0.0015)\n```", "```py\nzipline.api.set_slippage(self, us_equities=None, us_futures=None)\n```", "```py\nclass zipline.finance.slippage.SlippageModel\n```", "```py\nprocess_order(data, order)\n```", "```py\nvolume_for_bar\n```", "```py\nabstract process_order(data, order)\n```", "```py\nclass zipline.finance.slippage.FixedSlippage(spread=0.0)\n```", "```py\nclass zipline.finance.slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)\n```", "```py\nprice * (1 + price_impact * (volume_share ** 2)) \n```", "```py\nprice * (1 - price_impact * (volume_share ** 2)) \n```", "```py\nzipline.api.attach_pipeline(self, pipeline, name, chunks=None, eager=True)\n```", "```py\nzipline.api.pipeline_output(self, name)\n```", "```py\nzipline.api.record(self, *args, **kwargs)\n```", "```py\nzipline.api.get_environment(self, field='platform')\n```", "```py\nzipline.api.fetch_csv(self, url, pre_func=None, post_func=None, date_column='date', date_format=None, timezone='UTC', symbol=None, mask=True, symbol_column=None, special_params_checker=None, country_code=None, **kwargs)\n```", "```py\nclass zipline.finance.blotter.blotter.Blotter(cancel_policy=None)\n```", "```py\nbatch_order(order_arg_lists)\n```", "```py\nabstract cancel(order_id, relay_status=True)\n```", "```py\nabstract cancel_all_orders_for_asset(asset, warn=False, relay_status=True)\n```", "```py\nabstract get_transactions(bar_data)\n```", "```py\nabstract hold(order_id, reason='')\n```", "```py\nabstract order(asset, amount, style, order_id=None)\n```", "```py\nabstract process_splits(splits)\n```", "```py\nabstract prune_orders(closed_orders)\n```", "```py\nabstract reject(order_id, reason='')\n```", "```py\nclass zipline.finance.blotter.SimulationBlotter(equity_slippage=None, future_slippage=None, equity_commission=None, future_commission=None, cancel_policy=None)\n```", "```py\ncancel(order_id, relay_status=True)\n```", "```py\ncancel_all_orders_for_asset(asset, warn=False, relay_status=True)\n```", "```py\nget_transactions(bar_data)\n```", "```py\nhold(order_id, reason='')\n```", "```py\norder(asset, amount, style, order_id=None)\n```", "```py\nprocess_splits(splits)\n```", "```py\nprune_orders(closed_orders)\n```", "```py\nreject(order_id, reason='')\n```", "```py\nclass zipline.pipeline.Pipeline(columns=None, screen=None, domain=GENERIC)\n```", "```py\nadd(term, name, overwrite=False)\n```", "```py\ndomain(default)\n```", "```py\nremove(name)\n```", "```py\nset_screen(screen, overwrite=False)\n```", "```py\nshow_graph(format='svg')\n```", "```py\nto_execution_plan(domain, default_screen, start_date, end_date)\n```", "```py\nto_simple_graph(default_screen)\n```", "```py\nproperty columns\n```", "```py\nproperty screen\n```", "```py\nclass zipline.pipeline.CustomFactor(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ndef compute(self, today, assets, out, *inputs):\n   ... \n```", "```py\ntoday : np.datetime64[ns]\n    Row label for the last row of all arrays passed as `inputs`.\nassets : np.array[int64, ndim=1]\n    Column labels for `out` and`inputs`.\nout : np.array[self.dtype, ndim=1]\n    Output array of the same shape as `assets`.  `compute` should write\n    its desired return values into `out`. If multiple outputs are\n    specified, `compute` should write its desired return values into\n    `out.<output_name>` for each output name in `self.outputs`.\n*inputs : tuple of np.array\n    Raw data arrays corresponding to the values of `self.inputs`. \n```", "```py\nclass TenDayRange(CustomFactor):\n  \"\"\"\n Computes the difference between the highest high in the last 10\n days and the lowest low.\n\n Pre-declares high and low as default inputs and `window_length` as\n 10.\n \"\"\"\n\n    inputs = [USEquityPricing.high, USEquityPricing.low]\n    window_length = 10\n\n    def compute(self, today, assets, out, highs, lows):\n        from numpy import nanmin, nanmax\n\n        highest_highs = nanmax(highs, axis=0)\n        lowest_lows = nanmin(lows, axis=0)\n        out[:] = highest_highs - lowest_lows\n\n# Doesn't require passing inputs or window_length because they're\n# pre-declared as defaults for the TenDayRange class.\nten_day_range = TenDayRange() \n```", "```py\nclass MedianValue(CustomFactor):\n  \"\"\"\n Computes the median value of an arbitrary single input over an\n arbitrary window..\n\n Does not declare any defaults, so values for `window_length` and\n `inputs` must be passed explicitly on every construction.\n \"\"\"\n\n    def compute(self, today, assets, out, data):\n        from numpy import nanmedian\n        out[:] = data.nanmedian(data, axis=0)\n\n# Values for `inputs` and `window_length` must be passed explicitly to\n# MedianValue.\nmedian_close10 = MedianValue([USEquityPricing.close], window_length=10)\nmedian_low15 = MedianValue([USEquityPricing.low], window_length=15) \n```", "```py\nclass MultipleOutputs(CustomFactor):\n    inputs = [USEquityPricing.close]\n    outputs = ['alpha', 'beta']\n    window_length = N\n\n    def compute(self, today, assets, out, close):\n        computed_alpha, computed_beta = some_function(close)\n        out.alpha[:] = computed_alpha\n        out.beta[:] = computed_beta\n\n# Each output is returned as its own Factor upon instantiation.\nalpha, beta = MultipleOutputs()\n\n# Equivalently, we can create a single factor instance and access each\n# output as an attribute of that instance.\nmultiple_outputs = MultipleOutputs()\nalpha = multiple_outputs.alpha\nbeta = multiple_outputs.beta \n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.Filter(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> from zipline.pipeline.factors import VWAP\n>>> vwap_10 = VWAP(window_length=10)\n>>> vwaps_under_20 = (vwap_10 <= 20) \n```", "```py\n>>> short_vwap = VWAP(window_length=10)\n>>> long_vwap = VWAP(window_length=30)\n>>> higher_short_vwap = (short_vwap > long_vwap) \n```", "```py\n__and__(other)\n```", "```py\n__or__(other)\n```", "```py\nif_else(if_true, if_false)\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    2.0    3.0    4.0\n2017-03-14    5.0    6.0    7.0    8.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   10.0   20.0   30.0   40.0\n2017-03-14   50.0   60.0   70.0   80.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   True  False   True  False\n2017-03-14   True   True  False  False \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0   20.0    3.0   40.0\n2017-03-14    5.0    6.0   70.0   80.0 \n```", "```py\nclass zipline.pipeline.Factor(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> f1 = SomeFactor(...)  \n>>> f2 = SomeOtherFactor(...)  \n>>> average = (f1 + f2) / 2.0 \n```", "```py\neq(other)\n```", "```py\ndemean(mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    2.0    3.0    4.0\n2017-03-14    1.5    2.5    3.5    1.0\n2017-03-15    2.0    3.0    4.0    1.5\n2017-03-16    2.5    3.5    1.0    2.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13      1      1      2      2\n2017-03-14      1      1      2      2\n2017-03-15      1      1      2      2\n2017-03-16      1      1      2      2 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13  False   True   True   True\n2017-03-14   True  False   True   True\n2017-03-15   True   True  False   True\n2017-03-16   True   True   True  False \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13 -1.500 -0.500  0.500  1.500\n2017-03-14 -0.625  0.375  1.375 -1.125\n2017-03-15 -0.625  0.375  1.375 -1.125\n2017-03-16  0.250  1.250 -1.250 -0.250 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    NaN -1.000  0.000  1.000\n2017-03-14 -0.500    NaN  1.500 -1.000\n2017-03-15 -0.166  0.833    NaN -0.666\n2017-03-16  0.166  1.166 -1.333    NaN \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13 -0.500  0.500 -0.500  0.500\n2017-03-14 -0.500  0.500  1.250 -1.250\n2017-03-15 -0.500  0.500  1.250 -1.250\n2017-03-16 -0.500  0.500 -0.500  0.500 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    NaN  0.000 -0.500  0.500\n2017-03-14  0.000    NaN  1.250 -1.250\n2017-03-15 -0.500  0.500    NaN  0.000\n2017-03-16 -0.500  0.500  0.000    NaN \n```", "```py\n>>> base = MyFactor(...)  \n>>> normalized = base.demean(\n...     mask=base.percentile_between(1, 99),\n... ) \n```", "```py\nzscore(mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\n(row - row.mean()) / row.stddev() \n```", "```py\n>>> base = MyFactor(...)  \n>>> normalized = base.zscore(\n...    mask=base.percentile_between(1, 99),\n... ) \n```", "```py\nrank(method='ordinal', ascending=True, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\npearsonr(target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_correlations = returns.pearsonr(\n    target=returns_slice, correlation_length=30,\n) \n```", "```py\naapl_correlations = RollingPearsonOfReturns(\n    target=sid(24), returns_length=10, correlation_length=30,\n) \n```", "```py\nspearmanr(target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_correlations = returns.spearmanr(\n    target=returns_slice, correlation_length=30,\n) \n```", "```py\naapl_correlations = RollingSpearmanOfReturns(\n    target=sid(24), returns_length=10, correlation_length=30,\n) \n```", "```py\nlinear_regression(target, regression_length, mask=sentinel('NotSpecified'))\n```", "```py\nreturns = Returns(window_length=10)\nreturns_slice = returns[sid(24)]\naapl_regressions = returns.linear_regression(\n    target=returns_slice, regression_length=30,\n) \n```", "```py\naapl_regressions = RollingLinearRegressionOfReturns(\n    target=sid(24), returns_length=10, regression_length=30,\n) \n```", "```py\nwinsorize(min_percentile, max_percentile, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\nprice = USEquityPricing.close.latest\ncolumns={\n    'PRICE': price,\n    'WINSOR_1: price.winsorize(\n        min_percentile=0.25, max_percentile=0.75\n    ),\n    'WINSOR_2': price.winsorize(\n        min_percentile=0.50, max_percentile=1.0\n    ),\n    'WINSOR_3': price.winsorize(\n        min_percentile=0.0, max_percentile=0.5\n    ),\n\n} \n```", "```py\n 'PRICE' 'WINSOR_1' 'WINSOR_2' 'WINSOR_3'\nAsset_1    1        2          4          3\nAsset_2    2        2          4          3\nAsset_3    3        3          4          3\nAsset_4    4        4          4          4\nAsset_5    5        5          5          4\nAsset_6    6        5          5          4 \n```", "```py\nquantiles(bins, mask=sentinel('NotSpecified'))\n```", "```py\nquartiles(mask=sentinel('NotSpecified'))\n```", "```py\nquintiles(mask=sentinel('NotSpecified'))\n```", "```py\ndeciles(mask=sentinel('NotSpecified'))\n```", "```py\ntop(N, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\nbottom(N, mask=sentinel('NotSpecified'), groupby=sentinel('NotSpecified'))\n```", "```py\npercentile_between(min_percentile, max_percentile, mask=sentinel('NotSpecified'))\n```", "```py\nisnan()\n```", "```py\nnotnan()\n```", "```py\nisfinite()\n```", "```py\nclip(min_bound, max_bound, mask=sentinel('NotSpecified'))\n```", "```py\nfactor.clip(min_bound=-np.inf, max_bound=user_provided_max) \n```", "```py\nclip(min_bound, max_bound, mask=sentinel('NotSpecified'))\n```", "```py\nfactor.clip(min_bound=-np.inf, max_bound=user_provided_max) \n```", "```py\n__add__(other)\n```", "```py\n__sub__(other)\n```", "```py\n__mul__(other)\n```", "```py\n__div__(other)\n```", "```py\n__mod__(other)\n```", "```py\n__pow__(other)\n```", "```py\n__lt__(other)\n```", "```py\n__le__(other)\n```", "```py\n__ne__(other)\n```", "```py\n__ge__(other)\n```", "```py\n__gt__(other)\n```", "```py\nfillna(fill_value)\n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    NaN    3.0    4.0\n2017-03-14    1.5    2.5    NaN    NaN \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0    0.0    3.0    4.0\n2017-03-14    1.5    2.5    0.0    0.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13   10.0   20.0   30.0   40.0\n2017-03-14   15.0   25.0   35.0   45.0 \n```", "```py\n AAPL   MSFT    MCD     BK\n2017-03-13    1.0   20.0    3.0    4.0\n2017-03-14    1.5    2.5   35.0   45.0 \n```", "```py\nmean(mask=sentinel('NotSpecified'))\n```", "```py\nstddev(mask=sentinel('NotSpecified'))\n```", "```py\nmax(mask=sentinel('NotSpecified'))\n```", "```py\nmin(mask=sentinel('NotSpecified'))\n```", "```py\nmedian(mask=sentinel('NotSpecified'))\n```", "```py\nsum(mask=sentinel('NotSpecified'))\n```", "```py\nclass zipline.pipeline.Term(domain=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), window_safe=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n>>> from zipline.pipeline.data import EquityPricing\n>>> from zipline.pipeline.factors import SimpleMovingAverage\n>>> x = SimpleMovingAverage(inputs=[EquityPricing.close], window_length=5)\n>>> y = SimpleMovingAverage(inputs=[EquityPricing.close], window_length=5)\n>>> x is y\nTrue \n```", "```py\ngraph_repr()\n```", "```py\nrecursive_repr()\n```", "```py\nclass zipline.pipeline.data.DataSet\n```", "```py\nclass EquityPricing(DataSet):\n    open = Column(float)\n    high = Column(float)\n    low = Column(float)\n    close = Column(float)\n    volume = Column(float) \n```", "```py\nfrom zipline.pipeline.domain import US_EQUITIES\nUSEquityPricing = EquityPricing.specialize(US_EQUITIES) \n```", "```py\nclass CompanyMetadata(DataSet):\n    # Use float for semantically-numeric data, even if it's always\n    # integral valued (see Notes section below). The default missing\n    # value for floats is NaN.\n    shares_outstanding = Column(float)\n\n    # Use object for string columns. The default missing value for\n    # object-dtype columns is None.\n    ticker = Column(object)\n\n    # Use integers for integer-valued categorical data like sector or\n    # industry codes. Integer-dtype columns require an explicit missing\n    # value.\n    sector_code = Column(int, missing_value=-1)\n\n    # Use bool for boolean-valued flags. Note that the default missing\n    # value for bool-dtype columns is False.\n    is_primary_share = Column(bool) \n```", "```py\nclassmethod get_column(name)\n```", "```py\nclass zipline.pipeline.data.Column(dtype, missing_value=sentinel('NotSpecified'), doc=None, metadata=None, currency_aware=False)\n```", "```py\nbind(name)\n```", "```py\nclass zipline.pipeline.data.BoundColumn(dtype, missing_value, dataset, name, doc, metadata, currency_conversion, currency_aware)\n```", "```py\ndtype\n```", "```py\nlatest\n```", "```py\ndataset\n```", "```py\nname\n```", "```py\nmetadata\n```", "```py\ncurrency_aware\n```", "```py\nproperty currency_aware\n```", "```py\nproperty currency_conversion\n```", "```py\nproperty dataset\n```", "```py\nfx(currency)\n```", "```py\ngraph_repr()\n```", "```py\nproperty metadata\n```", "```py\nproperty name\n```", "```py\nproperty qualname\n```", "```py\nrecursive_repr()\n```", "```py\nspecialize(domain)\n```", "```py\nunspecialize()\n```", "```py\nclass zipline.pipeline.data.DataSetFamily\n```", "```py\nclass SomeDataSet(DataSetFamily):\n    extra_dims = [\n        ('dimension_0', {'a', 'b', 'c'}),\n        ('dimension_1', {'d', 'e', 'f'}),\n    ]\n\n    column_0 = Column(float)\n    column_1 = Column(bool) \n```", "```py\nsid :: int64\nasof_date :: datetime64[ns]\ntimestamp :: datetime64[ns]\ndimension_0 :: str\ndimension_1 :: str\ncolumn_0 :: float64\ncolumn_1 :: bool \n```", "```py\nDataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n```", "```py\nclassmethod slice(*args, **kwargs)\n```", "```py\nclass zipline.pipeline.data.EquityPricing\n```", "```py\nclose = EquityPricing.close::float64\n```", "```py\nhigh = EquityPricing.high::float64\n```", "```py\nlow = EquityPricing.low::float64\n```", "```py\nopen = EquityPricing.open::float64\n```", "```py\nvolume = EquityPricing.volume::float64\n```", "```py\nclass zipline.pipeline.factors.AverageDollarVolume(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, volume)\n```", "```py\nclass zipline.pipeline.factors.BollingerBands(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, k)\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysSincePreviousEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n# Factor computing number of days since most recent asof_date\n# per asset.\ndays_since_event = BusinessDaysSincePreviousEvent(\n    inputs=[MyDataset.asof_date]\n)\n\n# Filter returning True for each asset whose most recent asof_date\n# was in the last 5 business days.\nrecency_filter = (days_since_event <= 5) \n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysUntilNextEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.DailyReturns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingStdDev(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.Latest(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nzipline.pipeline.factors.MACDSignal\n```", "```py\nclass zipline.pipeline.factors.MaxDrawdown(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.Returns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close)\n```", "```py\nclass zipline.pipeline.factors.RollingPearson(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingSpearman(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingLinearRegressionOfReturns(target, returns_length, regression_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nregression_factor = RollingRegressionOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    regression_length=5,\n)\nalpha = regression_factor.alpha\nbeta = regression_factor.beta \n```", "```py\n SPY    MSFT     FB\n2017-03-17       0    .011   .003\n2017-03-20       0   -.004   .004\n2017-03-21       0    .007   .006\n2017-03-22       0    .002   .008 \n```", "```py\n SPY    MSFT     FB\n2017-03-17       1      .3   -1.1\n2017-03-20       1      .2     -1\n2017-03-21       1     -.3     -1\n2017-03-22       1     -.3    -.9 \n```", "```py\nclass zipline.pipeline.factors.RollingPearsonOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nrolling_correlations = RollingPearsonOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    correlation_length=5,\n) \n```", "```py\n SPY   MSFT     FB\n2017-03-17       1    .15   -.96\n2017-03-20       1    .10   -.96\n2017-03-21       1   -.16   -.94\n2017-03-22       1   -.16   -.85 \n```", "```py\nclass zipline.pipeline.factors.RollingSpearmanOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nclass zipline.pipeline.factors.SimpleBeta(target, regression_length, allowed_missing_percentage=0.25)\n```", "```py\ncompute(today, assets, out, all_returns, target_returns, allowed_missing_count)\n```", "```py\ndtype = dtype('float64')\n```", "```py\ngraph_repr()\n```", "```py\nproperty target\n```", "```py\nclass zipline.pipeline.factors.RSI(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, closes)\n```", "```py\nclass zipline.pipeline.factors.SimpleMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.VWAP(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.WeightedAverageValue(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, base, weight)\n```", "```py\nclass zipline.pipeline.factors.PercentChange(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, values)\n```", "```py\nclass zipline.pipeline.factors.PeerCount(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, classifier_values)\n```", "```py\nclass zipline.pipeline.filters.All(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AllPresent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, value)\n```", "```py\nclass zipline.pipeline.filters.Any(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AtLeastN(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg, N)\n```", "```py\nclass zipline.pipeline.filters.SingleAsset(asset)\n```", "```py\ngraph_repr()\n```", "```py\nclass zipline.pipeline.filters.StaticAssets(assets)\n```", "```py\nclass zipline.pipeline.filters.StaticSids(sids)\n```", "```py\nclass zipline.pipeline.engine.PipelineEngine\n```", "```py\nabstract run_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nabstract run_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nclass zipline.pipeline.engine.SimplePipelineEngine(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\n__init__(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\nrun_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nrun_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nzipline.pipeline.engine.default_populate_initial_workspace(initial_workspace, root_mask_term, execution_plan, dates, assets)\n```", "```py\nclass zipline.pipeline.loaders.base.PipelineLoader(*args, **kwargs)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\n__init__()\n```", "```py\nclass zipline.pipeline.loaders.frame.DataFrameLoader(column, baseline, adjustments=None)\n```", "```py\n__init__(column, baseline, adjustments=None)\n```", "```py\nformat_adjustments(dates, assets)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\nclass zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\n__init__(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\nzipline.pipeline.loaders.equity_pricing_loader.USEquityPricingLoader\n```", "```py\nclass zipline.pipeline.loaders.events.EventsLoader(events, next_value_columns, previous_value_columns)\n```", "```py\n__init__(events, next_value_columns, previous_value_columns)\n```", "```py\nclass zipline.pipeline.loaders.earnings_estimates.EarningsEstimatesLoader(estimates, name_map)\n```", "```py\n__init__(estimates, name_map)\n```", "```py\nclass zipline.pipeline.factors.AverageDollarVolume(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, volume)\n```", "```py\nclass zipline.pipeline.factors.BollingerBands(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close, k)\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysSincePreviousEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\n# Factor computing number of days since most recent asof_date\n# per asset.\ndays_since_event = BusinessDaysSincePreviousEvent(\n    inputs=[MyDataset.asof_date]\n)\n\n# Filter returning True for each asset whose most recent asof_date\n# was in the last 5 business days.\nrecency_filter = (days_since_event <= 5) \n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.BusinessDaysUntilNextEvent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), domain=sentinel('NotSpecified'), *args, **kwargs)\n```", "```py\ndtype = dtype('float64')\n```", "```py\nclass zipline.pipeline.factors.DailyReturns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.ExponentialWeightedMovingStdDev(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\n    decay_rate, decay_rate ** 2, decay_rate ** 3, ... \n    ```", "```py\ncompute(today, assets, out, data, decay_rate)\n```", "```py\nclass zipline.pipeline.factors.Latest(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nzipline.pipeline.factors.MACDSignal\n```", "```py\nclass zipline.pipeline.factors.MaxDrawdown(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.Returns(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, close)\n```", "```py\nclass zipline.pipeline.factors.RollingPearson(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingSpearman(base_factor, target, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\ncompute(today, assets, out, base_data, target_data)\n```", "```py\nclass zipline.pipeline.factors.RollingLinearRegressionOfReturns(target, returns_length, regression_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nregression_factor = RollingRegressionOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    regression_length=5,\n)\nalpha = regression_factor.alpha\nbeta = regression_factor.beta \n```", "```py\n SPY    MSFT     FB\n2017-03-17       0    .011   .003\n2017-03-20       0   -.004   .004\n2017-03-21       0    .007   .006\n2017-03-22       0    .002   .008 \n```", "```py\n SPY    MSFT     FB\n2017-03-17       1      .3   -1.1\n2017-03-20       1      .2     -1\n2017-03-21       1     -.3     -1\n2017-03-22       1     -.3    -.9 \n```", "```py\nclass zipline.pipeline.factors.RollingPearsonOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\n SPY    MSFT     FB\n2017-03-13    -.03     .03    .04\n2017-03-14    -.02    -.03    .02\n2017-03-15    -.01     .02    .01\n2017-03-16       0    -.02    .01\n2017-03-17     .01     .04   -.01\n2017-03-20     .02    -.03   -.02\n2017-03-21     .03     .01   -.02\n2017-03-22     .04    -.02   -.02 \n```", "```py\nrolling_correlations = RollingPearsonOfReturns(\n    target=sid(8554),\n    returns_length=10,\n    correlation_length=5,\n) \n```", "```py\n SPY   MSFT     FB\n2017-03-17       1    .15   -.96\n2017-03-20       1    .10   -.96\n2017-03-21       1   -.16   -.94\n2017-03-22       1   -.16   -.85 \n```", "```py\nclass zipline.pipeline.factors.RollingSpearmanOfReturns(target, returns_length, correlation_length, mask=sentinel('NotSpecified'))\n```", "```py\nclass zipline.pipeline.factors.SimpleBeta(target, regression_length, allowed_missing_percentage=0.25)\n```", "```py\ncompute(today, assets, out, all_returns, target_returns, allowed_missing_count)\n```", "```py\ndtype = dtype('float64')\n```", "```py\ngraph_repr()\n```", "```py\nproperty target\n```", "```py\nclass zipline.pipeline.factors.RSI(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, closes)\n```", "```py\nclass zipline.pipeline.factors.SimpleMovingAverage(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, data)\n```", "```py\nclass zipline.pipeline.factors.VWAP(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\nclass zipline.pipeline.factors.WeightedAverageValue(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, base, weight)\n```", "```py\nclass zipline.pipeline.factors.PercentChange(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, values)\n```", "```py\nclass zipline.pipeline.factors.PeerCount(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, classifier_values)\n```", "```py\nclass zipline.pipeline.filters.All(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AllPresent(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, value)\n```", "```py\nclass zipline.pipeline.filters.Any(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg)\n```", "```py\nclass zipline.pipeline.filters.AtLeastN(inputs=sentinel('NotSpecified'), outputs=sentinel('NotSpecified'), window_length=sentinel('NotSpecified'), mask=sentinel('NotSpecified'), dtype=sentinel('NotSpecified'), missing_value=sentinel('NotSpecified'), ndim=sentinel('NotSpecified'), **kwargs)\n```", "```py\ncompute(today, assets, out, arg, N)\n```", "```py\nclass zipline.pipeline.filters.SingleAsset(asset)\n```", "```py\ngraph_repr()\n```", "```py\nclass zipline.pipeline.filters.StaticAssets(assets)\n```", "```py\nclass zipline.pipeline.filters.StaticSids(sids)\n```", "```py\nclass zipline.pipeline.engine.PipelineEngine\n```", "```py\nabstract run_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nabstract run_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nclass zipline.pipeline.engine.SimplePipelineEngine(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\n__init__(get_loader, asset_finder, default_domain=GENERIC, populate_initial_workspace=None, default_hooks=None)\n```", "```py\nrun_chunked_pipeline(pipeline, start_date, end_date, chunksize, hooks=None)\n```", "```py\nrun_pipeline(pipeline, start_date, end_date, hooks=None)\n```", "```py\nzipline.pipeline.engine.default_populate_initial_workspace(initial_workspace, root_mask_term, execution_plan, dates, assets)\n```", "```py\nclass zipline.pipeline.loaders.base.PipelineLoader(*args, **kwargs)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\n__init__()\n```", "```py\nclass zipline.pipeline.loaders.frame.DataFrameLoader(column, baseline, adjustments=None)\n```", "```py\n__init__(column, baseline, adjustments=None)\n```", "```py\nformat_adjustments(dates, assets)\n```", "```py\nload_adjusted_array(domain, columns, dates, sids, mask)\n```", "```py\nclass zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\n__init__(raw_price_reader, adjustments_reader, fx_reader)\n```", "```py\nzipline.pipeline.loaders.equity_pricing_loader.USEquityPricingLoader\n```", "```py\nclass zipline.pipeline.loaders.events.EventsLoader(events, next_value_columns, previous_value_columns)\n```", "```py\n__init__(events, next_value_columns, previous_value_columns)\n```", "```py\nclass zipline.pipeline.loaders.earnings_estimates.EarningsEstimatesLoader(estimates, name_map)\n```", "```py\n__init__(estimates, name_map)\n```", "```py\nclass zipline.assets.ExchangeInfo(name, canonical_name, country_code)\n```", "```py\nname\n```", "```py\ncanonical_name\n```", "```py\ncountry_code\n```", "```py\ncalendar\n```", "```py\nproperty calendar\n```", "```py\nclass zipline.assets.Asset\n```", "```py\nsid\n```", "```py\nsymbol\n```", "```py\nasset_name\n```", "```py\nexchange\n```", "```py\nexchange_full\n```", "```py\nexchange_info\n```", "```py\ncountry_code\n```", "```py\nstart_date\n```", "```py\nend_date\n```", "```py\ntick_size\n```", "```py\nauto_close_date\n```", "```py\nfrom_dict()\n```", "```py\nis_alive_for_session()\n```", "```py\nis_exchange_open()\n```", "```py\nto_dict()\n```", "```py\nclass zipline.assets.Equity\n```", "```py\nclass zipline.assets.Future\n```", "```py\nto_dict()\n```", "```py\nclass zipline.assets.AssetConvertible\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarWriter(filename, calendar, start_session, end_session)\n```", "```py\nwrite(data, assets=None, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nwrite_csvs(asset_map, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentWriter(conn_or_path, equity_daily_bar_reader, overwrite=False)\n```", "```py\ncalc_dividend_ratios(dividends)\n```", "```py\nwrite(splits=None, mergers=None, dividends=None, stock_dividends=None)\n```", "```py\nwrite_dividend_data(dividends, stock_dividends=None)\n```", "```py\nwrite_dividend_payouts(frame)\n```", "```py\nclass zipline.assets.AssetDBWriter(engine)\n```", "```py\ninit_db(txn=None)\n```", "```py\nwrite(equities=None, futures=None, exchanges=None, root_symbols=None, equity_supplementary_mappings=None, chunk_size=999)\n```", "```py\nwrite_direct(equities=None, equity_symbol_mappings=None, equity_supplementary_mappings=None, futures=None, exchanges=None, root_symbols=None, chunk_size=999)\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarReader(table, read_all_threshold=3000)\n```", "```py\nThe table with which this loader interacts contains the following\n```", "```py\nattributes\n```", "```py\nfirst_row\n```", "```py\nlast_row\n```", "```py\ncalendar_offset\n```", "```py\nstart_session_ns\n```", "```py\nend_session_ns\n```", "```py\ncalendar_name\n```", "```py\nWe use first_row and last_row together to quickly find ranges of rows to\n```", "```py\nload when reading an asset's data into memory.\n```", "```py\nWe use calendar_offset and calendar to orient loaded blocks within a\n```", "```py\nrange of queried dates.\n```", "```py\ncurrency_codes(sids)\n```", "```py\nget_last_traded_dt(asset, day)\n```", "```py\nget_value(sid, dt, field)\n```", "```py\nproperty last_available_dt\n```", "```py\nload_raw_arrays(columns, start_date, end_date, assets)\n```", "```py\nsid_day_index(sid, day)\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentReader(conn)\n```", "```py\nload_adjustments(dates, assets, should_include_splits, should_include_mergers, should_include_dividends, adjustment_type)\n```", "```py\nunpack_db_to_component_dfs(convert_dates=False)\n```", "```py\nclass zipline.assets.AssetFinder(engine, future_chain_predicates={'AD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'BP': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'CD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'EL': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'GC': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'JY': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'ME': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PA': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PL': functools.partial(<built-in function delivery_predicate>, {'J', 'F', 'V', 'N'}), 'SV': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'}), 'XG': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'YS': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'})})\n```", "```py\nproperty equities_sids\n```", "```py\nequities_sids_for_country_code(country_code)\n```", "```py\nequities_sids_for_exchange_name(exchange_name)\n```", "```py\nproperty futures_sids\n```", "```py\nget_supplementary_field(sid, field_name, as_of_date)\n```", "```py\ngroup_by_type(sids)\n```", "```py\nlifetimes(dates, include_start_date, country_codes)\n```", "```py\nlookup_asset_types(sids)\n```", "```py\nlookup_future_symbol(symbol)\n```", "```py\nlookup_generic(obj, as_of_date, country_code)\n```", "```py\nlookup_symbol(symbol, as_of_date, fuzzy=False, country_code=None)\n```", "```py\nlookup_symbols(symbols, as_of_date, fuzzy=False, country_code=None)\n```", "```py\n[finder.lookup_symbol(s, as_of, fuzzy) for s in symbols] \n```", "```py\nretrieve_all(sids, default_none=False)\n```", "```py\nretrieve_asset(sid, default_none=False)\n```", "```py\nretrieve_equities(sids)\n```", "```py\nretrieve_futures_contracts(sids)\n```", "```py\nproperty sids\n```", "```py\nclass zipline.data.data_portal.DataPortal(asset_finder, trading_calendar, first_trading_day, equity_daily_reader=None, equity_minute_reader=None, future_daily_reader=None, future_minute_reader=None, adjustment_reader=None, last_available_session=None, last_available_minute=None, minute_history_prefetch_length=1560, daily_history_prefetch_length=40)\n```", "```py\nget_adjusted_value(asset, field, dt, perspective_dt, data_frequency, spot_value=None)\n```", "```py\nget_adjustments(assets, field, dt, perspective_dt)\n```", "```py\nget_current_future_chain(continuous_future, dt)\n```", "```py\nget_fetcher_assets(dt)\n```", "```py\nget_history_window(assets, end_dt, bar_count, frequency, field, data_frequency, ffill=True)\n```", "```py\nget_last_traded_dt(asset, dt, data_frequency)\n```", "```py\nget_scalar_asset_spot_value(asset, field, dt, data_frequency)\n```", "```py\nget_splits(assets, dt)\n```", "```py\nget_spot_value(assets, field, dt, data_frequency)\n```", "```py\nget_stock_dividends(sid, trading_days)\n```", "```py\nhandle_extra_source(source_df, sim_params)\n```", "```py\nclass zipline.sources.benchmark_source.BenchmarkSource(benchmark_asset, trading_calendar, sessions, data_portal, emission_rate='daily', benchmark_returns=None)\n```", "```py\ndaily_returns(start, end=None)\n```", "```py\nget_range(start_dt, end_dt)\n```", "```py`\nget_value(dt)\n```", "```py\nzipline.data.bundles.register(name='__no__default__', f='__no__default__', calendar_name='NYSE', start_session=None, end_session=None, minutes_per_day=390, create_writers=True)\n```", "```py\n@register('quandl')\ndef quandl_ingest_function(...):\n    ... \n```", "```py\nzipline.data.bundles.ingest(name, environ=os.environ, date=None, show_progress=True)\n```", "```py\nzipline.data.bundles.load(name, environ=os.environ, date=None)\n```", "```py\nzipline.data.bundles.unregister(name)\n```", "```py\nzipline.data.bundles.bundles\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarWriter(filename, calendar, start_session, end_session)\n```", "```py\nwrite(data, assets=None, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nwrite_csvs(asset_map, show_progress=False, invalid_data_behavior='warn')\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentWriter(conn_or_path, equity_daily_bar_reader, overwrite=False)\n```", "```py\ncalc_dividend_ratios(dividends)\n```", "```py\nwrite(splits=None, mergers=None, dividends=None, stock_dividends=None)\n```", "```py\nwrite_dividend_data(dividends, stock_dividends=None)\n```", "```py\nwrite_dividend_payouts(frame)\n```", "```py\nclass zipline.assets.AssetDBWriter(engine)\n```", "```py\ninit_db(txn=None)\n```", "```py\nwrite(equities=None, futures=None, exchanges=None, root_symbols=None, equity_supplementary_mappings=None, chunk_size=999)\n```", "```py\nwrite_direct(equities=None, equity_symbol_mappings=None, equity_supplementary_mappings=None, futures=None, exchanges=None, root_symbols=None, chunk_size=999)\n```", "```py\nclass zipline.data.bcolz_daily_bars.BcolzDailyBarReader(table, read_all_threshold=3000)\n```", "```py\nThe table with which this loader interacts contains the following\n```", "```py\nattributes\n```", "```py\nfirst_row\n```", "```py\nlast_row\n```", "```py\ncalendar_offset\n```", "```py\nstart_session_ns\n```", "```py\nend_session_ns\n```", "```py\ncalendar_name\n```", "```py\nWe use first_row and last_row together to quickly find ranges of rows to\n```", "```py\nload when reading an asset's data into memory.\n```", "```py\nWe use calendar_offset and calendar to orient loaded blocks within a\n```", "```py\nrange of queried dates.\n```", "```py\ncurrency_codes(sids)\n```", "```py\nget_last_traded_dt(asset, day)\n```", "```py\nget_value(sid, dt, field)\n```", "```py\nproperty last_available_dt\n```", "```py\nload_raw_arrays(columns, start_date, end_date, assets)\n```", "```py\nsid_day_index(sid, day)\n```", "```py\nclass zipline.data.adjustments.SQLiteAdjustmentReader(conn)\n```", "```py\nload_adjustments(dates, assets, should_include_splits, should_include_mergers, should_include_dividends, adjustment_type)\n```", "```py\nunpack_db_to_component_dfs(convert_dates=False)\n```", "```py\nclass zipline.assets.AssetFinder(engine, future_chain_predicates={'AD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'BP': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'CD': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'EL': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'GC': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'JY': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'ME': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PA': functools.partial(<built-in function delivery_predicate>, {'Z', 'U', 'H', 'M'}), 'PL': functools.partial(<built-in function delivery_predicate>, {'J', 'F', 'V', 'N'}), 'SV': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'}), 'XG': functools.partial(<built-in function delivery_predicate>, {'M', 'Z', 'Q', 'V', 'G', 'J'}), 'YS': functools.partial(<built-in function delivery_predicate>, {'H', 'N', 'Z', 'U', 'K'})})\n```", "```py\nproperty equities_sids\n```", "```py\nequities_sids_for_country_code(country_code)\n```", "```py\nequities_sids_for_exchange_name(exchange_name)\n```", "```py\nproperty futures_sids\n```", "```py\nget_supplementary_field(sid, field_name, as_of_date)\n```", "```py\ngroup_by_type(sids)\n```", "```py\nlifetimes(dates, include_start_date, country_codes)\n```", "```py\nlookup_asset_types(sids)\n```", "```py\nlookup_future_symbol(symbol)\n```", "```py\nlookup_generic(obj, as_of_date, country_code)\n```", "```py\nlookup_symbol(symbol, as_of_date, fuzzy=False, country_code=None)\n```", "```py\nlookup_symbols(symbols, as_of_date, fuzzy=False, country_code=None)\n```", "```py\n[finder.lookup_symbol(s, as_of, fuzzy) for s in symbols] \n```", "```py\nretrieve_all(sids, default_none=False)\n```", "```py\nretrieve_asset(sid, default_none=False)\n```", "```py\nretrieve_equities(sids)\n```", "```py\nretrieve_futures_contracts(sids)\n```", "```py\nproperty sids\n```", "```py\nclass zipline.data.data_portal.DataPortal(asset_finder, trading_calendar, first_trading_day, equity_daily_reader=None, equity_minute_reader=None, future_daily_reader=None, future_minute_reader=None, adjustment_reader=None, last_available_session=None, last_available_minute=None, minute_history_prefetch_length=1560, daily_history_prefetch_length=40)\n```", "```py\nget_adjusted_value(asset, field, dt, perspective_dt, data_frequency, spot_value=None)\n```", "```py\nget_adjustments(assets, field, dt, perspective_dt)\n```", "```py\nget_current_future_chain(continuous_future, dt)\n```", "```py\nget_fetcher_assets(dt)\n```", "```py\nget_history_window(assets, end_dt, bar_count, frequency, field, data_frequency, ffill=True)\n```", "```py\nget_last_traded_dt(asset, dt, data_frequency)\n```", "```py\nget_scalar_asset_spot_value(asset, field, dt, data_frequency)\n```", "```py\nget_splits(assets, dt)\n```", "```py\nget_spot_value(assets, field, dt, data_frequency)\n```", "```py\nget_stock_dividends(sid, trading_days)\n```", "```py\nhandle_extra_source(source_df, sim_params)\n```", "```py\nclass zipline.sources.benchmark_source.BenchmarkSource(benchmark_asset, trading_calendar, sessions, data_portal, emission_rate='daily', benchmark_returns=None)\n```", "```py\ndaily_returns(start, end=None)\n```", "```py\nget_range(start_dt, end_dt)\n```", "```py`\nget_value(dt)\n```", "```py\nzipline.data.bundles.register(name='__no__default__', f='__no__default__', calendar_name='NYSE', start_session=None, end_session=None, minutes_per_day=390, create_writers=True)\n```", "```py\n@register('quandl')\ndef quandl_ingest_function(...):\n    ... \n```", "```py\nzipline.data.bundles.ingest(name, environ=os.environ, date=None, show_progress=True)\n```", "```py\nzipline.data.bundles.load(name, environ=os.environ, date=None)\n```", "```py\nzipline.data.bundles.unregister(name)\n```", "```py\nzipline.data.bundles.bundles\n```", "```py\nclass zipline.finance.ledger.Ledger(trading_sessions, capital_base, data_frequency)\n```", "```py\nportfolio\n```", "```py\naccount\n```", "```py\nposition_tracker\n```", "```py\ntodays_returns\n```", "```py\ndaily_returns_series\n```", "```py\ndaily_returns_array\n```", "```py\norders(dt=None)\n```", "```py\noverride_account_fields(settled_cash=sentinel('not_overridden'), accrued_interest=sentinel('not_overridden'), buying_power=sentinel('not_overridden'), equity_with_loan=sentinel('not_overridden'), total_positions_value=sentinel('not_overridden'), total_positions_exposure=sentinel('not_overridden'), regt_equity=sentinel('not_overridden'), regt_margin=sentinel('not_overridden'), initial_margin_requirement=sentinel('not_overridden'), maintenance_margin_requirement=sentinel('not_overridden'), available_funds=sentinel('not_overridden'), excess_liquidity=sentinel('not_overridden'), cushion=sentinel('not_overridden'), day_trades_remaining=sentinel('not_overridden'), leverage=sentinel('not_overridden'), net_leverage=sentinel('not_overridden'), net_liquidation=sentinel('not_overridden'))\n```", "```py\nproperty portfolio\n```", "```py\nprocess_commission(commission)\n```", "```py\nprocess_dividends(next_session, asset_finder, adjustment_reader)\n```", "```py\nprocess_order(order)\n```", "```py\nprocess_splits(splits)\n```", "```py\nprocess_transaction(transaction)\n```", "```py\ntransactions(dt=None)\n```", "```py\nupdate_portfolio()\n```", "```py\nclass zipline.protocol.Portfolio(start_date=None, capital_base=0.0)\n```", "```py\npositions\n```", "```py\ncash\n```", "```py\nportfolio_value\n```", "```py\nstarting_cash\n```", "```py\nproperty current_portfolio_weights\n```", "```py\nclass zipline.protocol.Account\n```", "```py\nclass zipline.finance.ledger.PositionTracker(data_frequency)\n```", "```py\nearn_dividends(cash_dividends, stock_dividends)\n```", "```py\nhandle_splits(splits)\n```", "```py\npay_dividends(next_trading_day)\n```", "```py\nproperty stats\n```", "```py\nclass zipline.finance._finance_ext.PositionStats\n```", "```py\ngross_exposure\n```", "```py\ngross_value\n```", "```py\nlong_exposure\n```", "```py\nlong_value\n```", "```py\nnet_exposure\n```", "```py\nnet_value\n```", "```py\nshort_exposure\n```", "```py\nshort_value\n```", "```py\nlongs_count\n```", "```py\nshorts_count\n```", "```py\nposition_exposure_array\n```", "```py\nposition_exposure_series\n```", "```py\nclass zipline.finance.metrics.metric.SimpleLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.DailyLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.Returns\n```", "```py\nclass zipline.finance.metrics.metric.BenchmarkReturnsAndVolatility\n```", "```py\nclass zipline.finance.metrics.metric.CashFlow\n```", "```py\nclass zipline.finance.metrics.metric.Orders\n```", "```py\nclass zipline.finance.metrics.metric.Transactions\n```", "```py\nclass zipline.finance.metrics.metric.Positions\n```", "```py\nclass zipline.finance.metrics.metric.ReturnsStatistic(function, field_name=None)\n```", "```py\nclass zipline.finance.metrics.metric.AlphaBeta\n```", "```py\nclass zipline.finance.metrics.metric.MaxLeverage\n```", "```py\nzipline.finance.metrics.register(name, function=None)\n```", "```py\nzipline.finance.metrics.load(name)\n```", "```py\nzipline.finance.metrics.unregister(name)\n```", "```py\nzipline.data.finance.metrics.metrics_sets\n```", "```py\nclass zipline.finance.ledger.Ledger(trading_sessions, capital_base, data_frequency)\n```", "```py\nportfolio\n```", "```py\naccount\n```", "```py\nposition_tracker\n```", "```py\ntodays_returns\n```", "```py\ndaily_returns_series\n```", "```py\ndaily_returns_array\n```", "```py\norders(dt=None)\n```", "```py\noverride_account_fields(settled_cash=sentinel('not_overridden'), accrued_interest=sentinel('not_overridden'), buying_power=sentinel('not_overridden'), equity_with_loan=sentinel('not_overridden'), total_positions_value=sentinel('not_overridden'), total_positions_exposure=sentinel('not_overridden'), regt_equity=sentinel('not_overridden'), regt_margin=sentinel('not_overridden'), initial_margin_requirement=sentinel('not_overridden'), maintenance_margin_requirement=sentinel('not_overridden'), available_funds=sentinel('not_overridden'), excess_liquidity=sentinel('not_overridden'), cushion=sentinel('not_overridden'), day_trades_remaining=sentinel('not_overridden'), leverage=sentinel('not_overridden'), net_leverage=sentinel('not_overridden'), net_liquidation=sentinel('not_overridden'))\n```", "```py\nproperty portfolio\n```", "```py\nprocess_commission(commission)\n```", "```py\nprocess_dividends(next_session, asset_finder, adjustment_reader)\n```", "```py\nprocess_order(order)\n```", "```py\nprocess_splits(splits)\n```", "```py\nprocess_transaction(transaction)\n```", "```py\ntransactions(dt=None)\n```", "```py\nupdate_portfolio()\n```", "```py\nclass zipline.protocol.Portfolio(start_date=None, capital_base=0.0)\n```", "```py\npositions\n```", "```py\ncash\n```", "```py\nportfolio_value\n```", "```py\nstarting_cash\n```", "```py\nproperty current_portfolio_weights\n```", "```py\nclass zipline.protocol.Account\n```", "```py\nclass zipline.finance.ledger.PositionTracker(data_frequency)\n```", "```py\nearn_dividends(cash_dividends, stock_dividends)\n```", "```py\nhandle_splits(splits)\n```", "```py\npay_dividends(next_trading_day)\n```", "```py\nproperty stats\n```", "```py\nclass zipline.finance._finance_ext.PositionStats\n```", "```py\ngross_exposure\n```", "```py\ngross_value\n```", "```py\nlong_exposure\n```", "```py\nlong_value\n```", "```py\nnet_exposure\n```", "```py\nnet_value\n```", "```py\nshort_exposure\n```", "```py\nshort_value\n```", "```py\nlongs_count\n```", "```py\nshorts_count\n```", "```py\nposition_exposure_array\n```", "```py\nposition_exposure_series\n```", "```py\nclass zipline.finance.metrics.metric.SimpleLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.DailyLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.StartOfPeriodLedgerField(ledger_field, packet_field=None)\n```", "```py\nclass zipline.finance.metrics.metric.Returns\n```", "```py\nclass zipline.finance.metrics.metric.BenchmarkReturnsAndVolatility\n```", "```py\nclass zipline.finance.metrics.metric.CashFlow\n```", "```py\nclass zipline.finance.metrics.metric.Orders\n```", "```py\nclass zipline.finance.metrics.metric.Transactions\n```", "```py\nclass zipline.finance.metrics.metric.Positions\n```", "```py\nclass zipline.finance.metrics.metric.ReturnsStatistic(function, field_name=None)\n```", "```py\nclass zipline.finance.metrics.metric.AlphaBeta\n```", "```py\nclass zipline.finance.metrics.metric.MaxLeverage\n```", "```py\nzipline.finance.metrics.register(name, function=None)\n```", "```py\nzipline.finance.metrics.load(name)\n```", "```py\nzipline.finance.metrics.unregister(name)\n```", "```py\nzipline.data.finance.metrics.metrics_sets\n```", "```py\nclass zipline.utils.cache.CachedObject(value, expires)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> obj = CachedObject(1, expires)\n>>> obj.unwrap(expires - Timedelta('1 minute'))\n1\n>>> obj.unwrap(expires)\n1\n>>> obj.unwrap(expires + Timedelta('1 minute'))\n... \nTraceback (most recent call last):\n  ...\nExpired: 2014-01-01 00:00:00+00:00 \n```", "```py\nclass zipline.utils.cache.ExpiringCache(cache=None, cleanup=<function ExpiringCache.<lambda>>)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> value = 1\n>>> cache = ExpiringCache()\n>>> cache.set('foo', value, expires)\n>>> cache.get('foo', expires - Timedelta('1 minute'))\n1\n>>> cache.get('foo', expires + Timedelta('1 minute'))\nTraceback (most recent call last):\n  ...\nKeyError: 'foo' \n```", "```py\nclass zipline.utils.cache.dataframe_cache(path=None, lock=None, clean_on_failure=True, serialization='pickle')\n```", "```py\nclass zipline.utils.cache.working_file(final_path, *args, **kwargs)\n```", "```py\nclass zipline.utils.cache.working_dir(final_path, *args, **kwargs)\n```", "```py\nzipline.utils.cli.maybe_show_progress(it, show_progress, **kwargs)\n```", "```py\nwith maybe_show_progress([1, 2, 3], True) as ns:\n     for n in ns:\n         ... \n```", "```py\nclass zipline.utils.cache.CachedObject(value, expires)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> obj = CachedObject(1, expires)\n>>> obj.unwrap(expires - Timedelta('1 minute'))\n1\n>>> obj.unwrap(expires)\n1\n>>> obj.unwrap(expires + Timedelta('1 minute'))\n... \nTraceback (most recent call last):\n  ...\nExpired: 2014-01-01 00:00:00+00:00 \n```", "```py\nclass zipline.utils.cache.ExpiringCache(cache=None, cleanup=<function ExpiringCache.<lambda>>)\n```", "```py\n>>> from pandas import Timestamp, Timedelta\n>>> expires = Timestamp('2014', tz='UTC')\n>>> value = 1\n>>> cache = ExpiringCache()\n>>> cache.set('foo', value, expires)\n>>> cache.get('foo', expires - Timedelta('1 minute'))\n1\n>>> cache.get('foo', expires + Timedelta('1 minute'))\nTraceback (most recent call last):\n  ...\nKeyError: 'foo' \n```", "```py\nclass zipline.utils.cache.dataframe_cache(path=None, lock=None, clean_on_failure=True, serialization='pickle')\n```", "```py\nclass zipline.utils.cache.working_file(final_path, *args, **kwargs)\n```", "```py\nclass zipline.utils.cache.working_dir(final_path, *args, **kwargs)\n```", "```py\nzipline.utils.cli.maybe_show_progress(it, show_progress, **kwargs)\n```", "```py\nwith maybe_show_progress([1, 2, 3], True) as ns:\n     for n in ns:\n         ... \n```"]