- en: API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: 原文：[https://zipline.ml4trading.io/api-reference.html](https://zipline.ml4trading.io/api-reference.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://zipline.ml4trading.io/api-reference.html](https://zipline.ml4trading.io/api-reference.html)
- en: '## Running a Backtest'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 运行回测'
- en: The function [`run_algorithm()`](#zipline.run_algorithm "zipline.run_algorithm")
    creates an instance of `TradingAlgorithm` that represents a trading strategy and
    parameters to execute the strategy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`run_algorithm()`](#zipline.run_algorithm "zipline.run_algorithm")函数创建一个`TradingAlgorithm`实例，该实例代表一个交易策略和执行该策略的参数。'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Run a trading algorithm.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 运行交易算法。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**start** (*datetime*) – The start date of the backtest.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始** (*datetime*) – 回测的开始日期。'
- en: '**end** (*datetime*) – The end date of the backtest..'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结束** (*datetime*) – 回测的结束日期。'
- en: '**initialize** (*callable**[**context -> None**]*) – The initialize function
    to use for the algorithm. This is called once at the very begining of the backtest
    and should be used to set up any state needed by the algorithm.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化** (*可调用**[**上下文 -> None**]*) – 用于算法的初始化函数。在回测开始时调用一次，用于设置算法所需的状态。'
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting capital for the backtest.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资本基础** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – 回测的起始资本。'
- en: '**handle_data** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The handle_data function
    to use for the algorithm. This is called every minute when `data_frequency ==
    ''minute''` or every day when `data_frequency == ''daily''`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理数据** (*可调用**[**(**上下文**,* [*BarData*](#zipline.protocol.BarData "zipline.protocol.BarData")*)*
    *-> None**]**,* *可选*) – 用于算法的处理数据函数。当`data_frequency == ''minute''`时，每分钟调用一次；当`data_frequency
    == ''daily''`时，每天调用一次。'
- en: '**before_trading_start** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The before_trading_start
    function for the algorithm. This is called once before each trading day (after
    initialize on the first day).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易开始前** (*可调用**[**(**上下文**,* [*BarData*](#zipline.protocol.BarData "zipline.protocol.BarData")*)*
    *-> None**]**,* *可选*) – 算法的交易开始前函数。在每个交易日开始前调用一次（在初始化的第一天之后）。'
- en: '**analyze** (*callable**[**(**context**,* *pd.DataFrame**)* *-> None**]**,*
    *optional*) – The analyze function to use for the algorithm. This function is
    called once at the end of the backtest and is passed the context and the performance
    data.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析** (*可调用**[**(**上下文**,* *pd.DataFrame**)* *-> None**]**,* *可选*) – 用于算法的分析函数。该函数在回测结束时被调用一次，并传入上下文和性能数据。'
- en: '**data_frequency** (*{''daily''**,* *''minute''}**,* *optional*) – The data
    frequency to run the algorithm at.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据频率** (*{''daily''**,* *''minute''}**,* *可选*) – 算法运行的数据频率。'
- en: '**bundle** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The name of the data bundle to use to load the
    data to run the backtest with. This defaults to ‘quantopian-quandl’.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捆绑包** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")*,* *可选*) – 用于加载回测数据的捆绑包名称。默认为‘quantopian-quandl’。'
- en: '**bundle_timestamp** (*datetime**,* *optional*) – The datetime to lookup the
    bundle data for. This defaults to the current time.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捆绑时间戳** (*datetime**,* *可选*) – 查找捆绑数据的日期时间。默认为当前时间。'
- en: '**trading_calendar** (*TradingCalendar**,* *optional*) – The trading calendar
    to use for your backtest.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交易日历** (*TradingCalendar**,* *可选*) – 用于回测的交易日历。'
- en: '**metrics_set** (*iterable**[**Metric**] or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The set of metrics to compute in the simulation.
    If a string is passed, resolve the set with [`zipline.finance.metrics.load()`](#zipline.finance.metrics.load
    "zipline.finance.metrics.load").'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标集** (*可迭代**[**Metric**]或* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *可选*) – 模拟中要计算的指标集。如果传递了字符串，则使用[`zipline.finance.metrics.load()`](#zipline.finance.metrics.load
    "zipline.finance.metrics.load")解析集合。'
- en: '**benchmark_returns** (*pd.Series**,* *optional*) – Series of returns to use
    as the benchmark.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基准收益** (*pd.Series**,* *可选*) – 用作基准的收益序列。'
- en: '**default_extension** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the default zipline extension be
    loaded. This is found at `$ZIPLINE_ROOT/extension.py`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认扩展** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *可选*) – 是否加载默认的zipline扩展。该扩展位于`$ZIPLINE_ROOT/extension.py`。'
- en: '**extensions** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – The names of any other extensions to
    load. Each element may either be a dotted module path like `a.b.c` or a path to
    a python file ending in `.py` like `a/b/c.py`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**extensions** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – 要加载的任何其他扩展的名称。每个元素可以是像`a.b.c`这样的点分隔模块路径，也可以是像`a/b/c.py`这样的python文件路径，以`.py`结尾。'
- en: '**strict_extensions** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the run fail if any extensions fail
    to load. If this is false, a warning will be raised instead.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**strict_extensions** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – 如果任何扩展加载失败，运行是否应该失败。如果此参数为False，则会发出警告。'
- en: '**environ** (*mapping**[**str -> str**]**,* *optional*) – The os environment
    to use. Many extensions use this to get parameters. This defaults to `os.environ`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**environ** (*mapping**[**str -> str**]**,* *optional*) – 要使用的操作系统环境。许多扩展使用此参数来获取参数。默认值为`os.environ`。'
- en: '**blotter** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.finance.blotter.Blotter**,* *optional*) – Blotter
    to use with this algorithm. If passed as a string, we look for a blotter construction
    function registered with `zipline.extensions.register` and call it with no parameters.
    Default is a [`zipline.finance.blotter.SimulationBlotter`](#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter") that never cancels orders.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**blotter** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.finance.blotter.Blotter**,* *optional*) – 要与此算法一起使用的blotter。如果作为字符串传递，我们会在`zipline.extensions.register`中查找blotter构造函数并调用它，不带任何参数。默认值是一个永远不会取消订单的[`zipline.finance.blotter.SimulationBlotter`](#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter")。'
- en: 'Returns:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**perf** – The daily performance of the algorithm.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**perf** – 算法的日表现。'
- en: 'Return type:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: pd.DataFrame
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: pd.DataFrame
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
- en: The available data bundles.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的数据包。
- en: Trading Algorithm API
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易算法API
- en: The following methods are available for use in the `initialize`, `handle_data`,
    and `before_trading_start` API functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initialize`、`handle_data`和`before_trading_start` API函数中可用的方法如下。
- en: In all listed functions, the `self` argument refers to the currently executing
    `TradingAlgorithm` instance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有列出的函数中，`self`参数指的是当前执行的`TradingAlgorithm`实例。
- en: Data Object
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据对象
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提供从算法API函数访问每分钟和每日价格/成交量数据的方法。
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还提供实用方法来确定资产是否存活，以及它是否有最近的成交数据。
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象的实例作为`data`传递给`handle_data()`和`before_trading_start()`。
- en: 'Parameters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – 提供条形价格数据的提供者。'
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**simulation_dt_func** (*callable*) – 返回当前模拟时间的函数。这通常绑定到TradingSimulation的方法。'
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data_frequency** (*{''minute''**,* *''daily''}*) – 条形数据的频率；即数据是每日还是分钟条形图'
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – 结合并返回来自多个来源的受限列表信息的对象'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的资产或资产迭代器，如果满足以下所有条件，则返回True：
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资产在当前模拟时间的会话中存活（如果当前模拟时间不是市场分钟，我们使用下一个会话）。
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资产的交易所当前模拟时间或模拟日历的下一个市场分钟是开放的。
- en: There is a known last price for the asset.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资产有一个已知的最后价格。
- en: 'Parameters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *或* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – 确定可交易性的资产。'
- en: Notes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The second condition above warrants some further explanation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述第二个条件需要进一步解释：
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果资产的交易所日历与模拟日历相同，则此条件始终返回True。
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在模拟日历中有市场分钟不在该资产交易所的交易时间内（例如，如果模拟运行在CMES日历上，但资产是MSFT，它在NYSE交易），在这些分钟内，这个条件将返回False（例如，东部时间工作日早上3:15，此时CMES开放但NYSE关闭）。
- en: 'Returns:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**can_trade** – 布尔值或布尔序列，指示在当前分钟内请求的资产是否可以交易。'
- en: 'Return type:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    或 pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定资产在当前模拟时间下给定字段的“当前”值。
- en: 'Parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *或* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – 请求数据的资产。'
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *或* *iterable*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**) – 请求的数据字段。有效的字段名称包括：“价格”、“最后交易”、“开盘”、“最高”、“最低”、“收盘”和“成交量”。'
- en: 'Returns:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**current_value** – See notes below.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**current_value** – 见下文注释。'
- en: 'Return type:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: Scalar, pandas Series, or pandas DataFrame.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 标量、pandas Series 或 pandas DataFrame。
- en: Notes
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The return type of this function depends on the types of its inputs:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型取决于其输入的类型：
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求的是单个资产和一个字段，返回的值是一个标量（根据字段不同，可能是浮点数或`pd.Timestamp`）。
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求的是单个资产和一组字段，返回的值是一个`pd.Series`，其索引是请求的字段。
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求的是一组资产和一个字段，返回的值是一个`pd.Series`，其索引是资产。
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求的是一组资产和一组字段，返回的值是一个`pd.DataFrame`。返回的框架的列将是请求的字段，索引将是请求的资产。
- en: 'The values produced for `fields` are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`fields`产生的值如下：
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求“价格”将产生该资产的最新收盘价格，如果该分钟没有交易，则从更早的一分钟前向填充。如果没有最新已知值（可能是因为该资产从未交易过，或者已经退市），则返回NaN。如果找到值，并且我们必须跨越调整边界（拆分、股息等）才能获得它，则在返回之前将该值调整为当前模拟时间。
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求“开盘”、“最高”、“最低”或“收盘”将产生当前分钟的开盘、最高、最低或收盘价。如果该分钟没有交易发生，则返回`NaN`。
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求“成交量”将产生当前分钟的成交量。如果该分钟没有交易发生，则返回0。
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求“最后交易”将产生该资产最后一次交易的分钟时间，即使该资产已经停止交易。如果没有最后一次已知值，则返回`pd.NaT`。
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前模拟时间对于某个资产不是有效的市场时间，我们将使用最近的市场收盘价代替。
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个长度为`bar_count`的尾随窗口，其中包含给定资产、字段和频率的数据，并根据当前模拟时间调整了拆分、股息和合并。
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失数据的行为与[`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current")的注释中描述的行为相同。
- en: 'Parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**assets**（[*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *或* *可迭代* *的* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")）——请求数据的资产。'
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fields**（*字符串* *或* *可迭代* *的* *字符串*）——请求的数据字段。有效的字段名称包括：“价格”、“最后交易”、“开盘”、“最高”、“最低”、“收盘”和“成交量”。'
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bar_count**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")）——请求的数据观测值数量。'
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频率**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")）——指示是否加载每日或每分钟数据观测值的字符串。传递''1m''表示每分钟数据，''1d''表示每日数据。'
- en: 'Returns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**history** – See notes below.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**历史** – 请参见下面的注释。'
- en: 'Return type:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: pd.Series or pd.DataFrame or pd.Panel
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: pd.Series或pd.DataFrame或pd.Panel
- en: Notes
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的返回类型取决于`assets`和`fields`的类型：
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求了一个资产和一个字段，返回的值是一个长度为`bar_count`的`pd.Series`，其索引是`pd.DatetimeIndex`。
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求了一个资产和多个字段，返回的值是一个具有形状`(bar_count, len(fields))`的`pd.DataFrame`。该数据框的索引将是一个`pd.DatetimeIndex`，其列将是`fields`。
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求了多个资产和一个字段，返回的值是一个具有形状`(bar_count, len(assets))`的`pd.DataFrame`。该数据框的索引将是一个`pd.DatetimeIndex`，其列将是`assets`。
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求了多个资产和多个字段，则返回值是具有 pd.MultiIndex 的 `pd.DataFrame`，其中包含 `pd.DatetimeIndex`
    和 `assets` 的对，而列将包含字段（s）。它具有形状 `(bar_count * len(assets), len(fields))`。pd.MultiIndex
    的名称是
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date` 如果频率 == ‘1d’`` 或 `date_time` 如果频率 == ‘1m``, 和'
- en: ''
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asset`'
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前模拟时间不是有效的市场时间，我们将使用上次市场收盘时间代替。
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的资产或资产迭代器，如果资产存活且当前模拟时间没有交易数据，则返回 True。
- en: If the asset has never traded, returns False.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资产从未交易，则返回 False。
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前模拟时间不是有效的市场时间，我们使用当前时间检查资产是否存活，但我们使用上次市场分钟/日进行交易数据检查。
- en: 'Parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *或* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – 应确定其过时性的资产。'
- en: 'Returns:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**is_stale** – 布尔值或布尔序列，指示请求的资产是否过时。'
- en: 'Return type:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    或 pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
- en: Scheduling Functions
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调度函数
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Schedule a function to be called repeatedly in the future.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 安排一个函数在未来重复调用。
- en: 'Parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**func** (*callable*) – 当规则触发时要执行的函数。`func` 应该与 `handle_data` 具有相同的签名。'
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – 用于执行 `func`
    的日期规则。如果未传递，则函数将在每个交易日运行。'
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – 用于执行 `func`
    的时间规则。如果未传递，则函数将在一天的第一个市场分钟的末尾执行。'
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – 此规则是否应在半天内触发？默认为 True。'
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**calendar** (*Sentinel**,* *optional*) – 用于计算依赖于交易日的规则的日历。'
- en: See also
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 基于日期的工厂 [`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")
    规则。
- en: See also
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a rule that triggers every day.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个每天触发的规则。
- en: 'Returns:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rule**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**rule**'
- en: 'Return type:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: zipline.utils.events.EventRule
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: zipline.utils.events.EventRule
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个规则，该规则在每个月末之前的固定数量的交易日触发。
- en: 'Parameters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – 触发前距离月末的交易天数。默认值为0，即在月末最后一天触发。'
- en: 'Returns:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rule**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则**'
- en: 'Return type:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: zipline.utils.events.EventRule
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: zipline.utils.events.EventRule
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在每月开始后固定交易天数触发的规则。
- en: 'Parameters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – 每月触发前等待的交易天数。默认值为0，即在每月第一个交易日触发。'
- en: 'Returns:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rule**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则**'
- en: 'Return type:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: zipline.utils.events.EventRule
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: zipline.utils.events.EventRule
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在每周结束前固定交易天数触发的规则。
- en: 'Parameters:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – 触发前距离周末的交易天数。默认值为0，即在周末最后一个交易日触发。'
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在每周开始后固定交易天数触发的规则。
- en: 'Parameters:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – 每周触发前等待的交易天数。默认值为0，即在每周第一个交易日触发。'
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间的 [`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")
    规则的工厂。
- en: See also
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
- en: '[PRE14]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: alias of `Always`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：`Always`
- en: '[PRE15]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a rule that triggers at a fixed offset from market close.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在市场收盘后固定时间触发的规则。
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量可以指定为 [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")，或者指定为小时和分钟数。
- en: 'Parameters:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – 如果传递，触发的时间距离收盘的偏移量。必须至少为1分钟。'
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – 如果传递，则在收盘前等待的小时数。'
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – 如果传递，则在收盘前等待的分钟数。'
- en: 'Returns:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rule**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则**'
- en: 'Return type:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: zipline.utils.events.EventRule
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: zipline.utils.events.EventRule
- en: Notes
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If no arguments are passed, the default offset is one minute before market close.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递参数，默认偏移量是收盘前一分钟。
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了`offset`，则不能传递`hours`和`minutes`。相反，如果传递了`hours`或`minutes`，则不能传递`offset`。
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a rule that triggers at a fixed offset from market open.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在市场开盘后固定时间触发的规则。
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量可以指定为 [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")，或者指定为小时和分钟数。
- en: 'Parameters:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**偏移量** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *可选*) – 如果传递，触发时的开盘市场偏移量。必须至少为1分钟。'
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小时数** ([*整数*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")*,* *可选*) – 如果传递，市场开盘后等待的小时数。'
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分钟数** ([*整数*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")*,* *可选*) – 如果传递，市场开盘后等待的分钟数。'
- en: 'Returns:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rule**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则**'
- en: 'Return type:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: zipline.utils.events.EventRule
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: zipline.utils.events.EventRule
- en: Notes
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If no arguments are passed, the default offset is one minute after market open.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有参数传递，默认偏移量为市场开盘后一分钟。
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了`offset`，则不得传递`hours`和`minutes`。相反，如果传递了`hours`或`minutes`，则不得传递`offset`。
- en: Orders
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 订单
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Place an order for a fixed number of shares.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下固定数量的股票订单。
- en: 'Parameters:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产** ([*资产*](#zipline.assets.Asset "zipline.assets.Asset")) – 要下单的资产。'
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数量** ([*整数*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – 要下单的股票数量。如果`amount`为正数，这是要购买或平仓的股票数量。如果`amount`为负数，这是要卖出或做空的股票数量。'
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")*,* *可选*) – 订单的限价。'
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")*,* *可选*) – 订单的止损价。'
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风格** ([*执行风格*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *可选*) – 订单的执行风格。'
- en: 'Returns:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**订单ID** – 此订单的唯一标识符，如果没有下单则为None。'
- en: 'Return type:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符串](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    或 None'
- en: Notes
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit_price`和`stop_price`参数提供了传递常见执行风格的简写方式。传递`limit_price=N`等同于`style=LimitOrder(N)`。类似地，传递`stop_price=M`等同于`style=StopOrder(M)`，传递`limit_price=N`和`stop_price=M`等同于`style=StopLimitOrder(N,
    M)`。同时传递`style`和`limit_price`或`stop_price`是错误的。'
- en: See also
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
- en: '[PRE18]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Place an order for a fixed amount of money.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 下固定金额的订单。
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于`order(asset, value / data.current(asset, 'price'))`。
- en: 'Parameters:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产** ([*资产*](#zipline.assets.Asset "zipline.assets.Asset")) – 要下单的资产。'
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价值** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")) – 要交易的`资产`的价值量。买入或卖出的股票数量将等于`价值 / 当前价格`。'
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")*,* *可选*) – 订单的限价。'
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")*,* *可选*) – 订单的止损价。'
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – 订单的执行类型。'
- en: 'Returns:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**订单ID** – 此订单的唯一标识符。'
- en: 'Return type:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符串](https://docs.python.org/3/library/stdtypes.html#str "(在Python v3.11中)")'
- en: Notes
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`限价`、`止损价`和`类型`的更多信息，请参阅[`zipline.api.order()`](#zipline.api.order "zipline.api.order")
- en: See also
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
- en: '[PRE19]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定的资产中下订单，对应于当前投资组合价值的给定百分比。
- en: 'Parameters:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – 此订单所针对的资产。'
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**百分比** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")) – 分配给`资产`的投资组合价值的百分比。以小数形式指定，例如：0.50表示50%。'
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")*,* *可选*) – 订单的限价。'
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损价** ([*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.11中)")*,* *可选*) – 订单的止损价。'
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – 订单的执行类型。'
- en: 'Returns:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**订单ID** – 此订单的唯一标识符。'
- en: 'Return type:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符串](https://docs.python.org/3/library/stdtypes.html#str "(在Python v3.11中)")'
- en: Notes
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`限价`、`止损价`和`类型`的更多信息，请参阅[`zipline.api.order()`](#zipline.api.order "zipline.api.order")
- en: See also
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
- en: '[PRE20]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Base class for order execution styles.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The exchange to which this order should be routed.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Execution style for orders to be filled at current market price.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Lookup an order based on the order id returned from one of the order functions.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Order
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Retrieve all of the current open orders.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Cancel an open order.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  id: totrans-344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Sets the order cancellation policy for the simulation.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Abstract cancellation policy interface.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Should all open orders be cancelled?
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Orders are never automatically canceled.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Lookup an Equity by its ticker symbol.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Lookup multuple Equities as a list.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Lookup a futures contract with a given symbol.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Lookup an Asset by its unique asset identifier.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Set a restriction on which assets can be ordered.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Set a rule specifying that this algorithm cannot take short positions.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Set a limit on the maximum leverage of the algorithm.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Set a limit on the number of orders that can be placed in a single day.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Set the benchmark asset.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  id: totrans-460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Sets the commission models for the simulation.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Abstract base class for commission models.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Calculates a commission for a transaction based on a per trade cost.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Model commissions by applying a fixed cost per dollar transacted.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  id: totrans-501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Set the slippage models for the simulation.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Abstract base class for slippage models.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Compute the number of shares and price to fill for `order` in the current minute.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Simple model assuming a fixed-size spread for all assets.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Model slippage as a quadratic function of percentage of historical volume.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Orders to sell will be filled at:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Register a pipeline to be computed at the start of each day.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Get results of the pipeline attached by with name `name`.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  id: totrans-578
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Track and record values each day.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Query the execution environment.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: any
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: Blotters
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [blotter](https://www.investopedia.com/terms/b/blotter.asp) documents trades
    and their details over a period of time, typically one trading day. Trade details
    include such things as the time, price, order size, and whether it was a buy or
    sell order. It is is usually created by a trading software that records the trades
    made through a data feed.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Place a batch of orders.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: '**order_arg_lists** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*]*) – Tuples of args that order expects.'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: '**order_ids** – The unique identifier (or None) for each of the orders placed
    (or not placed).'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None]'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: This is required for Blotter subclasses to be able to place a batch of orders,
    instead of being passed the order requests one at a time.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Cancel a single order
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Cancel all open orders for a given asset.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Place an order.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 : Buy/Cover amount < 0 : Sell/Short Market order : order(asset,
    amount) Limit order : order(asset, amount, style=LimitOrder(limit_price)) Stop
    order : order(asset, amount, style=StopOrder(stop_price)) StopLimit order : order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Processes a list of splits by modifying any open orders as needed.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Removes all given orders from the blotter’s open_orders list.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Cancel a single order
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Cancel all open orders for a given asset.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Place an order.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  id: totrans-708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 :: Buy/Cover amount < 0 :: Sell/Short Market order: order(asset,
    amount) Limit order: order(asset, amount, style=LimitOrder(limit_price)) Stop
    order: order(asset, amount, style=StopOrder(stop_price)) StopLimit order: order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Processes a list of splits by modifying any open orders as needed.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Removes all given orders from the blotter’s open_orders list.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '## Pipeline API'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: A [`Pipeline`](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline") enables
    faster and more memory-efficient execution by optimizing the computation of factors
    during a backtest.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: A Pipeline object represents a collection of named expressions to be compiled
    and executed by a PipelineEngine.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: 'A Pipeline has two important attributes: ‘columns’, a dictionary of named [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") instances, and ‘screen’, a [`Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") representing criteria for including an asset in the
    results of a Pipeline.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: To compute a pipeline in the context of a TradingAlgorithm, users must call
    `attach_pipeline` in their `initialize` function to register that the pipeline
    should be computed each trading day. The most recent outputs of an attached pipeline
    can be retrieved by calling `pipeline_output` from `handle_data`, `before_trading_start`,
    or a scheduled function.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*,* *optional*) – Initial columns.'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**screen** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Initial screen.'
  id: totrans-740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Add a column.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: The results of computing `term` will show up as a column in the DataFrame produced
    by running this pipeline.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – A Filter, Factor, or Classifier to add to the pipeline.'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to add.'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite the existing entry if we already
    have a column named name.'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Get the domain for this pipeline.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: If an explicit domain was provided at construction time, use it.
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, infer a domain from the registered columns.
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no domain can be inferred, return `default`.
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: '**default** (*zipline.pipeline.domain.Domain*) – Domain to use if no domain
    can be inferred from this pipeline by itself.'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** – The domain for the pipeline.'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.domain.Domain
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: '**AmbiguousDomain** –'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – If the terms in `self` conflict with self._domain.'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Remove a column.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the column to remove.'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: '[**KeyError**](https://docs.python.org/3/library/exceptions.html#KeyError "(in
    Python v3.11)") – If name is not in self.columns.'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '**removed** – The removed term.'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Term](#zipline.pipeline.Term "zipline.pipeline.Term")'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Set a screen on this Pipeline.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter"))
    – The filter to apply as a screen.'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite any existing screen. If overwrite
    is False and self.screen is not None, we raise an error.'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Render this Pipeline as a DAG.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (*{''svg''**,* *''png''**,* *''jpeg''}*) – Image format to render
    with. Default is ‘svg’.'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Compile into an ExecutionPlan.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – Domain on which the pipeline
    will be executed.'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**all_dates** (*pd.DatetimeIndex*) – A calendar of dates to use to calculate
    starts and ends for each term.'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The first date of requested output.'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The last date of requested output.'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies, including metadata about extra
    row requirements.'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.ExecutionPlan
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Compile into a simple TermGraph with no extra row metadata.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies.'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.TermGraph
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The output columns of this pipeline.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** – Map from column name to expression computing that column’s output.'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)"), zipline.pipeline.ComputableTerm]'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: The screen of this pipeline.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '**screen** – Term defining the screen for this pipeline. If `screen` is a filter,
    rows that do not pass the filter (i.e., rows for which the filter computed `False`)
    will be dropped from the output of this pipeline before returning results.'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")
    or None'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting a screen on a Pipeline does not change the values produced for any
    rows: it only affects whether a given row is returned. Computing a pipeline with
    a screen is logically equivalent to computing the pipeline without the screen
    and then, as a post-processing-step, filtering out any rows for which the screen
    computed `False`.'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Base class for user-defined Factors.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*iterable**,* *optional*) – An iterable of BoundColumn instances
    (e.g. USEquityPricing.close), describing the data to load and pass to self.compute.
    If this argument is not passed to the CustomFactor constructor, we look for a
    class-level attribute named inputs.'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**outputs** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – An iterable of strings which represent
    the names of each output this factor should compute and return. If this argument
    is not passed to the CustomFactor constructor, we look for a class-level attribute
    named outputs.'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of rows to pass for each input. If
    this argument is not passed to the CustomFactor constructor, we look for a class-level
    attribute named window_length.'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing the assets on which we should compute each day.
    Each call to `CustomFactor.compute` will only receive assets for which `mask`
    produced True on the day for which compute is being called.'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: 'Users implementing their own Factors should subclass CustomFactor and implement
    a method named compute with the following signature:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: On each simulation date, `compute` will be called with the current date, an
    array of sids, an output array, and an input array for each expression passed
    as inputs to the CustomFactor constructor.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific types of the values passed to compute are as follows:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '`compute` functions should expect to be passed NaN values for dates on which
    no data was available for an asset. This may include dates on which an asset did
    not yet exist.'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a CustomFactor requires 10 rows of close price data, and asset
    A started trading on Monday June 2nd, 2014, then on Tuesday, June 3rd, 2014, the
    column of input data for asset A will have 9 leading NaNs for the preceding days
    on which data was not yet available.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: 'A CustomFactor with pre-declared defaults:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'A CustomFactor without defaults:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'A CustomFactor with multiple outputs:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Note: If a CustomFactor has multiple outputs, all outputs must have the same
    dtype. For instance, in the example above, if alpha is a float then beta must
    also be a float.'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Pipeline expression computing a boolean output.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: Filters are most commonly useful for describing sets of assets to include or
    exclude for some particular purpose. Many Pipeline API functions accept a `mask`
    argument, which can be supplied a Filter indicating that only values passing the
    Filter should be considered when performing the requested computation. For example,
    [`zipline.pipeline.Factor.top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top")
    accepts a mask indicating that ranks should be computed only on assets that passed
    the specified Filter.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to construct a Filter is via one of the comparison operators
    (`<`, `<=`, `!=`, `eq`, `>`, `>=`) of [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor").
    For example, a natural way to construct a Filter for stocks with a 10-day VWAP
    less than $20.0 is to first construct a Factor computing 10-day VWAP and compare
    it to the scalar value 20.0:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Filters can also be constructed via comparisons between two Factors. For example,
    to construct a Filter producing True for asset/date pairs where the asset’s 10-day
    VWAP was greater than it’s 30-day VWAP:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Filters can be combined via the `&` (and) and `|` (or) operators.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: '`&`-ing together two filters produces a new Filter that produces True if **both**
    of the inputs produced True.'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: '`|`-ing together two filters produces a new Filter that produces True if **either**
    of its inputs produced True.'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: The `~` operator can be used to invert a Filter, swapping all True values with
    Falses and vice-versa.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: Filters may be set as the `screen` attribute of a Pipeline, indicating asset/date
    pairs for which the filter produces False should be excluded from the Pipeline’s
    output. This is useful both for reducing noise in the output of a Pipeline and
    for reducing memory consumption of Pipeline results.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Binary Operator: ‘&’'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Binary Operator: ‘|’'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Create a term that selects values from one of two choices.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '**if_true** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs True.'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if_false** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs False.'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: '**merged** – A term that computes by taking values from either `if_true` or
    `if_false`, depending on the values produced by `self`.'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: The returned term draws from``if_true`` at locations where `self` produces True,
    and it draws from `if_false` at locations where `self` produces False.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.term.ComputableTerm
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor that produces the following output:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Let `g` be another Factor that produces the following output:'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Finally, let `condition` be a Filter that produces the following output:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Then, the expression `condition.if_else(f, g)` produces the following output:'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: See also
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v1.25)"), [`Factor.fillna`](#zipline.pipeline.Factor.fillna "zipline.pipeline.Factor.fillna")'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Pipeline API expression producing a numerical or date-valued output.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: Factors are the most commonly-used Pipeline term, representing the result of
    any computation producing a numerical result.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: Factors can be combined, both with other Factors and with scalar values, via
    any of the builtin mathematical operators (`+`, `-`, `*`, etc).
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it easy to write complex expressions that combine multiple Factors.
    For example, constructing a Factor that computes the average of two other Factors
    is simply:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Factors can also be converted into [`zipline.pipeline.Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") objects via comparison operators: (`<`, `<=`, `!=`,
    `eq`, `>`, `>=`).'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: There are many natural operators defined on Factors besides the basic numerical
    operators. These include methods for identifying missing or extreme-valued outputs
    (`isnull()`, `notnull()`, [`isnan()`](#zipline.pipeline.Factor.isnan "zipline.pipeline.Factor.isnan"),
    [`notnan()`](#zipline.pipeline.Factor.notnan "zipline.pipeline.Factor.notnan")),
    methods for normalizing outputs ([`rank()`](#zipline.pipeline.Factor.rank "zipline.pipeline.Factor.rank"),
    [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean"),
    [`zscore()`](#zipline.pipeline.Factor.zscore "zipline.pipeline.Factor.zscore")),
    and methods for constructing Filters based on rank-order properties of results
    ([`top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top"), [`bottom()`](#zipline.pipeline.Factor.bottom
    "zipline.pipeline.Factor.bottom"), [`percentile_between()`](#zipline.pipeline.Factor.percentile_between
    "zipline.pipeline.Factor.percentile_between")).
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self == other`.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self == other` with the outputs of `self` and
    `other`.'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Construct a Factor that computes `self` and subtracts the mean from row of the
    result.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means, and output NaN anywhere the mask is False.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, de-meaning the partitioned arrays, and stitching the sub-results
    back together.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when computing means.'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute means.'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Let `c` be a Classifier producing the following output:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Let `m` be a Filter producing the following output:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Then `f.demean()` will subtract the mean from each row produced by `f`.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '`f.demean(mask=m)` will subtract the mean from each row, but means will be
    calculated ignoring values on the diagonal, and NaNs will written to the diagonal
    in the output. Diagonal values are ignored because they are the locations where
    the mask `m` produced False.'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '`f.demean(groupby=c)` will subtract the group-mean of AAPL/MSFT and MCD/BK
    from their respective entries. The AAPL/MSFT are grouped together because both
    assets always produce 1 in the output of the classifier `c`. Similarly, MCD/BK
    are grouped together because they always produce 2.'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '`f.demean(mask=m, groupby=c)` will also subtract the group-mean of AAPL/MSFT
    and MCD/BK, but means will be calculated ignoring values on the diagonal , and
    NaNs will be written to the diagonal in the output.'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Notes
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean is sensitive to the magnitudes of outliers. When working with factor that
    can potentially produce large outliers, it is often useful to use the `mask` parameter
    to discard values at the extremes of the distribution:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '`demean()` is only supported on Factors of dtype float64.'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Construct a Factor that Z-Scores each day’s results.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: 'The Z-Score of a row is defined as:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means and standard deviations, and output NaN anywhere the mask is False.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, z-scoring the partitioned arrays, and stitching the sub-results
    back together.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when Z-Scoring.'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute Z-Scores.'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
- en: '**zscored** – A Factor producing that z-scores the output of self.'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean and standard deviation are sensitive to the magnitudes of outliers. When
    working with factor that can potentially produce large outliers, it is often useful
    to use the `mask` parameter to discard values at the extremes of the distribution:'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '`zscore()` is only supported on Factors of dtype float64.'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: See [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean")
    for an in-depth example of the semantics for `mask` and `groupby`.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Construct a new Factor representing the sorted rank of each column within each
    row.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '**method** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *{''ordinal''**,* *''min''**,* *''max''**,* *''dense''**,*
    *''average''}*) – The method used to assign ranks to tied elements. See scipy.stats.rankdata
    for a full description of the semantics for each ranking method. Default is ‘ordinal’.'
  id: totrans-944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascending** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether to return sorted rank in ascending
    or descending order. Default is True.'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, ranks are computed ignoring any asset/date pairs for which mask
    produces a value of False.'
  id: totrans-946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: '**ranks** – A new factor that will compute the ranking of the data produced
    by self.'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: The default value for method is different from the default for scipy.stats.rankdata.
    See that function’s documentation for a full description of the valid inputs to
    method.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: Missing or non-existent data on a given day will cause an asset to be given
    a rank of NaN for that day.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.rankdata()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata
    "(in SciPy v1.11.1)")'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Construct a new Factor that computes rolling pearson correlation coefficients
    between `target` and the columns of `self`.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'This is equivalent to doing:'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: See also
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`Factor.spearmanr()`](#zipline.pipeline.Factor.spearmanr
    "zipline.pipeline.Factor.spearmanr")'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Construct a new Factor that computes rolling spearman rank correlation coefficients
    between `target` and the columns of `self`.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'This is equivalent to doing:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: See also
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), [`Factor.pearsonr()`](#zipline.pipeline.Factor.pearsonr
    "zipline.pipeline.Factor.pearsonr")'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Construct a new Factor that performs an ordinary least-squares regression predicting
    the columns of self from target.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term to use as the predictor/independent variable in each regression. This
    may be a Factor, a BoundColumn or a Slice. If target is two-dimensional, regressions
    are computed asset-wise.'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    regression.'
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed with the target
    slice each day.'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '**regressions** – A new Factor that will compute linear regressions of target
    against the columns of self.'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that regresses AAPL’s 10-day returns against
    the 10-day returns of all other assets, computing each regression over 30 days.
    This can be achieved by doing the following:'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'This is equivalent to doing:'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: See also
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.linregress()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html#scipy.stats.linregress
    "(in SciPy v1.11.1)")'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Construct a new factor that winsorizes the result of this factor.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing changes values ranked less than the minimum percentile to the value
    at the minimum percentile. Similarly, values ranking above the maximum percentile
    are changed to the value at the maximum percentile.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing is useful for limiting the impact of extreme data points without
    completely removing those points.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    percentile cutoffs, and output NaN anywhere the mask is False.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, winsorization is applied separately separately to
    each group defined by `groupby`.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or below this percentile will be
    replaced with the (len(input) * min_percentile)th lowest value. If low values
    should not be clipped, use 0.'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or above this percentile will be
    replaced with the (len(input) * max_percentile)th lowest value. If high values
    should not be clipped, use 1.'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when winsorizing.'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to winsorize.'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: '**winsorized** – A Factor producing a winsorized version of self.'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Given a pipeline with columns, defined above, the result for a given day could
    look like:'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: See also
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.mstats.winsorize()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize
    "(in SciPy v1.11.1)"), [`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Construct a Classifier computing quantiles of the output of `self`.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with an integer value from 0
    to (bins - 1). NaNs are labelled with -1.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: '**bins** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – Number of bins labels to compute.'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quantiles.'
  id: totrans-1041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
- en: '**quantiles** – A classifier producing integer labels ranging from 0 to (bins
    - 1).'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Construct a Classifier computing quartiles over the output of `self`.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, corresponding to the first, second, third, or fourth quartile over each
    row. NaN data points are labelled with -1.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quartiles.'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: '**quartiles** – A classifier producing integer labels ranging from 0 to 3.'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-1056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Construct a Classifier computing quintile labels on `self`.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, 4, corresonding to quintiles over each row. NaN data points are labelled
    with -1.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quintiles.'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: '**quintiles** – A classifier producing integer labels ranging from 0 to 4.'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Construct a Classifier computing decile labels on `self`.
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value from 0 to 9 corresonding
    to deciles over each row. NaN data points are labelled with -1.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing deciles.'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: '**deciles** – A classifier producing integer labels ranging from 0 to 9.'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Construct a Filter matching the top N asset values of self each day.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the top N asset values for
    each group.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, top values are computed ignoring any asset/date pairs for which
    mask produces a value of False.'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Construct a Filter matching the bottom N asset values of self each day.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the bottom N asset values
    **for each group** defined by `groupby`.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  id: totrans-1091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, bottom values are computed ignoring any asset/date pairs for
    which mask produces a value of False.'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Construct a Filter matching values of self that fall within the range defined
    by `min_percentile` and `max_percentile`.
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    above this percentile in the data.'
  id: totrans-1101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    below this percentile in the data.'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when percentile calculating
    thresholds. If mask is supplied, percentile cutoffs are computed each day using
    only assets for which `mask` returns True. Assets for which `mask` produces False
    will produce False in the output of this Factor as well.'
  id: totrans-1103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: '**out** – A new filter that will compute the specified percentile-range mask.'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: A Filter producing True for all values where this Factor is NaN.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  id: totrans-1114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: A Filter producing True for values where this Factor is not NaN.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-1120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: A Filter producing True for values where this Factor is anything but NaN, inf,
    or -inf.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-1122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Clip (limit) the values in a factor.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  id: totrans-1128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: See also
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  id: totrans-1134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Clip (limit) the values in a factor.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  id: totrans-1139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: See also
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self + other`.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self + other` with outputs of `self` and `other`.'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self - other`.
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self - other` with outputs of `self` and `other`.'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self * other`.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self * other` with outputs of `self` and `other`.'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-1170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self / other`.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self / other` with outputs of `self` and `other`.'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self % other`.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self % other` with outputs of `self` and `other`.'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self ** other`.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self ** other` with outputs of `self` and `other`.'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  id: totrans-1194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self < other`.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self < other` with the outputs of `self` and
    `other`.'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self <= other`.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self <= other` with the outputs of `self` and
    `other`.'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-1210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self != other`.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self != other` with the outputs of `self` and
    `other`.'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  id: totrans-1218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self >= other`.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self >= other` with the outputs of `self` and
    `other`.'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  id: totrans-1226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self > other`.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self > other` with the outputs of `self` and
    `other`.'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Create a new term that fills missing values of this term’s output with `fill_value`.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value** (*zipline.pipeline.ComputableTerm**, or* *object.*) –'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: Object to use as replacement for missing values.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
- en: If a ComputableTerm (e.g. a Factor) is passed, that term’s results will be used
    as fill values.
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar (e.g. a number) is passed, the scalar will be used as a fill value.
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: '**Filling with a Scalar:**'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-1244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Then `f.fillna(0)` produces the following output:'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  id: totrans-1246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '**Filling with a Term:**'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be as above, and let `g` be another Factor which would produce the
    following output:'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'Then, `f.fillna(g)` produces the following output:'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Returns:'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
- en: '**filled** – A term computing the same results as `self`, but with missing
    values filled in using values from `fill_value`.'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.ComputableTerm
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Create a 1-dimensional factor computing the mean of self, each day.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Create a 1-dimensional factor computing the stddev of self, each day.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Create a 1-dimensional factor computing the max of self, each day.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  id: totrans-1280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Create a 1-dimensional factor computing the min of self, each day.
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Create a 1-dimensional factor computing the median of self, each day.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  id: totrans-1296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Create a 1-dimensional factor computing the sum of self, each day.
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  id: totrans-1304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Base class for objects that can appear in the compute graph of a [`zipline.pipeline.Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline").
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Pipeline API users only interact with [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") via subclasses:'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: '[`BoundColumn`](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Classifier`'
  id: totrans-1311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instances of [`Term`](#zipline.pipeline.Term "zipline.pipeline.Term") are **memoized**.
    If you call a Term’s constructor with the same arguments twice, the same object
    will be returned from both calls:'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  id: totrans-1314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Warning
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
- en: Memoization of terms means that it’s generally unsafe to modify attributes of
    a term after construction.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  id: totrans-1317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: A short repr to use when rendering GraphViz graphs.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  id: totrans-1319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: A short repr to use when recursively rendering terms with inputs.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Base class for Pipeline datasets.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    is defined by two parts:'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: A collection of [`Column`](#zipline.pipeline.data.Column "zipline.pipeline.data.Column")
    objects that describe the queryable attributes of the dataset.
  id: totrans-1324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Domain` describing the assets and calendar of the data represented by the
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet").
  id: totrans-1325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new Pipeline dataset, define a subclass of [`DataSet`](#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") and set one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects as class-level attributes. Each column
    requires a `np.dtype` that describes the type of data that should be produced
    by a loader for the dataset. Integer columns must also provide a “missing value”
    to be used when no value is available for a given asset/date combination.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
- en: By default, the domain of a dataset is the special singleton value, `GENERIC`,
    which means that they can be used in a Pipeline running on **any** domain.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it may be preferable to restrict a dataset to only allow support
    a single domain. For example, a DataSet may describe data from a vendor that only
    covers the US. To restrict a dataset to a specific domain, define a domain attribute
    at class scope.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: You can also define a domain-specific version of a generic DataSet by calling
    its `specialize` method with the domain of interest.
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in EquityPricing dataset is defined as follows:'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'The built-in USEquityPricing dataset is a specialization of EquityPricing.
    It is defined as:'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-1334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Columns can have types other than float. A dataset containing assorted company
    metadata might be defined like this:'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-1336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Notes
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
- en: Because numpy has no native support for integers with missing values, users
    are strongly encouraged to use floats for any data that’s semantically numeric.
    Doing so enables the use of NaN as a natural missing value, which has useful propagation
    semantics.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Look up a column by name.
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to look up.'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column with the given name.'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: '[**AttributeError**](https://docs.python.org/3/library/exceptions.html#AttributeError
    "(in Python v3.11)") – If no column with the given name exists.'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: An abstract column of data, not yet associated with a dataset.
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Bind a Column object to its name.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  id: totrans-1353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: A column of data that’s been concretely bound to a particular dataset.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: The dtype of data produced when this column is loaded.
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.dtype](https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype
    "(in NumPy v1.25)")'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  id: totrans-1359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: A [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter"), [`Factor`](#zipline.pipeline.Factor
    "zipline.pipeline.Factor"), or `Classifier` computing the most recently known
    value of this column on each date. See `zipline.pipeline.mixins.LatestMixin` for
    more details.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.LoadableTerm
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: The dataset to which this column is bound.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: The name of this column.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-1371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Extra metadata associated with this column.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  id: totrans-1375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Whether or not this column produces currency-denominated data.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class are dynamically created upon access to attributes of
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet"). For
    example, [`close`](#zipline.pipeline.data.EquityPricing.close "zipline.pipeline.data.EquityPricing.close")
    is an instance of this class. Pipeline API users should never construct instances
    of this directly.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  id: totrans-1381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Whether or not this column produces currency-denominated data.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  id: totrans-1383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Specification for currency conversions applied for this term.
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  id: totrans-1385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: The dataset to which this column is bound.
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  id: totrans-1387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Construct a currency-converted version of this column.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: '**currency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.currency.Currency*) – Currency into which to convert
    this column’s data.'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column producing the same data as `self`, but currency-converted
    into `currency`.'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: '[BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  id: totrans-1395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Short repr to use when rendering Pipeline graphs.
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  id: totrans-1397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: A copy of the metadata for this column.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  id: totrans-1399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The name of this column.
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  id: totrans-1401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: The fully-qualified name of this column.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Short repr used to render in recursive contexts.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-1405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Specialize `self` to a concrete domain.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Unspecialize a column to its generic form.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `column.specialize(GENERIC)`.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-1410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Base class for Pipeline dataset families.
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    in a pipeline expression, one must choose a specific value for each of the extra
    dimensions using the [`slice()`](#zipline.pipeline.data.DataSetFamily.slice "zipline.pipeline.data.DataSetFamily.slice")
    method. For example, given a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'This dataset might represent a table with the following columns:'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-1419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    can be converted to a regular [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    with:'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  id: totrans-1422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Take a slice of a DataSetFamily to produce a dataset indexed by asset and date.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: '***args** –'
  id: totrans-1427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – The coordinates to fix along each extra dimension.'
  id: totrans-1428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset** – A regular pipeline dataset indexed by asset and date.'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: '[DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: The extra dimensions coords used to produce the result are available under the
    `extra_coords` attribute.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-1435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    containing daily trading prices and volumes.'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-1437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-1439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-1440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-1441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Built-in Factors
  id: totrans-1442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  id: totrans-1444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Average Daily Dollar Volume
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  id: totrans-1448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  id: totrans-1450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  id: totrans-1454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  id: totrans-1455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE227]'
  id: totrans-1457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  id: totrans-1459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  id: totrans-1466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-1467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-1468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  id: totrans-1474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Calculates daily percent change in close price.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  id: totrans-1478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Exponentially Weighted Moving Average
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-1484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE235]'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Notes
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  id: totrans-1490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  id: totrans-1493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  id: totrans-1495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Exponentially Weighted Moving Standard Deviation
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-1500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE238]'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Notes
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-1510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  id: totrans-1512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Factor producing the most recently-known value of inputs[0] on each day.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  id: totrans-1517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  id: totrans-1519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Max Drawdown
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  id: totrans-1523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  id: totrans-1525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Calculates the percent change in close price over the given window_length.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  id: totrans-1530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-1534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  id: totrans-1556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-1560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  id: totrans-1561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  id: totrans-1567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  id: totrans-1569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  id: totrans-1576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  id: totrans-1580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  id: totrans-1585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-1590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-1591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  id: totrans-1597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  id: totrans-1599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  id: totrans-1605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-1609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-1610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  id: totrans-1616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  id: totrans-1619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  id: totrans-1620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  id: totrans-1621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE262]'
  id: totrans-1622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  id: totrans-1624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-1625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Short repr to use when rendering Pipeline graphs.
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  id: totrans-1627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Get the target of the beta calculation.
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  id: totrans-1629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Relative Strength Index
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  id: totrans-1633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  id: totrans-1635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Average Value of an arbitrary column
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  id: totrans-1639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  id: totrans-1641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Volume Weighted Average Price
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  id: totrans-1645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Helper for VWAP-like computations.
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  id: totrans-1649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  id: totrans-1651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Calculates the percent change over the given window_length.
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  id: totrans-1657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  id: totrans-1663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  id: totrans-1665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE277]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  id: totrans-1670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  id: totrans-1672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Pipeline filter indicating input term has data for a given window.
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  id: totrans-1674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  id: totrans-1676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  id: totrans-1680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  id: totrans-1682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  id: totrans-1686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Override this method with a function that writes a value into out.
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  id: totrans-1688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: A Filter that computes to True only for the given asset.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  id: totrans-1690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: A short repr to use when rendering GraphViz graphs.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  id: totrans-1692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: A Filter that computes True for a specific set of predetermined assets.
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  id: totrans-1697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: A Filter that computes True for a specific set of predetermined sids.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  id: totrans-1702
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  id: totrans-1705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  id: totrans-1706
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  id: totrans-1707
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  id: totrans-1708
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  id: totrans-1709
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  id: totrans-1710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  id: totrans-1711
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  id: totrans-1712
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  id: totrans-1713
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  id: totrans-1714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE289]'
  id: totrans-1715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-1721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  id: totrans-1729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-1733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-1735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-1736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-1737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  id: totrans-1746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: PipelineEngine class that computes each term independently.
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  id: totrans-1749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  id: totrans-1750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  id: totrans-1751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  id: totrans-1755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-1756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-1761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-1764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  id: totrans-1773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-1776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-1777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-1779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  id: totrans-1786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  id: totrans-1790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  id: totrans-1792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  id: totrans-1793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  id: totrans-1798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  id: totrans-1800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Interface for PipelineLoaders.
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  id: totrans-1802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Load data for `columns` as AdjustedArrays.
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  id: totrans-1808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  id: totrans-1809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  id: totrans-1814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-1815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: A PipelineLoader that reads its input from DataFrames.
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  id: totrans-1819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  id: totrans-1820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  id: totrans-1821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  id: totrans-1823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE301]'
  id: totrans-1825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-1826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  id: totrans-1829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Load data from our stored baseline.
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  id: totrans-1831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: A PipelineLoader for loading daily OHLCV data.
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  id: totrans-1834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  id: totrans-1835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  id: totrans-1836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE305]'
  id: totrans-1837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-1838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  id: totrans-1852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  id: totrans-1853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  id: totrans-1854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE308]'
  id: totrans-1855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-1856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  id: totrans-1859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  id: totrans-1868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE310]'
  id: totrans-1872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: Exchange and Asset Metadata
  id: totrans-1873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE311]'
  id: totrans-1874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: An exchange where assets are traded.
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *None*) – The full name of the exchange, for example ‘NEW
    YORK STOCK EXCHANGE’ or ‘NASDAQ GLOBAL MARKET’.'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**canonical_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The canonical name of the exchange, for example ‘NYSE’
    or ‘NASDAQ’. If None this will be the same as the name.'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The country code where the exchange is located.'
  id: totrans-1879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE312]'
  id: totrans-1880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: The full name of the exchange, for example ‘NEW YORK STOCK EXCHANGE’ or ‘NASDAQ
    GLOBAL MARKET’.
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  id: totrans-1884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: The canonical name of the exchange, for example ‘NYSE’ or ‘NASDAQ’. If None
    this will be the same as the name.
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  id: totrans-1888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: The country code where the exchange is located.
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  id: totrans-1892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: The trading calendar the exchange uses.
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
- en: TradingCalendar
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  id: totrans-1896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: The trading calendar that this exchange uses.
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  id: totrans-1898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Base class for entities that can be owned by a trading algorithm.
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  id: totrans-1900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Persistent unique identifier assigned to the asset.
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  id: totrans-1904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: Most recent ticker under which the asset traded. This field can change without
    warning if the asset changes tickers. Use `sid` if you need a persistent identifier.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  id: totrans-1908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Full name of the asset.
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  id: totrans-1912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: Canonical short name of the exchange on which the asset trades (e.g., ‘NYSE’).
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  id: totrans-1916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: Full name of the exchange on which the asset trades (e.g., ‘NEW YORK STOCK EXCHANGE’).
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  id: totrans-1920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: Information about the exchange this asset is listed on.
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.ExchangeInfo](#zipline.assets.ExchangeInfo "zipline.assets.ExchangeInfo")'
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  id: totrans-1924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: Two character code indicating the country in which the asset trades.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  id: totrans-1928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: Date on which the asset first traded.
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  id: totrans-1932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: Last date on which the asset traded. On Quantopian, this value is set to the
    current (real time) date for assets that are still trading.
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  id: totrans-1936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: Minimum amount that the price can change for this asset.
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  id: totrans-1940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Date on which positions in this asset will be automatically liquidated to cash
    during a simulation. By default, this is three days after `end_date`.
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  id: totrans-1944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Build an Asset instance from a dict.
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  id: totrans-1946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Returns whether the asset is alive at the given dt.
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
- en: '**session_label** (*pd.Timestamp*) – The desired session label to check. (midnight
    UTC)'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset is alive at the given dt.
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  id: totrans-1954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: 'Parameters:'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
- en: '**dt_minute** (*pd.Timestamp* *(**UTC**,* *tz-aware**)*) – The minute to check.'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset’s exchange is open at the given minute.
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  id: totrans-1961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: Convert to a python dict containing all attributes of the asset.
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
- en: This is often useful for debugging.
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
- en: '**as_dict**'
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  id: totrans-1968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Asset subclass representing partial ownership of a company, trust, or partnership.
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  id: totrans-1970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Asset subclass representing ownership of a futures contract.
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  id: totrans-1972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: Convert to a python dict.
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  id: totrans-1974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: ABC for types that are convertible to integer-representations of Assets.
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
- en: Includes Asset, str, and Integral
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
- en: Trading Calendar API
  id: totrans-1977
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The events that generate the timeline of the algorithm execution adhere to a
    given `TradingCalendar`.
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
- en: Data API
  id: totrans-1979
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writers
  id: totrans-1980
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE337]'
  id: totrans-1981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-1986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  id: totrans-1990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'Parameters:'
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  id: totrans-1994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  id: totrans-1995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  id: totrans-2000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: Read CSVs as DataFrames from our asset map.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  id: totrans-2005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE340]'
  id: totrans-2006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Writer for data to be read by SQLiteAdjustmentReader
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  id: totrans-2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  id: totrans-2011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  id: totrans-2014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  id: totrans-2020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-2031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-2037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-2039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-2056
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2057
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-2058
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2059
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-2060
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2061
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-2062
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2063
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-2064
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2065
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-2066
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2067
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-2068
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2069
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-2070
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2071
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-2072
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2073
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-2074
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2075
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  id: totrans-2076
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2077
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  id: totrans-2078
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2079
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-2080
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2081
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  id: totrans-2082
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  id: totrans-2085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Write both dividend payouts and the derived price adjustment ratios.
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  id: totrans-2087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Write dividend payout data to SQLite table dividend_payouts.
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  id: totrans-2089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Class used to write data to an assets db.
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  id: totrans-2093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: Connect to database and create tables.
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  id: totrans-2101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Write asset metadata to a sqlite database.
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-2105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-2106
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2107
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-2108
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2109
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-2110
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2111
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-2112
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2113
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-2114
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2115
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-2116
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2117
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-2118
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2119
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-2120
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2121
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-2122
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2123
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-2124
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2125
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-2126
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2127
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-2128
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2129
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2130
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2131
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-2132
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-2136
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2137
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-2138
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2139
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-2140
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2141
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-2142
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2143
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-2144
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2145
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-2146
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2147
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-2148
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2149
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-2150
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2151
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-2152
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2153
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-2154
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2155
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-2156
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2157
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-2158
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2159
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2160
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2161
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-2162
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2163
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-2164
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2165
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-2166
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2167
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-2168
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2169
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-2170
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2171
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-2172
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2173
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-2174
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2175
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-2176
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2177
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-2178
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2179
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-2180
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2181
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-2182
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2185
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2186
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-2187
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2188
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-2189
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-2191
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2192
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-2193
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2194
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-2195
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-2198
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2199
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-2200
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2201
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-2202
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2203
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-2204
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2205
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-2206
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2207
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-2208
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2209
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-2210
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2211
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-2212
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2213
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2214
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2215
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-2216
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-2218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  id: totrans-2221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-2226
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2227
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-2228
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2229
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-2230
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2231
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-2232
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2233
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-2234
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2235
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-2236
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2237
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-2238
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2239
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-2240
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2241
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-2242
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2243
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-2244
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2245
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-2246
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2247
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-2248
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2249
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2250
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2251
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-2252
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-2253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-2256
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2257
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-2258
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2259
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-2260
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2261
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-2262
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2263
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-2264
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2265
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-2266
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2267
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-2268
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2269
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-2270
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2271
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-2272
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2273
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-2274
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2275
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-2276
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2277
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-2278
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2279
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2280
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2281
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-2282
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2283
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-2284
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2285
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-2286
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2287
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-2288
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2289
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-2290
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2291
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-2292
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2293
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-2294
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2295
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-2296
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2297
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-2298
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2299
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-2300
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2301
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-2302
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2305
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2306
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-2307
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2308
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-2309
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2310
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-2311
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2312
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-2313
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2314
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-2315
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-2318
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2319
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-2320
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2321
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-2322
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2323
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-2324
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2325
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-2326
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2327
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-2328
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2329
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-2330
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2331
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-2332
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2333
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-2334
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2335
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-2336
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-2337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  id: totrans-2339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE349]'
  id: totrans-2340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  id: totrans-2344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE350]'
  id: totrans-2345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-2346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-2347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: Map from asset_id -> index of first row in the dataset with that id.
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  id: totrans-2351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: Map from asset_id -> index of last row in the dataset with that id.
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  id: totrans-2355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: Map from asset_id -> calendar index of first row.
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  id: totrans-2359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: Epoch ns of the first session used in this dataset.
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  id: totrans-2363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Epoch ns of the last session used in this dataset.
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  id: totrans-2367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: String identifier of trading calendar used (ie, “NYSE”).
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  id: totrans-2371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-2372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-2373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-2374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Notes
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  id: totrans-2379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  id: totrans-2380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  id: totrans-2382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  id: totrans-2388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: Get currencies in which prices are quoted for the requested sids.
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  id: totrans-2397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: Get the latest minute on or before `dt` in which `asset` traded.
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  id: totrans-2402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  id: totrans-2407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'Parameters:'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-2409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-2410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  id: totrans-2416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  id: totrans-2418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Parameters:'
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  id: totrans-2422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  id: totrans-2428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'Parameters:'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-2431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  id: totrans-2436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: Loads adjustments based on corporate actions from a SQLite database.
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  id: totrans-2440
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  id: totrans-2443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: Load collection of Adjustment objects from underlying adjustments db.
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  id: totrans-2446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  id: totrans-2448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  id: totrans-2451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  id: totrans-2456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  id: totrans-2464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  id: totrans-2468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  id: totrans-2469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  id: totrans-2471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  id: totrans-2474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: All of the sids for equities in the asset finder.
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  id: totrans-2476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: Return all of the sids for a given country.
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  id: totrans-2484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: Return all of the sids for a given exchange_name.
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  id: totrans-2492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: All of the sids for futures consracts in the asset finder.
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  id: totrans-2494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: Get the value of a supplementary field for an asset.
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  id: totrans-2497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  id: totrans-2499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE377]'
  id: totrans-2503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Group a list of sids by asset type.
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2505
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  id: totrans-2511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  id: totrans-2514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  id: totrans-2517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  id: totrans-2518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  id: totrans-2525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: Retrieve asset types for a list of sids.
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  id: totrans-2533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Lookup a future contract by symbol.
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  id: totrans-2543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: Convert an object into an Asset or sequence of Assets.
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  id: totrans-2547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-2549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  id: totrans-2556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: Lookup an equity by symbol.
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  id: totrans-2560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-2562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  id: totrans-2568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  id: totrans-2569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE383]'
  id: totrans-2570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Lookup a list of equities by symbol.
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  id: totrans-2573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: but potentially faster because repeated lookups are memoized.
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  id: totrans-2577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  id: totrans-2578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  id: totrans-2584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Retrieve all assets in sids.
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  id: totrans-2588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2591
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  id: totrans-2595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Retrieve the Asset for a given sid.
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  id: totrans-2597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: Retrieve Equity objects for a list of sids.
  id: totrans-2598
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  id: totrans-2608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Retrieve Future objects for an iterable of sids.
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  id: totrans-2619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: All the sids in the asset finder.
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  id: totrans-2621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: Interface to all of the data that a zipline simulation needs.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  id: totrans-2625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  id: totrans-2626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  id: totrans-2629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-2630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  id: totrans-2631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  id: totrans-2632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  id: totrans-2634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE391]'
  id: totrans-2635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-2639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-2640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-2641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  id: totrans-2647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  id: totrans-2650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-2652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-2653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  id: totrans-2658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  id: totrans-2664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  id: totrans-2670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  id: totrans-2673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  id: totrans-2675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  id: totrans-2676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  id: totrans-2677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  id: totrans-2681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  id: totrans-2684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  id: totrans-2687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-2688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-2690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  id: totrans-2695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: Returns any splits for the given sids and the given dt.
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  id: totrans-2698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  id: totrans-2699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  id: totrans-2704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  id: totrans-2707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-2708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-2710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  id: totrans-2715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  id: totrans-2718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  id: totrans-2719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  id: totrans-2722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE401]'
  id: totrans-2723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: Extra sources always have a sid column.
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  id: totrans-2726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-2727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: Returns the daily returns for the given period.
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  id: totrans-2731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  id: totrans-2736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Look up the returns for a given period.
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  id: totrans-2739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  id: totrans-2740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  id: totrans-2748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: Look up the returns for a given dt.
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2750
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  id: totrans-2760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: Register a data bundle ingest function.
  id: totrans-2761
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-2763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  id: totrans-2766
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2767
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  id: totrans-2768
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2769
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  id: totrans-2770
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2771
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  id: totrans-2772
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2773
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  id: totrans-2774
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2775
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  id: totrans-2776
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2777
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  id: totrans-2778
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2779
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  id: totrans-2780
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2781
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  id: totrans-2782
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2783
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  id: totrans-2784
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2785
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  id: totrans-2786
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2787
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  id: totrans-2788
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2789
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  id: totrans-2790
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2791
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  id: totrans-2792
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2793
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  id: totrans-2794
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2795
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  id: totrans-2796
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2797
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  id: totrans-2798
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2799
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  id: totrans-2800
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2801
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  id: totrans-2802
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2803
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  id: totrans-2804
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  id: totrans-2806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  id: totrans-2808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  id: totrans-2809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  id: totrans-2812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: See also
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  id: totrans-2815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: Ingest data for a given bundle.
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  id: totrans-2819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  id: totrans-2820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE409]'
  id: totrans-2823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: Loads a previously ingested bundle.
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-2826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  id: totrans-2828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  id: totrans-2833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: Unregister a bundle.
  id: totrans-2834
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-2840
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  id: totrans-2841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").``  ``## Risk Metrics
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm State
  id: totrans-2843
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE412]'
  id: totrans-2844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  id: totrans-2846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: The updated portfolio being managed.
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  id: totrans-2850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: The updated account being managed.
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2852
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  id: totrans-2854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: The current set of positions.
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2856
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  id: totrans-2858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2860
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  id: totrans-2862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2864
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-2865
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  id: totrans-2866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  id: totrans-2870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2874
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  id: totrans-2878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: Override fields on `self.account`.
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  id: totrans-2880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: Compute the current portfolio.
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  id: totrans-2884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Process the commission.
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  id: totrans-2888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Process dividends for the next session.
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  id: totrans-2891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Keep track of an order that was placed.
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  id: totrans-2895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  id: totrans-2899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Add a transaction to ledger, updating the current state as needed.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  id: totrans-2903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  id: totrans-2911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: Force a computation of the current portfolio state.
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  id: totrans-2913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: Object providing read-only access to current portfolio state.
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  id: totrans-2916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE430]'
  id: totrans-2918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: Dict-like object containing information about currently-held positions.
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  id: totrans-2922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: Amount of cash currently held in portfolio.
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  id: totrans-2926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  id: totrans-2930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: Amount of cash in the portfolio at the start of the backtest.
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  id: totrans-2934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  id: totrans-2937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  id: totrans-2939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: The current state of the positions held.
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  id: totrans-2943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  id: totrans-2946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE438]'
  id: totrans-2948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  id: totrans-2956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  id: totrans-2958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: The current status of the positions.
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  id: totrans-2966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: Computed values from the current positions.
  id: totrans-2967
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  id: totrans-2968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: The gross position exposure.
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2971
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  id: totrans-2972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: The gross position value.
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  id: totrans-2976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: The exposure of just the long positions.
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  id: totrans-2980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: The value of just the long positions.
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  id: totrans-2984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: The net position exposure.
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  id: totrans-2988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: The net position value.
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  id: totrans-2992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: The exposure of just the short positions.
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  id: totrans-2996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: The value of just the short positions.
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  id: totrans-3000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: The number of long positions.
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  id: totrans-3004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: The number of short positions.
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  id: totrans-3008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  id: totrans-3012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  id: totrans-3019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE454]'
  id: totrans-3020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Emit the current value of a ledger field every bar or every session.
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-3023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-3024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE455]'
  id: totrans-3025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-3028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE456]'
  id: totrans-3030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-3033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE457]'
  id: totrans-3035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-3039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE458]'
  id: totrans-3040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: Tracks the daily and cumulative returns of the algorithm.
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  id: totrans-3042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  id: totrans-3044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: Tracks daily and cumulative cash flow.
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  id: totrans-3048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Tracks daily orders.
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  id: totrans-3050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: Tracks daily transactions.
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  id: totrans-3052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Tracks daily positions.
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  id: totrans-3054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  id: totrans-3057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  id: totrans-3058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE465]'
  id: totrans-3059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: End of simulation alpha and beta to the benchmark.
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  id: totrans-3061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Tracks the maximum account leverage.
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  id: totrans-3063
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE467]'
  id: totrans-3064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Register a new metrics set.
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-3067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  id: totrans-3068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  id: totrans-3073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: Return an instance of the metrics set registered with the given name.
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  id: totrans-3081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: Unregister an existing metrics set.
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  id: totrans-3087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  id: totrans-3089
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Caching
  id: totrans-3090
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE471]'
  id: totrans-3091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: A simple struct for maintaining a cached object with an expiration date.
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  id: totrans-3094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  id: totrans-3095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  id: totrans-3097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-3098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  id: totrans-3102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  id: totrans-3104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-3105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: A disk-backed cache for dataframes.
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  id: totrans-3109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  id: totrans-3110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  id: totrans-3111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  id: totrans-3112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  id: totrans-3115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  id: totrans-3119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  id: totrans-3120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  id: totrans-3123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-3126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  id: totrans-3128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3129
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  id: totrans-3131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE478]'
  id: totrans-3132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Optionally show a progress bar for the given iterator.
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  id: totrans-3135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  id: totrans-3136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  id: totrans-3137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  id: totrans-3143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Running a Backtest
  id: totrans-3144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function [`run_algorithm()`](#zipline.run_algorithm "zipline.run_algorithm")
    creates an instance of `TradingAlgorithm` that represents a trading strategy and
    parameters to execute the strategy.
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  id: totrans-3146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Run a trading algorithm.
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The start date of the backtest.'
  id: totrans-3149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime*) – The end date of the backtest..'
  id: totrans-3150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**initialize** (*callable**[**context -> None**]*) – The initialize function
    to use for the algorithm. This is called once at the very begining of the backtest
    and should be used to set up any state needed by the algorithm.'
  id: totrans-3151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting capital for the backtest.'
  id: totrans-3152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**handle_data** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The handle_data function
    to use for the algorithm. This is called every minute when `data_frequency ==
    ''minute''` or every day when `data_frequency == ''daily''`.'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_trading_start** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The before_trading_start
    function for the algorithm. This is called once before each trading day (after
    initialize on the first day).'
  id: totrans-3154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**analyze** (*callable**[**(**context**,* *pd.DataFrame**)* *-> None**]**,*
    *optional*) – The analyze function to use for the algorithm. This function is
    called once at the end of the backtest and is passed the context and the performance
    data.'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}**,* *optional*) – The data
    frequency to run the algorithm at.'
  id: totrans-3156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The name of the data bundle to use to load the
    data to run the backtest with. This defaults to ‘quantopian-quandl’.'
  id: totrans-3157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle_timestamp** (*datetime**,* *optional*) – The datetime to lookup the
    bundle data for. This defaults to the current time.'
  id: totrans-3158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*TradingCalendar**,* *optional*) – The trading calendar
    to use for your backtest.'
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**metrics_set** (*iterable**[**Metric**] or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The set of metrics to compute in the simulation.
    If a string is passed, resolve the set with [`zipline.finance.metrics.load()`](#zipline.finance.metrics.load
    "zipline.finance.metrics.load").'
  id: totrans-3160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**benchmark_returns** (*pd.Series**,* *optional*) – Series of returns to use
    as the benchmark.'
  id: totrans-3161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_extension** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the default zipline extension be
    loaded. This is found at `$ZIPLINE_ROOT/extension.py`'
  id: totrans-3162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extensions** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – The names of any other extensions to
    load. Each element may either be a dotted module path like `a.b.c` or a path to
    a python file ending in `.py` like `a/b/c.py`.'
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strict_extensions** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the run fail if any extensions fail
    to load. If this is false, a warning will be raised instead.'
  id: totrans-3164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**[**str -> str**]**,* *optional*) – The os environment
    to use. Many extensions use this to get parameters. This defaults to `os.environ`.'
  id: totrans-3165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blotter** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.finance.blotter.Blotter**,* *optional*) – Blotter
    to use with this algorithm. If passed as a string, we look for a blotter construction
    function registered with `zipline.extensions.register` and call it with no parameters.
    Default is a [`zipline.finance.blotter.SimulationBlotter`](#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter") that never cancels orders.'
  id: totrans-3166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
- en: '**perf** – The daily performance of the algorithm.'
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
- en: The available data bundles.
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
- en: Trading Algorithm API
  id: totrans-3174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following methods are available for use in the `initialize`, `handle_data`,
    and `before_trading_start` API functions.
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
- en: In all listed functions, the `self` argument refers to the currently executing
    `TradingAlgorithm` instance.
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
- en: Data Object
  id: totrans-3177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE481]'
  id: totrans-3178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  id: totrans-3184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  id: totrans-3185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  id: totrans-3186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE482]'
  id: totrans-3187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  id: totrans-3189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  id: totrans-3190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a known last price for the asset.
  id: totrans-3191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition above warrants some further explanation:'
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  id: totrans-3196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  id: totrans-3197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3198
  prefs: []
  type: TYPE_NORMAL
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3200
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  id: totrans-3202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3204
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-3205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  id: totrans-3206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
- en: '**current_value** – See notes below.'
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
- en: Scalar, pandas Series, or pandas DataFrame.
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of its inputs:'
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  id: totrans-3213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  id: totrans-3214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  id: totrans-3215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  id: totrans-3216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values produced for `fields` are as follows:'
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  id: totrans-3218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  id: totrans-3220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  id: totrans-3221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  id: totrans-3223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-3227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  id: totrans-3229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  id: totrans-3230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
- en: '**history** – See notes below.'
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3233
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or pd.DataFrame or pd.Panel
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3235
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  id: totrans-3237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  id: totrans-3238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  id: totrans-3239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  id: totrans-3240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  id: totrans-3241
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-3242
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3243
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  id: totrans-3244
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  id: totrans-3245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  id: totrans-3246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  id: totrans-3247
  prefs: []
  type: TYPE_NORMAL
- en: If the asset has never traded, returns False.
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  id: totrans-3251
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3252
  prefs: []
  type: TYPE_NORMAL
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-3255
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling Functions
  id: totrans-3256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE486]'
  id: totrans-3257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: Schedule a function to be called repeatedly in the future.
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3259
  prefs: []
  type: TYPE_NORMAL
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  id: totrans-3262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  id: totrans-3263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  id: totrans-3264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-3265
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  id: totrans-3266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  id: totrans-3267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-3268
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-3270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  id: totrans-3271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Create a rule that triggers every day.
  id: totrans-3272
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3273
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3274
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3275
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  id: totrans-3277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  id: totrans-3278
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3279
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  id: totrans-3285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3287
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3291
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  id: totrans-3293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  id: totrans-3297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  id: totrans-3301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-3302
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  id: totrans-3305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: alias of `Always`
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  id: totrans-3307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: Create a rule that triggers at a fixed offset from market close.
  id: totrans-3308
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-3309
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  id: totrans-3311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  id: totrans-3312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3314
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3316
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3317
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute before market close.
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-3320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  id: totrans-3321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: Create a rule that triggers at a fixed offset from market open.
  id: totrans-3322
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-3323
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  id: totrans-3325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  id: totrans-3326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  id: totrans-3327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3328
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute after market open.
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
- en: Orders
  id: totrans-3335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE497]'
  id: totrans-3336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Place an order for a fixed number of shares.
  id: totrans-3337
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-3339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-3340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  id: totrans-3343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-3347
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3350
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  id: totrans-3352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: Place an order for a fixed amount of money.
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  id: totrans-3354
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  id: totrans-3357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  id: totrans-3358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  id: totrans-3359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3365
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-3368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  id: totrans-3369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3377
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3379
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3380
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3381
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3382
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3383
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  id: totrans-3384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  id: totrans-3385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  id: totrans-3389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3394
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3396
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3397
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  id: totrans-3399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  id: totrans-3400
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  id: totrans-3404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  id: totrans-3405
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  id: totrans-3408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3412
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3413
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3414
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3415
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3416
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  id: totrans-3418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  id: totrans-3422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  id: totrans-3423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  id: totrans-3424
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-3427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3431
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3432
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3433
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3435
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-3436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  id: totrans-3437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  id: totrans-3442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: Base class for order execution styles.
  id: totrans-3443
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  id: totrans-3444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: The exchange to which this order should be routed.
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  id: totrans-3446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  id: totrans-3448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-3449
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  id: totrans-3450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Execution style for orders to be filled at current market price.
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  id: totrans-3453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  id: totrans-3457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  id: totrans-3458
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-3460
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  id: totrans-3461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  id: totrans-3464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE514]'
  id: totrans-3466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: Lookup an order based on the order id returned from one of the order functions.
  id: totrans-3467
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
- en: Order
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  id: totrans-3474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Retrieve all of the current open orders.
  id: totrans-3475
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  id: totrans-3477
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  id: totrans-3481
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  id: totrans-3482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: Cancel an open order.
  id: totrans-3483
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3484
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  id: totrans-3485
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  id: totrans-3486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE517]'
  id: totrans-3487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: Sets the order cancellation policy for the simulation.
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3489
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  id: totrans-3490
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3491
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  id: totrans-3493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: Abstract cancellation policy interface.
  id: totrans-3494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  id: totrans-3495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: Should all open orders be cancelled?
  id: totrans-3496
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3497
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  id: totrans-3500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  id: totrans-3501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  id: totrans-3502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  id: totrans-3503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3504
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  id: totrans-3505
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3506
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-3507
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  id: totrans-3508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  id: totrans-3509
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3510
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  id: totrans-3511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  id: totrans-3512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: Orders are never automatically canceled.
  id: totrans-3513
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  id: totrans-3514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE522]'
  id: totrans-3515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: Lookup an Equity by its ticker symbol.
  id: totrans-3516
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3517
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  id: totrans-3518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-3519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3520
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  id: totrans-3521
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3522
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-3523
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3524
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  id: totrans-3525
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-3527
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  id: totrans-3528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: Lookup multuple Equities as a list.
  id: totrans-3529
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3530
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  id: totrans-3531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-3532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3533
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  id: totrans-3534
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3535
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-3536
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3537
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3539
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-3540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  id: totrans-3541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: Lookup a futures contract with a given symbol.
  id: totrans-3542
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3545
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  id: totrans-3546
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-3548
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  id: totrans-3551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  id: totrans-3552
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3553
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  id: totrans-3554
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  id: totrans-3555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: Lookup an Asset by its unique asset identifier.
  id: totrans-3556
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3557
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  id: totrans-3558
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3559
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  id: totrans-3560
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3561
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  id: totrans-3562
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  id: totrans-3565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  id: totrans-3567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: Set a restriction on which assets can be ordered.
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  id: totrans-3570
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  id: totrans-3571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: Set a rule specifying that this algorithm cannot take short positions.
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  id: totrans-3573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Set a limit on the maximum leverage of the algorithm.
  id: totrans-3574
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3575
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  id: totrans-3576
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  id: totrans-3577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: Set a limit on the number of orders that can be placed in a single day.
  id: totrans-3578
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3579
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  id: totrans-3580
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  id: totrans-3581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  id: totrans-3582
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  id: totrans-3583
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3584
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-3585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  id: totrans-3586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  id: totrans-3587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE532]'
  id: totrans-3588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  id: totrans-3589
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  id: totrans-3590
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3591
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-3592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  id: totrans-3593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  id: totrans-3594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  id: totrans-3595
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE533]'
  id: totrans-3596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: Set the benchmark asset.
  id: totrans-3597
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3598
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3600
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  id: totrans-3601
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  id: totrans-3602
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE534]'
  id: totrans-3603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Sets the commission models for the simulation.
  id: totrans-3604
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3605
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  id: totrans-3606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  id: totrans-3607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3608
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-3609
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3610
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  id: totrans-3611
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  id: totrans-3612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: Abstract base class for commission models.
  id: totrans-3613
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  id: totrans-3614
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  id: totrans-3615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  id: totrans-3616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  id: totrans-3617
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3618
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  id: totrans-3619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  id: totrans-3622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-3626
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  id: totrans-3627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3629
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  id: totrans-3630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  id: totrans-3631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3632
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  id: totrans-3633
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  id: totrans-3634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: Calculates a commission for a transaction based on a per trade cost.
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  id: totrans-3636
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3637
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  id: totrans-3638
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  id: totrans-3639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: Model commissions by applying a fixed cost per dollar transacted.
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3641
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  id: totrans-3643
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE540]'
  id: totrans-3644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Set the slippage models for the simulation.
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  id: totrans-3647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  id: totrans-3648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3649
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3651
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  id: totrans-3653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: Abstract base class for slippage models.
  id: totrans-3654
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  id: totrans-3655
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  id: totrans-3656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  id: totrans-3657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-3658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-3660
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-3661
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3662
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  id: totrans-3663
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  id: totrans-3664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Compute the number of shares and price to fill for `order` in the current minute.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3666
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  id: totrans-3667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  id: totrans-3668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3669
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  id: totrans-3670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  id: totrans-3671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  id: totrans-3673
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3674
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  id: totrans-3676
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  id: totrans-3677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Simple model assuming a fixed-size spread for all assets.
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3679
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  id: totrans-3680
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  id: totrans-3682
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  id: totrans-3683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: Model slippage as a quadratic function of percentage of historical volume.
  id: totrans-3684
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  id: totrans-3685
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  id: totrans-3686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: 'Orders to sell will be filled at:'
  id: totrans-3687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  id: totrans-3688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  id: totrans-3689
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3690
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  id: totrans-3691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  id: totrans-3693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  id: totrans-3694
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  id: totrans-3695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: Register a pipeline to be computed at the start of each day.
  id: totrans-3696
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3697
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  id: totrans-3698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  id: totrans-3699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  id: totrans-3700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  id: totrans-3701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3702
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  id: totrans-3703
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3704
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  id: totrans-3705
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3706
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  id: totrans-3707
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  id: totrans-3708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: Get results of the pipeline attached by with name `name`.
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3710
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3712
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3714
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-3715
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3716
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3718
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-3719
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  id: totrans-3720
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE551]'
  id: totrans-3721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: Track and record values each day.
  id: totrans-3722
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  id: totrans-3724
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  id: totrans-3727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: Query the execution environment.
  id: totrans-3728
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3729
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  id: totrans-3730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  id: totrans-3731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  id: totrans-3732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  id: totrans-3733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  id: totrans-3734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  id: totrans-3735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  id: totrans-3736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  id: totrans-3737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  id: totrans-3738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  id: totrans-3739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  id: totrans-3740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  id: totrans-3741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3742
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  id: totrans-3743
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3744
  prefs: []
  type: TYPE_NORMAL
- en: any
  id: totrans-3745
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-3746
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  id: totrans-3747
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  id: totrans-3748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  id: totrans-3749
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3750
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  id: totrans-3751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  id: totrans-3752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  id: totrans-3753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  id: totrans-3754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-3755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  id: totrans-3756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  id: totrans-3757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  id: totrans-3758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  id: totrans-3759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  id: totrans-3760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-3761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3762
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  id: totrans-3763
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3764
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  id: totrans-3765
  prefs: []
  type: TYPE_NORMAL
- en: Data Object
  id: totrans-3766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE554]'
  id: totrans-3767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  id: totrans-3768
  prefs: []
  type: TYPE_NORMAL
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  id: totrans-3769
  prefs: []
  type: TYPE_NORMAL
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3771
  prefs: []
  type: TYPE_NORMAL
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  id: totrans-3772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  id: totrans-3773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  id: totrans-3774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  id: totrans-3775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE555]'
  id: totrans-3776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  id: totrans-3777
  prefs: []
  type: TYPE_NORMAL
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  id: totrans-3778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  id: totrans-3779
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a known last price for the asset.
  id: totrans-3780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3781
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  id: totrans-3782
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3783
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition above warrants some further explanation:'
  id: totrans-3784
  prefs: []
  type: TYPE_NORMAL
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  id: totrans-3785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  id: totrans-3786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  id: totrans-3788
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-3790
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  id: totrans-3791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  id: totrans-3792
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3793
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-3794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  id: totrans-3795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3796
  prefs: []
  type: TYPE_NORMAL
- en: '**current_value** – See notes below.'
  id: totrans-3797
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3798
  prefs: []
  type: TYPE_NORMAL
- en: Scalar, pandas Series, or pandas DataFrame.
  id: totrans-3799
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3800
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of its inputs:'
  id: totrans-3801
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  id: totrans-3802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  id: totrans-3803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  id: totrans-3804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  id: totrans-3805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values produced for `fields` are as follows:'
  id: totrans-3806
  prefs: []
  type: TYPE_NORMAL
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  id: totrans-3807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  id: totrans-3808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  id: totrans-3809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  id: totrans-3810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  id: totrans-3811
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  id: totrans-3812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  id: totrans-3813
  prefs: []
  type: TYPE_NORMAL
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  id: totrans-3814
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3815
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  id: totrans-3816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  id: totrans-3817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  id: totrans-3818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3820
  prefs: []
  type: TYPE_NORMAL
- en: '**history** – See notes below.'
  id: totrans-3821
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3822
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or pd.DataFrame or pd.Panel
  id: totrans-3823
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3824
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  id: totrans-3825
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  id: totrans-3827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  id: totrans-3828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  id: totrans-3829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  id: totrans-3830
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-3831
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-3832
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  id: totrans-3833
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  id: totrans-3834
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  id: totrans-3835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  id: totrans-3836
  prefs: []
  type: TYPE_NORMAL
- en: If the asset has never traded, returns False.
  id: totrans-3837
  prefs: []
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  id: totrans-3838
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3839
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  id: totrans-3840
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3841
  prefs: []
  type: TYPE_NORMAL
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  id: totrans-3842
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3843
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  id: totrans-3844
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling Functions
  id: totrans-3845
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE559]'
  id: totrans-3846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: Schedule a function to be called repeatedly in the future.
  id: totrans-3847
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3848
  prefs: []
  type: TYPE_NORMAL
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  id: totrans-3849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  id: totrans-3850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  id: totrans-3851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  id: totrans-3852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  id: totrans-3853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-3854
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  id: totrans-3855
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  id: totrans-3856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-3857
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3858
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-3859
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  id: totrans-3860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: Create a rule that triggers every day.
  id: totrans-3861
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3862
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3863
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3864
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3865
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  id: totrans-3866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  id: totrans-3867
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3868
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  id: totrans-3869
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3870
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3871
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3872
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3873
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  id: totrans-3874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  id: totrans-3875
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3876
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  id: totrans-3877
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3878
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3879
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3880
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3881
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE564]'
  id: totrans-3882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  id: totrans-3883
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3884
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  id: totrans-3885
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  id: totrans-3886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  id: totrans-3887
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3888
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  id: totrans-3889
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  id: totrans-3890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  id: totrans-3891
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3892
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  id: totrans-3893
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE567]'
  id: totrans-3894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: alias of `Always`
  id: totrans-3895
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  id: totrans-3896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: Create a rule that triggers at a fixed offset from market close.
  id: totrans-3897
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-3898
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3899
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  id: totrans-3900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  id: totrans-3901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  id: totrans-3902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3903
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3904
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3905
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3906
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3907
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute before market close.
  id: totrans-3908
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-3909
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  id: totrans-3910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: Create a rule that triggers at a fixed offset from market open.
  id: totrans-3911
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  id: totrans-3912
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3913
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  id: totrans-3914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  id: totrans-3915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  id: totrans-3916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3917
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  id: totrans-3918
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3919
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  id: totrans-3920
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3921
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute after market open.
  id: totrans-3922
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  id: totrans-3923
  prefs: []
  type: TYPE_NORMAL
- en: Orders
  id: totrans-3924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE570]'
  id: totrans-3925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: Place an order for a fixed number of shares.
  id: totrans-3926
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3927
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-3928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-3929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  id: totrans-3932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3933
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-3934
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3935
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-3936
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3937
  prefs: []
  type: TYPE_NORMAL
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  id: totrans-3938
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3939
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-3940
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  id: totrans-3941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: Place an order for a fixed amount of money.
  id: totrans-3942
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  id: totrans-3943
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3944
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  id: totrans-3945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  id: totrans-3946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  id: totrans-3947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  id: totrans-3948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3950
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3951
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3952
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3953
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3954
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3955
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3956
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  id: totrans-3957
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  id: totrans-3958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  id: totrans-3959
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3960
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-3962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3966
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3967
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3968
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3969
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3970
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3971
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3972
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  id: totrans-3973
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  id: totrans-3974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  id: totrans-3975
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3976
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  id: totrans-3978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-3981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-3982
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-3983
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-3984
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-3985
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-3986
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  id: totrans-3987
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  id: totrans-3988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  id: totrans-3989
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-3990
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-3991
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-3992
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  id: totrans-3993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  id: totrans-3994
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-3995
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-3996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  id: totrans-3997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-3998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-3999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-4000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4001
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-4002
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4003
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4005
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-4006
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  id: totrans-4007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  id: totrans-4008
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-4009
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4010
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  id: totrans-4011
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  id: totrans-4012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  id: totrans-4013
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4014
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  id: totrans-4015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  id: totrans-4016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  id: totrans-4017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  id: totrans-4018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  id: totrans-4019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4020
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  id: totrans-4021
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4022
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-4023
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4024
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  id: totrans-4025
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  id: totrans-4026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  id: totrans-4027
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  id: totrans-4028
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4029
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  id: totrans-4030
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  id: totrans-4031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: Base class for order execution styles.
  id: totrans-4032
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  id: totrans-4033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: The exchange to which this order should be routed.
  id: totrans-4034
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  id: totrans-4035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-4036
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  id: totrans-4037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  id: totrans-4038
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  id: totrans-4039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: Execution style for orders to be filled at current market price.
  id: totrans-4040
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  id: totrans-4041
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  id: totrans-4042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  id: totrans-4043
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4044
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  id: totrans-4045
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  id: totrans-4046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  id: totrans-4047
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4048
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-4049
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  id: totrans-4050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  id: totrans-4051
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4052
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  id: totrans-4053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  id: totrans-4054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE587]'
  id: totrans-4055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: Lookup an order based on the order id returned from one of the order functions.
  id: totrans-4056
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4057
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  id: totrans-4058
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4059
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  id: totrans-4060
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4061
  prefs: []
  type: TYPE_NORMAL
- en: Order
  id: totrans-4062
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  id: totrans-4063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: Retrieve all of the current open orders.
  id: totrans-4064
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4065
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  id: totrans-4066
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4067
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  id: totrans-4068
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4069
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  id: totrans-4070
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  id: totrans-4071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: Cancel an open order.
  id: totrans-4072
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4073
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  id: totrans-4074
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  id: totrans-4075
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE590]'
  id: totrans-4076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: Sets the order cancellation policy for the simulation.
  id: totrans-4077
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4078
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  id: totrans-4079
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4080
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  id: totrans-4081
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  id: totrans-4082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: Abstract cancellation policy interface.
  id: totrans-4083
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  id: totrans-4084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: Should all open orders be cancelled?
  id: totrans-4085
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4086
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  id: totrans-4087
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  id: totrans-4088
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  id: totrans-4089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  id: totrans-4090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  id: totrans-4091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  id: totrans-4092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4093
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  id: totrans-4094
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4095
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-4096
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  id: totrans-4097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  id: totrans-4098
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4099
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  id: totrans-4100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  id: totrans-4101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: Orders are never automatically canceled.
  id: totrans-4102
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  id: totrans-4103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE595]'
  id: totrans-4104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Sets the order cancellation policy for the simulation.
  id: totrans-4105
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4106
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  id: totrans-4107
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4108
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  id: totrans-4109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  id: totrans-4110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: Abstract cancellation policy interface.
  id: totrans-4111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  id: totrans-4112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: Should all open orders be cancelled?
  id: totrans-4113
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4114
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  id: totrans-4115
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  id: totrans-4116
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  id: totrans-4117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  id: totrans-4118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  id: totrans-4119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  id: totrans-4120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4121
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  id: totrans-4122
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4123
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-4124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  id: totrans-4125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  id: totrans-4126
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4127
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  id: totrans-4128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  id: totrans-4129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: Orders are never automatically canceled.
  id: totrans-4130
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  id: totrans-4131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE600]'
  id: totrans-4132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: Lookup an Equity by its ticker symbol.
  id: totrans-4133
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4134
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  id: totrans-4135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-4136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4137
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  id: totrans-4138
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4139
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-4140
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4141
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  id: totrans-4142
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4143
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-4144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  id: totrans-4145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: Lookup multuple Equities as a list.
  id: totrans-4146
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4147
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  id: totrans-4148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4150
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  id: totrans-4151
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4152
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-4153
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4154
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  id: totrans-4155
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4156
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  id: totrans-4157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  id: totrans-4158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: Lookup a futures contract with a given symbol.
  id: totrans-4159
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4160
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-4161
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4162
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  id: totrans-4163
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4164
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-4165
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4166
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-4167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  id: totrans-4168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  id: totrans-4169
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4170
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  id: totrans-4171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  id: totrans-4172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: Lookup an Asset by its unique asset identifier.
  id: totrans-4173
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4174
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  id: totrans-4175
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4176
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  id: totrans-4177
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4178
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  id: totrans-4179
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4180
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  id: totrans-4181
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  id: totrans-4182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  id: totrans-4183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  id: totrans-4184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: Set a restriction on which assets can be ordered.
  id: totrans-4185
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4186
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  id: totrans-4187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  id: totrans-4188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: Set a rule specifying that this algorithm cannot take short positions.
  id: totrans-4189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  id: totrans-4190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: Set a limit on the maximum leverage of the algorithm.
  id: totrans-4191
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4192
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  id: totrans-4193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  id: totrans-4194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: Set a limit on the number of orders that can be placed in a single day.
  id: totrans-4195
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4196
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  id: totrans-4197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  id: totrans-4198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  id: totrans-4199
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  id: totrans-4200
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4201
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-4202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  id: totrans-4203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  id: totrans-4204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE610]'
  id: totrans-4205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  id: totrans-4206
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  id: totrans-4207
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4208
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  id: totrans-4209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  id: totrans-4210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  id: totrans-4211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  id: totrans-4212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE611]'
  id: totrans-4213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: Set the benchmark asset.
  id: totrans-4214
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4215
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  id: totrans-4216
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4217
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  id: totrans-4218
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  id: totrans-4219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE612]'
  id: totrans-4220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: Sets the commission models for the simulation.
  id: totrans-4221
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4222
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  id: totrans-4223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  id: totrans-4224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4225
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-4226
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4227
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  id: totrans-4228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  id: totrans-4229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: Abstract base class for commission models.
  id: totrans-4230
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  id: totrans-4231
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  id: totrans-4232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  id: totrans-4233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  id: totrans-4234
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4235
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  id: totrans-4236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  id: totrans-4239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4240
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  id: totrans-4241
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4242
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-4243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  id: totrans-4244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  id: totrans-4245
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4246
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  id: totrans-4247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  id: totrans-4248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4249
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  id: totrans-4250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  id: totrans-4251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: Calculates a commission for a transaction based on a per trade cost.
  id: totrans-4252
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  id: totrans-4253
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4254
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  id: totrans-4255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  id: totrans-4256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: Model commissions by applying a fixed cost per dollar transacted.
  id: totrans-4257
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4258
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  id: totrans-4259
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  id: totrans-4260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE618]'
  id: totrans-4261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: Set the slippage models for the simulation.
  id: totrans-4262
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4263
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  id: totrans-4264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  id: totrans-4265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4266
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-4267
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4268
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  id: totrans-4269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  id: totrans-4270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: Abstract base class for slippage models.
  id: totrans-4271
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  id: totrans-4272
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  id: totrans-4273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  id: totrans-4274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-4275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  id: totrans-4276
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-4277
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-4278
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4279
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  id: totrans-4280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  id: totrans-4281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: Compute the number of shares and price to fill for `order` in the current minute.
  id: totrans-4282
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4283
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  id: totrans-4284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  id: totrans-4285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4286
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  id: totrans-4287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  id: totrans-4288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4289
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  id: totrans-4290
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4291
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  id: totrans-4292
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  id: totrans-4293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  id: totrans-4294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: Simple model assuming a fixed-size spread for all assets.
  id: totrans-4295
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4296
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  id: totrans-4297
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4298
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  id: totrans-4299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  id: totrans-4300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: Model slippage as a quadratic function of percentage of historical volume.
  id: totrans-4301
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  id: totrans-4302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  id: totrans-4303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: 'Orders to sell will be filled at:'
  id: totrans-4304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  id: totrans-4305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  id: totrans-4306
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4307
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  id: totrans-4308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  id: totrans-4309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commission Models
  id: totrans-4310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE627]'
  id: totrans-4311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: Sets the commission models for the simulation.
  id: totrans-4312
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4313
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  id: totrans-4314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  id: totrans-4315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4316
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-4317
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4318
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  id: totrans-4319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  id: totrans-4320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: Abstract base class for commission models.
  id: totrans-4321
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  id: totrans-4322
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  id: totrans-4323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  id: totrans-4324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  id: totrans-4325
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4326
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  id: totrans-4327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  id: totrans-4329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  id: totrans-4330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4331
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  id: totrans-4332
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4333
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-4334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  id: totrans-4335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  id: totrans-4336
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4337
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  id: totrans-4338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  id: totrans-4339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4340
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  id: totrans-4341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  id: totrans-4342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: Calculates a commission for a transaction based on a per trade cost.
  id: totrans-4343
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  id: totrans-4344
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4345
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  id: totrans-4346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  id: totrans-4347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: Model commissions by applying a fixed cost per dollar transacted.
  id: totrans-4348
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4349
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  id: totrans-4350
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  id: totrans-4351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE633]'
  id: totrans-4352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: Set the slippage models for the simulation.
  id: totrans-4353
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4354
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  id: totrans-4355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  id: totrans-4356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4357
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  id: totrans-4358
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4359
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  id: totrans-4360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  id: totrans-4361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: Abstract base class for slippage models.
  id: totrans-4362
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  id: totrans-4363
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  id: totrans-4364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  id: totrans-4365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-4366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  id: totrans-4367
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-4368
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-4369
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4370
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  id: totrans-4371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  id: totrans-4372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: Compute the number of shares and price to fill for `order` in the current minute.
  id: totrans-4373
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4374
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  id: totrans-4375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  id: totrans-4376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4377
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  id: totrans-4378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  id: totrans-4379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4380
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  id: totrans-4381
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4382
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  id: totrans-4383
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  id: totrans-4384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  id: totrans-4385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: Simple model assuming a fixed-size spread for all assets.
  id: totrans-4386
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4387
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  id: totrans-4388
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4389
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  id: totrans-4390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  id: totrans-4391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: Model slippage as a quadratic function of percentage of historical volume.
  id: totrans-4392
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  id: totrans-4393
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  id: totrans-4394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: 'Orders to sell will be filled at:'
  id: totrans-4395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  id: totrans-4396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  id: totrans-4397
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4398
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  id: totrans-4399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  id: totrans-4400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  id: totrans-4401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  id: totrans-4402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  id: totrans-4403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: Register a pipeline to be computed at the start of each day.
  id: totrans-4404
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4405
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  id: totrans-4406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  id: totrans-4407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  id: totrans-4408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  id: totrans-4409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4410
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  id: totrans-4411
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4412
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  id: totrans-4413
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4414
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  id: totrans-4415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  id: totrans-4416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: Get results of the pipeline attached by with name `name`.
  id: totrans-4417
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4418
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  id: totrans-4419
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4420
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  id: totrans-4421
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4422
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-4423
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4424
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  id: totrans-4425
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4426
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-4427
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  id: totrans-4428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE644]'
  id: totrans-4429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: Track and record values each day.
  id: totrans-4430
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4431
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  id: totrans-4432
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4433
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  id: totrans-4434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  id: totrans-4435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: Query the execution environment.
  id: totrans-4436
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4437
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  id: totrans-4438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  id: totrans-4439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  id: totrans-4440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  id: totrans-4441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  id: totrans-4442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  id: totrans-4443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  id: totrans-4444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  id: totrans-4445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  id: totrans-4446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  id: totrans-4447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  id: totrans-4448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  id: totrans-4449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4450
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  id: totrans-4451
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4452
  prefs: []
  type: TYPE_NORMAL
- en: any
  id: totrans-4453
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4454
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  id: totrans-4455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  id: totrans-4456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  id: totrans-4457
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4458
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  id: totrans-4459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  id: totrans-4460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  id: totrans-4461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  id: totrans-4462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-4463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  id: totrans-4464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  id: totrans-4465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  id: totrans-4466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  id: totrans-4467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  id: totrans-4468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  id: totrans-4469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4470
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  id: totrans-4471
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4472
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  id: totrans-4473
  prefs: []
  type: TYPE_NORMAL
- en: Blotters
  id: totrans-4474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [blotter](https://www.investopedia.com/terms/b/blotter.asp) documents trades
    and their details over a period of time, typically one trading day. Trade details
    include such things as the time, price, order size, and whether it was a buy or
    sell order. It is is usually created by a trading software that records the trades
    made through a data feed.
  id: totrans-4475
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  id: totrans-4476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '[PRE648]'
  id: totrans-4477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: Place a batch of orders.
  id: totrans-4478
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4479
  prefs: []
  type: TYPE_NORMAL
- en: '**order_arg_lists** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*]*) – Tuples of args that order expects.'
  id: totrans-4480
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4481
  prefs: []
  type: TYPE_NORMAL
- en: '**order_ids** – The unique identifier (or None) for each of the orders placed
    (or not placed).'
  id: totrans-4482
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4483
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None]'
  id: totrans-4484
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4485
  prefs: []
  type: TYPE_NORMAL
- en: This is required for Blotter subclasses to be able to place a batch of orders,
    instead of being passed the order requests one at a time.
  id: totrans-4486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  id: totrans-4487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: Cancel a single order
  id: totrans-4488
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4489
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  id: totrans-4490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  id: totrans-4491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE650]'
  id: totrans-4492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: Cancel all open orders for a given asset.
  id: totrans-4493
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  id: totrans-4494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  id: totrans-4495
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4496
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  id: totrans-4497
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4498
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  id: totrans-4499
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  id: totrans-4500
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4501
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  id: totrans-4502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  id: totrans-4503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  id: totrans-4504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE652]'
  id: totrans-4505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  id: totrans-4506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  id: totrans-4507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: Place an order.
  id: totrans-4508
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4509
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  id: totrans-4510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-4511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  id: totrans-4512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  id: totrans-4513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4514
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-4515
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4516
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-4517
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4518
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 : Buy/Cover amount < 0 : Sell/Short Market order : order(asset,
    amount) Limit order : order(asset, amount, style=LimitOrder(limit_price)) Stop
    order : order(asset, amount, style=StopOrder(stop_price)) StopLimit order : order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  id: totrans-4519
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  id: totrans-4520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: Processes a list of splits by modifying any open orders as needed.
  id: totrans-4521
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4522
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-4523
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4524
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-4525
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  id: totrans-4526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: Removes all given orders from the blotter’s open_orders list.
  id: totrans-4527
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4528
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  id: totrans-4529
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4530
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-4531
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  id: totrans-4532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  id: totrans-4533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  id: totrans-4534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-4535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: Cancel a single order
  id: totrans-4536
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4537
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  id: totrans-4538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  id: totrans-4539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE659]'
  id: totrans-4540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: Cancel all open orders for a given asset.
  id: totrans-4541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  id: totrans-4542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  id: totrans-4543
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4544
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  id: totrans-4545
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4546
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  id: totrans-4547
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  id: totrans-4548
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4549
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  id: totrans-4550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  id: totrans-4551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  id: totrans-4552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE661]'
  id: totrans-4553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  id: totrans-4554
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  id: totrans-4555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: Place an order.
  id: totrans-4556
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4557
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  id: totrans-4558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  id: totrans-4559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  id: totrans-4560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  id: totrans-4561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4562
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  id: totrans-4563
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4564
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-4565
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4566
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 :: Buy/Cover amount < 0 :: Sell/Short Market order: order(asset,
    amount) Limit order: order(asset, amount, style=LimitOrder(limit_price)) Stop
    order: order(asset, amount, style=StopOrder(stop_price)) StopLimit order: order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  id: totrans-4567
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  id: totrans-4568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: Processes a list of splits by modifying any open orders as needed.
  id: totrans-4569
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4570
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-4571
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4572
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-4573
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  id: totrans-4574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: Removes all given orders from the blotter’s open_orders list.
  id: totrans-4575
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4576
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  id: totrans-4577
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4578
  prefs: []
  type: TYPE_NORMAL
- en: None
  id: totrans-4579
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  id: totrans-4580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  id: totrans-4581
  prefs: []
  type: TYPE_NORMAL
- en: '## Pipeline API'
  id: totrans-4582
  prefs: []
  type: TYPE_NORMAL
- en: A [`Pipeline`](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline") enables
    faster and more memory-efficient execution by optimizing the computation of factors
    during a backtest.
  id: totrans-4583
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  id: totrans-4584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: A Pipeline object represents a collection of named expressions to be compiled
    and executed by a PipelineEngine.
  id: totrans-4585
  prefs: []
  type: TYPE_NORMAL
- en: 'A Pipeline has two important attributes: ‘columns’, a dictionary of named [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") instances, and ‘screen’, a [`Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") representing criteria for including an asset in the
    results of a Pipeline.'
  id: totrans-4586
  prefs: []
  type: TYPE_NORMAL
- en: To compute a pipeline in the context of a TradingAlgorithm, users must call
    `attach_pipeline` in their `initialize` function to register that the pipeline
    should be computed each trading day. The most recent outputs of an attached pipeline
    can be retrieved by calling `pipeline_output` from `handle_data`, `before_trading_start`,
    or a scheduled function.
  id: totrans-4587
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4588
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*,* *optional*) – Initial columns.'
  id: totrans-4589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**screen** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Initial screen.'
  id: totrans-4590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE667]'
  id: totrans-4591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: Add a column.
  id: totrans-4592
  prefs: []
  type: TYPE_NORMAL
- en: The results of computing `term` will show up as a column in the DataFrame produced
    by running this pipeline.
  id: totrans-4593
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4594
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – A Filter, Factor, or Classifier to add to the pipeline.'
  id: totrans-4595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to add.'
  id: totrans-4596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite the existing entry if we already
    have a column named name.'
  id: totrans-4597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE668]'
  id: totrans-4598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: Get the domain for this pipeline.
  id: totrans-4599
  prefs: []
  type: TYPE_NORMAL
- en: If an explicit domain was provided at construction time, use it.
  id: totrans-4600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, infer a domain from the registered columns.
  id: totrans-4601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no domain can be inferred, return `default`.
  id: totrans-4602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4603
  prefs: []
  type: TYPE_NORMAL
- en: '**default** (*zipline.pipeline.domain.Domain*) – Domain to use if no domain
    can be inferred from this pipeline by itself.'
  id: totrans-4604
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4605
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** – The domain for the pipeline.'
  id: totrans-4606
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4607
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.domain.Domain
  id: totrans-4608
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4609
  prefs: []
  type: TYPE_NORMAL
- en: '**AmbiguousDomain** –'
  id: totrans-4610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – If the terms in `self` conflict with self._domain.'
  id: totrans-4611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE669]'
  id: totrans-4612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: Remove a column.
  id: totrans-4613
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4614
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the column to remove.'
  id: totrans-4615
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-4616
  prefs: []
  type: TYPE_NORMAL
- en: '[**KeyError**](https://docs.python.org/3/library/exceptions.html#KeyError "(in
    Python v3.11)") – If name is not in self.columns.'
  id: totrans-4617
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4618
  prefs: []
  type: TYPE_NORMAL
- en: '**removed** – The removed term.'
  id: totrans-4619
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4620
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Term](#zipline.pipeline.Term "zipline.pipeline.Term")'
  id: totrans-4621
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  id: totrans-4622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Set a screen on this Pipeline.
  id: totrans-4623
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4624
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter"))
    – The filter to apply as a screen.'
  id: totrans-4625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite any existing screen. If overwrite
    is False and self.screen is not None, we raise an error.'
  id: totrans-4626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE671]'
  id: totrans-4627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: Render this Pipeline as a DAG.
  id: totrans-4628
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4629
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (*{''svg''**,* *''png''**,* *''jpeg''}*) – Image format to render
    with. Default is ‘svg’.'
  id: totrans-4630
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  id: totrans-4631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: Compile into an ExecutionPlan.
  id: totrans-4632
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4633
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – Domain on which the pipeline
    will be executed.'
  id: totrans-4634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  id: totrans-4635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**all_dates** (*pd.DatetimeIndex*) – A calendar of dates to use to calculate
    starts and ends for each term.'
  id: totrans-4636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The first date of requested output.'
  id: totrans-4637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The last date of requested output.'
  id: totrans-4638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4639
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies, including metadata about extra
    row requirements.'
  id: totrans-4640
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4641
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.ExecutionPlan
  id: totrans-4642
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  id: totrans-4643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: Compile into a simple TermGraph with no extra row metadata.
  id: totrans-4644
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4645
  prefs: []
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  id: totrans-4646
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4647
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies.'
  id: totrans-4648
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4649
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.TermGraph
  id: totrans-4650
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  id: totrans-4651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: The output columns of this pipeline.
  id: totrans-4652
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4653
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** – Map from column name to expression computing that column’s output.'
  id: totrans-4654
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4655
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)"), zipline.pipeline.ComputableTerm]'
  id: totrans-4656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  id: totrans-4657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: The screen of this pipeline.
  id: totrans-4658
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4659
  prefs: []
  type: TYPE_NORMAL
- en: '**screen** – Term defining the screen for this pipeline. If `screen` is a filter,
    rows that do not pass the filter (i.e., rows for which the filter computed `False`)
    will be dropped from the output of this pipeline before returning results.'
  id: totrans-4660
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4661
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")
    or None'
  id: totrans-4662
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4663
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting a screen on a Pipeline does not change the values produced for any
    rows: it only affects whether a given row is returned. Computing a pipeline with
    a screen is logically equivalent to computing the pipeline without the screen
    and then, as a post-processing-step, filtering out any rows for which the screen
    computed `False`.'
  id: totrans-4664
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  id: totrans-4665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: Base class for user-defined Factors.
  id: totrans-4666
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4667
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*iterable**,* *optional*) – An iterable of BoundColumn instances
    (e.g. USEquityPricing.close), describing the data to load and pass to self.compute.
    If this argument is not passed to the CustomFactor constructor, we look for a
    class-level attribute named inputs.'
  id: totrans-4668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**outputs** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – An iterable of strings which represent
    the names of each output this factor should compute and return. If this argument
    is not passed to the CustomFactor constructor, we look for a class-level attribute
    named outputs.'
  id: totrans-4669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of rows to pass for each input. If
    this argument is not passed to the CustomFactor constructor, we look for a class-level
    attribute named window_length.'
  id: totrans-4670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing the assets on which we should compute each day.
    Each call to `CustomFactor.compute` will only receive assets for which `mask`
    produced True on the day for which compute is being called.'
  id: totrans-4671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4672
  prefs: []
  type: TYPE_NORMAL
- en: 'Users implementing their own Factors should subclass CustomFactor and implement
    a method named compute with the following signature:'
  id: totrans-4673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  id: totrans-4674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: On each simulation date, `compute` will be called with the current date, an
    array of sids, an output array, and an input array for each expression passed
    as inputs to the CustomFactor constructor.
  id: totrans-4675
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific types of the values passed to compute are as follows:'
  id: totrans-4676
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  id: totrans-4677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: '`compute` functions should expect to be passed NaN values for dates on which
    no data was available for an asset. This may include dates on which an asset did
    not yet exist.'
  id: totrans-4678
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a CustomFactor requires 10 rows of close price data, and asset
    A started trading on Monday June 2nd, 2014, then on Tuesday, June 3rd, 2014, the
    column of input data for asset A will have 9 leading NaNs for the preceding days
    on which data was not yet available.
  id: totrans-4679
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4680
  prefs: []
  type: TYPE_NORMAL
- en: 'A CustomFactor with pre-declared defaults:'
  id: totrans-4681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  id: totrans-4682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: 'A CustomFactor without defaults:'
  id: totrans-4683
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  id: totrans-4684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: 'A CustomFactor with multiple outputs:'
  id: totrans-4685
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  id: totrans-4686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: 'Note: If a CustomFactor has multiple outputs, all outputs must have the same
    dtype. For instance, in the example above, if alpha is a float then beta must
    also be a float.'
  id: totrans-4687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  id: totrans-4688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: '[PRE683]'
  id: totrans-4689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: Pipeline expression computing a boolean output.
  id: totrans-4690
  prefs: []
  type: TYPE_NORMAL
- en: Filters are most commonly useful for describing sets of assets to include or
    exclude for some particular purpose. Many Pipeline API functions accept a `mask`
    argument, which can be supplied a Filter indicating that only values passing the
    Filter should be considered when performing the requested computation. For example,
    [`zipline.pipeline.Factor.top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top")
    accepts a mask indicating that ranks should be computed only on assets that passed
    the specified Filter.
  id: totrans-4691
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to construct a Filter is via one of the comparison operators
    (`<`, `<=`, `!=`, `eq`, `>`, `>=`) of [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor").
    For example, a natural way to construct a Filter for stocks with a 10-day VWAP
    less than $20.0 is to first construct a Factor computing 10-day VWAP and compare
    it to the scalar value 20.0:'
  id: totrans-4692
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  id: totrans-4693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: 'Filters can also be constructed via comparisons between two Factors. For example,
    to construct a Filter producing True for asset/date pairs where the asset’s 10-day
    VWAP was greater than it’s 30-day VWAP:'
  id: totrans-4694
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  id: totrans-4695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: Filters can be combined via the `&` (and) and `|` (or) operators.
  id: totrans-4696
  prefs: []
  type: TYPE_NORMAL
- en: '`&`-ing together two filters produces a new Filter that produces True if **both**
    of the inputs produced True.'
  id: totrans-4697
  prefs: []
  type: TYPE_NORMAL
- en: '`|`-ing together two filters produces a new Filter that produces True if **either**
    of its inputs produced True.'
  id: totrans-4698
  prefs: []
  type: TYPE_NORMAL
- en: The `~` operator can be used to invert a Filter, swapping all True values with
    Falses and vice-versa.
  id: totrans-4699
  prefs: []
  type: TYPE_NORMAL
- en: Filters may be set as the `screen` attribute of a Pipeline, indicating asset/date
    pairs for which the filter produces False should be excluded from the Pipeline’s
    output. This is useful both for reducing noise in the output of a Pipeline and
    for reducing memory consumption of Pipeline results.
  id: totrans-4700
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  id: totrans-4701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'Binary Operator: ‘&’'
  id: totrans-4702
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  id: totrans-4703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: 'Binary Operator: ‘|’'
  id: totrans-4704
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  id: totrans-4705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: Create a term that selects values from one of two choices.
  id: totrans-4706
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4707
  prefs: []
  type: TYPE_NORMAL
- en: '**if_true** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs True.'
  id: totrans-4708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if_false** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs False.'
  id: totrans-4709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4710
  prefs: []
  type: TYPE_NORMAL
- en: '**merged** – A term that computes by taking values from either `if_true` or
    `if_false`, depending on the values produced by `self`.'
  id: totrans-4711
  prefs: []
  type: TYPE_NORMAL
- en: The returned term draws from``if_true`` at locations where `self` produces True,
    and it draws from `if_false` at locations where `self` produces False.
  id: totrans-4712
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4713
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.term.ComputableTerm
  id: totrans-4714
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-4715
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor that produces the following output:'
  id: totrans-4716
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  id: totrans-4717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: 'Let `g` be another Factor that produces the following output:'
  id: totrans-4718
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  id: totrans-4719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'Finally, let `condition` be a Filter that produces the following output:'
  id: totrans-4720
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  id: totrans-4721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: 'Then, the expression `condition.if_else(f, g)` produces the following output:'
  id: totrans-4722
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  id: totrans-4723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: See also
  id: totrans-4724
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v1.25)"), [`Factor.fillna`](#zipline.pipeline.Factor.fillna "zipline.pipeline.Factor.fillna")'
  id: totrans-4725
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  id: totrans-4726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: Pipeline API expression producing a numerical or date-valued output.
  id: totrans-4727
  prefs: []
  type: TYPE_NORMAL
- en: Factors are the most commonly-used Pipeline term, representing the result of
    any computation producing a numerical result.
  id: totrans-4728
  prefs: []
  type: TYPE_NORMAL
- en: Factors can be combined, both with other Factors and with scalar values, via
    any of the builtin mathematical operators (`+`, `-`, `*`, etc).
  id: totrans-4729
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it easy to write complex expressions that combine multiple Factors.
    For example, constructing a Factor that computes the average of two other Factors
    is simply:'
  id: totrans-4730
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  id: totrans-4731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: 'Factors can also be converted into [`zipline.pipeline.Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") objects via comparison operators: (`<`, `<=`, `!=`,
    `eq`, `>`, `>=`).'
  id: totrans-4732
  prefs: []
  type: TYPE_NORMAL
- en: There are many natural operators defined on Factors besides the basic numerical
    operators. These include methods for identifying missing or extreme-valued outputs
    (`isnull()`, `notnull()`, [`isnan()`](#zipline.pipeline.Factor.isnan "zipline.pipeline.Factor.isnan"),
    [`notnan()`](#zipline.pipeline.Factor.notnan "zipline.pipeline.Factor.notnan")),
    methods for normalizing outputs ([`rank()`](#zipline.pipeline.Factor.rank "zipline.pipeline.Factor.rank"),
    [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean"),
    [`zscore()`](#zipline.pipeline.Factor.zscore "zipline.pipeline.Factor.zscore")),
    and methods for constructing Filters based on rank-order properties of results
    ([`top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top"), [`bottom()`](#zipline.pipeline.Factor.bottom
    "zipline.pipeline.Factor.bottom"), [`percentile_between()`](#zipline.pipeline.Factor.percentile_between
    "zipline.pipeline.Factor.percentile_between")).
  id: totrans-4733
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  id: totrans-4734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self == other`.
  id: totrans-4735
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4736
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-4737
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4738
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self == other` with the outputs of `self` and
    `other`.'
  id: totrans-4739
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4740
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4741
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  id: totrans-4742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: Construct a Factor that computes `self` and subtracts the mean from row of the
    result.
  id: totrans-4743
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means, and output NaN anywhere the mask is False.
  id: totrans-4744
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, de-meaning the partitioned arrays, and stitching the sub-results
    back together.
  id: totrans-4745
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4746
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when computing means.'
  id: totrans-4747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute means.'
  id: totrans-4748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4749
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  id: totrans-4750
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  id: totrans-4751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: 'Let `c` be a Classifier producing the following output:'
  id: totrans-4752
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  id: totrans-4753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: 'Let `m` be a Filter producing the following output:'
  id: totrans-4754
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  id: totrans-4755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: Then `f.demean()` will subtract the mean from each row produced by `f`.
  id: totrans-4756
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  id: totrans-4757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: '`f.demean(mask=m)` will subtract the mean from each row, but means will be
    calculated ignoring values on the diagonal, and NaNs will written to the diagonal
    in the output. Diagonal values are ignored because they are the locations where
    the mask `m` produced False.'
  id: totrans-4758
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  id: totrans-4759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '`f.demean(groupby=c)` will subtract the group-mean of AAPL/MSFT and MCD/BK
    from their respective entries. The AAPL/MSFT are grouped together because both
    assets always produce 1 in the output of the classifier `c`. Similarly, MCD/BK
    are grouped together because they always produce 2.'
  id: totrans-4760
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  id: totrans-4761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: '`f.demean(mask=m, groupby=c)` will also subtract the group-mean of AAPL/MSFT
    and MCD/BK, but means will be calculated ignoring values on the diagonal , and
    NaNs will be written to the diagonal in the output.'
  id: totrans-4762
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  id: totrans-4763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: Notes
  id: totrans-4764
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean is sensitive to the magnitudes of outliers. When working with factor that
    can potentially produce large outliers, it is often useful to use the `mask` parameter
    to discard values at the extremes of the distribution:'
  id: totrans-4765
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  id: totrans-4766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: '`demean()` is only supported on Factors of dtype float64.'
  id: totrans-4767
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4768
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-4769
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  id: totrans-4770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: Construct a Factor that Z-Scores each day’s results.
  id: totrans-4771
  prefs: []
  type: TYPE_NORMAL
- en: 'The Z-Score of a row is defined as:'
  id: totrans-4772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  id: totrans-4773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means and standard deviations, and output NaN anywhere the mask is False.
  id: totrans-4774
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, z-scoring the partitioned arrays, and stitching the sub-results
    back together.
  id: totrans-4775
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4776
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when Z-Scoring.'
  id: totrans-4777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute Z-Scores.'
  id: totrans-4778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4779
  prefs: []
  type: TYPE_NORMAL
- en: '**zscored** – A Factor producing that z-scores the output of self.'
  id: totrans-4780
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4781
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4782
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4783
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean and standard deviation are sensitive to the magnitudes of outliers. When
    working with factor that can potentially produce large outliers, it is often useful
    to use the `mask` parameter to discard values at the extremes of the distribution:'
  id: totrans-4784
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  id: totrans-4785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: '`zscore()` is only supported on Factors of dtype float64.'
  id: totrans-4786
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4787
  prefs: []
  type: TYPE_NORMAL
- en: See [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean")
    for an in-depth example of the semantics for `mask` and `groupby`.
  id: totrans-4788
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4789
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-4790
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  id: totrans-4791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: Construct a new Factor representing the sorted rank of each column within each
    row.
  id: totrans-4792
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4793
  prefs: []
  type: TYPE_NORMAL
- en: '**method** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *{''ordinal''**,* *''min''**,* *''max''**,* *''dense''**,*
    *''average''}*) – The method used to assign ranks to tied elements. See scipy.stats.rankdata
    for a full description of the semantics for each ranking method. Default is ‘ordinal’.'
  id: totrans-4794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascending** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether to return sorted rank in ascending
    or descending order. Default is True.'
  id: totrans-4795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, ranks are computed ignoring any asset/date pairs for which mask
    produces a value of False.'
  id: totrans-4796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-4797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4798
  prefs: []
  type: TYPE_NORMAL
- en: '**ranks** – A new factor that will compute the ranking of the data produced
    by self.'
  id: totrans-4799
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4800
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4801
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4802
  prefs: []
  type: TYPE_NORMAL
- en: The default value for method is different from the default for scipy.stats.rankdata.
    See that function’s documentation for a full description of the valid inputs to
    method.
  id: totrans-4803
  prefs: []
  type: TYPE_NORMAL
- en: Missing or non-existent data on a given day will cause an asset to be given
    a rank of NaN for that day.
  id: totrans-4804
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-4805
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.rankdata()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata
    "(in SciPy v1.11.1)")'
  id: totrans-4806
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE709]'
  id: totrans-4807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: Construct a new Factor that computes rolling pearson correlation coefficients
    between `target` and the columns of `self`.
  id: totrans-4808
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4809
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-4810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-4811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  id: totrans-4812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4813
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  id: totrans-4814
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4815
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4816
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4817
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-4818
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4819
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  id: totrans-4820
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  id: totrans-4821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: 'This is equivalent to doing:'
  id: totrans-4822
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  id: totrans-4823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: See also
  id: totrans-4824
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`Factor.spearmanr()`](#zipline.pipeline.Factor.spearmanr
    "zipline.pipeline.Factor.spearmanr")'
  id: totrans-4825
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  id: totrans-4826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: Construct a new Factor that computes rolling spearman rank correlation coefficients
    between `target` and the columns of `self`.
  id: totrans-4827
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4828
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-4829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-4830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  id: totrans-4831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4832
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  id: totrans-4833
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4834
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4835
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4836
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-4837
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4838
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  id: totrans-4839
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  id: totrans-4840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: 'This is equivalent to doing:'
  id: totrans-4841
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  id: totrans-4842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: See also
  id: totrans-4843
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), [`Factor.pearsonr()`](#zipline.pipeline.Factor.pearsonr
    "zipline.pipeline.Factor.pearsonr")'
  id: totrans-4844
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  id: totrans-4845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: Construct a new Factor that performs an ordinary least-squares regression predicting
    the columns of self from target.
  id: totrans-4846
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4847
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term to use as the predictor/independent variable in each regression. This
    may be a Factor, a BoundColumn or a Slice. If target is two-dimensional, regressions
    are computed asset-wise.'
  id: totrans-4848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    regression.'
  id: totrans-4849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed with the target
    slice each day.'
  id: totrans-4850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4851
  prefs: []
  type: TYPE_NORMAL
- en: '**regressions** – A new Factor that will compute linear regressions of target
    against the columns of self.'
  id: totrans-4852
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4853
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4854
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4855
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  id: totrans-4856
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4857
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that regresses AAPL’s 10-day returns against
    the 10-day returns of all other assets, computing each regression over 30 days.
    This can be achieved by doing the following:'
  id: totrans-4858
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  id: totrans-4859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: 'This is equivalent to doing:'
  id: totrans-4860
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  id: totrans-4861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: See also
  id: totrans-4862
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.linregress()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html#scipy.stats.linregress
    "(in SciPy v1.11.1)")'
  id: totrans-4863
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  id: totrans-4864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: Construct a new factor that winsorizes the result of this factor.
  id: totrans-4865
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing changes values ranked less than the minimum percentile to the value
    at the minimum percentile. Similarly, values ranking above the maximum percentile
    are changed to the value at the maximum percentile.
  id: totrans-4866
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing is useful for limiting the impact of extreme data points without
    completely removing those points.
  id: totrans-4867
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    percentile cutoffs, and output NaN anywhere the mask is False.
  id: totrans-4868
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, winsorization is applied separately separately to
    each group defined by `groupby`.
  id: totrans-4869
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4870
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or below this percentile will be
    replaced with the (len(input) * min_percentile)th lowest value. If low values
    should not be clipped, use 0.'
  id: totrans-4871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or above this percentile will be
    replaced with the (len(input) * max_percentile)th lowest value. If high values
    should not be clipped, use 1.'
  id: totrans-4872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when winsorizing.'
  id: totrans-4873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to winsorize.'
  id: totrans-4874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4875
  prefs: []
  type: TYPE_NORMAL
- en: '**winsorized** – A Factor producing a winsorized version of self.'
  id: totrans-4876
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4877
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-4878
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-4879
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  id: totrans-4880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: 'Given a pipeline with columns, defined above, the result for a given day could
    look like:'
  id: totrans-4881
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  id: totrans-4882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: See also
  id: totrans-4883
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.mstats.winsorize()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize
    "(in SciPy v1.11.1)"), [`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  id: totrans-4884
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  id: totrans-4885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: Construct a Classifier computing quantiles of the output of `self`.
  id: totrans-4886
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with an integer value from 0
    to (bins - 1). NaNs are labelled with -1.
  id: totrans-4887
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-4888
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4889
  prefs: []
  type: TYPE_NORMAL
- en: '**bins** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – Number of bins labels to compute.'
  id: totrans-4890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quantiles.'
  id: totrans-4891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4892
  prefs: []
  type: TYPE_NORMAL
- en: '**quantiles** – A classifier producing integer labels ranging from 0 to (bins
    - 1).'
  id: totrans-4893
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4894
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-4895
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  id: totrans-4896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: Construct a Classifier computing quartiles over the output of `self`.
  id: totrans-4897
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, corresponding to the first, second, third, or fourth quartile over each
    row. NaN data points are labelled with -1.
  id: totrans-4898
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-4899
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4900
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quartiles.'
  id: totrans-4901
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4902
  prefs: []
  type: TYPE_NORMAL
- en: '**quartiles** – A classifier producing integer labels ranging from 0 to 3.'
  id: totrans-4903
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4904
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-4905
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  id: totrans-4906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: Construct a Classifier computing quintile labels on `self`.
  id: totrans-4907
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, 4, corresonding to quintiles over each row. NaN data points are labelled
    with -1.
  id: totrans-4908
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-4909
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4910
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quintiles.'
  id: totrans-4911
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4912
  prefs: []
  type: TYPE_NORMAL
- en: '**quintiles** – A classifier producing integer labels ranging from 0 to 4.'
  id: totrans-4913
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4914
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-4915
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  id: totrans-4916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: Construct a Classifier computing decile labels on `self`.
  id: totrans-4917
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value from 0 to 9 corresonding
    to deciles over each row. NaN data points are labelled with -1.
  id: totrans-4918
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  id: totrans-4919
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4920
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing deciles.'
  id: totrans-4921
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4922
  prefs: []
  type: TYPE_NORMAL
- en: '**deciles** – A classifier producing integer labels ranging from 0 to 9.'
  id: totrans-4923
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4924
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  id: totrans-4925
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  id: totrans-4926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: Construct a Filter matching the top N asset values of self each day.
  id: totrans-4927
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the top N asset values for
    each group.
  id: totrans-4928
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4929
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  id: totrans-4930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, top values are computed ignoring any asset/date pairs for which
    mask produces a value of False.'
  id: totrans-4931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-4932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4933
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  id: totrans-4934
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4935
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  id: totrans-4937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: Construct a Filter matching the bottom N asset values of self each day.
  id: totrans-4938
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the bottom N asset values
    **for each group** defined by `groupby`.
  id: totrans-4939
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4940
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  id: totrans-4941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, bottom values are computed ignoring any asset/date pairs for
    which mask produces a value of False.'
  id: totrans-4942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  id: totrans-4943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4944
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  id: totrans-4945
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4946
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4947
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  id: totrans-4948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: Construct a Filter matching values of self that fall within the range defined
    by `min_percentile` and `max_percentile`.
  id: totrans-4949
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4950
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    above this percentile in the data.'
  id: totrans-4951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    below this percentile in the data.'
  id: totrans-4952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when percentile calculating
    thresholds. If mask is supplied, percentile cutoffs are computed each day using
    only assets for which `mask` returns True. Assets for which `mask` produces False
    will produce False in the output of this Factor as well.'
  id: totrans-4953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4954
  prefs: []
  type: TYPE_NORMAL
- en: '**out** – A new filter that will compute the specified percentile-range mask.'
  id: totrans-4955
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4956
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4957
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  id: totrans-4958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: A Filter producing True for all values where this Factor is NaN.
  id: totrans-4959
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4960
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  id: totrans-4961
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4962
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4963
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  id: totrans-4964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: A Filter producing True for values where this Factor is not NaN.
  id: totrans-4965
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-4966
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  id: totrans-4967
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-4968
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-4969
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  id: totrans-4970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: A Filter producing True for values where this Factor is anything but NaN, inf,
    or -inf.
  id: totrans-4971
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  id: totrans-4972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: Clip (limit) the values in a factor.
  id: totrans-4973
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  id: totrans-4974
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4975
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  id: totrans-4976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  id: totrans-4977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  id: totrans-4978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4979
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  id: totrans-4980
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  id: totrans-4981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: See also
  id: totrans-4982
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  id: totrans-4983
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  id: totrans-4984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: Clip (limit) the values in a factor.
  id: totrans-4985
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  id: totrans-4986
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4987
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  id: totrans-4988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  id: totrans-4989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  id: totrans-4990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-4991
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  id: totrans-4992
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  id: totrans-4993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: See also
  id: totrans-4994
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  id: totrans-4995
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  id: totrans-4996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self + other`.
  id: totrans-4997
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4998
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-4999
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5000
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self + other` with outputs of `self` and `other`.'
  id: totrans-5001
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5002
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5003
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  id: totrans-5004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self - other`.
  id: totrans-5005
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5006
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5007
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5008
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self - other` with outputs of `self` and `other`.'
  id: totrans-5009
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5010
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5011
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  id: totrans-5012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self * other`.
  id: totrans-5013
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5014
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5015
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5016
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self * other` with outputs of `self` and `other`.'
  id: totrans-5017
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5018
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5019
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  id: totrans-5020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self / other`.
  id: totrans-5021
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5022
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5023
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5024
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self / other` with outputs of `self` and `other`.'
  id: totrans-5025
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5026
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5027
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  id: totrans-5028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self % other`.
  id: totrans-5029
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5030
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5031
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5032
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self % other` with outputs of `self` and `other`.'
  id: totrans-5033
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5034
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5035
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  id: totrans-5036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self ** other`.
  id: totrans-5037
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5038
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5039
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5040
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self ** other` with outputs of `self` and `other`.'
  id: totrans-5041
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5042
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5043
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  id: totrans-5044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self < other`.
  id: totrans-5045
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5046
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5047
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5048
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self < other` with the outputs of `self` and
    `other`.'
  id: totrans-5049
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5050
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5051
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  id: totrans-5052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self <= other`.
  id: totrans-5053
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5054
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5055
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5056
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self <= other` with the outputs of `self` and
    `other`.'
  id: totrans-5057
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5058
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5059
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  id: totrans-5060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self != other`.
  id: totrans-5061
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5062
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5063
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5064
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self != other` with the outputs of `self` and
    `other`.'
  id: totrans-5065
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5066
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5067
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  id: totrans-5068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self >= other`.
  id: totrans-5069
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5070
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5071
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5072
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self >= other` with the outputs of `self` and
    `other`.'
  id: totrans-5073
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5074
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5075
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  id: totrans-5076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self > other`.
  id: totrans-5077
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5078
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  id: totrans-5079
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5080
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self > other` with the outputs of `self` and
    `other`.'
  id: totrans-5081
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5082
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5083
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  id: totrans-5084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: Create a new term that fills missing values of this term’s output with `fill_value`.
  id: totrans-5085
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5086
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value** (*zipline.pipeline.ComputableTerm**, or* *object.*) –'
  id: totrans-5087
  prefs: []
  type: TYPE_NORMAL
- en: Object to use as replacement for missing values.
  id: totrans-5088
  prefs: []
  type: TYPE_NORMAL
- en: If a ComputableTerm (e.g. a Factor) is passed, that term’s results will be used
    as fill values.
  id: totrans-5089
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar (e.g. a number) is passed, the scalar will be used as a fill value.
  id: totrans-5090
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5091
  prefs: []
  type: TYPE_NORMAL
- en: '**Filling with a Scalar:**'
  id: totrans-5092
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  id: totrans-5093
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  id: totrans-5094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: 'Then `f.fillna(0)` produces the following output:'
  id: totrans-5095
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  id: totrans-5096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '**Filling with a Term:**'
  id: totrans-5097
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be as above, and let `g` be another Factor which would produce the
    following output:'
  id: totrans-5098
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  id: totrans-5099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: 'Then, `f.fillna(g)` produces the following output:'
  id: totrans-5100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  id: totrans-5101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: 'Returns:'
  id: totrans-5102
  prefs: []
  type: TYPE_NORMAL
- en: '**filled** – A term computing the same results as `self`, but with missing
    values filled in using values from `fill_value`.'
  id: totrans-5103
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5104
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.ComputableTerm
  id: totrans-5105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  id: totrans-5106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: Create a 1-dimensional factor computing the mean of self, each day.
  id: totrans-5107
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5108
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5109
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5110
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5111
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5112
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  id: totrans-5114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: Create a 1-dimensional factor computing the stddev of self, each day.
  id: totrans-5115
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5116
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5117
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5118
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5119
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5120
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  id: totrans-5122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: Create a 1-dimensional factor computing the max of self, each day.
  id: totrans-5123
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5124
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5125
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5126
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5127
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5128
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  id: totrans-5130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: Create a 1-dimensional factor computing the min of self, each day.
  id: totrans-5131
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5132
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5133
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5134
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5135
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5136
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  id: totrans-5138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: Create a 1-dimensional factor computing the median of self, each day.
  id: totrans-5139
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5140
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5141
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5142
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5143
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5144
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  id: totrans-5146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: Create a 1-dimensional factor computing the sum of self, each day.
  id: totrans-5147
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5148
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  id: totrans-5149
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5150
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  id: totrans-5151
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5152
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  id: totrans-5154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: Base class for objects that can appear in the compute graph of a [`zipline.pipeline.Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline").
  id: totrans-5155
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5156
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Pipeline API users only interact with [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") via subclasses:'
  id: totrans-5157
  prefs: []
  type: TYPE_NORMAL
- en: '[`BoundColumn`](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-5158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  id: totrans-5159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  id: totrans-5160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Classifier`'
  id: totrans-5161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instances of [`Term`](#zipline.pipeline.Term "zipline.pipeline.Term") are **memoized**.
    If you call a Term’s constructor with the same arguments twice, the same object
    will be returned from both calls:'
  id: totrans-5162
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-5163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  id: totrans-5164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: Warning
  id: totrans-5165
  prefs: []
  type: TYPE_NORMAL
- en: Memoization of terms means that it’s generally unsafe to modify attributes of
    a term after construction.
  id: totrans-5166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  id: totrans-5167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: A short repr to use when rendering GraphViz graphs.
  id: totrans-5168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  id: totrans-5169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: A short repr to use when recursively rendering terms with inputs.
  id: totrans-5170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  id: totrans-5171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: Base class for Pipeline datasets.
  id: totrans-5172
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    is defined by two parts:'
  id: totrans-5173
  prefs: []
  type: TYPE_NORMAL
- en: A collection of [`Column`](#zipline.pipeline.data.Column "zipline.pipeline.data.Column")
    objects that describe the queryable attributes of the dataset.
  id: totrans-5174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Domain` describing the assets and calendar of the data represented by the
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet").
  id: totrans-5175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new Pipeline dataset, define a subclass of [`DataSet`](#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") and set one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects as class-level attributes. Each column
    requires a `np.dtype` that describes the type of data that should be produced
    by a loader for the dataset. Integer columns must also provide a “missing value”
    to be used when no value is available for a given asset/date combination.
  id: totrans-5176
  prefs: []
  type: TYPE_NORMAL
- en: By default, the domain of a dataset is the special singleton value, `GENERIC`,
    which means that they can be used in a Pipeline running on **any** domain.
  id: totrans-5177
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it may be preferable to restrict a dataset to only allow support
    a single domain. For example, a DataSet may describe data from a vendor that only
    covers the US. To restrict a dataset to a specific domain, define a domain attribute
    at class scope.
  id: totrans-5178
  prefs: []
  type: TYPE_NORMAL
- en: You can also define a domain-specific version of a generic DataSet by calling
    its `specialize` method with the domain of interest.
  id: totrans-5179
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5180
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in EquityPricing dataset is defined as follows:'
  id: totrans-5181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  id: totrans-5182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: 'The built-in USEquityPricing dataset is a specialization of EquityPricing.
    It is defined as:'
  id: totrans-5183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  id: totrans-5184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: 'Columns can have types other than float. A dataset containing assorted company
    metadata might be defined like this:'
  id: totrans-5185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  id: totrans-5186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: Notes
  id: totrans-5187
  prefs: []
  type: TYPE_NORMAL
- en: Because numpy has no native support for integers with missing values, users
    are strongly encouraged to use floats for any data that’s semantically numeric.
    Doing so enables the use of NaN as a natural missing value, which has useful propagation
    semantics.
  id: totrans-5188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  id: totrans-5189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: Look up a column by name.
  id: totrans-5190
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5191
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to look up.'
  id: totrans-5192
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5193
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column with the given name.'
  id: totrans-5194
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5195
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-5196
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-5197
  prefs: []
  type: TYPE_NORMAL
- en: '[**AttributeError**](https://docs.python.org/3/library/exceptions.html#AttributeError
    "(in Python v3.11)") – If no column with the given name exists.'
  id: totrans-5198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  id: totrans-5199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE766]'
- en: An abstract column of data, not yet associated with a dataset.
  id: totrans-5200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  id: totrans-5201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: Bind a Column object to its name.
  id: totrans-5202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  id: totrans-5203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: A column of data that’s been concretely bound to a particular dataset.
  id: totrans-5204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  id: totrans-5205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: The dtype of data produced when this column is loaded.
  id: totrans-5206
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5207
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.dtype](https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype
    "(in NumPy v1.25)")'
  id: totrans-5208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  id: totrans-5209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE770]'
- en: A [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter"), [`Factor`](#zipline.pipeline.Factor
    "zipline.pipeline.Factor"), or `Classifier` computing the most recently known
    value of this column on each date. See `zipline.pipeline.mixins.LatestMixin` for
    more details.
  id: totrans-5210
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5211
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.LoadableTerm
  id: totrans-5212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  id: totrans-5213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE771]'
- en: The dataset to which this column is bound.
  id: totrans-5214
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5215
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  id: totrans-5216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  id: totrans-5217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE772]'
- en: The name of this column.
  id: totrans-5218
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5219
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-5220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE773]'
  id: totrans-5221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE773]'
- en: Extra metadata associated with this column.
  id: totrans-5222
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5223
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-5224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE774]'
  id: totrans-5225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE774]'
- en: Whether or not this column produces currency-denominated data.
  id: totrans-5226
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-5227
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  id: totrans-5228
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5229
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class are dynamically created upon access to attributes of
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet"). For
    example, [`close`](#zipline.pipeline.data.EquityPricing.close "zipline.pipeline.data.EquityPricing.close")
    is an instance of this class. Pipeline API users should never construct instances
    of this directly.
  id: totrans-5230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  id: totrans-5231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE775]'
- en: Whether or not this column produces currency-denominated data.
  id: totrans-5232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  id: totrans-5233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: Specification for currency conversions applied for this term.
  id: totrans-5234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  id: totrans-5235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: The dataset to which this column is bound.
  id: totrans-5236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  id: totrans-5237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: Construct a currency-converted version of this column.
  id: totrans-5238
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5239
  prefs: []
  type: TYPE_NORMAL
- en: '**currency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.currency.Currency*) – Currency into which to convert
    this column’s data.'
  id: totrans-5240
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5241
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column producing the same data as `self`, but currency-converted
    into `currency`.'
  id: totrans-5242
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5243
  prefs: []
  type: TYPE_NORMAL
- en: '[BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  id: totrans-5244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  id: totrans-5245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: Short repr to use when rendering Pipeline graphs.
  id: totrans-5246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE780]'
  id: totrans-5247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE780]'
- en: A copy of the metadata for this column.
  id: totrans-5248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE781]'
  id: totrans-5249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE781]'
- en: The name of this column.
  id: totrans-5250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE782]'
  id: totrans-5251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE782]'
- en: The fully-qualified name of this column.
  id: totrans-5252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE783]'
  id: totrans-5253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE783]'
- en: Short repr used to render in recursive contexts.
  id: totrans-5254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE784]'
  id: totrans-5255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE784]'
- en: Specialize `self` to a concrete domain.
  id: totrans-5256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  id: totrans-5257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE785]'
- en: Unspecialize a column to its generic form.
  id: totrans-5258
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `column.specialize(GENERIC)`.
  id: totrans-5259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  id: totrans-5260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE786]'
- en: Base class for Pipeline dataset families.
  id: totrans-5261
  prefs: []
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  id: totrans-5262
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  id: totrans-5263
  prefs: []
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  id: totrans-5264
  prefs: []
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  id: totrans-5265
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    in a pipeline expression, one must choose a specific value for each of the extra
    dimensions using the [`slice()`](#zipline.pipeline.data.DataSetFamily.slice "zipline.pipeline.data.DataSetFamily.slice")
    method. For example, given a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  id: totrans-5266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  id: totrans-5267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: 'This dataset might represent a table with the following columns:'
  id: totrans-5268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  id: totrans-5269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  id: totrans-5270
  prefs: []
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    can be converted to a regular [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    with:'
  id: totrans-5271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE789]'
  id: totrans-5272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE789]'
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  id: totrans-5273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE790]'
  id: totrans-5274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE790]'
- en: Take a slice of a DataSetFamily to produce a dataset indexed by asset and date.
  id: totrans-5275
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5276
  prefs: []
  type: TYPE_NORMAL
- en: '***args** –'
  id: totrans-5277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – The coordinates to fix along each extra dimension.'
  id: totrans-5278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5279
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset** – A regular pipeline dataset indexed by asset and date.'
  id: totrans-5280
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5281
  prefs: []
  type: TYPE_NORMAL
- en: '[DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  id: totrans-5282
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5283
  prefs: []
  type: TYPE_NORMAL
- en: The extra dimensions coords used to produce the result are available under the
    `extra_coords` attribute.
  id: totrans-5284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE791]'
  id: totrans-5285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE791]'
- en: '[`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    containing daily trading prices and volumes.'
  id: totrans-5286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE792]'
  id: totrans-5287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE792]'
- en: '[PRE793]'
  id: totrans-5288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE793]'
- en: '[PRE794]'
  id: totrans-5289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE794]'
- en: '[PRE795]'
  id: totrans-5290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE795]'
- en: '[PRE796]'
  id: totrans-5291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE796]'
- en: Built-in Factors
  id: totrans-5292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  id: totrans-5293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE797]'
  id: totrans-5294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE797]'
- en: Average Daily Dollar Volume
  id: totrans-5295
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-5296
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE798]'
  id: totrans-5298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE798]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE799]'
  id: totrans-5300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE799]'
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  id: totrans-5301
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-5302
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5303
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  id: totrans-5304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  id: totrans-5305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  id: totrans-5306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE800]'
  id: totrans-5307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE800]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE801]'
  id: totrans-5309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE801]'
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  id: totrans-5310
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  id: totrans-5311
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  id: totrans-5312
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-5313
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-5314
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  id: totrans-5315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE802]'
  id: totrans-5316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE802]'
- en: '[PRE803]'
  id: totrans-5317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE803]'
- en: '[PRE804]'
  id: totrans-5318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE804]'
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  id: totrans-5319
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  id: totrans-5320
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  id: totrans-5321
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  id: totrans-5322
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-5323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  id: totrans-5324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE805]'
- en: '[PRE806]'
  id: totrans-5325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE806]'
- en: Calculates daily percent change in close price.
  id: totrans-5326
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-5327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE807]'
  id: totrans-5328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: Exponentially Weighted Moving Average
  id: totrans-5329
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5330
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5331
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5332
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-5333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-5334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-5335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-5336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-5337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE808]'
  id: totrans-5338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE808]'
- en: Notes
  id: totrans-5339
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  id: totrans-5340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5341
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  id: totrans-5342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE809]'
  id: totrans-5343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE809]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE810]'
  id: totrans-5345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE810]'
- en: Exponentially Weighted Moving Standard Deviation
  id: totrans-5346
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5347
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5348
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5349
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-5350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-5351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-5352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-5353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-5354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE811]'
  id: totrans-5355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE811]'
- en: Notes
  id: totrans-5356
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  id: totrans-5357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5358
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  id: totrans-5359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE812]'
  id: totrans-5360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE812]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE813]'
  id: totrans-5362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE813]'
- en: Factor producing the most recently-known value of inputs[0] on each day.
  id: totrans-5363
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  id: totrans-5364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE814]'
  id: totrans-5365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE814]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE815]'
  id: totrans-5367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE815]'
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  id: totrans-5368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE816]'
  id: totrans-5369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE816]'
- en: Max Drawdown
  id: totrans-5370
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5371
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5372
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE817]'
  id: totrans-5373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE817]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE818]'
  id: totrans-5375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE818]'
- en: Calculates the percent change in close price over the given window_length.
  id: totrans-5376
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-5377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE819]'
  id: totrans-5378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE819]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  id: totrans-5380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE820]'
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-5381
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5382
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-5383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-5384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-5385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-5386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5387
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  id: totrans-5388
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5389
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  id: totrans-5390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE821]'
  id: totrans-5391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE821]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  id: totrans-5393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE822]'
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-5394
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5395
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-5396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-5397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-5398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-5399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5400
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-5401
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5402
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  id: totrans-5403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE823]'
  id: totrans-5404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE823]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE824]'
  id: totrans-5406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE824]'
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  id: totrans-5407
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5408
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  id: totrans-5409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  id: totrans-5411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  id: totrans-5412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5413
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  id: totrans-5414
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  id: totrans-5415
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  id: totrans-5416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  id: totrans-5417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  id: totrans-5418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  id: totrans-5419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  id: totrans-5420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  id: totrans-5421
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5422
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-5423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  id: totrans-5424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE825]'
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  id: totrans-5425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE826]'
  id: totrans-5426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE826]'
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-5427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  id: totrans-5428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE827]'
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-5429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  id: totrans-5430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE828]'
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  id: totrans-5431
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  id: totrans-5432
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5433
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-5434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE829]'
  id: totrans-5435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE829]'
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  id: totrans-5436
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  id: totrans-5437
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5438
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-5439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-5441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-5442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5443
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-5444
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5445
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-5446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE830]'
  id: totrans-5447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE830]'
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  id: totrans-5448
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE831]'
  id: totrans-5449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE831]'
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  id: totrans-5450
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE832]'
  id: totrans-5451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE832]'
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  id: totrans-5452
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5453
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-5454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE833]'
  id: totrans-5455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE833]'
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  id: totrans-5456
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5457
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-5458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-5460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-5461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5462
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-5463
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5464
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-5465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE834]'
  id: totrans-5466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE834]'
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  id: totrans-5467
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5468
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  id: totrans-5469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  id: totrans-5470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  id: totrans-5471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE835]'
  id: totrans-5472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE835]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE836]'
  id: totrans-5474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE836]'
- en: '[PRE837]'
  id: totrans-5475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE837]'
- en: Short repr to use when rendering Pipeline graphs.
  id: totrans-5476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE838]'
  id: totrans-5477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE838]'
- en: Get the target of the beta calculation.
  id: totrans-5478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE839]'
  id: totrans-5479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE839]'
- en: Relative Strength Index
  id: totrans-5480
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-5481
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  id: totrans-5482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE840]'
  id: totrans-5483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE840]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  id: totrans-5485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE841]'
- en: Average Value of an arbitrary column
  id: totrans-5486
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  id: totrans-5487
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  id: totrans-5488
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  id: totrans-5489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE842]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5490
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  id: totrans-5491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE843]'
- en: Volume Weighted Average Price
  id: totrans-5492
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-5493
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  id: totrans-5495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE844]'
- en: Helper for VWAP-like computations.
  id: totrans-5496
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5497
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  id: totrans-5499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE845]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  id: totrans-5501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE846]'
- en: Calculates the percent change over the given window_length.
  id: totrans-5502
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5503
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5504
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5505
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  id: totrans-5506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  id: totrans-5507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE847]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE848]'
  id: totrans-5509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE848]'
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  id: totrans-5510
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5511
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  id: totrans-5512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE849]'
  id: totrans-5513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE849]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5514
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  id: totrans-5515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE850]'
  id: totrans-5516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE850]'
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  id: totrans-5517
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5518
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5519
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE851]'
  id: totrans-5520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE851]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5521
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  id: totrans-5522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE852]'
- en: Pipeline filter indicating input term has data for a given window.
  id: totrans-5523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE853]'
  id: totrans-5524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE853]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5525
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE854]'
  id: totrans-5526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE854]'
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  id: totrans-5527
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5528
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5529
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE855]'
  id: totrans-5530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE855]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5531
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  id: totrans-5532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE856]'
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  id: totrans-5533
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5534
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5535
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  id: totrans-5536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE857]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5537
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE858]'
  id: totrans-5538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE858]'
- en: A Filter that computes to True only for the given asset.
  id: totrans-5539
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE859]'
  id: totrans-5540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE859]'
- en: A short repr to use when rendering GraphViz graphs.
  id: totrans-5541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  id: totrans-5542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE860]'
- en: A Filter that computes True for a specific set of predetermined assets.
  id: totrans-5543
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  id: totrans-5544
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5545
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  id: totrans-5546
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE861]'
  id: totrans-5547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE861]'
- en: A Filter that computes True for a specific set of predetermined sids.
  id: totrans-5548
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  id: totrans-5549
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5550
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  id: totrans-5551
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  id: totrans-5552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  id: totrans-5553
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  id: totrans-5554
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  id: totrans-5555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  id: totrans-5556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  id: totrans-5557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  id: totrans-5558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  id: totrans-5559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  id: totrans-5560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  id: totrans-5561
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  id: totrans-5562
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  id: totrans-5563
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  id: totrans-5564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE862]'
  id: totrans-5565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE862]'
- en: '[PRE863]'
  id: totrans-5566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE863]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-5567
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5568
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-5569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-5570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-5571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-5572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5573
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-5574
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-5575
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-5576
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5577
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-5578
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE864]'
  id: totrans-5579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE864]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-5580
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-5581
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5582
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-5583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-5584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-5585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-5586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-5587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5588
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-5589
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-5590
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-5591
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5592
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-5593
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5594
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-5595
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE865]'
  id: totrans-5596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE865]'
- en: PipelineEngine class that computes each term independently.
  id: totrans-5597
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5598
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  id: totrans-5599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  id: totrans-5600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  id: totrans-5601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  id: totrans-5602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5603
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  id: totrans-5604
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  id: totrans-5605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE866]'
- en: '[PRE867]'
  id: totrans-5606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE867]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-5607
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-5608
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5609
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-5610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-5611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-5612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-5613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-5614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5615
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-5616
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-5617
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-5618
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5619
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-5620
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5621
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-5622
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE868]'
  id: totrans-5623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE868]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-5624
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5625
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-5626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-5627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-5628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-5629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5630
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-5631
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-5632
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-5633
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5634
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-5635
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE869]'
  id: totrans-5636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE869]'
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  id: totrans-5637
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5638
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  id: totrans-5639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  id: totrans-5640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  id: totrans-5641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  id: totrans-5642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  id: totrans-5643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5644
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  id: totrans-5645
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5646
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  id: totrans-5647
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  id: totrans-5648
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  id: totrans-5649
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE870]'
  id: totrans-5650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE870]'
- en: Interface for PipelineLoaders.
  id: totrans-5651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE871]'
  id: totrans-5652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE871]'
- en: Load data for `columns` as AdjustedArrays.
  id: totrans-5653
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5654
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  id: totrans-5655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  id: totrans-5656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  id: totrans-5657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  id: totrans-5658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  id: totrans-5659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-5660
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  id: totrans-5661
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-5662
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  id: totrans-5663
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE872]'
  id: totrans-5664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE872]'
- en: '[PRE873]'
  id: totrans-5665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE873]'
- en: A PipelineLoader that reads its input from DataFrames.
  id: totrans-5666
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  id: totrans-5667
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5668
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  id: totrans-5669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  id: totrans-5670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  id: totrans-5671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  id: totrans-5672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  id: totrans-5673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  id: totrans-5674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE874]'
  id: totrans-5675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE874]'
- en: '[PRE875]'
  id: totrans-5676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE875]'
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  id: totrans-5677
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  id: totrans-5678
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE876]'
  id: totrans-5679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE876]'
- en: Load data from our stored baseline.
  id: totrans-5680
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE877]'
  id: totrans-5681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE877]'
- en: A PipelineLoader for loading daily OHLCV data.
  id: totrans-5682
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5683
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  id: totrans-5684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  id: totrans-5685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  id: totrans-5686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE878]'
  id: totrans-5687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE878]'
- en: '[PRE879]'
  id: totrans-5688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE879]'
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  id: totrans-5689
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE880]'
  id: totrans-5690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE880]'
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  id: totrans-5691
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  id: totrans-5692
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5693
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  id: totrans-5694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  id: totrans-5695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  id: totrans-5696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-5697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  id: totrans-5698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-5699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  id: totrans-5700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-5701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  id: totrans-5702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  id: totrans-5703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  id: totrans-5704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE881]'
  id: totrans-5705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE881]'
- en: '[PRE882]'
  id: totrans-5706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE882]'
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  id: totrans-5707
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5708
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  id: totrans-5709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  id: totrans-5710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-5711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  id: totrans-5712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-5713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  id: totrans-5714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-5715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  id: totrans-5716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  id: totrans-5717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  id: totrans-5718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  id: totrans-5719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  id: totrans-5720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  id: totrans-5721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE883]'
  id: totrans-5722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE883]'
- en: Built-in Factors
  id: totrans-5723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  id: totrans-5724
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE884]'
  id: totrans-5725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE884]'
- en: Average Daily Dollar Volume
  id: totrans-5726
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-5727
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5728
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE885]'
  id: totrans-5729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE885]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5730
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE886]'
  id: totrans-5731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE886]'
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  id: totrans-5732
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-5733
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5734
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  id: totrans-5735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  id: totrans-5736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  id: totrans-5737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE887]'
  id: totrans-5738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE887]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5739
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE888]'
  id: totrans-5740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE888]'
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  id: totrans-5741
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  id: totrans-5742
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  id: totrans-5743
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-5744
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-5745
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  id: totrans-5746
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE889]'
  id: totrans-5747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE889]'
- en: '[PRE890]'
  id: totrans-5748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE890]'
- en: '[PRE891]'
  id: totrans-5749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE891]'
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  id: totrans-5750
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  id: totrans-5751
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  id: totrans-5752
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  id: totrans-5753
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  id: totrans-5754
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE892]'
  id: totrans-5755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE892]'
- en: '[PRE893]'
  id: totrans-5756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE893]'
- en: Calculates daily percent change in close price.
  id: totrans-5757
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-5758
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE894]'
  id: totrans-5759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE894]'
- en: Exponentially Weighted Moving Average
  id: totrans-5760
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5761
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5762
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5763
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-5764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-5765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-5766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-5767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-5768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE895]'
  id: totrans-5769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE895]'
- en: Notes
  id: totrans-5770
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  id: totrans-5771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5772
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  id: totrans-5773
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE896]'
  id: totrans-5774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE896]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5775
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE897]'
  id: totrans-5776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE897]'
- en: Exponentially Weighted Moving Standard Deviation
  id: totrans-5777
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5778
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5779
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5780
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  id: totrans-5781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  id: totrans-5782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  id: totrans-5783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  id: totrans-5784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  id: totrans-5785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE898]'
  id: totrans-5786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE898]'
- en: Notes
  id: totrans-5787
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  id: totrans-5788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5789
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  id: totrans-5790
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE899]'
  id: totrans-5791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE899]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5792
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE900]'
  id: totrans-5793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE900]'
- en: Factor producing the most recently-known value of inputs[0] on each day.
  id: totrans-5794
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  id: totrans-5795
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE901]'
  id: totrans-5796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE901]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5797
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE902]'
  id: totrans-5798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE902]'
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  id: totrans-5799
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE903]'
  id: totrans-5800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE903]'
- en: Max Drawdown
  id: totrans-5801
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5802
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5803
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE904]'
  id: totrans-5804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE904]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5805
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE905]'
  id: totrans-5806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE905]'
- en: Calculates the percent change in close price over the given window_length.
  id: totrans-5807
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  id: totrans-5808
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE906]'
  id: totrans-5809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE906]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5810
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE907]'
  id: totrans-5811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE907]'
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-5812
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5813
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-5814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-5815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-5816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-5817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5818
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  id: totrans-5819
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5820
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  id: totrans-5821
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE908]'
  id: totrans-5822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE908]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5823
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE909]'
  id: totrans-5824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE909]'
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  id: totrans-5825
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5826
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  id: totrans-5827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  id: totrans-5828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  id: totrans-5829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  id: totrans-5830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-5831
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-5832
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5833
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  id: totrans-5834
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE910]'
  id: totrans-5835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE910]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5836
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE911]'
  id: totrans-5837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE911]'
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  id: totrans-5838
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5839
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  id: totrans-5840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  id: totrans-5842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  id: totrans-5843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5844
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  id: totrans-5845
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  id: totrans-5846
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  id: totrans-5847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  id: totrans-5848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  id: totrans-5849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  id: totrans-5850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  id: totrans-5851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  id: totrans-5852
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5853
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-5854
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE912]'
  id: totrans-5855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE912]'
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  id: totrans-5856
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE913]'
  id: totrans-5857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE913]'
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-5858
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE914]'
  id: totrans-5859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE914]'
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  id: totrans-5860
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE915]'
  id: totrans-5861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE915]'
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  id: totrans-5862
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  id: totrans-5863
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5864
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  id: totrans-5865
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE916]'
  id: totrans-5866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE916]'
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  id: totrans-5867
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  id: totrans-5868
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5869
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-5870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-5872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-5873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5874
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-5875
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-5876
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  id: totrans-5877
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE917]'
  id: totrans-5878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE917]'
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  id: totrans-5879
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE918]'
  id: totrans-5880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE918]'
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  id: totrans-5881
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE919]'
  id: totrans-5882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE919]'
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  id: totrans-5883
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5884
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-5885
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE920]'
  id: totrans-5886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE920]'
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  id: totrans-5887
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5888
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  id: totrans-5889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  id: totrans-5890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  id: totrans-5891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  id: totrans-5892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5893
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  id: totrans-5894
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-5895
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  id: totrans-5896
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE921]'
  id: totrans-5897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE921]'
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  id: totrans-5898
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5899
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  id: totrans-5900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  id: totrans-5901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  id: totrans-5902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE922]'
  id: totrans-5903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE922]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5904
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE923]'
  id: totrans-5905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE923]'
- en: '[PRE924]'
  id: totrans-5906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE924]'
- en: Short repr to use when rendering Pipeline graphs.
  id: totrans-5907
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE925]'
  id: totrans-5908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE925]'
- en: Get the target of the beta calculation.
  id: totrans-5909
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE926]'
  id: totrans-5910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE926]'
- en: Relative Strength Index
  id: totrans-5911
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  id: totrans-5912
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  id: totrans-5913
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE927]'
  id: totrans-5914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE927]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5915
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE928]'
  id: totrans-5916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE928]'
- en: Average Value of an arbitrary column
  id: totrans-5917
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  id: totrans-5918
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  id: totrans-5919
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE929]'
  id: totrans-5920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE929]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5921
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE930]'
  id: totrans-5922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE930]'
- en: Volume Weighted Average Price
  id: totrans-5923
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  id: totrans-5924
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5925
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE931]'
  id: totrans-5926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE931]'
- en: Helper for VWAP-like computations.
  id: totrans-5927
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5928
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5929
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE932]'
  id: totrans-5930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE932]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5931
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE933]'
  id: totrans-5932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE933]'
- en: Calculates the percent change over the given window_length.
  id: totrans-5933
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5934
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5935
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5936
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  id: totrans-5937
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE934]'
  id: totrans-5938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE934]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5939
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE935]'
  id: totrans-5940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE935]'
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  id: totrans-5941
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5942
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  id: totrans-5943
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE936]'
  id: totrans-5944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE936]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5945
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  id: totrans-5946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE937]'
  id: totrans-5947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE937]'
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  id: totrans-5948
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5949
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5950
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE938]'
  id: totrans-5951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE938]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5952
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE939]'
  id: totrans-5953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE939]'
- en: Pipeline filter indicating input term has data for a given window.
  id: totrans-5954
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE940]'
  id: totrans-5955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE940]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5956
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE941]'
  id: totrans-5957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE941]'
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  id: totrans-5958
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5959
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5960
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE942]'
  id: totrans-5961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE942]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5962
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE943]'
  id: totrans-5963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE943]'
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  id: totrans-5964
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  id: totrans-5965
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  id: totrans-5966
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE944]'
  id: totrans-5967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE944]'
- en: Override this method with a function that writes a value into out.
  id: totrans-5968
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE945]'
  id: totrans-5969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE945]'
- en: A Filter that computes to True only for the given asset.
  id: totrans-5970
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE946]'
  id: totrans-5971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE946]'
- en: A short repr to use when rendering GraphViz graphs.
  id: totrans-5972
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE947]'
  id: totrans-5973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE947]'
- en: A Filter that computes True for a specific set of predetermined assets.
  id: totrans-5974
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  id: totrans-5975
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5976
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  id: totrans-5977
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE948]'
  id: totrans-5978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE948]'
- en: A Filter that computes True for a specific set of predetermined sids.
  id: totrans-5979
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  id: totrans-5980
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5981
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  id: totrans-5982
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  id: totrans-5983
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  id: totrans-5984
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  id: totrans-5985
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  id: totrans-5986
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  id: totrans-5987
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  id: totrans-5988
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  id: totrans-5989
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  id: totrans-5990
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  id: totrans-5991
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  id: totrans-5992
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  id: totrans-5993
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  id: totrans-5994
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  id: totrans-5995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE949]'
  id: totrans-5996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE949]'
- en: '[PRE950]'
  id: totrans-5997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE950]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-5998
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-5999
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-6000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-6001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-6002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-6003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6004
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-6005
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-6006
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-6007
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6008
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-6009
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE951]'
  id: totrans-6010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE951]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-6011
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-6012
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6013
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-6014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-6015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-6016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-6017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-6018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6019
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-6020
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-6021
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-6022
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6023
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-6024
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-6025
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-6026
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE952]'
  id: totrans-6027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE952]'
- en: PipelineEngine class that computes each term independently.
  id: totrans-6028
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6029
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  id: totrans-6030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  id: totrans-6031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  id: totrans-6032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  id: totrans-6033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-6034
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  id: totrans-6035
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE953]'
  id: totrans-6036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE953]'
- en: '[PRE954]'
  id: totrans-6037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE954]'
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  id: totrans-6038
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  id: totrans-6039
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6040
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-6041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  id: totrans-6042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  id: totrans-6043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  id: totrans-6044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-6045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6046
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-6047
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-6048
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-6049
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6050
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-6051
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-6052
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  id: totrans-6053
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE955]'
  id: totrans-6054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE955]'
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  id: totrans-6055
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6056
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  id: totrans-6057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  id: totrans-6058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  id: totrans-6059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  id: totrans-6060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6061
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  id: totrans-6062
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  id: totrans-6063
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  id: totrans-6064
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6065
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-6066
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE956]'
  id: totrans-6067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE956]'
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  id: totrans-6068
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6069
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  id: totrans-6070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  id: totrans-6071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  id: totrans-6072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  id: totrans-6073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  id: totrans-6074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6075
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  id: totrans-6076
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6077
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  id: totrans-6078
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  id: totrans-6079
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  id: totrans-6080
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE957]'
  id: totrans-6081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE957]'
- en: Interface for PipelineLoaders.
  id: totrans-6082
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE958]'
  id: totrans-6083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE958]'
- en: Load data for `columns` as AdjustedArrays.
  id: totrans-6084
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6085
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  id: totrans-6086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  id: totrans-6087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  id: totrans-6088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  id: totrans-6089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  id: totrans-6090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6091
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  id: totrans-6092
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6093
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  id: totrans-6094
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE959]'
  id: totrans-6095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE959]'
- en: '[PRE960]'
  id: totrans-6096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE960]'
- en: A PipelineLoader that reads its input from DataFrames.
  id: totrans-6097
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  id: totrans-6098
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6099
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  id: totrans-6100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  id: totrans-6101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  id: totrans-6102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  id: totrans-6103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  id: totrans-6104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  id: totrans-6105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE961]'
  id: totrans-6106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE961]'
- en: '[PRE962]'
  id: totrans-6107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE962]'
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  id: totrans-6108
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  id: totrans-6109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE963]'
  id: totrans-6110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE963]'
- en: Load data from our stored baseline.
  id: totrans-6111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE964]'
  id: totrans-6112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE964]'
- en: A PipelineLoader for loading daily OHLCV data.
  id: totrans-6113
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6114
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  id: totrans-6115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  id: totrans-6116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  id: totrans-6117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE965]'
  id: totrans-6118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE965]'
- en: '[PRE966]'
  id: totrans-6119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE966]'
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  id: totrans-6120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE967]'
  id: totrans-6121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE967]'
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  id: totrans-6122
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  id: totrans-6123
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6124
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  id: totrans-6125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  id: totrans-6126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  id: totrans-6127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-6128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  id: totrans-6129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-6130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  id: totrans-6131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-6132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  id: totrans-6133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  id: totrans-6134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  id: totrans-6135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE968]'
  id: totrans-6136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE968]'
- en: '[PRE969]'
  id: totrans-6137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE969]'
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  id: totrans-6138
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6139
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  id: totrans-6140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  id: totrans-6141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  id: totrans-6142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  id: totrans-6143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  id: totrans-6144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  id: totrans-6145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  id: totrans-6146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  id: totrans-6147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  id: totrans-6148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  id: totrans-6149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  id: totrans-6150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  id: totrans-6151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  id: totrans-6152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE970]'
  id: totrans-6153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE970]'
- en: Exchange and Asset Metadata
  id: totrans-6154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE971]'
  id: totrans-6155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE971]'
- en: An exchange where assets are traded.
  id: totrans-6156
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6157
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *None*) – The full name of the exchange, for example ‘NEW
    YORK STOCK EXCHANGE’ or ‘NASDAQ GLOBAL MARKET’.'
  id: totrans-6158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**canonical_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The canonical name of the exchange, for example ‘NYSE’
    or ‘NASDAQ’. If None this will be the same as the name.'
  id: totrans-6159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The country code where the exchange is located.'
  id: totrans-6160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE972]'
  id: totrans-6161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE972]'
- en: The full name of the exchange, for example ‘NEW YORK STOCK EXCHANGE’ or ‘NASDAQ
    GLOBAL MARKET’.
  id: totrans-6162
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6163
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  id: totrans-6164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE973]'
  id: totrans-6165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE973]'
- en: The canonical name of the exchange, for example ‘NYSE’ or ‘NASDAQ’. If None
    this will be the same as the name.
  id: totrans-6166
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6167
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE974]'
  id: totrans-6169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE974]'
- en: The country code where the exchange is located.
  id: totrans-6170
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6171
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE975]'
  id: totrans-6173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE975]'
- en: The trading calendar the exchange uses.
  id: totrans-6174
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6175
  prefs: []
  type: TYPE_NORMAL
- en: TradingCalendar
  id: totrans-6176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE976]'
  id: totrans-6177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE976]'
- en: The trading calendar that this exchange uses.
  id: totrans-6178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE977]'
  id: totrans-6179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE977]'
- en: Base class for entities that can be owned by a trading algorithm.
  id: totrans-6180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE978]'
  id: totrans-6181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE978]'
- en: Persistent unique identifier assigned to the asset.
  id: totrans-6182
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6183
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-6184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE979]'
  id: totrans-6185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE979]'
- en: Most recent ticker under which the asset traded. This field can change without
    warning if the asset changes tickers. Use `sid` if you need a persistent identifier.
  id: totrans-6186
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6187
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE980]'
  id: totrans-6189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE980]'
- en: Full name of the asset.
  id: totrans-6190
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6191
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE981]'
  id: totrans-6193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE981]'
- en: Canonical short name of the exchange on which the asset trades (e.g., ‘NYSE’).
  id: totrans-6194
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6195
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE982]'
  id: totrans-6197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE982]'
- en: Full name of the exchange on which the asset trades (e.g., ‘NEW YORK STOCK EXCHANGE’).
  id: totrans-6198
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6199
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE983]'
  id: totrans-6201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE983]'
- en: Information about the exchange this asset is listed on.
  id: totrans-6202
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6203
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.ExchangeInfo](#zipline.assets.ExchangeInfo "zipline.assets.ExchangeInfo")'
  id: totrans-6204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE984]'
  id: totrans-6205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE984]'
- en: Two character code indicating the country in which the asset trades.
  id: totrans-6206
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6207
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE985]'
  id: totrans-6209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE985]'
- en: Date on which the asset first traded.
  id: totrans-6210
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6211
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-6212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE986]'
  id: totrans-6213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE986]'
- en: Last date on which the asset traded. On Quantopian, this value is set to the
    current (real time) date for assets that are still trading.
  id: totrans-6214
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6215
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-6216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE987]'
  id: totrans-6217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE987]'
- en: Minimum amount that the price can change for this asset.
  id: totrans-6218
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6219
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-6220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE988]'
  id: totrans-6221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE988]'
- en: Date on which positions in this asset will be automatically liquidated to cash
    during a simulation. By default, this is three days after `end_date`.
  id: totrans-6222
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6223
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-6224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE989]'
  id: totrans-6225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE989]'
- en: Build an Asset instance from a dict.
  id: totrans-6226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE990]'
  id: totrans-6227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE990]'
- en: Returns whether the asset is alive at the given dt.
  id: totrans-6228
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6229
  prefs: []
  type: TYPE_NORMAL
- en: '**session_label** (*pd.Timestamp*) – The desired session label to check. (midnight
    UTC)'
  id: totrans-6230
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6231
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  id: totrans-6232
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6233
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset is alive at the given dt.
  id: totrans-6234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE991]'
  id: totrans-6235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE991]'
- en: 'Parameters:'
  id: totrans-6236
  prefs: []
  type: TYPE_NORMAL
- en: '**dt_minute** (*pd.Timestamp* *(**UTC**,* *tz-aware**)*) – The minute to check.'
  id: totrans-6237
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6238
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  id: totrans-6239
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6240
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset’s exchange is open at the given minute.
  id: totrans-6241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE992]'
  id: totrans-6242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE992]'
- en: Convert to a python dict containing all attributes of the asset.
  id: totrans-6243
  prefs: []
  type: TYPE_NORMAL
- en: This is often useful for debugging.
  id: totrans-6244
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6245
  prefs: []
  type: TYPE_NORMAL
- en: '**as_dict**'
  id: totrans-6246
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6247
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-6248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE993]'
  id: totrans-6249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE993]'
- en: Asset subclass representing partial ownership of a company, trust, or partnership.
  id: totrans-6250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE994]'
  id: totrans-6251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE994]'
- en: Asset subclass representing ownership of a futures contract.
  id: totrans-6252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE995]'
  id: totrans-6253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE995]'
- en: Convert to a python dict.
  id: totrans-6254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE996]'
  id: totrans-6255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE996]'
- en: ABC for types that are convertible to integer-representations of Assets.
  id: totrans-6256
  prefs: []
  type: TYPE_NORMAL
- en: Includes Asset, str, and Integral
  id: totrans-6257
  prefs: []
  type: TYPE_NORMAL
- en: Trading Calendar API
  id: totrans-6258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The events that generate the timeline of the algorithm execution adhere to a
    given `TradingCalendar`.
  id: totrans-6259
  prefs: []
  type: TYPE_NORMAL
- en: Data API
  id: totrans-6260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writers
  id: totrans-6261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE997]'
  id: totrans-6262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE997]'
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  id: totrans-6263
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6264
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  id: totrans-6265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  id: totrans-6266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-6267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-6268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-6269
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  id: totrans-6270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE998]'
  id: totrans-6271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE998]'
- en: 'Parameters:'
  id: totrans-6272
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  id: totrans-6273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  id: totrans-6274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  id: totrans-6275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  id: totrans-6276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6277
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  id: totrans-6278
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6279
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  id: totrans-6280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE999]'
  id: totrans-6281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE999]'
- en: Read CSVs as DataFrames from our asset map.
  id: totrans-6282
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6283
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  id: totrans-6284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  id: totrans-6285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  id: totrans-6286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1000]'
  id: totrans-6287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1000]'
- en: Writer for data to be read by SQLiteAdjustmentReader
  id: totrans-6288
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6289
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  id: totrans-6290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  id: totrans-6291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  id: totrans-6292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-6293
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-6294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1001]'
  id: totrans-6295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1001]'
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  id: totrans-6296
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6297
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  id: totrans-6298
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6299
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  id: totrans-6300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1002]'
  id: totrans-6301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1002]'
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  id: totrans-6302
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6303
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-6304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  id: totrans-6305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-6306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-6307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-6308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  id: totrans-6309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-6310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-6311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-6312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  id: totrans-6313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-6314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-6315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-6316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  id: totrans-6317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-6318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-6319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-6320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  id: totrans-6321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-6322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-6323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-6324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-6325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-6326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-6327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-6328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-6329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-6330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-6331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  id: totrans-6332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  id: totrans-6333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  id: totrans-6334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-6335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  id: totrans-6336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-6337
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6338
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-6339
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6340
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-6341
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6342
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-6343
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6344
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-6345
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6346
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-6347
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6348
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-6349
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6350
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-6351
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6352
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-6353
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6354
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-6355
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6356
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  id: totrans-6357
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6358
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  id: totrans-6359
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6360
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-6361
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6362
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  id: totrans-6363
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-6364
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-6365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1003]'
  id: totrans-6366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1003]'
- en: Write both dividend payouts and the derived price adjustment ratios.
  id: totrans-6367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1004]'
  id: totrans-6368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1004]'
- en: Write dividend payout data to SQLite table dividend_payouts.
  id: totrans-6369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1005]'
  id: totrans-6370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1005]'
- en: Class used to write data to an assets db.
  id: totrans-6371
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6372
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  id: totrans-6373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1006]'
  id: totrans-6374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1006]'
- en: Connect to database and create tables.
  id: totrans-6375
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6376
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  id: totrans-6377
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6378
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  id: totrans-6379
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6380
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  id: totrans-6381
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1007]'
  id: totrans-6382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1007]'
- en: Write asset metadata to a sqlite database.
  id: totrans-6383
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6384
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-6386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-6387
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6388
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-6389
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6390
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-6391
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6392
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-6393
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6394
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-6395
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6396
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-6397
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6398
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-6399
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6400
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-6401
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6402
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-6403
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6404
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-6405
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6406
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-6407
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6408
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-6409
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6410
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6411
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6412
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-6413
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-6414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-6416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-6417
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6418
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-6419
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6420
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-6421
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6422
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-6423
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6424
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-6425
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6426
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-6427
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6428
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-6429
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6430
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-6431
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6432
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-6433
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6434
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-6435
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6436
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-6437
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6438
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-6439
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6440
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6441
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6442
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-6443
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6444
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-6445
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6446
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-6447
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6448
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-6449
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6450
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-6451
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6452
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-6453
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6454
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-6455
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6456
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-6457
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6458
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-6459
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6460
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-6461
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6462
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-6463
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-6465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6466
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6467
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-6468
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6469
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-6470
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6471
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-6472
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6473
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-6474
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6475
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-6476
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-6478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-6479
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6480
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-6481
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6482
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-6483
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6484
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-6485
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6486
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-6487
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6488
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-6489
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6490
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-6491
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6492
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-6493
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6494
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6495
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6496
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-6497
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-6498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-6499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-6500
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  id: totrans-6501
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1008]'
  id: totrans-6502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1008]'
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  id: totrans-6503
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6504
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-6506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-6507
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6508
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-6509
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6510
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-6511
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6512
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-6513
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6514
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-6515
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6516
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-6517
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6518
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-6519
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6520
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-6521
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6522
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-6523
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6524
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-6525
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6526
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-6527
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6528
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-6529
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6530
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6531
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6532
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-6533
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-6534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-6536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-6537
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6538
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-6539
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6540
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-6541
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6542
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-6543
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6544
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-6545
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6546
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-6547
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6548
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-6549
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6550
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-6551
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6552
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-6553
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6554
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-6555
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6556
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-6557
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6558
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-6559
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6560
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6561
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6562
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-6563
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6564
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-6565
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6566
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-6567
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6568
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-6569
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6570
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-6571
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6572
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-6573
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6574
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-6575
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6576
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-6577
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6578
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-6579
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6580
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-6581
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6582
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-6583
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-6585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6586
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6587
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-6588
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6589
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-6590
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6591
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-6592
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6593
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-6594
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6595
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-6596
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-6597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-6598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-6599
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6600
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-6601
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6602
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-6603
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6604
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-6605
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6606
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-6607
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6608
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-6609
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6610
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-6611
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6612
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-6613
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6614
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-6615
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6616
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-6617
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-6618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-6619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  id: totrans-6620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1009]'
  id: totrans-6621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1009]'
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  id: totrans-6622
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6623
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  id: totrans-6624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  id: totrans-6625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1010]'
  id: totrans-6626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1010]'
- en: '[PRE1011]'
  id: totrans-6627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1011]'
- en: '[PRE1012]'
  id: totrans-6628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1012]'
- en: Map from asset_id -> index of first row in the dataset with that id.
  id: totrans-6629
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6630
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-6631
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1013]'
  id: totrans-6632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1013]'
- en: Map from asset_id -> index of last row in the dataset with that id.
  id: totrans-6633
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6634
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-6635
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1014]'
  id: totrans-6636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1014]'
- en: Map from asset_id -> calendar index of first row.
  id: totrans-6637
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6638
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-6639
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1015]'
  id: totrans-6640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1015]'
- en: Epoch ns of the first session used in this dataset.
  id: totrans-6641
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6642
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-6643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1016]'
  id: totrans-6644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1016]'
- en: Epoch ns of the last session used in this dataset.
  id: totrans-6645
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6646
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-6647
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1017]'
  id: totrans-6648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1017]'
- en: String identifier of trading calendar used (ie, “NYSE”).
  id: totrans-6649
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-6650
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-6651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1018]'
  id: totrans-6652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1018]'
- en: '[PRE1019]'
  id: totrans-6653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1019]'
- en: '[PRE1020]'
  id: totrans-6654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1020]'
- en: '[PRE1021]'
  id: totrans-6655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1021]'
- en: Notes
  id: totrans-6656
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  id: totrans-6657
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  id: totrans-6658
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  id: totrans-6659
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  id: totrans-6660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  id: totrans-6661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  id: totrans-6662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  id: totrans-6663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  id: totrans-6664
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  id: totrans-6665
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  id: totrans-6666
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-6667
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  id: totrans-6668
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1022]'
  id: totrans-6669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1022]'
- en: Get currencies in which prices are quoted for the requested sids.
  id: totrans-6670
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  id: totrans-6671
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6672
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  id: totrans-6673
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6674
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  id: totrans-6675
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6676
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  id: totrans-6677
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1023]'
  id: totrans-6678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1023]'
- en: Get the latest minute on or before `dt` in which `asset` traded.
  id: totrans-6679
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  id: totrans-6680
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6681
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  id: totrans-6682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  id: totrans-6683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6684
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  id: totrans-6685
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6686
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-6687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1024]'
  id: totrans-6688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1024]'
- en: 'Parameters:'
  id: totrans-6689
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-6690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-6691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  id: totrans-6692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6693
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  id: totrans-6694
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6695
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-6696
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1025]'
  id: totrans-6697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1025]'
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  id: totrans-6698
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1026]'
  id: totrans-6699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1026]'
- en: 'Parameters:'
  id: totrans-6700
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  id: totrans-6701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  id: totrans-6702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  id: totrans-6703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  id: totrans-6704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6705
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  id: totrans-6706
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6707
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  id: totrans-6708
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1027]'
  id: totrans-6709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1027]'
- en: 'Parameters:'
  id: totrans-6710
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-6711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-6712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6713
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  id: totrans-6714
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6715
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-6716
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1028]'
  id: totrans-6717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1028]'
- en: Loads adjustments based on corporate actions from a SQLite database.
  id: totrans-6718
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  id: totrans-6719
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6720
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  id: totrans-6721
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-6722
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  id: totrans-6723
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1029]'
  id: totrans-6724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1029]'
- en: Load collection of Adjustment objects from underlying adjustments db.
  id: totrans-6725
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6726
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  id: totrans-6727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  id: totrans-6728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  id: totrans-6729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  id: totrans-6730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  id: totrans-6731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  id: totrans-6732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6733
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  id: totrans-6734
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6735
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  id: totrans-6736
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1030]'
  id: totrans-6737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1030]'
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  id: totrans-6738
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6739
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  id: totrans-6740
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6741
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  id: totrans-6742
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6743
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  id: totrans-6744
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1031]'
  id: totrans-6745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1031]'
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  id: totrans-6746
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  id: totrans-6747
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6748
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  id: totrans-6749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  id: totrans-6750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  id: totrans-6751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  id: totrans-6752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-6753
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  id: totrans-6754
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1032]'
  id: totrans-6755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1032]'
- en: All of the sids for equities in the asset finder.
  id: totrans-6756
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1033]'
  id: totrans-6757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1033]'
- en: Return all of the sids for a given country.
  id: totrans-6758
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6759
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  id: totrans-6760
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6761
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-6762
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6763
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-6764
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1034]'
  id: totrans-6765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1034]'
- en: Return all of the sids for a given exchange_name.
  id: totrans-6766
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6767
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  id: totrans-6768
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6769
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-6770
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6771
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-6772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1035]'
  id: totrans-6773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1035]'
- en: All of the sids for futures consracts in the asset finder.
  id: totrans-6774
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1036]'
  id: totrans-6775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1036]'
- en: Get the value of a supplementary field for an asset.
  id: totrans-6776
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6777
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  id: totrans-6778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  id: totrans-6779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  id: totrans-6780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6781
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  id: totrans-6782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  id: totrans-6783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1037]'
  id: totrans-6784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1037]'
- en: Group a list of sids by asset type.
  id: totrans-6785
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6786
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-6787
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6788
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  id: totrans-6789
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6790
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  id: totrans-6791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1038]'
  id: totrans-6792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1038]'
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  id: totrans-6793
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6794
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  id: totrans-6795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  id: totrans-6796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  id: totrans-6797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  id: totrans-6798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  id: totrans-6799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6800
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  id: totrans-6801
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6802
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-6803
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-6804
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  id: totrans-6805
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1039]'
  id: totrans-6806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1039]'
- en: Retrieve asset types for a list of sids.
  id: totrans-6807
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6808
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-6809
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6810
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  id: totrans-6811
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6812
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  id: totrans-6813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1040]'
  id: totrans-6814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1040]'
- en: Lookup a future contract by symbol.
  id: totrans-6815
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6816
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-6817
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6818
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  id: totrans-6819
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6820
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-6821
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6822
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-6823
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1041]'
  id: totrans-6824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1041]'
- en: Convert an object into an Asset or sequence of Assets.
  id: totrans-6825
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  id: totrans-6826
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6827
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  id: totrans-6828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-6829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-6830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6831
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  id: totrans-6832
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  id: totrans-6833
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  id: totrans-6834
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6835
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  id: totrans-6836
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1042]'
  id: totrans-6837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1042]'
- en: Lookup an equity by symbol.
  id: totrans-6838
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6839
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  id: totrans-6840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  id: totrans-6841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  id: totrans-6842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-6843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6844
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  id: totrans-6845
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6846
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-6847
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6848
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  id: totrans-6849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  id: totrans-6850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1043]'
  id: totrans-6851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1043]'
- en: Lookup a list of equities by symbol.
  id: totrans-6852
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  id: totrans-6853
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1044]'
  id: totrans-6854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1044]'
- en: but potentially faster because repeated lookups are memoized.
  id: totrans-6855
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6856
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  id: totrans-6857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  id: totrans-6858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  id: totrans-6859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-6860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6861
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-6862
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6863
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-6864
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1045]'
  id: totrans-6865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1045]'
- en: Retrieve all assets in sids.
  id: totrans-6866
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6867
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  id: totrans-6868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  id: totrans-6869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6870
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  id: totrans-6871
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6872
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  id: totrans-6873
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6874
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  id: totrans-6875
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1046]'
  id: totrans-6876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1046]'
- en: Retrieve the Asset for a given sid.
  id: totrans-6877
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1047]'
  id: totrans-6878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1047]'
- en: Retrieve Equity objects for a list of sids.
  id: totrans-6879
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-6880
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6881
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-6882
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6883
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-6884
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6885
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-6886
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6887
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-6888
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1048]'
  id: totrans-6889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1048]'
- en: Retrieve Future objects for an iterable of sids.
  id: totrans-6890
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-6891
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6892
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-6893
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6894
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-6895
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6896
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-6897
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-6898
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-6899
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1049]'
  id: totrans-6900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1049]'
- en: All the sids in the asset finder.
  id: totrans-6901
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1050]'
  id: totrans-6902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1050]'
- en: Interface to all of the data that a zipline simulation needs.
  id: totrans-6903
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  id: totrans-6904
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6905
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  id: totrans-6906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  id: totrans-6907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  id: totrans-6908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-6909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  id: totrans-6910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-6911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  id: totrans-6912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  id: totrans-6913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  id: totrans-6914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  id: totrans-6915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1051]'
  id: totrans-6916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1051]'
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  id: totrans-6917
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6918
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  id: totrans-6919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-6920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-6921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-6922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-6923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6924
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-6925
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6926
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-6927
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1052]'
  id: totrans-6928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1052]'
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  id: totrans-6929
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6930
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  id: totrans-6931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-6932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-6933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-6934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6935
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  id: totrans-6936
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6937
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  id: totrans-6938
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1053]'
  id: totrans-6939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1053]'
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  id: totrans-6940
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6941
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  id: totrans-6942
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6943
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  id: totrans-6944
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1054]'
  id: totrans-6945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1054]'
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  id: totrans-6946
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6947
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  id: totrans-6948
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6949
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  id: totrans-6950
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1055]'
  id: totrans-6951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1055]'
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  id: totrans-6952
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6953
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  id: totrans-6954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  id: totrans-6955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  id: totrans-6956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  id: totrans-6957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  id: totrans-6958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  id: totrans-6959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6960
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  id: totrans-6961
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1056]'
  id: totrans-6962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1056]'
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  id: totrans-6963
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  id: totrans-6964
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1057]'
  id: totrans-6965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1057]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-6966
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6967
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  id: totrans-6968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-6969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-6970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-6971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6972
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-6973
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6974
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-6975
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1058]'
  id: totrans-6976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1058]'
- en: Returns any splits for the given sids and the given dt.
  id: totrans-6977
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6978
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  id: totrans-6979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  id: totrans-6980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6981
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  id: totrans-6982
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6983
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  id: totrans-6984
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1059]'
  id: totrans-6985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1059]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-6986
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6987
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  id: totrans-6988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-6989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-6990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-6991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-6992
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-6993
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-6994
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-6995
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1060]'
  id: totrans-6996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1060]'
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  id: totrans-6997
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6998
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  id: totrans-6999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  id: totrans-7000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7001
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  id: totrans-7002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  id: totrans-7003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1061]'
  id: totrans-7004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1061]'
- en: Extra sources always have a sid column.
  id: totrans-7005
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  id: totrans-7006
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1062]'
  id: totrans-7007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1062]'
- en: '[PRE1063]'
  id: totrans-7008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1063]'
- en: Returns the daily returns for the given period.
  id: totrans-7009
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7010
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  id: totrans-7011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  id: totrans-7012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7013
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  id: totrans-7014
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7015
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  id: totrans-7016
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1064]'
  id: totrans-7017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1064]'
- en: Look up the returns for a given period.
  id: totrans-7018
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7019
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  id: totrans-7020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  id: totrans-7021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7022
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  id: totrans-7023
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7024
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-7025
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7026
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-7027
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  id: totrans-7028
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1065]'
  id: totrans-7029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1065]'
- en: Look up the returns for a given dt.
  id: totrans-7030
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7031
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  id: totrans-7032
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7033
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  id: totrans-7034
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7035
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-7036
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7037
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-7038
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  id: totrans-7039
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  id: totrans-7040
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1066]'
  id: totrans-7041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1066]'
- en: Register a data bundle ingest function.
  id: totrans-7042
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7043
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  id: totrans-7045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  id: totrans-7046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  id: totrans-7047
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7048
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  id: totrans-7049
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7050
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  id: totrans-7051
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7052
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  id: totrans-7053
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7054
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  id: totrans-7055
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7056
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  id: totrans-7057
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7058
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  id: totrans-7059
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7060
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  id: totrans-7061
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7062
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  id: totrans-7063
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7064
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  id: totrans-7065
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7066
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  id: totrans-7067
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7068
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  id: totrans-7069
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7070
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  id: totrans-7071
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7072
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  id: totrans-7073
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7074
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  id: totrans-7075
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7076
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  id: totrans-7077
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7078
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  id: totrans-7079
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7080
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  id: totrans-7081
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7082
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  id: totrans-7083
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7084
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  id: totrans-7085
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  id: totrans-7086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  id: totrans-7087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  id: totrans-7088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  id: totrans-7089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  id: totrans-7090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-7091
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  id: totrans-7092
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1067]'
  id: totrans-7093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1067]'
- en: See also
  id: totrans-7094
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-7095
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1068]'
  id: totrans-7096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1068]'
- en: Ingest data for a given bundle.
  id: totrans-7097
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7098
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  id: totrans-7100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  id: totrans-7101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  id: totrans-7102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  id: totrans-7103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1069]'
  id: totrans-7104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1069]'
- en: Loads a previously ingested bundle.
  id: totrans-7105
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7106
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  id: totrans-7108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  id: totrans-7109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7110
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  id: totrans-7111
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7112
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  id: totrans-7113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1070]'
  id: totrans-7114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1070]'
- en: Unregister a bundle.
  id: totrans-7115
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7116
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  id: totrans-7117
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7118
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  id: totrans-7119
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7120
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-7121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1071]'
  id: totrans-7122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1071]'
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").
  id: totrans-7123
  prefs: []
  type: TYPE_NORMAL
- en: Writers
  id: totrans-7124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1072]'
  id: totrans-7125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1072]'
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  id: totrans-7126
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7127
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  id: totrans-7128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  id: totrans-7129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-7130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  id: totrans-7131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-7132
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  id: totrans-7133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1073]'
  id: totrans-7134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1073]'
- en: 'Parameters:'
  id: totrans-7135
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  id: totrans-7136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  id: totrans-7137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  id: totrans-7138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  id: totrans-7139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7140
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  id: totrans-7141
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7142
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  id: totrans-7143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1074]'
  id: totrans-7144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1074]'
- en: Read CSVs as DataFrames from our asset map.
  id: totrans-7145
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7146
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  id: totrans-7147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  id: totrans-7148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  id: totrans-7149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1075]'
  id: totrans-7150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1075]'
- en: Writer for data to be read by SQLiteAdjustmentReader
  id: totrans-7151
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7152
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  id: totrans-7153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  id: totrans-7154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  id: totrans-7155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-7156
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-7157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1076]'
  id: totrans-7158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1076]'
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  id: totrans-7159
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7160
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  id: totrans-7161
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7162
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  id: totrans-7163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1077]'
  id: totrans-7164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1077]'
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  id: totrans-7165
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7166
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-7167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  id: totrans-7168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-7169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-7170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-7171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  id: totrans-7172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-7173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-7174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-7175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  id: totrans-7176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  id: totrans-7177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  id: totrans-7178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-7179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  id: totrans-7180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-7181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-7182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-7183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  id: totrans-7184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-7185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-7186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-7187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-7188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-7189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-7190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-7191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-7192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-7193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-7194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  id: totrans-7195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  id: totrans-7196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  id: totrans-7197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  id: totrans-7198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  id: totrans-7199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  id: totrans-7200
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7201
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  id: totrans-7202
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7203
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  id: totrans-7204
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7205
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  id: totrans-7206
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7207
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  id: totrans-7208
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7209
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  id: totrans-7210
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7211
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  id: totrans-7212
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7213
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  id: totrans-7214
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7215
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  id: totrans-7216
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7217
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  id: totrans-7218
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7219
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  id: totrans-7220
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7221
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  id: totrans-7222
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7223
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  id: totrans-7224
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7225
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  id: totrans-7226
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-7227
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  id: totrans-7228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1078]'
  id: totrans-7229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1078]'
- en: Write both dividend payouts and the derived price adjustment ratios.
  id: totrans-7230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1079]'
  id: totrans-7231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1079]'
- en: Write dividend payout data to SQLite table dividend_payouts.
  id: totrans-7232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1080]'
  id: totrans-7233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1080]'
- en: Class used to write data to an assets db.
  id: totrans-7234
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7235
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  id: totrans-7236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1081]'
  id: totrans-7237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1081]'
- en: Connect to database and create tables.
  id: totrans-7238
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7239
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  id: totrans-7240
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7241
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  id: totrans-7242
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7243
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  id: totrans-7244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1082]'
  id: totrans-7245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1082]'
- en: Write asset metadata to a sqlite database.
  id: totrans-7246
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7247
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-7249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-7250
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7251
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-7252
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7253
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-7254
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7255
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-7256
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7257
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-7258
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7259
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-7260
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7261
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-7262
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7263
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-7264
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7265
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-7266
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7267
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-7268
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7269
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-7270
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7271
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-7272
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7273
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7274
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7275
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-7276
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-7277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-7279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-7280
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7281
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-7282
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7283
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-7284
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7285
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-7286
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7287
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-7288
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7289
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-7290
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7291
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-7292
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7293
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-7294
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7295
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-7296
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7297
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-7298
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7299
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-7300
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7301
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-7302
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7303
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7304
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7305
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-7306
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7307
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-7308
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7309
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-7310
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7311
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-7312
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7313
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-7314
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7315
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-7316
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7317
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-7318
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7319
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-7320
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7321
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-7322
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7323
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-7324
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7325
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-7326
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-7328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7329
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7330
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-7331
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7332
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-7333
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7334
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-7335
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7336
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-7337
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7338
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-7339
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-7341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-7342
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7343
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-7344
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7345
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-7346
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7347
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-7348
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7349
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-7350
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7351
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-7352
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7353
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-7354
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7355
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-7356
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7357
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7358
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7359
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-7360
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-7361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-7362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-7363
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  id: totrans-7364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1083]'
  id: totrans-7365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1083]'
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  id: totrans-7366
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7367
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  id: totrans-7369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-7370
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7371
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  id: totrans-7372
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7373
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-7374
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7375
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-7376
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7377
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  id: totrans-7378
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7379
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-7380
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7381
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-7382
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7383
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-7384
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7385
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-7386
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7387
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-7388
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7389
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  id: totrans-7390
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7391
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  id: totrans-7392
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7393
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7394
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7395
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-7396
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  id: totrans-7397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  id: totrans-7399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  id: totrans-7400
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7401
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  id: totrans-7402
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7403
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-7404
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7405
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  id: totrans-7406
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7407
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  id: totrans-7408
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7409
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  id: totrans-7410
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7411
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  id: totrans-7412
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7413
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  id: totrans-7414
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7415
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  id: totrans-7416
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7417
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  id: totrans-7418
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7419
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  id: totrans-7420
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7421
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  id: totrans-7422
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7423
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7424
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7425
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  id: totrans-7426
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7427
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  id: totrans-7428
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7429
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  id: totrans-7430
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7431
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  id: totrans-7432
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7433
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  id: totrans-7434
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7435
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  id: totrans-7436
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7437
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  id: totrans-7438
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7439
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  id: totrans-7440
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7441
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  id: totrans-7442
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7443
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  id: totrans-7444
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7445
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  id: totrans-7446
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  id: totrans-7448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7449
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7450
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  id: totrans-7451
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7452
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  id: totrans-7453
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7454
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  id: totrans-7455
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7456
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  id: totrans-7457
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7458
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  id: totrans-7459
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  id: totrans-7460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  id: totrans-7461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  id: totrans-7462
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7463
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  id: totrans-7464
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7465
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  id: totrans-7466
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7467
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  id: totrans-7468
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7469
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  id: totrans-7470
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7471
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  id: totrans-7472
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7473
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  id: totrans-7474
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7475
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  id: totrans-7476
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7477
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  id: totrans-7478
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7479
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  id: totrans-7480
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  id: totrans-7481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  id: totrans-7482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  id: totrans-7483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1084]'
  id: totrans-7484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1084]'
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  id: totrans-7485
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7486
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  id: totrans-7487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  id: totrans-7488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1085]'
  id: totrans-7489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1085]'
- en: '[PRE1086]'
  id: totrans-7490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1086]'
- en: '[PRE1087]'
  id: totrans-7491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1087]'
- en: Map from asset_id -> index of first row in the dataset with that id.
  id: totrans-7492
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7493
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-7494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1088]'
  id: totrans-7495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1088]'
- en: Map from asset_id -> index of last row in the dataset with that id.
  id: totrans-7496
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7497
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-7498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1089]'
  id: totrans-7499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1089]'
- en: Map from asset_id -> calendar index of first row.
  id: totrans-7500
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7501
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  id: totrans-7502
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1090]'
  id: totrans-7503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1090]'
- en: Epoch ns of the first session used in this dataset.
  id: totrans-7504
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7505
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-7506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1091]'
  id: totrans-7507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1091]'
- en: Epoch ns of the last session used in this dataset.
  id: totrans-7508
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7509
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-7510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1092]'
  id: totrans-7511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1092]'
- en: String identifier of trading calendar used (ie, “NYSE”).
  id: totrans-7512
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7513
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  id: totrans-7514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1093]'
  id: totrans-7515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1093]'
- en: '[PRE1094]'
  id: totrans-7516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1094]'
- en: '[PRE1095]'
  id: totrans-7517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1095]'
- en: '[PRE1096]'
  id: totrans-7518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1096]'
- en: Notes
  id: totrans-7519
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  id: totrans-7520
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  id: totrans-7521
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  id: totrans-7522
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  id: totrans-7523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  id: totrans-7524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  id: totrans-7525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  id: totrans-7526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  id: totrans-7527
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  id: totrans-7528
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  id: totrans-7529
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7530
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  id: totrans-7531
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1097]'
  id: totrans-7532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1097]'
- en: Get currencies in which prices are quoted for the requested sids.
  id: totrans-7533
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  id: totrans-7534
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7535
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  id: totrans-7536
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7537
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  id: totrans-7538
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7539
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  id: totrans-7540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1098]'
  id: totrans-7541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1098]'
- en: Get the latest minute on or before `dt` in which `asset` traded.
  id: totrans-7542
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  id: totrans-7543
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7544
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  id: totrans-7545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  id: totrans-7546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7547
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  id: totrans-7548
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7549
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  id: totrans-7550
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1099]'
  id: totrans-7551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1099]'
- en: 'Parameters:'
  id: totrans-7552
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-7553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-7554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  id: totrans-7555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7556
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  id: totrans-7557
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7558
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-7559
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1100]'
  id: totrans-7560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1100]'
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  id: totrans-7561
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1101]'
  id: totrans-7562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1101]'
- en: 'Parameters:'
  id: totrans-7563
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  id: totrans-7564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  id: totrans-7565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  id: totrans-7566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  id: totrans-7567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7568
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  id: totrans-7569
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7570
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  id: totrans-7571
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1102]'
  id: totrans-7572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1102]'
- en: 'Parameters:'
  id: totrans-7573
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  id: totrans-7574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  id: totrans-7575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7576
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  id: totrans-7577
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7578
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  id: totrans-7579
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1103]'
  id: totrans-7580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1103]'
- en: Loads adjustments based on corporate actions from a SQLite database.
  id: totrans-7581
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  id: totrans-7582
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7583
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  id: totrans-7584
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7585
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  id: totrans-7586
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1104]'
  id: totrans-7587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1104]'
- en: Load collection of Adjustment objects from underlying adjustments db.
  id: totrans-7588
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7589
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  id: totrans-7590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  id: totrans-7591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  id: totrans-7592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  id: totrans-7593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  id: totrans-7594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  id: totrans-7595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7596
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  id: totrans-7597
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7598
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  id: totrans-7599
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1105]'
  id: totrans-7600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1105]'
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  id: totrans-7601
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7602
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  id: totrans-7603
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7604
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  id: totrans-7605
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7606
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  id: totrans-7607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1106]'
  id: totrans-7608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1106]'
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  id: totrans-7609
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  id: totrans-7610
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7611
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  id: totrans-7612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  id: totrans-7613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  id: totrans-7614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  id: totrans-7615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-7616
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  id: totrans-7617
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1107]'
  id: totrans-7618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1107]'
- en: All of the sids for equities in the asset finder.
  id: totrans-7619
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1108]'
  id: totrans-7620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1108]'
- en: Return all of the sids for a given country.
  id: totrans-7621
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7622
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  id: totrans-7623
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7624
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-7625
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7626
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-7627
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1109]'
  id: totrans-7628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1109]'
- en: Return all of the sids for a given exchange_name.
  id: totrans-7629
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7630
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  id: totrans-7631
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7632
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  id: totrans-7633
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7634
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  id: totrans-7635
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1110]'
  id: totrans-7636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1110]'
- en: All of the sids for futures consracts in the asset finder.
  id: totrans-7637
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1111]'
  id: totrans-7638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1111]'
- en: Get the value of a supplementary field for an asset.
  id: totrans-7639
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7640
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  id: totrans-7641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  id: totrans-7642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  id: totrans-7643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7644
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  id: totrans-7645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  id: totrans-7646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1112]'
  id: totrans-7647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1112]'
- en: Group a list of sids by asset type.
  id: totrans-7648
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7649
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-7650
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7651
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  id: totrans-7652
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7653
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  id: totrans-7654
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1113]'
  id: totrans-7655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1113]'
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  id: totrans-7656
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7657
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  id: totrans-7658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  id: totrans-7659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  id: totrans-7660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  id: totrans-7661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  id: totrans-7662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7663
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  id: totrans-7664
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7665
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  id: totrans-7666
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7667
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  id: totrans-7668
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1114]'
  id: totrans-7669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1114]'
- en: Retrieve asset types for a list of sids.
  id: totrans-7670
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7671
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-7672
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7673
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  id: totrans-7674
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7675
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  id: totrans-7676
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1115]'
  id: totrans-7677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1115]'
- en: Lookup a future contract by symbol.
  id: totrans-7678
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7679
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  id: totrans-7680
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7681
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  id: totrans-7682
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7683
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  id: totrans-7684
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7685
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  id: totrans-7686
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1116]'
  id: totrans-7687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1116]'
- en: Convert an object into an Asset or sequence of Assets.
  id: totrans-7688
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  id: totrans-7689
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7690
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  id: totrans-7691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-7692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  id: totrans-7693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7694
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  id: totrans-7695
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  id: totrans-7696
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  id: totrans-7697
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7698
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  id: totrans-7699
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1117]'
  id: totrans-7700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1117]'
- en: Lookup an equity by symbol.
  id: totrans-7701
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7702
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  id: totrans-7703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  id: totrans-7704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  id: totrans-7705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-7706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7707
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  id: totrans-7708
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7709
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  id: totrans-7710
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7711
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  id: totrans-7712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  id: totrans-7713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1118]'
  id: totrans-7714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1118]'
- en: Lookup a list of equities by symbol.
  id: totrans-7715
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  id: totrans-7716
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1119]'
  id: totrans-7717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1119]'
- en: but potentially faster because repeated lookups are memoized.
  id: totrans-7718
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7719
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  id: totrans-7720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  id: totrans-7721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  id: totrans-7722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  id: totrans-7723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7724
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-7725
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7726
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  id: totrans-7727
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1120]'
  id: totrans-7728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1120]'
- en: Retrieve all assets in sids.
  id: totrans-7729
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7730
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  id: totrans-7731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  id: totrans-7732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7733
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  id: totrans-7734
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7735
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  id: totrans-7736
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7737
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  id: totrans-7738
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1121]'
  id: totrans-7739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1121]'
- en: Retrieve the Asset for a given sid.
  id: totrans-7740
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1122]'
  id: totrans-7741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1122]'
- en: Retrieve Equity objects for a list of sids.
  id: totrans-7742
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-7743
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7744
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-7745
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7746
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-7747
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7748
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-7749
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7750
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-7751
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1123]'
  id: totrans-7752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1123]'
- en: Retrieve Future objects for an iterable of sids.
  id: totrans-7753
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  id: totrans-7754
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7755
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  id: totrans-7756
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7757
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  id: totrans-7758
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7759
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  id: totrans-7760
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7761
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  id: totrans-7762
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1124]'
  id: totrans-7763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1124]'
- en: All the sids in the asset finder.
  id: totrans-7764
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1125]'
  id: totrans-7765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1125]'
- en: Interface to all of the data that a zipline simulation needs.
  id: totrans-7766
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  id: totrans-7767
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7768
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  id: totrans-7769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  id: totrans-7770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  id: totrans-7771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-7772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  id: totrans-7773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  id: totrans-7774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  id: totrans-7775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  id: totrans-7776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  id: totrans-7777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  id: totrans-7778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1126]'
  id: totrans-7779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1126]'
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  id: totrans-7780
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7781
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  id: totrans-7782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-7783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-7784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-7785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-7786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7787
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-7788
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7789
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-7790
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1127]'
  id: totrans-7791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1127]'
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  id: totrans-7792
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7793
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  id: totrans-7794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  id: totrans-7795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-7796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  id: totrans-7797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7798
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  id: totrans-7799
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7800
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  id: totrans-7801
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1128]'
  id: totrans-7802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1128]'
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  id: totrans-7803
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7804
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  id: totrans-7805
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7806
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  id: totrans-7807
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1129]'
  id: totrans-7808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1129]'
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  id: totrans-7809
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7810
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  id: totrans-7811
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7812
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  id: totrans-7813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1130]'
  id: totrans-7814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1130]'
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  id: totrans-7815
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7816
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  id: totrans-7817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  id: totrans-7818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  id: totrans-7819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  id: totrans-7820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  id: totrans-7821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  id: totrans-7822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7823
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  id: totrans-7824
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1131]'
  id: totrans-7825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1131]'
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  id: totrans-7826
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  id: totrans-7827
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1132]'
  id: totrans-7828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1132]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-7829
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7830
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  id: totrans-7831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-7832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-7833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-7834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7835
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-7836
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7837
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-7838
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1133]'
  id: totrans-7839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1133]'
- en: Returns any splits for the given sids and the given dt.
  id: totrans-7840
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7841
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  id: totrans-7842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  id: totrans-7843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7844
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  id: totrans-7845
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7846
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  id: totrans-7847
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1134]'
  id: totrans-7848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1134]'
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  id: totrans-7849
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7850
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  id: totrans-7851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  id: totrans-7852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  id: totrans-7853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  id: totrans-7854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7855
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  id: totrans-7856
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7857
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  id: totrans-7858
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1135]'
  id: totrans-7859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1135]'
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  id: totrans-7860
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7861
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  id: totrans-7862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  id: totrans-7863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7864
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  id: totrans-7865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  id: totrans-7866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1136]'
  id: totrans-7867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1136]'
- en: Extra sources always have a sid column.
  id: totrans-7868
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  id: totrans-7869
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1137]'
  id: totrans-7870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1137]'
- en: '[PRE1138]'
  id: totrans-7871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1138]'
- en: Returns the daily returns for the given period.
  id: totrans-7872
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7873
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  id: totrans-7874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  id: totrans-7875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7876
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  id: totrans-7877
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7878
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  id: totrans-7879
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1139]'
  id: totrans-7880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1139]'
- en: Look up the returns for a given period.
  id: totrans-7881
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7882
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  id: totrans-7883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  id: totrans-7884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7885
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  id: totrans-7886
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7887
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-7888
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7889
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-7890
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  id: totrans-7891
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1140]'
  id: totrans-7892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1140]'
- en: Look up the returns for a given dt.
  id: totrans-7893
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7894
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  id: totrans-7895
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7896
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  id: totrans-7897
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7898
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-7899
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7900
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  id: totrans-7901
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  id: totrans-7902
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  id: totrans-7903
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1141]'
  id: totrans-7904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1141]'
- en: Register a data bundle ingest function.
  id: totrans-7905
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7906
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  id: totrans-7908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  id: totrans-7909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  id: totrans-7910
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7911
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  id: totrans-7912
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7913
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  id: totrans-7914
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7915
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  id: totrans-7916
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7917
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  id: totrans-7918
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7919
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  id: totrans-7920
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7921
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  id: totrans-7922
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7923
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  id: totrans-7924
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7925
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  id: totrans-7926
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7927
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  id: totrans-7928
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7929
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  id: totrans-7930
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7931
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  id: totrans-7932
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7933
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  id: totrans-7934
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7935
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  id: totrans-7936
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7937
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  id: totrans-7938
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7939
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  id: totrans-7940
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7941
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  id: totrans-7942
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7943
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  id: totrans-7944
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7945
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  id: totrans-7946
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-7947
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  id: totrans-7948
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  id: totrans-7949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  id: totrans-7950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  id: totrans-7951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  id: totrans-7952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  id: totrans-7953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-7954
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  id: totrans-7955
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1142]'
  id: totrans-7956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1142]'
- en: See also
  id: totrans-7957
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-7958
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1143]'
  id: totrans-7959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1143]'
- en: Ingest data for a given bundle.
  id: totrans-7960
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7961
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  id: totrans-7963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  id: totrans-7964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  id: totrans-7965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  id: totrans-7966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1144]'
  id: totrans-7967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1144]'
- en: Loads a previously ingested bundle.
  id: totrans-7968
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7969
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  id: totrans-7970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  id: totrans-7971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  id: totrans-7972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7973
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  id: totrans-7974
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-7975
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  id: totrans-7976
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1145]'
  id: totrans-7977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1145]'
- en: Unregister a bundle.
  id: totrans-7978
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-7979
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  id: totrans-7980
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-7981
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  id: totrans-7982
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-7983
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  id: totrans-7984
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1146]'
  id: totrans-7985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1146]'
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").
  id: totrans-7986
  prefs: []
  type: TYPE_NORMAL
- en: Risk Metrics
  id: totrans-7987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Algorithm State
  id: totrans-7988
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1147]'
  id: totrans-7989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1147]'
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  id: totrans-7990
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1148]'
  id: totrans-7991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1148]'
- en: The updated portfolio being managed.
  id: totrans-7992
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7993
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  id: totrans-7994
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1149]'
  id: totrans-7995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1149]'
- en: The updated account being managed.
  id: totrans-7996
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-7997
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  id: totrans-7998
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1150]'
  id: totrans-7999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1150]'
- en: The current set of positions.
  id: totrans-8000
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8001
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  id: totrans-8002
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1151]'
  id: totrans-8003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1151]'
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  id: totrans-8004
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8005
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8006
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1152]'
  id: totrans-8007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1152]'
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  id: totrans-8008
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8009
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-8010
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1153]'
  id: totrans-8011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1153]'
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  id: totrans-8012
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8013
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  id: totrans-8014
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1154]'
  id: totrans-8015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1154]'
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  id: totrans-8016
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8017
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  id: totrans-8018
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8019
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  id: totrans-8020
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8021
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-8022
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1155]'
  id: totrans-8023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1155]'
- en: Override fields on `self.account`.
  id: totrans-8024
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1156]'
  id: totrans-8025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1156]'
- en: Compute the current portfolio.
  id: totrans-8026
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8027
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  id: totrans-8028
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1157]'
  id: totrans-8029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1157]'
- en: Process the commission.
  id: totrans-8030
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8031
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  id: totrans-8032
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1158]'
  id: totrans-8033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1158]'
- en: Process dividends for the next session.
  id: totrans-8034
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  id: totrans-8035
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1159]'
  id: totrans-8036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1159]'
- en: Keep track of an order that was placed.
  id: totrans-8037
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8038
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  id: totrans-8039
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1160]'
  id: totrans-8040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1160]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-8041
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8042
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-8043
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1161]'
  id: totrans-8044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1161]'
- en: Add a transaction to ledger, updating the current state as needed.
  id: totrans-8045
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8046
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  id: totrans-8047
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1162]'
  id: totrans-8048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1162]'
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  id: totrans-8049
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8050
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  id: totrans-8051
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8052
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  id: totrans-8053
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8054
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-8055
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1163]'
  id: totrans-8056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1163]'
- en: Force a computation of the current portfolio state.
  id: totrans-8057
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1164]'
  id: totrans-8058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1164]'
- en: Object providing read-only access to current portfolio state.
  id: totrans-8059
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8060
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  id: totrans-8061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  id: totrans-8062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1165]'
  id: totrans-8063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1165]'
- en: Dict-like object containing information about currently-held positions.
  id: totrans-8064
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8065
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  id: totrans-8066
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1166]'
  id: totrans-8067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1166]'
- en: Amount of cash currently held in portfolio.
  id: totrans-8068
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8069
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8070
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1167]'
  id: totrans-8071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1167]'
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  id: totrans-8072
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8073
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8074
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1168]'
  id: totrans-8075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1168]'
- en: Amount of cash in the portfolio at the start of the backtest.
  id: totrans-8076
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8077
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8078
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1169]'
  id: totrans-8079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1169]'
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  id: totrans-8080
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  id: totrans-8081
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1170]'
  id: totrans-8082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1170]'
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  id: totrans-8083
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1171]'
  id: totrans-8084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1171]'
- en: The current state of the positions held.
  id: totrans-8085
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8086
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  id: totrans-8087
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1172]'
  id: totrans-8088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1172]'
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  id: totrans-8089
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8090
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  id: totrans-8091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  id: totrans-8092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1173]'
  id: totrans-8093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1173]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-8094
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8095
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-8096
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8097
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  id: totrans-8098
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8099
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  id: totrans-8100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1174]'
  id: totrans-8101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1174]'
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  id: totrans-8102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1175]'
  id: totrans-8103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1175]'
- en: The current status of the positions.
  id: totrans-8104
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8105
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  id: totrans-8106
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8107
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  id: totrans-8108
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8109
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  id: totrans-8110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1176]'
  id: totrans-8111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1176]'
- en: Computed values from the current positions.
  id: totrans-8112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1177]'
  id: totrans-8113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1177]'
- en: The gross position exposure.
  id: totrans-8114
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8115
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1178]'
  id: totrans-8117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1178]'
- en: The gross position value.
  id: totrans-8118
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8119
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1179]'
  id: totrans-8121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1179]'
- en: The exposure of just the long positions.
  id: totrans-8122
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8123
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1180]'
  id: totrans-8125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1180]'
- en: The value of just the long positions.
  id: totrans-8126
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8127
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1181]'
  id: totrans-8129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1181]'
- en: The net position exposure.
  id: totrans-8130
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8131
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1182]'
  id: totrans-8133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1182]'
- en: The net position value.
  id: totrans-8134
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8135
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1183]'
  id: totrans-8137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1183]'
- en: The exposure of just the short positions.
  id: totrans-8138
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8139
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1184]'
  id: totrans-8141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1184]'
- en: The value of just the short positions.
  id: totrans-8142
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8143
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1185]'
  id: totrans-8145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1185]'
- en: The number of long positions.
  id: totrans-8146
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8147
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-8148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1186]'
  id: totrans-8149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1186]'
- en: The number of short positions.
  id: totrans-8150
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8151
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-8152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1187]'
  id: totrans-8153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1187]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
  id: totrans-8154
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8155
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  id: totrans-8156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1188]'
  id: totrans-8157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1188]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  id: totrans-8158
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8159
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  id: totrans-8160
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8161
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  id: totrans-8162
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  id: totrans-8163
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  id: totrans-8164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1189]'
  id: totrans-8165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1189]'
- en: Emit the current value of a ledger field every bar or every session.
  id: totrans-8166
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8167
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1190]'
  id: totrans-8170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1190]'
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  id: totrans-8171
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8172
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1191]'
  id: totrans-8175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1191]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-8176
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8177
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1192]'
  id: totrans-8180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1192]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-8181
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8182
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1193]'
  id: totrans-8185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1193]'
- en: Tracks the daily and cumulative returns of the algorithm.
  id: totrans-8186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1194]'
  id: totrans-8187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1194]'
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  id: totrans-8188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1195]'
  id: totrans-8189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1195]'
- en: Tracks daily and cumulative cash flow.
  id: totrans-8190
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8191
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  id: totrans-8192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1196]'
  id: totrans-8193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1196]'
- en: Tracks daily orders.
  id: totrans-8194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1197]'
  id: totrans-8195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1197]'
- en: Tracks daily transactions.
  id: totrans-8196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1198]'
  id: totrans-8197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1198]'
- en: Tracks daily positions.
  id: totrans-8198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1199]'
  id: totrans-8199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1199]'
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  id: totrans-8200
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8201
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  id: totrans-8202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  id: totrans-8203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1200]'
  id: totrans-8204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1200]'
- en: End of simulation alpha and beta to the benchmark.
  id: totrans-8205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1201]'
  id: totrans-8206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1201]'
- en: Tracks the maximum account leverage.
  id: totrans-8207
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  id: totrans-8208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1202]'
  id: totrans-8209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1202]'
- en: Register a new metrics set.
  id: totrans-8210
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8211
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-8212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  id: totrans-8213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8214
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  id: totrans-8215
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-8216
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  id: totrans-8217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1203]'
  id: totrans-8218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1203]'
- en: Return an instance of the metrics set registered with the given name.
  id: totrans-8219
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8220
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  id: totrans-8221
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8222
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  id: totrans-8223
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-8224
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  id: totrans-8225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1204]'
  id: totrans-8226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1204]'
- en: Unregister an existing metrics set.
  id: totrans-8227
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8228
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-8229
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-8230
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  id: totrans-8231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1205]'
  id: totrans-8232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1205]'
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  id: totrans-8233
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm State
  id: totrans-8234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1206]'
  id: totrans-8235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1206]'
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  id: totrans-8236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1207]'
  id: totrans-8237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1207]'
- en: The updated portfolio being managed.
  id: totrans-8238
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8239
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  id: totrans-8240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1208]'
  id: totrans-8241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1208]'
- en: The updated account being managed.
  id: totrans-8242
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8243
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  id: totrans-8244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1209]'
  id: totrans-8245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1209]'
- en: The current set of positions.
  id: totrans-8246
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8247
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  id: totrans-8248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1210]'
  id: totrans-8249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1210]'
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  id: totrans-8250
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8251
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1211]'
  id: totrans-8253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1211]'
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  id: totrans-8254
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8255
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  id: totrans-8256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1212]'
  id: totrans-8257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1212]'
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  id: totrans-8258
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8259
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  id: totrans-8260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1213]'
  id: totrans-8261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1213]'
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  id: totrans-8262
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8263
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  id: totrans-8264
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8265
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  id: totrans-8266
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8267
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-8268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1214]'
  id: totrans-8269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1214]'
- en: Override fields on `self.account`.
  id: totrans-8270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1215]'
  id: totrans-8271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1215]'
- en: Compute the current portfolio.
  id: totrans-8272
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8273
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  id: totrans-8274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1216]'
  id: totrans-8275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1216]'
- en: Process the commission.
  id: totrans-8276
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8277
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  id: totrans-8278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1217]'
  id: totrans-8279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1217]'
- en: Process dividends for the next session.
  id: totrans-8280
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  id: totrans-8281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1218]'
  id: totrans-8282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1218]'
- en: Keep track of an order that was placed.
  id: totrans-8283
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8284
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  id: totrans-8285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1219]'
  id: totrans-8286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1219]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-8287
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8288
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-8289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1220]'
  id: totrans-8290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1220]'
- en: Add a transaction to ledger, updating the current state as needed.
  id: totrans-8291
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8292
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  id: totrans-8293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1221]'
  id: totrans-8294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1221]'
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  id: totrans-8295
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8296
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  id: totrans-8297
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8298
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  id: totrans-8299
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8300
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  id: totrans-8301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1222]'
  id: totrans-8302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1222]'
- en: Force a computation of the current portfolio state.
  id: totrans-8303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1223]'
  id: totrans-8304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1223]'
- en: Object providing read-only access to current portfolio state.
  id: totrans-8305
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8306
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  id: totrans-8307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  id: totrans-8308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1224]'
  id: totrans-8309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1224]'
- en: Dict-like object containing information about currently-held positions.
  id: totrans-8310
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8311
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  id: totrans-8312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1225]'
  id: totrans-8313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1225]'
- en: Amount of cash currently held in portfolio.
  id: totrans-8314
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8315
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1226]'
  id: totrans-8317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1226]'
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  id: totrans-8318
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8319
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1227]'
  id: totrans-8321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1227]'
- en: Amount of cash in the portfolio at the start of the backtest.
  id: totrans-8322
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8323
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  id: totrans-8324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1228]'
  id: totrans-8325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1228]'
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  id: totrans-8326
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  id: totrans-8327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1229]'
  id: totrans-8328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1229]'
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  id: totrans-8329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1230]'
  id: totrans-8330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1230]'
- en: The current state of the positions held.
  id: totrans-8331
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8332
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  id: totrans-8333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1231]'
  id: totrans-8334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1231]'
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  id: totrans-8335
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8336
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  id: totrans-8337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  id: totrans-8338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1232]'
  id: totrans-8339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1232]'
- en: Processes a list of splits by modifying any positions as needed.
  id: totrans-8340
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8341
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  id: totrans-8342
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8343
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  id: totrans-8344
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8345
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  id: totrans-8346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1233]'
  id: totrans-8347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1233]'
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  id: totrans-8348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1234]'
  id: totrans-8349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1234]'
- en: The current status of the positions.
  id: totrans-8350
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8351
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  id: totrans-8352
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8353
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  id: totrans-8354
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8355
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  id: totrans-8356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1235]'
  id: totrans-8357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1235]'
- en: Computed values from the current positions.
  id: totrans-8358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1236]'
  id: totrans-8359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1236]'
- en: The gross position exposure.
  id: totrans-8360
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8361
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1237]'
  id: totrans-8363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1237]'
- en: The gross position value.
  id: totrans-8364
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8365
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1238]'
  id: totrans-8367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1238]'
- en: The exposure of just the long positions.
  id: totrans-8368
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8369
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1239]'
  id: totrans-8371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1239]'
- en: The value of just the long positions.
  id: totrans-8372
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8373
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1240]'
  id: totrans-8375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1240]'
- en: The net position exposure.
  id: totrans-8376
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8377
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1241]'
  id: totrans-8379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1241]'
- en: The net position value.
  id: totrans-8380
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8381
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8382
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1242]'
  id: totrans-8383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1242]'
- en: The exposure of just the short positions.
  id: totrans-8384
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8385
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1243]'
  id: totrans-8387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1243]'
- en: The value of just the short positions.
  id: totrans-8388
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8389
  prefs: []
  type: TYPE_NORMAL
- en: float64
  id: totrans-8390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1244]'
  id: totrans-8391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1244]'
- en: The number of long positions.
  id: totrans-8392
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8393
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-8394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1245]'
  id: totrans-8395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1245]'
- en: The number of short positions.
  id: totrans-8396
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8397
  prefs: []
  type: TYPE_NORMAL
- en: int64
  id: totrans-8398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1246]'
  id: totrans-8399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1246]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
  id: totrans-8400
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8401
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  id: totrans-8402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1247]'
  id: totrans-8403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1247]'
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  id: totrans-8404
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-8405
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  id: totrans-8406
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8407
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  id: totrans-8408
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  id: totrans-8409
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  id: totrans-8410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1248]'
  id: totrans-8411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1248]'
- en: Emit the current value of a ledger field every bar or every session.
  id: totrans-8412
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8413
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1249]'
  id: totrans-8416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1249]'
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  id: totrans-8417
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8418
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1250]'
  id: totrans-8421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1250]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-8422
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8423
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1251]'
  id: totrans-8426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1251]'
- en: Keep track of the value of a ledger field at the start of the period.
  id: totrans-8427
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8428
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  id: totrans-8429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  id: totrans-8430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1252]'
  id: totrans-8431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1252]'
- en: Tracks the daily and cumulative returns of the algorithm.
  id: totrans-8432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1253]'
  id: totrans-8433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1253]'
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  id: totrans-8434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1254]'
  id: totrans-8435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1254]'
- en: Tracks daily and cumulative cash flow.
  id: totrans-8436
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8437
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  id: totrans-8438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1255]'
  id: totrans-8439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1255]'
- en: Tracks daily orders.
  id: totrans-8440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1256]'
  id: totrans-8441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1256]'
- en: Tracks daily transactions.
  id: totrans-8442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1257]'
  id: totrans-8443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1257]'
- en: Tracks daily positions.
  id: totrans-8444
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1258]'
  id: totrans-8445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1258]'
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  id: totrans-8446
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8447
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  id: totrans-8448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  id: totrans-8449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1259]'
  id: totrans-8450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1259]'
- en: End of simulation alpha and beta to the benchmark.
  id: totrans-8451
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1260]'
  id: totrans-8452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1260]'
- en: Tracks the maximum account leverage.
  id: totrans-8453
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  id: totrans-8454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1261]'
  id: totrans-8455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1261]'
- en: Register a new metrics set.
  id: totrans-8456
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8457
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-8458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  id: totrans-8459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8460
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  id: totrans-8461
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-8462
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  id: totrans-8463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1262]'
  id: totrans-8464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1262]'
- en: Return an instance of the metrics set registered with the given name.
  id: totrans-8465
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8466
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  id: totrans-8467
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8468
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  id: totrans-8469
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-8470
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  id: totrans-8471
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1263]'
  id: totrans-8472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1263]'
- en: Unregister an existing metrics set.
  id: totrans-8473
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8474
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  id: totrans-8475
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-8476
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  id: totrans-8477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1264]'
  id: totrans-8478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1264]'
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  id: totrans-8479
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  id: totrans-8480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Caching
  id: totrans-8481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1265]'
  id: totrans-8482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1265]'
- en: A simple struct for maintaining a cached object with an expiration date.
  id: totrans-8483
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8484
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  id: totrans-8485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  id: totrans-8486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8487
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1266]'
  id: totrans-8488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1266]'
- en: '[PRE1267]'
  id: totrans-8489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1267]'
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  id: totrans-8490
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8491
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  id: totrans-8492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  id: totrans-8493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1268]'
  id: totrans-8495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1268]'
- en: '[PRE1269]'
  id: totrans-8496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1269]'
- en: A disk-backed cache for dataframes.
  id: totrans-8497
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  id: totrans-8498
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8499
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  id: totrans-8500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  id: totrans-8501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  id: totrans-8502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  id: totrans-8503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8504
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  id: totrans-8505
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1270]'
  id: totrans-8506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1270]'
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  id: totrans-8507
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8508
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-8509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  id: totrans-8510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  id: totrans-8511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8512
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  id: totrans-8513
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1271]'
  id: totrans-8514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1271]'
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  id: totrans-8515
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8516
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-8517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  id: totrans-8518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  id: totrans-8519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8520
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  id: totrans-8521
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  id: totrans-8522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1272]'
  id: totrans-8523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1272]'
- en: Optionally show a progress bar for the given iterator.
  id: totrans-8524
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8525
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  id: totrans-8526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  id: totrans-8527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  id: totrans-8528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8529
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  id: totrans-8530
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8531
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  id: totrans-8532
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1273]'
  id: totrans-8534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1273]'
- en: Caching
  id: totrans-8535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1274]'
  id: totrans-8536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1274]'
- en: A simple struct for maintaining a cached object with an expiration date.
  id: totrans-8537
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8538
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  id: totrans-8539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  id: totrans-8540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1275]'
  id: totrans-8542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1275]'
- en: '[PRE1276]'
  id: totrans-8543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1276]'
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  id: totrans-8544
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8545
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  id: totrans-8546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  id: totrans-8547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8548
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1277]'
  id: totrans-8549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1277]'
- en: '[PRE1278]'
  id: totrans-8550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1278]'
- en: A disk-backed cache for dataframes.
  id: totrans-8551
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  id: totrans-8552
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8553
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  id: totrans-8554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  id: totrans-8555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  id: totrans-8556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  id: totrans-8557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8558
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  id: totrans-8559
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1279]'
  id: totrans-8560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1279]'
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  id: totrans-8561
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8562
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-8563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  id: totrans-8564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  id: totrans-8565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8566
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  id: totrans-8567
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1280]'
  id: totrans-8568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1280]'
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  id: totrans-8569
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8570
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  id: totrans-8571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  id: totrans-8572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  id: totrans-8573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  id: totrans-8574
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  id: totrans-8575
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  id: totrans-8576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1281]'
  id: totrans-8577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1281]'
- en: Optionally show a progress bar for the given iterator.
  id: totrans-8578
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-8579
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  id: totrans-8580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  id: totrans-8581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  id: totrans-8582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8583
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  id: totrans-8584
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  id: totrans-8585
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  id: totrans-8586
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-8587
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1282]``````'
  id: totrans-8588
  prefs: []
  type: TYPE_NORMAL
