- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://zipline.ml4trading.io/api-reference.html](https://zipline.ml4trading.io/api-reference.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Running a Backtest'
  prefs: []
  type: TYPE_NORMAL
- en: The function [`run_algorithm()`](#zipline.run_algorithm "zipline.run_algorithm")
    creates an instance of `TradingAlgorithm` that represents a trading strategy and
    parameters to execute the strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Run a trading algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The start date of the backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime*) – The end date of the backtest..'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**initialize** (*callable**[**context -> None**]*) – The initialize function
    to use for the algorithm. This is called once at the very begining of the backtest
    and should be used to set up any state needed by the algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting capital for the backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**handle_data** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The handle_data function
    to use for the algorithm. This is called every minute when `data_frequency ==
    ''minute''` or every day when `data_frequency == ''daily''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_trading_start** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The before_trading_start
    function for the algorithm. This is called once before each trading day (after
    initialize on the first day).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**analyze** (*callable**[**(**context**,* *pd.DataFrame**)* *-> None**]**,*
    *optional*) – The analyze function to use for the algorithm. This function is
    called once at the end of the backtest and is passed the context and the performance
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}**,* *optional*) – The data
    frequency to run the algorithm at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The name of the data bundle to use to load the
    data to run the backtest with. This defaults to ‘quantopian-quandl’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle_timestamp** (*datetime**,* *optional*) – The datetime to lookup the
    bundle data for. This defaults to the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*TradingCalendar**,* *optional*) – The trading calendar
    to use for your backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**metrics_set** (*iterable**[**Metric**] or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The set of metrics to compute in the simulation.
    If a string is passed, resolve the set with [`zipline.finance.metrics.load()`](#zipline.finance.metrics.load
    "zipline.finance.metrics.load").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**benchmark_returns** (*pd.Series**,* *optional*) – Series of returns to use
    as the benchmark.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_extension** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the default zipline extension be
    loaded. This is found at `$ZIPLINE_ROOT/extension.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extensions** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – The names of any other extensions to
    load. Each element may either be a dotted module path like `a.b.c` or a path to
    a python file ending in `.py` like `a/b/c.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strict_extensions** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the run fail if any extensions fail
    to load. If this is false, a warning will be raised instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**[**str -> str**]**,* *optional*) – The os environment
    to use. Many extensions use this to get parameters. This defaults to `os.environ`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blotter** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.finance.blotter.Blotter**,* *optional*) – Blotter
    to use with this algorithm. If passed as a string, we look for a blotter construction
    function registered with `zipline.extensions.register` and call it with no parameters.
    Default is a [`zipline.finance.blotter.SimulationBlotter`](#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter") that never cancels orders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**perf** – The daily performance of the algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: The available data bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Trading Algorithm API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following methods are available for use in the `initialize`, `handle_data`,
    and `before_trading_start` API functions.
  prefs: []
  type: TYPE_NORMAL
- en: In all listed functions, the `self` argument refers to the currently executing
    `TradingAlgorithm` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Data Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  prefs: []
  type: TYPE_NORMAL
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  prefs: []
  type: TYPE_NORMAL
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a known last price for the asset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition above warrants some further explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**current_value** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar, pandas Series, or pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of its inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values produced for `fields` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**history** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or pd.DataFrame or pd.Panel
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: If the asset has never traded, returns False.
  prefs: []
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Schedule a function to be called repeatedly in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: alias of `Always`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market close.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute before market close.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market open.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute after market open.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: Orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed amount of money.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Base class for order execution styles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The exchange to which this order should be routed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at current market price.
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an order based on the order id returned from one of the order functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Order
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all of the current open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Cancel an open order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Sets the order cancellation policy for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Abstract cancellation policy interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Should all open orders be cancelled?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Orders are never automatically canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Equity by its ticker symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Lookup multuple Equities as a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a futures contract with a given symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Asset by its unique asset identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Set a restriction on which assets can be ordered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Set a rule specifying that this algorithm cannot take short positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the maximum leverage of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of orders that can be placed in a single day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Set the benchmark asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Sets the commission models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for commission models.
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per trade cost.
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Model commissions by applying a fixed cost per dollar transacted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Set the slippage models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for slippage models.
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Compute the number of shares and price to fill for `order` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Simple model assuming a fixed-size spread for all assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Model slippage as a quadratic function of percentage of historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Orders to sell will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Register a pipeline to be computed at the start of each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Get results of the pipeline attached by with name `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Track and record values each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Query the execution environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: any
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  prefs: []
  type: TYPE_NORMAL
- en: Blotters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [blotter](https://www.investopedia.com/terms/b/blotter.asp) documents trades
    and their details over a period of time, typically one trading day. Trade details
    include such things as the time, price, order size, and whether it was a buy or
    sell order. It is is usually created by a trading software that records the trades
    made through a data feed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Place a batch of orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_arg_lists** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*]*) – Tuples of args that order expects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_ids** – The unique identifier (or None) for each of the orders placed
    (or not placed).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None]'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is required for Blotter subclasses to be able to place a batch of orders,
    instead of being passed the order requests one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Cancel a single order
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Cancel all open orders for a given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Place an order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 : Buy/Cover amount < 0 : Sell/Short Market order : order(asset,
    amount) Limit order : order(asset, amount, style=LimitOrder(limit_price)) Stop
    order : order(asset, amount, style=StopOrder(stop_price)) StopLimit order : order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any open orders as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Removes all given orders from the blotter’s open_orders list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Cancel a single order
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Cancel all open orders for a given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Place an order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 :: Buy/Cover amount < 0 :: Sell/Short Market order: order(asset,
    amount) Limit order: order(asset, amount, style=LimitOrder(limit_price)) Stop
    order: order(asset, amount, style=StopOrder(stop_price)) StopLimit order: order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any open orders as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Removes all given orders from the blotter’s open_orders list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  prefs: []
  type: TYPE_NORMAL
- en: '## Pipeline API'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Pipeline`](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline") enables
    faster and more memory-efficient execution by optimizing the computation of factors
    during a backtest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: A Pipeline object represents a collection of named expressions to be compiled
    and executed by a PipelineEngine.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Pipeline has two important attributes: ‘columns’, a dictionary of named [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") instances, and ‘screen’, a [`Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") representing criteria for including an asset in the
    results of a Pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: To compute a pipeline in the context of a TradingAlgorithm, users must call
    `attach_pipeline` in their `initialize` function to register that the pipeline
    should be computed each trading day. The most recent outputs of an attached pipeline
    can be retrieved by calling `pipeline_output` from `handle_data`, `before_trading_start`,
    or a scheduled function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*,* *optional*) – Initial columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**screen** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Initial screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Add a column.
  prefs: []
  type: TYPE_NORMAL
- en: The results of computing `term` will show up as a column in the DataFrame produced
    by running this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – A Filter, Factor, or Classifier to add to the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to add.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite the existing entry if we already
    have a column named name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Get the domain for this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: If an explicit domain was provided at construction time, use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, infer a domain from the registered columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no domain can be inferred, return `default`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**default** (*zipline.pipeline.domain.Domain*) – Domain to use if no domain
    can be inferred from this pipeline by itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** – The domain for the pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.domain.Domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AmbiguousDomain** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – If the terms in `self` conflict with self._domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Remove a column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the column to remove.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**KeyError**](https://docs.python.org/3/library/exceptions.html#KeyError "(in
    Python v3.11)") – If name is not in self.columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**removed** – The removed term.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Term](#zipline.pipeline.Term "zipline.pipeline.Term")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Set a screen on this Pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter"))
    – The filter to apply as a screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite any existing screen. If overwrite
    is False and self.screen is not None, we raise an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Render this Pipeline as a DAG.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (*{''svg''**,* *''png''**,* *''jpeg''}*) – Image format to render
    with. Default is ‘svg’.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Compile into an ExecutionPlan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – Domain on which the pipeline
    will be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**all_dates** (*pd.DatetimeIndex*) – A calendar of dates to use to calculate
    starts and ends for each term.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The first date of requested output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The last date of requested output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies, including metadata about extra
    row requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.ExecutionPlan
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Compile into a simple TermGraph with no extra row metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.TermGraph
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The output columns of this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** – Map from column name to expression computing that column’s output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)"), zipline.pipeline.ComputableTerm]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The screen of this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**screen** – Term defining the screen for this pipeline. If `screen` is a filter,
    rows that do not pass the filter (i.e., rows for which the filter computed `False`)
    will be dropped from the output of this pipeline before returning results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting a screen on a Pipeline does not change the values produced for any
    rows: it only affects whether a given row is returned. Computing a pipeline with
    a screen is logically equivalent to computing the pipeline without the screen
    and then, as a post-processing-step, filtering out any rows for which the screen
    computed `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Base class for user-defined Factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*iterable**,* *optional*) – An iterable of BoundColumn instances
    (e.g. USEquityPricing.close), describing the data to load and pass to self.compute.
    If this argument is not passed to the CustomFactor constructor, we look for a
    class-level attribute named inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**outputs** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – An iterable of strings which represent
    the names of each output this factor should compute and return. If this argument
    is not passed to the CustomFactor constructor, we look for a class-level attribute
    named outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of rows to pass for each input. If
    this argument is not passed to the CustomFactor constructor, we look for a class-level
    attribute named window_length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing the assets on which we should compute each day.
    Each call to `CustomFactor.compute` will only receive assets for which `mask`
    produced True on the day for which compute is being called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Users implementing their own Factors should subclass CustomFactor and implement
    a method named compute with the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: On each simulation date, `compute` will be called with the current date, an
    array of sids, an output array, and an input array for each expression passed
    as inputs to the CustomFactor constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific types of the values passed to compute are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`compute` functions should expect to be passed NaN values for dates on which
    no data was available for an asset. This may include dates on which an asset did
    not yet exist.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a CustomFactor requires 10 rows of close price data, and asset
    A started trading on Monday June 2nd, 2014, then on Tuesday, June 3rd, 2014, the
    column of input data for asset A will have 9 leading NaNs for the preceding days
    on which data was not yet available.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A CustomFactor with pre-declared defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'A CustomFactor without defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'A CustomFactor with multiple outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: If a CustomFactor has multiple outputs, all outputs must have the same
    dtype. For instance, in the example above, if alpha is a float then beta must
    also be a float.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline expression computing a boolean output.
  prefs: []
  type: TYPE_NORMAL
- en: Filters are most commonly useful for describing sets of assets to include or
    exclude for some particular purpose. Many Pipeline API functions accept a `mask`
    argument, which can be supplied a Filter indicating that only values passing the
    Filter should be considered when performing the requested computation. For example,
    [`zipline.pipeline.Factor.top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top")
    accepts a mask indicating that ranks should be computed only on assets that passed
    the specified Filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to construct a Filter is via one of the comparison operators
    (`<`, `<=`, `!=`, `eq`, `>`, `>=`) of [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor").
    For example, a natural way to construct a Filter for stocks with a 10-day VWAP
    less than $20.0 is to first construct a Factor computing 10-day VWAP and compare
    it to the scalar value 20.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Filters can also be constructed via comparisons between two Factors. For example,
    to construct a Filter producing True for asset/date pairs where the asset’s 10-day
    VWAP was greater than it’s 30-day VWAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Filters can be combined via the `&` (and) and `|` (or) operators.
  prefs: []
  type: TYPE_NORMAL
- en: '`&`-ing together two filters produces a new Filter that produces True if **both**
    of the inputs produced True.'
  prefs: []
  type: TYPE_NORMAL
- en: '`|`-ing together two filters produces a new Filter that produces True if **either**
    of its inputs produced True.'
  prefs: []
  type: TYPE_NORMAL
- en: The `~` operator can be used to invert a Filter, swapping all True values with
    Falses and vice-versa.
  prefs: []
  type: TYPE_NORMAL
- en: Filters may be set as the `screen` attribute of a Pipeline, indicating asset/date
    pairs for which the filter produces False should be excluded from the Pipeline’s
    output. This is useful both for reducing noise in the output of a Pipeline and
    for reducing memory consumption of Pipeline results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Binary Operator: ‘&’'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Binary Operator: ‘|’'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Create a term that selects values from one of two choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**if_true** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if_false** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**merged** – A term that computes by taking values from either `if_true` or
    `if_false`, depending on the values produced by `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: The returned term draws from``if_true`` at locations where `self` produces True,
    and it draws from `if_false` at locations where `self` produces False.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.term.ComputableTerm
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `g` be another Factor that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let `condition` be a Filter that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the expression `condition.if_else(f, g)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v1.25)"), [`Factor.fillna`](#zipline.pipeline.Factor.fillna "zipline.pipeline.Factor.fillna")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline API expression producing a numerical or date-valued output.
  prefs: []
  type: TYPE_NORMAL
- en: Factors are the most commonly-used Pipeline term, representing the result of
    any computation producing a numerical result.
  prefs: []
  type: TYPE_NORMAL
- en: Factors can be combined, both with other Factors and with scalar values, via
    any of the builtin mathematical operators (`+`, `-`, `*`, etc).
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it easy to write complex expressions that combine multiple Factors.
    For example, constructing a Factor that computes the average of two other Factors
    is simply:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Factors can also be converted into [`zipline.pipeline.Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") objects via comparison operators: (`<`, `<=`, `!=`,
    `eq`, `>`, `>=`).'
  prefs: []
  type: TYPE_NORMAL
- en: There are many natural operators defined on Factors besides the basic numerical
    operators. These include methods for identifying missing or extreme-valued outputs
    (`isnull()`, `notnull()`, [`isnan()`](#zipline.pipeline.Factor.isnan "zipline.pipeline.Factor.isnan"),
    [`notnan()`](#zipline.pipeline.Factor.notnan "zipline.pipeline.Factor.notnan")),
    methods for normalizing outputs ([`rank()`](#zipline.pipeline.Factor.rank "zipline.pipeline.Factor.rank"),
    [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean"),
    [`zscore()`](#zipline.pipeline.Factor.zscore "zipline.pipeline.Factor.zscore")),
    and methods for constructing Filters based on rank-order properties of results
    ([`top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top"), [`bottom()`](#zipline.pipeline.Factor.bottom
    "zipline.pipeline.Factor.bottom"), [`percentile_between()`](#zipline.pipeline.Factor.percentile_between
    "zipline.pipeline.Factor.percentile_between")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self == other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self == other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Factor that computes `self` and subtracts the mean from row of the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, de-meaning the partitioned arrays, and stitching the sub-results
    back together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when computing means.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute means.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `c` be a Classifier producing the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `m` be a Filter producing the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Then `f.demean()` will subtract the mean from each row produced by `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(mask=m)` will subtract the mean from each row, but means will be
    calculated ignoring values on the diagonal, and NaNs will written to the diagonal
    in the output. Diagonal values are ignored because they are the locations where
    the mask `m` produced False.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(groupby=c)` will subtract the group-mean of AAPL/MSFT and MCD/BK
    from their respective entries. The AAPL/MSFT are grouped together because both
    assets always produce 1 in the output of the classifier `c`. Similarly, MCD/BK
    are grouped together because they always produce 2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(mask=m, groupby=c)` will also subtract the group-mean of AAPL/MSFT
    and MCD/BK, but means will be calculated ignoring values on the diagonal , and
    NaNs will be written to the diagonal in the output.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean is sensitive to the magnitudes of outliers. When working with factor that
    can potentially produce large outliers, it is often useful to use the `mask` parameter
    to discard values at the extremes of the distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '`demean()` is only supported on Factors of dtype float64.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Factor that Z-Scores each day’s results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Z-Score of a row is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means and standard deviations, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, z-scoring the partitioned arrays, and stitching the sub-results
    back together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when Z-Scoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute Z-Scores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zscored** – A Factor producing that z-scores the output of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean and standard deviation are sensitive to the magnitudes of outliers. When
    working with factor that can potentially produce large outliers, it is often useful
    to use the `mask` parameter to discard values at the extremes of the distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '`zscore()` is only supported on Factors of dtype float64.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: See [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean")
    for an in-depth example of the semantics for `mask` and `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor representing the sorted rank of each column within each
    row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *{''ordinal''**,* *''min''**,* *''max''**,* *''dense''**,*
    *''average''}*) – The method used to assign ranks to tied elements. See scipy.stats.rankdata
    for a full description of the semantics for each ranking method. Default is ‘ordinal’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascending** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether to return sorted rank in ascending
    or descending order. Default is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, ranks are computed ignoring any asset/date pairs for which mask
    produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ranks** – A new factor that will compute the ranking of the data produced
    by self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The default value for method is different from the default for scipy.stats.rankdata.
    See that function’s documentation for a full description of the valid inputs to
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Missing or non-existent data on a given day will cause an asset to be given
    a rank of NaN for that day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.rankdata()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata
    "(in SciPy v1.11.1)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that computes rolling pearson correlation coefficients
    between `target` and the columns of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`Factor.spearmanr()`](#zipline.pipeline.Factor.spearmanr
    "zipline.pipeline.Factor.spearmanr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that computes rolling spearman rank correlation coefficients
    between `target` and the columns of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), [`Factor.pearsonr()`](#zipline.pipeline.Factor.pearsonr
    "zipline.pipeline.Factor.pearsonr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that performs an ordinary least-squares regression predicting
    the columns of self from target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term to use as the predictor/independent variable in each regression. This
    may be a Factor, a BoundColumn or a Slice. If target is two-dimensional, regressions
    are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed with the target
    slice each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**regressions** – A new Factor that will compute linear regressions of target
    against the columns of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that regresses AAPL’s 10-day returns against
    the 10-day returns of all other assets, computing each regression over 30 days.
    This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.linregress()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html#scipy.stats.linregress
    "(in SciPy v1.11.1)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new factor that winsorizes the result of this factor.
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing changes values ranked less than the minimum percentile to the value
    at the minimum percentile. Similarly, values ranking above the maximum percentile
    are changed to the value at the maximum percentile.
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing is useful for limiting the impact of extreme data points without
    completely removing those points.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    percentile cutoffs, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, winsorization is applied separately separately to
    each group defined by `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or below this percentile will be
    replaced with the (len(input) * min_percentile)th lowest value. If low values
    should not be clipped, use 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or above this percentile will be
    replaced with the (len(input) * max_percentile)th lowest value. If high values
    should not be clipped, use 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when winsorizing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to winsorize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**winsorized** – A Factor producing a winsorized version of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Given a pipeline with columns, defined above, the result for a given day could
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.mstats.winsorize()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize
    "(in SciPy v1.11.1)"), [`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quantiles of the output of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with an integer value from 0
    to (bins - 1). NaNs are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bins** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – Number of bins labels to compute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quantiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quantiles** – A classifier producing integer labels ranging from 0 to (bins
    - 1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quartiles over the output of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, corresponding to the first, second, third, or fourth quartile over each
    row. NaN data points are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quartiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quartiles** – A classifier producing integer labels ranging from 0 to 3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quintile labels on `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, 4, corresonding to quintiles over each row. NaN data points are labelled
    with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quintiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quintiles** – A classifier producing integer labels ranging from 0 to 4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing decile labels on `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value from 0 to 9 corresonding
    to deciles over each row. NaN data points are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing deciles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deciles** – A classifier producing integer labels ranging from 0 to 9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching the top N asset values of self each day.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the top N asset values for
    each group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, top values are computed ignoring any asset/date pairs for which
    mask produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching the bottom N asset values of self each day.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the bottom N asset values
    **for each group** defined by `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, bottom values are computed ignoring any asset/date pairs for
    which mask produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching values of self that fall within the range defined
    by `min_percentile` and `max_percentile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    above this percentile in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    below this percentile in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when percentile calculating
    thresholds. If mask is supplied, percentile cutoffs are computed each day using
    only assets for which `mask` returns True. Assets for which `mask` produces False
    will produce False in the output of this Factor as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out** – A new filter that will compute the specified percentile-range mask.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for all values where this Factor is NaN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for values where this Factor is not NaN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for values where this Factor is anything but NaN, inf,
    or -inf.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Clip (limit) the values in a factor.
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Clip (limit) the values in a factor.
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self + other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self + other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self - other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self - other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self * other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self * other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self / other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self / other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self % other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self % other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self ** other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self ** other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self < other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self < other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self <= other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self <= other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self != other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self != other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self >= other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self >= other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self > other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self > other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Create a new term that fills missing values of this term’s output with `fill_value`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value** (*zipline.pipeline.ComputableTerm**, or* *object.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: Object to use as replacement for missing values.
  prefs: []
  type: TYPE_NORMAL
- en: If a ComputableTerm (e.g. a Factor) is passed, that term’s results will be used
    as fill values.
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar (e.g. a number) is passed, the scalar will be used as a fill value.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Filling with a Scalar:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Then `f.fillna(0)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '**Filling with a Term:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be as above, and let `g` be another Factor which would produce the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `f.fillna(g)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filled** – A term computing the same results as `self`, but with missing
    values filled in using values from `fill_value`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.ComputableTerm
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the mean of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the stddev of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the max of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the min of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the median of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the sum of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Base class for objects that can appear in the compute graph of a [`zipline.pipeline.Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline").
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Pipeline API users only interact with [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") via subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`BoundColumn`](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Classifier`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instances of [`Term`](#zipline.pipeline.Term "zipline.pipeline.Term") are **memoized**.
    If you call a Term’s constructor with the same arguments twice, the same object
    will be returned from both calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Memoization of terms means that it’s generally unsafe to modify attributes of
    a term after construction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when rendering GraphViz graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when recursively rendering terms with inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Pipeline datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    is defined by two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of [`Column`](#zipline.pipeline.data.Column "zipline.pipeline.data.Column")
    objects that describe the queryable attributes of the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Domain` describing the assets and calendar of the data represented by the
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new Pipeline dataset, define a subclass of [`DataSet`](#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") and set one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects as class-level attributes. Each column
    requires a `np.dtype` that describes the type of data that should be produced
    by a loader for the dataset. Integer columns must also provide a “missing value”
    to be used when no value is available for a given asset/date combination.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the domain of a dataset is the special singleton value, `GENERIC`,
    which means that they can be used in a Pipeline running on **any** domain.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it may be preferable to restrict a dataset to only allow support
    a single domain. For example, a DataSet may describe data from a vendor that only
    covers the US. To restrict a dataset to a specific domain, define a domain attribute
    at class scope.
  prefs: []
  type: TYPE_NORMAL
- en: You can also define a domain-specific version of a generic DataSet by calling
    its `specialize` method with the domain of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in EquityPricing dataset is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'The built-in USEquityPricing dataset is a specialization of EquityPricing.
    It is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Columns can have types other than float. A dataset containing assorted company
    metadata might be defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Because numpy has no native support for integers with missing values, users
    are strongly encouraged to use floats for any data that’s semantically numeric.
    Doing so enables the use of NaN as a natural missing value, which has useful propagation
    semantics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Look up a column by name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to look up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column with the given name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**AttributeError**](https://docs.python.org/3/library/exceptions.html#AttributeError
    "(in Python v3.11)") – If no column with the given name exists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: An abstract column of data, not yet associated with a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Bind a Column object to its name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: A column of data that’s been concretely bound to a particular dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: The dtype of data produced when this column is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.dtype](https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: A [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter"), [`Factor`](#zipline.pipeline.Factor
    "zipline.pipeline.Factor"), or `Classifier` computing the most recently known
    value of this column on each date. See `zipline.pipeline.mixins.LatestMixin` for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.LoadableTerm
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: The dataset to which this column is bound.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: The name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Extra metadata associated with this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this column produces currency-denominated data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class are dynamically created upon access to attributes of
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet"). For
    example, [`close`](#zipline.pipeline.data.EquityPricing.close "zipline.pipeline.data.EquityPricing.close")
    is an instance of this class. Pipeline API users should never construct instances
    of this directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this column produces currency-denominated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Specification for currency conversions applied for this term.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: The dataset to which this column is bound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Construct a currency-converted version of this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**currency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.currency.Currency*) – Currency into which to convert
    this column’s data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column producing the same data as `self`, but currency-converted
    into `currency`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Short repr to use when rendering Pipeline graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: A copy of the metadata for this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: The name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: The fully-qualified name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Short repr used to render in recursive contexts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Specialize `self` to a concrete domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Unspecialize a column to its generic form.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `column.specialize(GENERIC)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Pipeline dataset families.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs: []
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    in a pipeline expression, one must choose a specific value for each of the extra
    dimensions using the [`slice()`](#zipline.pipeline.data.DataSetFamily.slice "zipline.pipeline.data.DataSetFamily.slice")
    method. For example, given a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'This dataset might represent a table with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    can be converted to a regular [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Take a slice of a DataSetFamily to produce a dataset indexed by asset and date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***args** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – The coordinates to fix along each extra dimension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset** – A regular pipeline dataset indexed by asset and date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The extra dimensions coords used to produce the result are available under the
    `extra_coords` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    containing daily trading prices and volumes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Built-in Factors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Average Daily Dollar Volume
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Calculates daily percent change in close price.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Average
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Standard Deviation
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the most recently-known value of inputs[0] on each day.
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Max Drawdown
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change in close price over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Short repr to use when rendering Pipeline graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Get the target of the beta calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Relative Strength Index
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Average Value of an arbitrary column
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Volume Weighted Average Price
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Helper for VWAP-like computations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline filter indicating input term has data for a given window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes to True only for the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when rendering GraphViz graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined assets.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined sids.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: PipelineEngine class that computes each term independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: Interface for PipelineLoaders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: Load data for `columns` as AdjustedArrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader that reads its input from DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: Load data from our stored baseline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader for loading daily OHLCV data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: Exchange and Asset Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: An exchange where assets are traded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *None*) – The full name of the exchange, for example ‘NEW
    YORK STOCK EXCHANGE’ or ‘NASDAQ GLOBAL MARKET’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**canonical_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The canonical name of the exchange, for example ‘NYSE’
    or ‘NASDAQ’. If None this will be the same as the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The country code where the exchange is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: The full name of the exchange, for example ‘NEW YORK STOCK EXCHANGE’ or ‘NASDAQ
    GLOBAL MARKET’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: The canonical name of the exchange, for example ‘NYSE’ or ‘NASDAQ’. If None
    this will be the same as the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: The country code where the exchange is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: The trading calendar the exchange uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: TradingCalendar
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: The trading calendar that this exchange uses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Base class for entities that can be owned by a trading algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Persistent unique identifier assigned to the asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: Most recent ticker under which the asset traded. This field can change without
    warning if the asset changes tickers. Use `sid` if you need a persistent identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: Full name of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Canonical short name of the exchange on which the asset trades (e.g., ‘NYSE’).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: Full name of the exchange on which the asset trades (e.g., ‘NEW YORK STOCK EXCHANGE’).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: Information about the exchange this asset is listed on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.ExchangeInfo](#zipline.assets.ExchangeInfo "zipline.assets.ExchangeInfo")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Two character code indicating the country in which the asset trades.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: Date on which the asset first traded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: Last date on which the asset traded. On Quantopian, this value is set to the
    current (real time) date for assets that are still trading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: Minimum amount that the price can change for this asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Date on which positions in this asset will be automatically liquidated to cash
    during a simulation. By default, this is three days after `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Build an Asset instance from a dict.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Returns whether the asset is alive at the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session_label** (*pd.Timestamp*) – The desired session label to check. (midnight
    UTC)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset is alive at the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt_minute** (*pd.Timestamp* *(**UTC**,* *tz-aware**)*) – The minute to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset’s exchange is open at the given minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a python dict containing all attributes of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: This is often useful for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**as_dict**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Asset subclass representing partial ownership of a company, trust, or partnership.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Asset subclass representing ownership of a futures contract.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a python dict.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: ABC for types that are convertible to integer-representations of Assets.
  prefs: []
  type: TYPE_NORMAL
- en: Includes Asset, str, and Integral
  prefs: []
  type: TYPE_NORMAL
- en: Trading Calendar API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The events that generate the timeline of the algorithm execution adhere to a
    given `TradingCalendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Data API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Read CSVs as DataFrames from our asset map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: Writer for data to be read by SQLiteAdjustmentReader
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: Write both dividend payouts and the derived price adjustment ratios.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Write dividend payout data to SQLite table dividend_payouts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: Class used to write data to an assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: Connect to database and create tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of first row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of last row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> calendar index of first row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the first session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the last session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: String identifier of trading calendar used (ie, “NYSE”).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: Get currencies in which prices are quoted for the requested sids.
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: Get the latest minute on or before `dt` in which `asset` traded.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: Loads adjustments based on corporate actions from a SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Load collection of Adjustment objects from underlying adjustments db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for equities in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given exchange_name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for futures consracts in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: Get the value of a supplementary field for an asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: Group a list of sids by asset type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve asset types for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a future contract by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: Convert an object into an Asset or sequence of Assets.
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an equity by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a list of equities by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: but potentially faster because repeated lookups are memoized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all assets in sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the Asset for a given sid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Equity objects for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Future objects for an iterable of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: All the sids in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: Interface to all of the data that a zipline simulation needs.
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: Returns any splits for the given sids and the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: Extra sources always have a sid column.
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Returns the daily returns for the given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Register a data bundle ingest function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: Ingest data for a given bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: Loads a previously ingested bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Unregister a bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").``  ``## Risk Metrics
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm State
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: The updated portfolio being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: The updated account being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: The current set of positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Override fields on `self.account`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: Compute the current portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: Process the commission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Process dividends for the next session.
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of an order that was placed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: Add a transaction to ledger, updating the current state as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: Force a computation of the current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: Object providing read-only access to current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Dict-like object containing information about currently-held positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash currently held in portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash in the portfolio at the start of the backtest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: The current state of the positions held.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: The current status of the positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: Computed values from the current positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: The gross position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: The gross position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: The net position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: The net position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: The number of long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: The number of short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Emit the current value of a ledger field every bar or every session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the daily and cumulative returns of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative cash flow.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily orders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: End of simulation alpha and beta to the benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the maximum account leverage.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Register a new metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance of the metrics set registered with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Unregister an existing metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: A simple struct for maintaining a cached object with an expiration date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: A disk-backed cache for dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Optionally show a progress bar for the given iterator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Running a Backtest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function [`run_algorithm()`](#zipline.run_algorithm "zipline.run_algorithm")
    creates an instance of `TradingAlgorithm` that represents a trading strategy and
    parameters to execute the strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: Run a trading algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The start date of the backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime*) – The end date of the backtest..'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**initialize** (*callable**[**context -> None**]*) – The initialize function
    to use for the algorithm. This is called once at the very begining of the backtest
    and should be used to set up any state needed by the algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting capital for the backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**handle_data** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The handle_data function
    to use for the algorithm. This is called every minute when `data_frequency ==
    ''minute''` or every day when `data_frequency == ''daily''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_trading_start** (*callable**[**(**context**,* [*BarData*](#zipline.protocol.BarData
    "zipline.protocol.BarData")*)* *-> None**]**,* *optional*) – The before_trading_start
    function for the algorithm. This is called once before each trading day (after
    initialize on the first day).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**analyze** (*callable**[**(**context**,* *pd.DataFrame**)* *-> None**]**,*
    *optional*) – The analyze function to use for the algorithm. This function is
    called once at the end of the backtest and is passed the context and the performance
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}**,* *optional*) – The data
    frequency to run the algorithm at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The name of the data bundle to use to load the
    data to run the backtest with. This defaults to ‘quantopian-quandl’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle_timestamp** (*datetime**,* *optional*) – The datetime to lookup the
    bundle data for. This defaults to the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*TradingCalendar**,* *optional*) – The trading calendar
    to use for your backtest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**metrics_set** (*iterable**[**Metric**] or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The set of metrics to compute in the simulation.
    If a string is passed, resolve the set with [`zipline.finance.metrics.load()`](#zipline.finance.metrics.load
    "zipline.finance.metrics.load").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**benchmark_returns** (*pd.Series**,* *optional*) – Series of returns to use
    as the benchmark.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_extension** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the default zipline extension be
    loaded. This is found at `$ZIPLINE_ROOT/extension.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extensions** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – The names of any other extensions to
    load. Each element may either be a dotted module path like `a.b.c` or a path to
    a python file ending in `.py` like `a/b/c.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strict_extensions** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the run fail if any extensions fail
    to load. If this is false, a warning will be raised instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**[**str -> str**]**,* *optional*) – The os environment
    to use. Many extensions use this to get parameters. This defaults to `os.environ`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blotter** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.finance.blotter.Blotter**,* *optional*) – Blotter
    to use with this algorithm. If passed as a string, we look for a blotter construction
    function registered with `zipline.extensions.register` and call it with no parameters.
    Default is a [`zipline.finance.blotter.SimulationBlotter`](#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter") that never cancels orders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**perf** – The daily performance of the algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: The available data bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Trading Algorithm API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following methods are available for use in the `initialize`, `handle_data`,
    and `before_trading_start` API functions.
  prefs: []
  type: TYPE_NORMAL
- en: In all listed functions, the `self` argument refers to the currently executing
    `TradingAlgorithm` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Data Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  prefs: []
  type: TYPE_NORMAL
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  prefs: []
  type: TYPE_NORMAL
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a known last price for the asset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition above warrants some further explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**current_value** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar, pandas Series, or pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of its inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values produced for `fields` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**history** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or pd.DataFrame or pd.Panel
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: If the asset has never traded, returns False.
  prefs: []
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: Schedule a function to be called repeatedly in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: alias of `Always`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market close.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute before market close.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market open.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute after market open.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: Orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed amount of money.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: Base class for order execution styles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: The exchange to which this order should be routed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at current market price.
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an order based on the order id returned from one of the order functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Order
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all of the current open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: Cancel an open order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: Sets the order cancellation policy for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: Abstract cancellation policy interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: Should all open orders be cancelled?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: Orders are never automatically canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Equity by its ticker symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: Lookup multuple Equities as a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a futures contract with a given symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Asset by its unique asset identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: Set a restriction on which assets can be ordered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: Set a rule specifying that this algorithm cannot take short positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the maximum leverage of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of orders that can be placed in a single day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: Set the benchmark asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: Sets the commission models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for commission models.
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per trade cost.
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: Model commissions by applying a fixed cost per dollar transacted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: Set the slippage models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for slippage models.
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: Compute the number of shares and price to fill for `order` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: Simple model assuming a fixed-size spread for all assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: Model slippage as a quadratic function of percentage of historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: 'Orders to sell will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: Register a pipeline to be computed at the start of each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: Get results of the pipeline attached by with name `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: Track and record values each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: Query the execution environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: any
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  prefs: []
  type: TYPE_NORMAL
- en: Data Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: Provides methods for accessing minutely and daily price/volume data from Algorithm
    API functions.
  prefs: []
  type: TYPE_NORMAL
- en: Also provides utility methods to determine if an asset is alive, and if it has
    recent trade data.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of this object is passed as `data` to `handle_data()` and `before_trading_start()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_portal** ([*DataPortal*](#zipline.data.data_portal.DataPortal "zipline.data.data_portal.DataPortal"))
    – Provider for bar pricing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simulation_dt_func** (*callable*) – Function which returns the current simulation
    time. This is usually bound to a method of TradingSimulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''minute''**,* *''daily''}*) – The frequency of the bar
    data; i.e. whether the data is daily or minute bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**restrictions** (*zipline.finance.asset_restrictions.Restrictions*) – Object
    that combines and returns restricted list information from multiple sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: 'For the given asset or iterable of assets, returns True if all of the following
    are true:'
  prefs: []
  type: TYPE_NORMAL
- en: The asset is alive for the session of the current simulation time (if current
    simulation time is not a market minute, we use the next session).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asset’s exchange is open at the current simulation time or at the simulation
    calendar’s next market minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a known last price for the asset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which tradability should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition above warrants some further explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: If the asset’s exchange calendar is identical to the simulation calendar, then
    this condition always returns True.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are market minutes in the simulation calendar outside of this asset’s
    exchange’s trading hours (for example, if the simulation is running on the CMES
    calendar but the asset is MSFT, which trades on the NYSE), during those minutes,
    this condition will return False (for example, 3:15 am Eastern on a weekday, during
    which the CMES is open but the NYSE is closed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**can_trade** – Bool or series of bools indicating whether the requested asset(s)
    can be traded in the current minute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “current” value of the given fields for the given assets at the
    current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**.*) – Requested data field(s). Valid field names are:
    “price”, “last_traded”, “open”, “high”, “low”, “close”, and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**current_value** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar, pandas Series, or pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of its inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    scalar (either a float or a `pd.Timestamp` depending on the field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and a list of fields are requested, the returned value is
    a `pd.Series` whose indices are the requested fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a single field are requested, the returned value is
    a `pd.Series` whose indices are the assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a list of assets and a list of fields are requested, the returned value is
    a `pd.DataFrame`. The columns of the returned frame will be the requested fields,
    and the index of the frame will be the requested assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values produced for `fields` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting “price” produces the last known close price for the asset, forward-filled
    from an earlier minute if there is no trade this minute. If there is no last known
    value (either because the asset has never traded, or because it has delisted)
    NaN is returned. If a value is found, and we had to cross an adjustment boundary
    (split, dividend, etc) to get it, the value is adjusted to the current simulation
    time before being returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “open”, “high”, “low”, or “close” produces the open, high, low, or
    close for the current minute. If no trades occurred this minute, `NaN` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “volume” produces the trade volume for the current minute. If no
    trades occurred this minute, 0 is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting “last_traded” produces the datetime of the last minute in which the
    asset traded, even if the asset has stopped trading. If there is no last known
    value, `pd.NaT` is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time for an asset, we use
    the most recent market close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: Returns a trailing window of length `bar_count` with data for the given assets,
    fields, and frequency, adjusted for splits, dividends, and mergers as of the current
    simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: The semantics for missing data are identical to the ones described in the notes
    for [`current()`](#zipline.protocol.BarData.current "zipline.protocol.BarData.current").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset(s) for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields** (*string* *or* *iterable* *of* *string.*) – Requested data field(s).
    Valid field names are: “price”, “last_traded”, “open”, “high”, “low”, “close”,
    and “volume”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of data observations requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – String indicating whether to load daily or minutely data
    observations. Pass ‘1m’ for minutely data, ‘1d’ for daily data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**history** – See notes below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or pd.DataFrame or pd.Panel
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The return type of this function depends on the types of `assets` and `fields`:'
  prefs: []
  type: TYPE_NORMAL
- en: If a single asset and a single field are requested, the returned value is a
    `pd.Series` of length `bar_count` whose index is `pd.DatetimeIndex`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a single asset and multiple fields are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(fields))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `fields`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and a single field are requested, the returned value is a
    `pd.DataFrame` with shape `(bar_count, len(assets))`. The frame’s index will be
    a `pd.DatetimeIndex`, and its columns will be `assets`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple assets and multiple fields are requested, the returned value is
    a `pd.DataFrame` with a pd.MultiIndex containing pairs of `pd.DatetimeIndex`,
    and `assets`, while the columns while contain the field(s). It has shape `(bar_count
    * len(assets), len(fields))`. The names of the pd.MultiIndex are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` if frequency == ‘1d’`` or `date_time` if frequency == ‘1m``, and'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`asset`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the last market
    close instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: For the given asset or iterable of assets, returns True if the asset is alive
    and there is no trade data for the current simulation time.
  prefs: []
  type: TYPE_NORMAL
- en: If the asset has never traded, returns False.
  prefs: []
  type: TYPE_NORMAL
- en: If the current simulation time is not a valid market time, we use the current
    time to check if the asset is alive, but we use the last market minute/day for
    the trade data check.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset")
    *or* *iterable* *of* [*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – Asset(s) for which staleness should be determined.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_stale** – Bool or series of bools indicating whether the requested asset(s)
    are stale.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    or pd.Series[[bool](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: Schedule a function to be called repeatedly in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func** (*callable*) – The function to execute when the rule is triggered.
    `func` should have the same signature as `handle_data`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    dates on which to execute `func`. If not passed, the function will run every trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time_rule** (*zipline.utils.events.EventRule**,* *optional*) – Rule for the
    time at which to execute `func`. If not passed, the function will execute at the
    end of the first market minute of the day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half_days** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should this rule fire on half days? Default
    is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*Sentinel**,* *optional*) – Calendar used to compute rules that
    depend on the trading calendar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.date_rules`](#zipline.api.date_rules "zipline.api.date_rules"),
    [`zipline.api.time_rules`](#zipline.api.time_rules "zipline.api.time_rules")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: Factories for date-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to month end
    to trigger. Default is 0, i.e., trigger on the last day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each month. Default is 0, i.e., trigger on the first trading day of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days before the end of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days prior to week end
    to trigger. Default is 0, i.e., trigger on the last trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers a fixed number of trading days after the start of
    each week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**days_offset** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of trading days to wait before triggering
    each week. Default is 0, i.e., trigger on the first trading day of the week.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: Factories for time-based [`schedule_function()`](#zipline.api.schedule_function
    "zipline.api.schedule_function") rules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`schedule_function()`](#zipline.api.schedule_function "zipline.api.schedule_function")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: alias of `Always`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market close.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market close
    at which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait before market
    close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute before market close.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: Create a rule that triggers at a fixed offset from market open.
  prefs: []
  type: TYPE_NORMAL
- en: The offset can be specified either as a [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)"), or as a number of hours and minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** ([*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)")*,* *optional*) – If passed, the offset from market open at
    which to trigger. Must be at least 1 minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hours** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of hours to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* *optional*) – If passed, number of minutes to wait after market
    open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.utils.events.EventRule
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If no arguments are passed, the default offset is one minute after market open.
  prefs: []
  type: TYPE_NORMAL
- en: If `offset` is passed, `hours` and `minutes` must not be passed. Conversely,
    if either `hours` or `minutes` are passed, `offset` must not be passed.
  prefs: []
  type: TYPE_NORMAL
- en: Orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle")*,*
    *optional*) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The `limit_price` and `stop_price` arguments provide shorthands for passing
    common execution styles. Passing `limit_price=N` is equivalent to `style=LimitOrder(N)`.
    Similarly, passing `stop_price=M` is equivalent to `style=StopOrder(M)`, and passing
    `limit_price=N` and `stop_price=M` is equivalent to `style=StopLimitOrder(N, M)`.
    It is an error to pass both a `style` and `limit_price` or `stop_price`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order_value()`](#zipline.api.order_value
    "zipline.api.order_value"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: Place an order for a fixed amount of money.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `order(asset, value / data.current(asset, 'price'))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    to be ordered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Amount of value of `asset` to be transacted. The number
    of shares bought or sold will be equal to `value / current_price`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_percent()`](#zipline.api.order_percent
    "zipline.api.order_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: Place an order in the specified asset corresponding to the given percent of
    the current portfolio value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**percent** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The percentage of the portfolio value to allocate to `asset`.
    This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_value()`](#zipline.api.order_value "zipline.api.order_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target number of shares. If the position
    doesn’t already exist, this is equivalent to placing a new order. If the position
    does exist, this is equivalent to placing an order for the difference between
    the target number of shares and the current number of shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The desired number of shares of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 shares of `sid(0)` because the first call to `order_target`
    will not have been filled when the second `order_target` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target value. If the position doesn’t
    already exist, this is equivalent to placing a new order. If the position does
    exist, this is equivalent to placing an order for the difference between the target
    value and the current value. If the Asset being ordered is a Future, the ‘target
    value’ calculated is actually the target exposure, as Futures have no ‘value’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired total value of `asset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20 dollars of `sid(0)` because the first call to `order_target_value`
    will not have been filled when the second `order_target_value` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_percent()`](#zipline.api.order_target_percent
    "zipline.api.order_target_percent")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: Place an order to adjust a position to a target percent of the current portfolio
    value. If the position doesn’t already exist, this is equivalent to placing a
    new order. If the position does exist, this is equivalent to placing an order
    for the difference between the target percent and the current percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The desired percentage of the portfolio value to allocate
    to `asset`. This is specified as a decimal, for example: 0.50 means 50%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The limit price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The stop price for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*ExecutionStyle*](#zipline.finance.execution.ExecutionStyle "zipline.finance.execution.ExecutionStyle"))
    – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`order_target_value` does not take into account any open orders. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: This code will result in 20% of the portfolio being allocated to sid(0) because
    the first call to `order_target_percent` will not have been filled when the second
    `order_target_percent` call is made.
  prefs: []
  type: TYPE_NORMAL
- en: See [`zipline.api.order()`](#zipline.api.order "zipline.api.order") for more
    information about `limit_price`, `stop_price`, and `style`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.execution.ExecutionStyle`](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle"), [`zipline.api.order()`](#zipline.api.order
    "zipline.api.order"), [`zipline.api.order_target()`](#zipline.api.order_target
    "zipline.api.order_target"), [`zipline.api.order_target_value()`](#zipline.api.order_target_value
    "zipline.api.order_target_value")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: Base class for order execution styles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: The exchange to which this order should be routed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: Get the limit price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: Get the stop price for this order. Returns either None or a numerical value
    >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at current market price.
  prefs: []
  type: TYPE_NORMAL
- en: This is the default for orders placed with [`order()`](#zipline.api.order "zipline.api.order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: Execution style for orders to be filled at a price equal to or better than a
    specified limit price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a market order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: Execution style representing a limit order to be placed if market price reaches
    a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Maximum price for buys, or minimum price for sells, at
    which the order should be filled, if placed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stop_price** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – Price threshold at which the order should be placed. For
    sells, the order will be placed if market price falls below this value. For buys,
    the order will be placed if market price rises above this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an order based on the order id returned from one of the order functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The unique identifier for the order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** – The order object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Order
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all of the current open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – If passed
    and not None, return only the open orders for the given asset instead of all open
    orders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**open_orders** – If no asset is passed this will return a dict mapping Assets
    to a list containing all the open orders for the asset. If an asset is passed
    then this will return a list of the open orders for this asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]] or [list](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")[Order]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: Cancel an open order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_param** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *Order*) – The order_id or order object to cancel.'
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: Sets the order cancellation policy for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: Abstract cancellation policy interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: Should all open orders be cancelled?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: Orders are never automatically canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Order Cancellation Policies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Sets the order cancellation policy for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cancel_policy** ([*CancelPolicy*](#zipline.finance.cancel_policy.CancelPolicy
    "zipline.finance.cancel_policy.CancelPolicy")) – The cancellation policy to use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.EODCancel`](#zipline.api.EODCancel "zipline.api.EODCancel"),
    [`zipline.api.NeverCancel`](#zipline.api.NeverCancel "zipline.api.NeverCancel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: Abstract cancellation policy interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: Should all open orders be cancelled?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**event** (*enum-value*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'An event type, one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.BAR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_START`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.DAY_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zipline.gens.sim_engine.MINUTE_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**should_cancel** – Should all open orders be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: This policy cancels open orders at the end of the day. For now, Zipline will
    only apply this policy to minutely simulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**warn_on_cancel** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should a warning be raised if this causes
    an order to be cancelled?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: Orders are never automatically canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Equity by its ticker symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol_str** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ticker symbol for the equity to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held the ticker symbol on the current symbol lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when the symbols was not held on the current lookup
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: Lookup multuple Equities as a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***args** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The ticker symbols to lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – A country to limit symbol searches
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** – The equities that held the given ticker symbols on the current
    symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[zipline.assets.Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when one of the symbols was not held on the current
    lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.set_symbol_lookup_date()`](#zipline.api.set_symbol_lookup_date
    "zipline.api.set_symbol_lookup_date")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a futures contract with a given symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future that trades with the name `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: Set the date for which symbols will be resolved to their assets (symbols may
    map to different firms or underlying assets at different times)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The new symbol lookup date.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an Asset by its unique asset identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The unique integer that identifies an asset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** – The asset with the given `sid`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.Asset](#zipline.assets.Asset "zipline.assets.Asset")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested `sid` does not map to any asset.'
  prefs: []
  type: TYPE_NORMAL
- en: Trading Controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline provides trading controls to ensure that the algorithm performs as expected.
    The functions help protect the algorithm from undesirable consequences of unintended
    behavior, especially when trading with real money.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: Set a restriction on which assets can be ordered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**restricted_list** (*container**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]**,*
    *SecurityList*) – The assets that cannot be ordered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: Set a rule specifying that this algorithm cannot take short positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the maximum leverage of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_leverage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum leverage for the algorithm. If not provided
    there will be no maximum.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of orders that can be placed in a single day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The maximum number of orders that can be placed on any
    single day.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value of any single order
    placed for sid. Limits are treated as absolute values and are enforced at the
    time that the algo attempts to place an order for sid.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in exceeding one
    of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares that can be
    ordered at one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value that can be ordered at
    one time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: Set a limit on the number of shares and/or dollar value held for the given sid.
    Limits are treated as absolute values and are enforced at the time that the algo
    attempts to place an order for sid. This means that it’s possible to end up with
    more than the max number of shares due to splits/dividends, and more than the
    max notional due to price improvement.
  prefs: []
  type: TYPE_NORMAL
- en: If an algorithm attempts to place an order that would result in increasing the
    absolute value of shares/dollar value exceeding one of these limits, raise a TradingControlException.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *optional*)
    – If provided, this sets the guard only on positions in the given asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_shares** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The maximum number of shares to hold for
    an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_notional** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The maximum value to hold for an asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulation Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: Set the benchmark asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**benchmark** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to set as the new benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Any dividends payed out for that new benchmark asset will be automatically reinvested.
  prefs: []
  type: TYPE_NORMAL
- en: Commission Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: Sets the commission models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for commission models.
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per trade cost.
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: Model commissions by applying a fixed cost per dollar transacted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: Set the slippage models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for slippage models.
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: Compute the number of shares and price to fill for `order` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: Simple model assuming a fixed-size spread for all assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: Model slippage as a quadratic function of percentage of historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: 'Orders to sell will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commission Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: Sets the commission models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquityCommissionModel*) – The commission model to use for
    trading US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureCommissionModel*) – The commission model to use for
    trading US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.commission.PerShare`](#zipline.finance.commission.PerShare
    "zipline.finance.commission.PerShare"), [`zipline.finance.commission.PerTrade`](#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade"), [`zipline.finance.commission.PerDollar`](#zipline.finance.commission.PerDollar
    "zipline.finance.commission.PerDollar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for commission models.
  prefs: []
  type: TYPE_NORMAL
- en: Commission models are responsible for accepting order/transaction pairs and
    calculating how much commission should be charged to an algorithm’s account on
    each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new commission model, create a subclass of [`CommissionModel`](#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") and implement [`calculate()`](#zipline.finance.commission.CommissionModel.calculate
    "zipline.finance.commission.CommissionModel.calculate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the amount of commission to charge on `order` as a result of `transaction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order being processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `commission` field of `order` is a float indicating the amount of commission
    already charged on this order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transaction** (*zipline.finance.transaction.Transaction*) – The transaction
    being processed. A single order may generate multiple transactions if there isn’t
    enough volume in a given bar to fill the full amount requested in the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**amount_charged** – The additional commission, in dollars, that we should
    attribute to this order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per share cost with an
    optional minimum cost per trade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The amount of commissions paid per share
    traded. Default is one tenth of a cent per share.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_trade_cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The minimum amount of commissions paid per
    trade. Default is no minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is zipline’s default commission model for equities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: Calculates a commission for a transaction based on a per trade cost.
  prefs: []
  type: TYPE_NORMAL
- en: For orders that require multiple fills, the full commission is charged to the
    first fill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    equity trade.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: Model commissions by applying a fixed cost per dollar transacted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cost** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – The flat amount of commissions paid per
    dollar of equities traded. Default is a commission of $0.0015 per dollar transacted.'
  prefs: []
  type: TYPE_NORMAL
- en: Slippage Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: Set the slippage models for the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**us_equities** (*EquitySlippageModel*) – The slippage model to use for trading
    US equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us_futures** (*FutureSlippageModel*) – The slippage model to use for trading
    US futures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function can only be called during `initialize()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.finance.slippage.SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for slippage models.
  prefs: []
  type: TYPE_NORMAL
- en: Slippage models are responsible for the rates and prices at which orders fill
    during a simulation.
  prefs: []
  type: TYPE_NORMAL
- en: To implement a new slippage model, create a subclass of [`SlippageModel`](#zipline.finance.slippage.SlippageModel
    "zipline.finance.slippage.SlippageModel") and implement [`process_order()`](#id0
    "zipline.finance.slippage.SlippageModel.process_order").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: Number of shares that have already been filled for the currently-filling asset
    in the current minute. This attribute is maintained automatically by the base
    class. It can be used by subclasses to keep track of the total amount filled if
    there are multiple open orders for a single asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses that define their own constructors should call `super(<subclass name>,
    self).__init__()` before performing other initialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: Compute the number of shares and price to fill for `order` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** ([*zipline.protocol.BarData*](#zipline.protocol.BarData "zipline.protocol.BarData"))
    – The data for the given bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order** (*zipline.finance.order.Order*) – The order to simulate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**execution_price** (*float*) – The price of the fill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_volume** (*int*) – The number of shares that should be filled.
    Must be between `0` and `order.amount - order.filled`. If the amount filled is
    less than the amount remaining, `order` will remain open and will be passed again
    to this method in the next minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zipline.finance.slippage.LiquidityExceeded** – May be raised if no more orders
    should be processed for the current asset during the current bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Before this method is called, [`volume_for_bar`](#zipline.finance.slippage.SlippageModel.volume_for_bar
    "zipline.finance.slippage.SlippageModel.volume_for_bar") will be set to the number
    of shares that have already been filled for `order.asset` in the current minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[`process_order()`](#id0 "zipline.finance.slippage.SlippageModel.process_order")
    is not called by the base class on bars for which there was no historical volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: Simple model assuming a fixed-size spread for all assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spread** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Size of the assumed spread for all assets.
    Orders to buy will be filled at `close + (spread / 2)`. Orders to sell will be
    filled at `close - (spread / 2)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This model does not impose limits on the size of fills. An order for an asset
    will always be filled as soon as any trading activity occurs in the order’s asset,
    even if the size of the order is greater than the historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: Model slippage as a quadratic function of percentage of historical volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'Orders to buy will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: 'Orders to sell will be filled at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: where `price` is the close price for the bar, and `volume_share` is the percentage
    of minutely volume filled, up to a max of `volume_limit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**volume_limit** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Maximum percent of historical volume that
    can fill in each bar. 0.5 means 50% of historical volume. 1.0 means 100%. Default
    is 0.025 (i.e., 2.5%).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**price_impact** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Scaling coefficient for price impact. Larger
    values will result in more simulated price impact. Smaller values will result
    in less simulated price impact. Default is 0.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, see [Pipeline API](#pipeline-api)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: Register a pipeline to be computed at the start of each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to have computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunks** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)") *or* *iterator**,* *optional*) – The number of days to compute
    pipeline results for. Increasing this number will make it longer to get the first
    results but may improve the total runtime of the simulation. If an iterator is
    passed, we will run in chunks based on values of the iterator. Default is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eager** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Whether or not to compute this pipeline prior
    to before_trading_start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** – Returns the pipeline that was attached unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pipeline](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.pipeline_output()`](#zipline.api.pipeline_output "zipline.api.pipeline_output")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: Get results of the pipeline attached by with name `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the pipeline from which to fetch results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**results** – DataFrame containing the results of the requested pipeline for
    the current simulation date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoSuchPipeline** – Raised when no pipeline with the name name has been registered.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.api.attach_pipeline()`](#zipline.api.attach_pipeline "zipline.api.attach_pipeline"),
    [`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: Track and record values each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs** – The names and values to record.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: These values will appear in the performance packets and the performance dataframe
    passed to `analyze` and returned from [`run_algorithm()`](#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: Query the execution environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** (*{''platform''**,* *''arena''**,* *''data_frequency''**,* *''start''**,*
    *''end''**,*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''capital_base''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''platform''** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''*''}** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meanings** (*The field to query. The options have the following*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arena** (*-*) – The arena from the simulation parameters. This will normally
    be `''backtest''` but some systems may use this distinguish live trading from
    backtesting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*-*) – data_frequency tells the algorithm if it is running
    with daily data or minute data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start** (*-*) – The start date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*-*) – The end date for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** (*-*) – The starting capital for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-platform** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The platform that the code is running on. By default,
    this will be the string ‘zipline’. This can allow algorithms to know if they are
    running on the Quantopian platform instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***** (*-*) – Returns all the fields in a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**val** – The value for the field queried. See above for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: any
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when `field` is not a valid option.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: Fetch a csv from a remote url and register the data so that it is queryable
    from the `data` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.11)")) – The url of the csv file to load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow preprocessing the raw data returned from fetch_csv before
    dates are paresed or symbols are mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post_func** (*callable**[**pd.DataFrame -> pd.DataFrame**]**,* *optional*)
    – A callback to allow postprocessing of the data after dates and symbols have
    been mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the column in the preprocessed
    dataframe containing datetime information to map the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date_format** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The format of the dates in the `date_column`.
    If not provided `fetch_csv` will attempt to infer the format. For information
    about the format of this string, see [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timezone** (*tzinfo* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The timezone for the datetime in the `date_column`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – If the data is about a new asset or index then
    this string will be the name used to identify the values in `data`. For example,
    one may use `fetch_csv` to load data for VIX, then this field could be the string
    `''VIX''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Drop any rows which cannot be symbol mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**symbol_column** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – If the data is attaching some new attribute to each asset
    then this argument is the name of the column in the preprocessed dataframe containing
    the symbols. This will be used along with the date information to map the sids
    in the asset finder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – Country code to use to disambiguate symbol
    lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to [`pandas.read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv
    "(in pandas v2.0.3)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**csv_data_source** – A requests source that will pull data from the url specified.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.sources.requests_csv.PandasRequestsCSV
  prefs: []
  type: TYPE_NORMAL
- en: Blotters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [blotter](https://www.investopedia.com/terms/b/blotter.asp) documents trades
    and their details over a period of time, typically one trading day. Trade details
    include such things as the time, price, order size, and whether it was a buy or
    sell order. It is is usually created by a trading software that records the trades
    made through a data feed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: Place a batch of orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_arg_lists** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*]*) – Tuples of args that order expects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_ids** – The unique identifier (or None) for each of the orders placed
    (or not placed).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None]'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is required for Blotter subclasses to be able to place a batch of orders,
    instead of being passed the order requests one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: Cancel a single order
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: Cancel all open orders for a given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: Place an order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 : Buy/Cover amount < 0 : Sell/Short Market order : order(asset,
    amount) Limit order : order(asset, amount, style=LimitOrder(limit_price)) Stop
    order : order(asset, amount, style=StopOrder(stop_price)) StopLimit order : order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any open orders as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: Removes all given orders from the blotter’s open_orders list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: Cancel a single order
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The id of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**relay_status** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to record the status of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: Cancel all open orders for a given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: Creates a list of transactions based on the current open orders, slippage model,
    and commission model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bar_data** ([*zipline._protocol.BarData*](#zipline.protocol.BarData "zipline._protocol.BarData"))
    –'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method book-keeps the blotter’s open_orders dictionary, so that
  prefs: []
  type: TYPE_NORMAL
- en: it is accurate by the time we’re done processing open orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions_list** (*List*) – transactions_list: list of transactions resulting
    from the current open orders. If there were no open orders, an empty list is returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commissions_list** (*List*) – commissions_list: list of commissions resulting
    from filling the open orders. A commission is an object with “asset” and “cost”
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closed_orders** (*List*) – closed_orders: list of all the orders that have
    filled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: Mark the order with order_id as ‘held’. Held is functionally similar to ‘open’.
    When a fill (full or partial) arrives, the status will automatically change back
    to open/filled as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: Place an order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset that this order is for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amount** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The amount of shares to order. If `amount` is positive, this
    is the number of shares to buy or cover. If `amount` is negative, this is the
    number of shares to sell or short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style** ([*zipline.finance.execution.ExecutionStyle*](#zipline.finance.execution.ExecutionStyle
    "zipline.finance.execution.ExecutionStyle")) – The execution style for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**order_id** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The unique identifier for this order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order_id** – The unique identifier for this order, or None if no order was
    placed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'amount > 0 :: Buy/Cover amount < 0 :: Sell/Short Market order: order(asset,
    amount) Limit order: order(asset, amount, style=LimitOrder(limit_price)) Stop
    order: order(asset, amount, style=StopOrder(stop_price)) StopLimit order: order(asset,
    amount, style=StopLimitOrder(limit_price, stop_price))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any open orders as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: Removes all given orders from the blotter’s open_orders list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**closed_orders** (*iterable* *of* *orders that are closed.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: Mark the given order as ‘rejected’, which is functionally similar to cancelled.
    The distinction is that rejections are involuntary (and usually include a message
    from a broker indicating why the order was rejected) while cancels are typically
    user-driven.
  prefs: []
  type: TYPE_NORMAL
- en: '## Pipeline API'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Pipeline`](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline") enables
    faster and more memory-efficient execution by optimizing the computation of factors
    during a backtest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: A Pipeline object represents a collection of named expressions to be compiled
    and executed by a PipelineEngine.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Pipeline has two important attributes: ‘columns’, a dictionary of named [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") instances, and ‘screen’, a [`Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") representing criteria for including an asset in the
    results of a Pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: To compute a pipeline in the context of a TradingAlgorithm, users must call
    `attach_pipeline` in their `initialize` function to register that the pipeline
    should be computed each trading day. The most recent outputs of an attached pipeline
    can be retrieved by calling `pipeline_output` from `handle_data`, `before_trading_start`,
    or a scheduled function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*,* *optional*) – Initial columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**screen** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Initial screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: Add a column.
  prefs: []
  type: TYPE_NORMAL
- en: The results of computing `term` will show up as a column in the DataFrame produced
    by running this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – A Filter, Factor, or Classifier to add to the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to add.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite the existing entry if we already
    have a column named name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Get the domain for this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: If an explicit domain was provided at construction time, use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, infer a domain from the registered columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no domain can be inferred, return `default`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**default** (*zipline.pipeline.domain.Domain*) – Domain to use if no domain
    can be inferred from this pipeline by itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** – The domain for the pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.domain.Domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AmbiguousDomain** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – If the terms in `self` conflict with self._domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: Remove a column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the column to remove.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**KeyError**](https://docs.python.org/3/library/exceptions.html#KeyError "(in
    Python v3.11)") – If name is not in self.columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**removed** – The removed term.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Term](#zipline.pipeline.Term "zipline.pipeline.Term")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: Set a screen on this Pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter"))
    – The filter to apply as a screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether to overwrite any existing screen. If overwrite
    is False and self.screen is not None, we raise an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: Render this Pipeline as a DAG.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (*{''svg''**,* *''png''**,* *''jpeg''}*) – Image format to render
    with. Default is ‘svg’.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: Compile into an ExecutionPlan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – Domain on which the pipeline
    will be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**all_dates** (*pd.DatetimeIndex*) – A calendar of dates to use to calculate
    starts and ends for each term.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The first date of requested output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The last date of requested output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies, including metadata about extra
    row requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.ExecutionPlan
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: Compile into a simple TermGraph with no extra row metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**default_screen** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – Term to use as a screen if self.screen is None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**graph** – Graph encoding term dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.graph.TermGraph
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: The output columns of this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** – Map from column name to expression computing that column’s output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)"), zipline.pipeline.ComputableTerm]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: The screen of this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**screen** – Term defining the screen for this pipeline. If `screen` is a filter,
    rows that do not pass the filter (i.e., rows for which the filter computed `False`)
    will be dropped from the output of this pipeline before returning results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting a screen on a Pipeline does not change the values produced for any
    rows: it only affects whether a given row is returned. Computing a pipeline with
    a screen is logically equivalent to computing the pipeline without the screen
    and then, as a post-processing-step, filtering out any rows for which the screen
    computed `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: Base class for user-defined Factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*iterable**,* *optional*) – An iterable of BoundColumn instances
    (e.g. USEquityPricing.close), describing the data to load and pass to self.compute.
    If this argument is not passed to the CustomFactor constructor, we look for a
    class-level attribute named inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**outputs** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]**,* *optional*) – An iterable of strings which represent
    the names of each output this factor should compute and return. If this argument
    is not passed to the CustomFactor constructor, we look for a class-level attribute
    named outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – Number of rows to pass for each input. If
    this argument is not passed to the CustomFactor constructor, we look for a class-level
    attribute named window_length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing the assets on which we should compute each day.
    Each call to `CustomFactor.compute` will only receive assets for which `mask`
    produced True on the day for which compute is being called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Users implementing their own Factors should subclass CustomFactor and implement
    a method named compute with the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: On each simulation date, `compute` will be called with the current date, an
    array of sids, an output array, and an input array for each expression passed
    as inputs to the CustomFactor constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific types of the values passed to compute are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: '`compute` functions should expect to be passed NaN values for dates on which
    no data was available for an asset. This may include dates on which an asset did
    not yet exist.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a CustomFactor requires 10 rows of close price data, and asset
    A started trading on Monday June 2nd, 2014, then on Tuesday, June 3rd, 2014, the
    column of input data for asset A will have 9 leading NaNs for the preceding days
    on which data was not yet available.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A CustomFactor with pre-declared defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: 'A CustomFactor without defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: 'A CustomFactor with multiple outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: If a CustomFactor has multiple outputs, all outputs must have the same
    dtype. For instance, in the example above, if alpha is a float then beta must
    also be a float.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline expression computing a boolean output.
  prefs: []
  type: TYPE_NORMAL
- en: Filters are most commonly useful for describing sets of assets to include or
    exclude for some particular purpose. Many Pipeline API functions accept a `mask`
    argument, which can be supplied a Filter indicating that only values passing the
    Filter should be considered when performing the requested computation. For example,
    [`zipline.pipeline.Factor.top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top")
    accepts a mask indicating that ranks should be computed only on assets that passed
    the specified Filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to construct a Filter is via one of the comparison operators
    (`<`, `<=`, `!=`, `eq`, `>`, `>=`) of [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor").
    For example, a natural way to construct a Filter for stocks with a 10-day VWAP
    less than $20.0 is to first construct a Factor computing 10-day VWAP and compare
    it to the scalar value 20.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: 'Filters can also be constructed via comparisons between two Factors. For example,
    to construct a Filter producing True for asset/date pairs where the asset’s 10-day
    VWAP was greater than it’s 30-day VWAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: Filters can be combined via the `&` (and) and `|` (or) operators.
  prefs: []
  type: TYPE_NORMAL
- en: '`&`-ing together two filters produces a new Filter that produces True if **both**
    of the inputs produced True.'
  prefs: []
  type: TYPE_NORMAL
- en: '`|`-ing together two filters produces a new Filter that produces True if **either**
    of its inputs produced True.'
  prefs: []
  type: TYPE_NORMAL
- en: The `~` operator can be used to invert a Filter, swapping all True values with
    Falses and vice-versa.
  prefs: []
  type: TYPE_NORMAL
- en: Filters may be set as the `screen` attribute of a Pipeline, indicating asset/date
    pairs for which the filter produces False should be excluded from the Pipeline’s
    output. This is useful both for reducing noise in the output of a Pipeline and
    for reducing memory consumption of Pipeline results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: 'Binary Operator: ‘&’'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: 'Binary Operator: ‘|’'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: Create a term that selects values from one of two choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**if_true** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if_false** (*zipline.pipeline.term.ComputableTerm*) – Expression whose values
    should be used at locations where this filter outputs False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**merged** – A term that computes by taking values from either `if_true` or
    `if_false`, depending on the values produced by `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: The returned term draws from``if_true`` at locations where `self` produces True,
    and it draws from `if_false` at locations where `self` produces False.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.term.ComputableTerm
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `g` be another Factor that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let `condition` be a Filter that produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the expression `condition.if_else(f, g)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v1.25)"), [`Factor.fillna`](#zipline.pipeline.Factor.fillna "zipline.pipeline.Factor.fillna")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline API expression producing a numerical or date-valued output.
  prefs: []
  type: TYPE_NORMAL
- en: Factors are the most commonly-used Pipeline term, representing the result of
    any computation producing a numerical result.
  prefs: []
  type: TYPE_NORMAL
- en: Factors can be combined, both with other Factors and with scalar values, via
    any of the builtin mathematical operators (`+`, `-`, `*`, etc).
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it easy to write complex expressions that combine multiple Factors.
    For example, constructing a Factor that computes the average of two other Factors
    is simply:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: 'Factors can also be converted into [`zipline.pipeline.Filter`](#zipline.pipeline.Filter
    "zipline.pipeline.Filter") objects via comparison operators: (`<`, `<=`, `!=`,
    `eq`, `>`, `>=`).'
  prefs: []
  type: TYPE_NORMAL
- en: There are many natural operators defined on Factors besides the basic numerical
    operators. These include methods for identifying missing or extreme-valued outputs
    (`isnull()`, `notnull()`, [`isnan()`](#zipline.pipeline.Factor.isnan "zipline.pipeline.Factor.isnan"),
    [`notnan()`](#zipline.pipeline.Factor.notnan "zipline.pipeline.Factor.notnan")),
    methods for normalizing outputs ([`rank()`](#zipline.pipeline.Factor.rank "zipline.pipeline.Factor.rank"),
    [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean"),
    [`zscore()`](#zipline.pipeline.Factor.zscore "zipline.pipeline.Factor.zscore")),
    and methods for constructing Filters based on rank-order properties of results
    ([`top()`](#zipline.pipeline.Factor.top "zipline.pipeline.Factor.top"), [`bottom()`](#zipline.pipeline.Factor.bottom
    "zipline.pipeline.Factor.bottom"), [`percentile_between()`](#zipline.pipeline.Factor.percentile_between
    "zipline.pipeline.Factor.percentile_between")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self == other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self == other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Factor that computes `self` and subtracts the mean from row of the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, de-meaning the partitioned arrays, and stitching the sub-results
    back together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when computing means.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute means.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `c` be a Classifier producing the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: 'Let `m` be a Filter producing the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: Then `f.demean()` will subtract the mean from each row produced by `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(mask=m)` will subtract the mean from each row, but means will be
    calculated ignoring values on the diagonal, and NaNs will written to the diagonal
    in the output. Diagonal values are ignored because they are the locations where
    the mask `m` produced False.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(groupby=c)` will subtract the group-mean of AAPL/MSFT and MCD/BK
    from their respective entries. The AAPL/MSFT are grouped together because both
    assets always produce 1 in the output of the classifier `c`. Similarly, MCD/BK
    are grouped together because they always produce 2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: '`f.demean(mask=m, groupby=c)` will also subtract the group-mean of AAPL/MSFT
    and MCD/BK, but means will be calculated ignoring values on the diagonal , and
    NaNs will be written to the diagonal in the output.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean is sensitive to the magnitudes of outliers. When working with factor that
    can potentially produce large outliers, it is often useful to use the `mask` parameter
    to discard values at the extremes of the distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: '`demean()` is only supported on Factors of dtype float64.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Factor that Z-Scores each day’s results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Z-Score of a row is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    row means and standard deviations, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, compute by partitioning each row based on the values
    produced by `groupby`, z-scoring the partitioned arrays, and stitching the sub-results
    back together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when Z-Scoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to compute Z-Scores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zscored** – A Factor producing that z-scores the output of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean and standard deviation are sensitive to the magnitudes of outliers. When
    working with factor that can potentially produce large outliers, it is often useful
    to use the `mask` parameter to discard values at the extremes of the distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: '`zscore()` is only supported on Factors of dtype float64.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: See [`demean()`](#zipline.pipeline.Factor.demean "zipline.pipeline.Factor.demean")
    for an in-depth example of the semantics for `mask` and `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor representing the sorted rank of each column within each
    row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *{''ordinal''**,* *''min''**,* *''max''**,* *''dense''**,*
    *''average''}*) – The method used to assign ranks to tied elements. See scipy.stats.rankdata
    for a full description of the semantics for each ranking method. Default is ‘ordinal’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ascending** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether to return sorted rank in ascending
    or descending order. Default is True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, ranks are computed ignoring any asset/date pairs for which mask
    produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ranks** – A new factor that will compute the ranking of the data produced
    by self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The default value for method is different from the default for scipy.stats.rankdata.
    See that function’s documentation for a full description of the valid inputs to
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Missing or non-existent data on a given day will cause an asset to be given
    a rank of NaN for that day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.rankdata()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata
    "(in SciPy v1.11.1)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that computes rolling pearson correlation coefficients
    between `target` and the columns of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`Factor.spearmanr()`](#zipline.pipeline.Factor.spearmanr
    "zipline.pipeline.Factor.spearmanr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that computes rolling spearman rank correlation coefficients
    between `target` and the columns of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term used to compute correlations against each column of data produced by
    self. This may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target slice computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**correlations** – A new Factor that will compute correlations between `target`
    and the columns of `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that computes the correlation between AAPL’s
    10-day returns and the 10-day returns of all other assets, computing each correlation
    over 30 days. This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), [`Factor.pearsonr()`](#zipline.pipeline.Factor.pearsonr
    "zipline.pipeline.Factor.pearsonr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Factor that performs an ordinary least-squares regression predicting
    the columns of self from target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.pipeline.Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The term to use as the predictor/independent variable in each regression. This
    may be a Factor, a BoundColumn or a Slice. If target is two-dimensional, regressions
    are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed with the target
    slice each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**regressions** – A new Factor that will compute linear regressions of target
    against the columns of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be called on expressions which are deemed safe for use
    as inputs to windowed [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")
    objects. Examples of such expressions include This includes [`BoundColumn`](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn") [`Returns`](#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns") and any factors created from [`rank()`](#zipline.pipeline.Factor.rank
    "zipline.pipeline.Factor.rank") or [`zscore()`](#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a factor that regresses AAPL’s 10-day returns against
    the 10-day returns of all other assets, computing each regression over 30 days.
    This can be achieved by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.linregress()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html#scipy.stats.linregress
    "(in SciPy v1.11.1)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new factor that winsorizes the result of this factor.
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing changes values ranked less than the minimum percentile to the value
    at the minimum percentile. Similarly, values ranking above the maximum percentile
    are changed to the value at the maximum percentile.
  prefs: []
  type: TYPE_NORMAL
- en: Winsorizing is useful for limiting the impact of extreme data points without
    completely removing those points.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore values where `mask` returns False when computing
    percentile cutoffs, and output NaN anywhere the mask is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, winsorization is applied separately separately to
    each group defined by `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or below this percentile will be
    replaced with the (len(input) * min_percentile)th lowest value. If low values
    should not be clipped, use 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Entries with values at or above this percentile will be
    replaced with the (len(input) * max_percentile)th lowest value. If high values
    should not be clipped, use 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter defining values to ignore when winsorizing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to winsorize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**winsorized** – A Factor producing a winsorized version of self.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: 'Given a pipeline with columns, defined above, the result for a given day could
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.mstats.winsorize()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize
    "(in SciPy v1.11.1)"), [`pandas.DataFrame.groupby()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quantiles of the output of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with an integer value from 0
    to (bins - 1). NaNs are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bins** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – Number of bins labels to compute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quantiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quantiles** – A classifier producing integer labels ranging from 0 to (bins
    - 1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quartiles over the output of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, corresponding to the first, second, third, or fourth quartile over each
    row. NaN data points are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quartiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quartiles** – A classifier producing integer labels ranging from 0 to 3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing quintile labels on `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value of either 0, 1,
    2, or 3, 4, corresonding to quintiles over each row. NaN data points are labelled
    with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing quintiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quintiles** – A classifier producing integer labels ranging from 0 to 4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Classifier computing decile labels on `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Every non-NaN data point the output is labelled with a value from 0 to 9 corresonding
    to deciles over each row. NaN data points are labelled with -1.
  prefs: []
  type: TYPE_NORMAL
- en: If `mask` is supplied, ignore data points in locations for which `mask` produces
    False, and emit a label of -1 at those locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – Mask of values to ignore when computing deciles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deciles** – A classifier producing integer labels ranging from 0 to 9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.Classifier
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching the top N asset values of self each day.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the top N asset values for
    each group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, top values are computed ignoring any asset/date pairs for which
    mask produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching the bottom N asset values of self each day.
  prefs: []
  type: TYPE_NORMAL
- en: If `groupby` is supplied, returns a Filter matching the bottom N asset values
    **for each group** defined by `groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)")) – Number of assets passing the returned filter each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing ranks. If
    mask is supplied, bottom values are computed ignoring any asset/date pairs for
    which mask produces a value of False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groupby** (*zipline.pipeline.Classifier**,* *optional*) – A classifier defining
    partitions over which to perform ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Filter matching values of self that fall within the range defined
    by `min_percentile` and `max_percentile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    above this percentile in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_percentile** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") *[**0.0**,* *100.0**]*) – Return True for assets falling
    below this percentile in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when percentile calculating
    thresholds. If mask is supplied, percentile cutoffs are computed each day using
    only assets for which `mask` returns True. Assets for which `mask` produces False
    will produce False in the output of this Factor as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out** – A new filter that will compute the specified percentile-range mask.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for all values where this Factor is NaN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for values where this Factor is not NaN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nanfilter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: A Filter producing True for values where this Factor is anything but NaN, inf,
    or -inf.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: Clip (limit) the values in a factor.
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: Clip (limit) the values in a factor.
  prefs: []
  type: TYPE_NORMAL
- en: Given an interval, values outside the interval are clipped to the interval edges.
    For example, if an interval of `[0, 1]` is specified, values smaller than 0 become
    0, and values larger than 1 become 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The minimum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_bound** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The maximum value to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when clipping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'To only clip values on one side, `-np.inf` and ``np.inf` may be passed. For
    example, to only clip the maximum value but not clip a minimum value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.clip`](https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self + other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self + other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self - other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self - other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self * other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self * other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self / other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self / other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self % other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self % other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor") computing
    `self ** other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**factor** – Factor computing `self ** other` with outputs of `self` and `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self < other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self < other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self <= other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self <= other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self != other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self != other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self >= other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self >= other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter") computing
    `self > other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))
    – Right-hand side of the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filter** – Filter computing `self > other` with the outputs of `self` and
    `other`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Filter](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: Create a new term that fills missing values of this term’s output with `fill_value`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value** (*zipline.pipeline.ComputableTerm**, or* *object.*) –'
  prefs: []
  type: TYPE_NORMAL
- en: Object to use as replacement for missing values.
  prefs: []
  type: TYPE_NORMAL
- en: If a ComputableTerm (e.g. a Factor) is passed, that term’s results will be used
    as fill values.
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar (e.g. a number) is passed, the scalar will be used as a fill value.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Filling with a Scalar:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be a Factor which would produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: 'Then `f.fillna(0)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: '**Filling with a Term:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `f` be as above, and let `g` be another Factor which would produce the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `f.fillna(g)` produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filled** – A term computing the same results as `self`, but with missing
    values filled in using values from `fill_value`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.ComputableTerm
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the mean of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the stddev of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the max of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the min of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the median of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: Create a 1-dimensional factor computing the sum of self, each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter representing assets to consider when computing results.
    If supplied, we ignore asset/date pairs where `mask` produces `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.Factor](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: Base class for objects that can appear in the compute graph of a [`zipline.pipeline.Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline").
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Pipeline API users only interact with [`Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term") via subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`BoundColumn`](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Factor`](#zipline.pipeline.Factor "zipline.pipeline.Factor")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Classifier`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instances of [`Term`](#zipline.pipeline.Term "zipline.pipeline.Term") are **memoized**.
    If you call a Term’s constructor with the same arguments twice, the same object
    will be returned from both calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Memoization of terms means that it’s generally unsafe to modify attributes of
    a term after construction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when rendering GraphViz graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when recursively rendering terms with inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Pipeline datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    is defined by two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of [`Column`](#zipline.pipeline.data.Column "zipline.pipeline.data.Column")
    objects that describe the queryable attributes of the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Domain` describing the assets and calendar of the data represented by the
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new Pipeline dataset, define a subclass of [`DataSet`](#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") and set one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects as class-level attributes. Each column
    requires a `np.dtype` that describes the type of data that should be produced
    by a loader for the dataset. Integer columns must also provide a “missing value”
    to be used when no value is available for a given asset/date combination.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the domain of a dataset is the special singleton value, `GENERIC`,
    which means that they can be used in a Pipeline running on **any** domain.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it may be preferable to restrict a dataset to only allow support
    a single domain. For example, a DataSet may describe data from a vendor that only
    covers the US. To restrict a dataset to a specific domain, define a domain attribute
    at class scope.
  prefs: []
  type: TYPE_NORMAL
- en: You can also define a domain-specific version of a generic DataSet by calling
    its `specialize` method with the domain of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in EquityPricing dataset is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: 'The built-in USEquityPricing dataset is a specialization of EquityPricing.
    It is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: 'Columns can have types other than float. A dataset containing assorted company
    metadata might be defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Because numpy has no native support for integers with missing values, users
    are strongly encouraged to use floats for any data that’s semantically numeric.
    Doing so enables the use of NaN as a natural missing value, which has useful propagation
    semantics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: Look up a column by name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – Name of the column to look up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column with the given name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**AttributeError**](https://docs.python.org/3/library/exceptions.html#AttributeError
    "(in Python v3.11)") – If no column with the given name exists.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: An abstract column of data, not yet associated with a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: Bind a Column object to its name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: A column of data that’s been concretely bound to a particular dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: The dtype of data produced when this column is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.dtype](https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype
    "(in NumPy v1.25)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: A [`Filter`](#zipline.pipeline.Filter "zipline.pipeline.Filter"), [`Factor`](#zipline.pipeline.Factor
    "zipline.pipeline.Factor"), or `Classifier` computing the most recently known
    value of this column on each date. See `zipline.pipeline.mixins.LatestMixin` for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.pipeline.LoadableTerm
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: The dataset to which this column is bound.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.pipeline.data.DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: The name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE773]'
  prefs: []
  type: TYPE_PRE
- en: Extra metadata associated with this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE774]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this column produces currency-denominated data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class are dynamically created upon access to attributes of
    [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet"). For
    example, [`close`](#zipline.pipeline.data.EquityPricing.close "zipline.pipeline.data.EquityPricing.close")
    is an instance of this class. Pipeline API users should never construct instances
    of this directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this column produces currency-denominated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: Specification for currency conversions applied for this term.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: The dataset to which this column is bound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: Construct a currency-converted version of this column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**currency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *zipline.currency.Currency*) – Currency into which to convert
    this column’s data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** – Column producing the same data as `self`, but currency-converted
    into `currency`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BoundColumn](#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.BoundColumn")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: Short repr to use when rendering Pipeline graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE780]'
  prefs: []
  type: TYPE_PRE
- en: A copy of the metadata for this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE781]'
  prefs: []
  type: TYPE_PRE
- en: The name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE782]'
  prefs: []
  type: TYPE_PRE
- en: The fully-qualified name of this column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE783]'
  prefs: []
  type: TYPE_PRE
- en: Short repr used to render in recursive contexts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs: []
  type: TYPE_PRE
- en: Specialize `self` to a concrete domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: Unspecialize a column to its generic form.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `column.specialize(GENERIC)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Pipeline dataset families.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs: []
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    in a pipeline expression, one must choose a specific value for each of the extra
    dimensions using the [`slice()`](#zipline.pipeline.data.DataSetFamily.slice "zipline.pipeline.data.DataSetFamily.slice")
    method. For example, given a [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: 'This dataset might represent a table with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    can be converted to a regular [`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE789]'
  prefs: []
  type: TYPE_PRE
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE790]'
  prefs: []
  type: TYPE_PRE
- en: Take a slice of a DataSetFamily to produce a dataset indexed by asset and date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***args** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – The coordinates to fix along each extra dimension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset** – A regular pipeline dataset indexed by asset and date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[DataSet](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The extra dimensions coords used to produce the result are available under the
    `extra_coords` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataSet`](#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    containing daily trading prices and volumes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE792]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE793]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: Built-in Factors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE797]'
  prefs: []
  type: TYPE_PRE
- en: Average Daily Dollar Volume
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE798]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE799]'
  prefs: []
  type: TYPE_PRE
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE800]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE801]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE806]'
  prefs: []
  type: TYPE_PRE
- en: Calculates daily percent change in close price.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Average
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE808]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE809]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE810]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Standard Deviation
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE811]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE812]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE813]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the most recently-known value of inputs[0] on each day.
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE815]'
  prefs: []
  type: TYPE_PRE
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE816]'
  prefs: []
  type: TYPE_PRE
- en: Max Drawdown
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE817]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE818]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change in close price over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE819]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE821]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE823]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE824]'
  prefs: []
  type: TYPE_PRE
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE826]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  prefs: []
  type: TYPE_PRE
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE829]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE830]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE831]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE832]'
  prefs: []
  type: TYPE_PRE
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE833]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE834]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE835]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE836]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE837]'
  prefs: []
  type: TYPE_PRE
- en: Short repr to use when rendering Pipeline graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE838]'
  prefs: []
  type: TYPE_PRE
- en: Get the target of the beta calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE839]'
  prefs: []
  type: TYPE_PRE
- en: Relative Strength Index
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE840]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  prefs: []
  type: TYPE_PRE
- en: Average Value of an arbitrary column
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  prefs: []
  type: TYPE_PRE
- en: Volume Weighted Average Price
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  prefs: []
  type: TYPE_PRE
- en: Helper for VWAP-like computations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE848]'
  prefs: []
  type: TYPE_PRE
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE849]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE850]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE851]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline filter indicating input term has data for a given window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE853]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE854]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE855]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE858]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes to True only for the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE859]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when rendering GraphViz graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined assets.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE861]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined sids.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE862]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE863]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE864]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE865]'
  prefs: []
  type: TYPE_PRE
- en: PipelineEngine class that computes each term independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE867]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE868]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE869]'
  prefs: []
  type: TYPE_PRE
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE870]'
  prefs: []
  type: TYPE_PRE
- en: Interface for PipelineLoaders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE871]'
  prefs: []
  type: TYPE_PRE
- en: Load data for `columns` as AdjustedArrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE872]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE873]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader that reads its input from DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE874]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE875]'
  prefs: []
  type: TYPE_PRE
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE876]'
  prefs: []
  type: TYPE_PRE
- en: Load data from our stored baseline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE877]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader for loading daily OHLCV data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE878]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE879]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE880]'
  prefs: []
  type: TYPE_PRE
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE881]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE882]'
  prefs: []
  type: TYPE_PRE
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE883]'
  prefs: []
  type: TYPE_PRE
- en: Built-in Factors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Factors aim to transform the input data in a way that extracts a signal on which
    the algorithm can trade.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE884]'
  prefs: []
  type: TYPE_PRE
- en: Average Daily Dollar Volume
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE885]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE886]'
  prefs: []
  type: TYPE_PRE
- en: Bollinger Bands technical indicator. [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 iterable**[*[*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")*]*) – The expression over which to compute
    bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the bollinger bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.11)")) – The number of standard deviations to add or subtract to create
    the upper and lower bands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE887]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE888]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a previous event. Returns the number
    of **business days** (not trading days!) since the most recent event date for
    each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days for symmetry with BusinessDaysUntilNextEarnings.
  prefs: []
  type: TYPE_NORMAL
- en: Assets which announced or will announce the event today will produce a value
    of 0.0\. Assets that announced the event on the previous business day will produce
    a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '`BusinessDaysSincePreviousEvent` can be used to create an event-driven factor.
    For instance, you may want to only trade assets that have a data point with an
    asof_date in the last 5 business days. To do this, you can create a `BusinessDaysSincePreviousEvent`
    factor, supplying the relevant asof_date column from your dataset as input, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE889]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE890]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE891]'
  prefs: []
  type: TYPE_PRE
- en: Abstract class for business days since a next event. Returns the number of **business
    days** (not trading days!) until the next known event date for each asset.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t use trading days because the trading calendar includes information
    that may not have been available to the algorithm at the time when compute is
    called.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the NYSE closings September 11th 2001, would not have been known
    to the algorithm on September 10th.
  prefs: []
  type: TYPE_NORMAL
- en: Assets that announced or will announce the event today will produce a value
    of 0.0\. Assets that will announce the event on the next upcoming business day
    will produce a value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Assets for which the event date is NaT will produce a value of NaN.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE892]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE893]'
  prefs: []
  type: TYPE_PRE
- en: Calculates daily percent change in close price.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE894]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Average
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE895]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMA`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.ewm()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "(in pandas v2.0.3)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE896]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE897]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially Weighted Moving Standard Deviation
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inputs** (*length-1 list/tuple* *of* [*BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The expression over which to compute the
    average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window_length** (*int > 0*) – Length of the lookback window over which to
    compute the average.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decay_rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *0 < decay_rate <= 1*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighting factor by which to discount past observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When calculating historical averages, rows are multiplied by the sequence:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE898]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class can also be imported under the name `EWMSTD`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.DataFrame.ewm()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE899]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE900]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the most recently-known value of inputs[0] on each day.
  prefs: []
  type: TYPE_NORMAL
- en: The .latest attribute of DataSet columns returns an instance of this Factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE901]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE902]'
  prefs: []
  type: TYPE_PRE
- en: alias of `MovingAverageConvergenceDivergenceSignal`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE903]'
  prefs: []
  type: TYPE_PRE
- en: Max Drawdown
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE904]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE905]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change in close price over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [EquityPricing.close]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE906]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE907]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes pearson correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.pearsonr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr
    "(in SciPy v1.11.1)"), `Factor.pearsonr()`, [`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.pearsonr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE908]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE909]'
  prefs: []
  type: TYPE_PRE
- en: A Factor that computes spearman rank correlation coefficients between the columns
    of a given Factor and either the columns of another Factor/BoundColumn or a slice/single
    column of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base_factor** ([*zipline.pipeline.Factor*](#zipline.pipeline.Factor "zipline.pipeline.Factor"))
    – The factor for which to compute correlations of each of its columns with target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target** (*zipline.pipeline.Term with a numeric dtype*) – The term with which
    to compute correlations against each column of data produced by base_factor. This
    term may be a Factor, a BoundColumn or a Slice. If target is two-dimensional,
    correlations are computed asset-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Length of the lookback window over which to compute each
    correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets (columns) of base_factor should
    have their correlation with target computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.spearmanr()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "(in SciPy v1.11.1)"), `Factor.spearmanr()`, [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Most users should call Factor.spearmanr rather than directly construct an instance
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE910]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE911]'
  prefs: []
  type: TYPE_PRE
- en: Perform an ordinary least-squares regression predicting the returns of all other
    assets on the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to regress against all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** (*int >= 1*) – Length of the lookback window over which
    to compute each regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should be regressed against the
    target asset each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which regressions
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This factor is designed to return five outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: alpha, a factor that computes the intercepts of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beta, a factor that computes the slopes of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r_value, a factor that computes the correlation coefficient of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p_value, a factor that computes, for each regression, the two-sided p-value
    for a hypothesis test whose null hypothesis is that the slope is zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stderr, a factor that computes the standard error of the estimate of each regression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more help on factors with multiple outputs, see [`zipline.pipeline.CustomFactor`](#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE912]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in predicting each stock’s returns from SPY’s over
    rolling 5-day look back windows. We can compute rolling regression coefficients
    (alpha and beta) from 2017-03-17 to 2017-03-22 by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE913]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `alpha` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE914]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result of computing `beta` from 2017-03-17 to 2017-03-22 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE915]'
  prefs: []
  type: TYPE_PRE
- en: Note that SPY’s column for alpha is all 0’s and for beta is all 1’s, as the
    regression line of SPY with itself is simply the function y = x.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how each of the other values were calculated, take for example
    MSFT’s `alpha` and `beta` values on 2017-03-17 (.011 and .3, respectively). These
    values are the result of running a linear regression predicting MSFT’s returns
    from SPY’s returns, using values starting at 2017-03-17 and looking back 5 days.
    That is, the regression was run with x = [-.03, -.02, -.01, 0, .01] and y = [.03,
    -.03, .02, -.02, .04], and it produced a slope of .3 and an intercept of .011.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE916]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Pearson product-moment correlation coefficient of the returns
    of the given asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation is what most people mean when they say “correlation coefficient”
    or “R-value”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the following be example 10-day returns for three different assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE917]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we are interested in SPY’s rolling returns correlation with each stock
    from 2017-03-17 to 2017-03-22, using a 5-day look back window (that is, we calculate
    each correlation coefficient over 5 days of data). We can achieve this by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE918]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of computing `rolling_correlations` from 2017-03-17 to 2017-03-22
    gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE919]'
  prefs: []
  type: TYPE_PRE
- en: Note that the column for SPY is all 1’s, as the correlation of any data series
    with itself is always 1\. To understand how each of the other values were calculated,
    take for example the .15 in MSFT’s column. This is the correlation coefficient
    between SPY’s returns looking back from 2017-03-17 (-.03, -.02, -.01, 0, .01)
    and MSFT’s returns (.03, -.03, .02, -.02, .04).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingSpearmanOfReturns`](#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE920]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the Spearman rank correlation coefficient of the returns of the given
    asset with the returns of all other assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** ([*zipline.assets.Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset to correlate with all other assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**returns_length** (*int >= 2*) – Length of the lookback window over which
    to compute returns. Daily returns require a window length of 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correlation_length** (*int >= 1*) – Length of the lookback window over which
    to compute each correlation coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** ([*zipline.pipeline.Filter*](#zipline.pipeline.Filter "zipline.pipeline.Filter")*,*
    *optional*) – A Filter describing which assets should have their correlation with
    the target asset computed each day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Computing this factor over many assets can be time consuming. It is recommended
    that a mask be used in order to limit the number of assets over which correlations
    are computed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.factors.RollingPearsonOfReturns`](#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`zipline.pipeline.factors.RollingLinearRegressionOfReturns`](#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE921]'
  prefs: []
  type: TYPE_PRE
- en: Factor producing the slope of a regression line between each asset’s daily returns
    to the daily returns of a single “target” asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** (*zipline.Asset*) – Asset against which other assets should be regressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**regression_length** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Number of days of daily returns to use for the regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**allowed_missing_percentage** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")*,* *optional*) – Percentage of returns observations (between
    0 and 1) that are allowed to be missing when calculating betas. Assets with more
    than this percentage of returns observations missing will produce values of NaN.
    Default behavior is that 25% of inputs can be missing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE922]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE923]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE924]'
  prefs: []
  type: TYPE_PRE
- en: Short repr to use when rendering Pipeline graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE925]'
  prefs: []
  type: TYPE_PRE
- en: Get the target of the beta calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE926]'
  prefs: []
  type: TYPE_PRE
- en: Relative Strength Index
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: [`zipline.pipeline.data.EquityPricing.close`](#zipline.pipeline.data.EquityPricing.close
    "zipline.pipeline.data.EquityPricing.close")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: 15'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE927]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE928]'
  prefs: []
  type: TYPE_PRE
- en: Average Value of an arbitrary column
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE929]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE930]'
  prefs: []
  type: TYPE_PRE
- en: Volume Weighted Average Price
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** [EquityPricing.close, EquityPricing.volume]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE931]'
  prefs: []
  type: TYPE_PRE
- en: Helper for VWAP-like computations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE932]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE933]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the percent change over the given window_length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Percent change is calculated as `(new - old) / abs(old)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE934]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE935]'
  prefs: []
  type: TYPE_PRE
- en: Peer Count of distinct categories in a given classifier. This factor is returned
    by the classifier instance method peer_count()
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** 1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE936]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE937]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for `window_length` consecutive
    days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE938]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE939]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline filter indicating input term has data for a given window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE940]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE941]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least one day in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE942]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE943]'
  prefs: []
  type: TYPE_PRE
- en: A Filter requiring that assets produce True for at least N days in the last
    `window_length` days.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Inputs:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Window Length:** None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE944]'
  prefs: []
  type: TYPE_PRE
- en: Override this method with a function that writes a value into out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE945]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes to True only for the given asset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE946]'
  prefs: []
  type: TYPE_PRE
- en: A short repr to use when rendering GraphViz graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE947]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined assets.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticAssets` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of assets that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*iterable**[*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*]*)
    – An iterable of assets for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE948]'
  prefs: []
  type: TYPE_PRE
- en: A Filter that computes True for a specific set of predetermined sids.
  prefs: []
  type: TYPE_NORMAL
- en: '`StaticSids` is mostly useful for debugging or for interactively computing
    pipeline terms for a fixed set of sids that are known ahead of time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) – An iterable of sids for which to filter.'
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computation engines for executing a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") define the core computation algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary entrypoint is SimplePipelineEngine.run_pipeline, which implements
    the following algorithm for executing pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the domain of the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a dependency graph of all terms in pipeline, with information about how
    many extra rows each term needs from its inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combine the domain computed in (2) with our AssetFinder to produce a “lifetimes
    matrix”. The lifetimes matrix is a DataFrame of booleans whose labels are dates
    x assets. Each entry corresponds to a (date, asset) pair and indicates whether
    the asset in question was tradable on the date in question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a “workspace” dictionary with cached or otherwise pre-computed terms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Topologically sort the graph constructed in (1) to produce an execution order
    for any terms that were not pre-populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterate over the terms in the order computed in (5). For each term:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetch the term’s inputs from the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute each term and store the results in the workspace.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the results from the workspace if their are no longer needed to reduce
    memory use during execution.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the pipeline’s outputs from the workspace and convert them into “narrow”
    format, with output labels dictated by the Pipeline’s screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE949]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE950]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE951]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE952]'
  prefs: []
  type: TYPE_PRE
- en: PipelineEngine class that computes each term independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**get_loader** (*callable*) – A function that is given a loadable term and
    returns a PipelineLoader to use to retrieve raw data for that term.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.AssetFinder")) – An AssetFinder instance. We depend on the AssetFinder
    to determine which assets are in the top-level universe at any point in time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**populate_initial_workspace** (*callable**,* *optional*) – A function which
    will be used to populate the initial workspace when computing a pipeline. See
    [`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace") for more info.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*,* *optional*) – List of hooks that should be used to instrument
    all pipelines executed by this engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.default_populate_initial_workspace()`](#zipline.pipeline.engine.default_populate_initial_workspace
    "zipline.pipeline.engine.default_populate_initial_workspace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE953]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE954]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`, in date chunks
    of size `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: Chunked execution reduces memory consumption, and may reduce computation time
    depending on the contents of your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – The end date to run the pipeline for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunksize** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of days to execute at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.pipeline.engine.PipelineEngine.run_pipeline()`](#zipline.pipeline.engine.PipelineEngine.run_pipeline
    "zipline.pipeline.engine.PipelineEngine.run_pipeline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE955]'
  prefs: []
  type: TYPE_PRE
- en: Compute values for `pipeline` from `start_date` to `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pipeline** ([*zipline.pipeline.Pipeline*](#zipline.pipeline.Pipeline "zipline.pipeline.Pipeline"))
    – The pipeline to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – Start date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*pd.Timestamp*) – End date of the computed matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hooks** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**implements**(**PipelineHooks**)**]**,* *optional*) – Hooks
    for instrumenting Pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** – A frame of computed results.'
  prefs: []
  type: TYPE_NORMAL
- en: The `result` columns correspond to the entries of pipeline.columns, which should
    be a dictionary mapping strings to instances of [`zipline.pipeline.Term`](#zipline.pipeline.Term
    "zipline.pipeline.Term").
  prefs: []
  type: TYPE_NORMAL
- en: For each date between `start_date` and `end_date`, `result` will contain a row
    for each asset that passed pipeline.screen. A screen of `None` indicates that
    a row should be returned for each asset that existed each day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE956]'
  prefs: []
  type: TYPE_PRE
- en: The default implementation for `populate_initial_workspace`. This function returns
    the `initial_workspace` argument without making any modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_workspace** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**array-like**]*) – The initial workspace before we have
    populated it with any cached terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**root_mask_term** ([*Term*](#zipline.pipeline.Term "zipline.pipeline.Term"))
    – The root mask term, normally `AssetExists()`. This is needed to compute the
    dates for individual terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**execution_plan** (*ExecutionPlan*) – The execution plan for the pipeline
    being run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – All of the dates being requested in this pipeline
    run including the extra dates for look back windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – All of the assets that exist for the window
    being computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**populated_initial_workspace** – The workspace to begin computations with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[term,
    array-like]'
  prefs: []
  type: TYPE_NORMAL
- en: Data Loaders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several loaders to feed data to a [`Pipeline`](#zipline.pipeline.Pipeline
    "zipline.pipeline.Pipeline") that need to implement the interface defined by the
    [`PipelineLoader`](#zipline.pipeline.loaders.base.PipelineLoader "zipline.pipeline.loaders.base.PipelineLoader").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE957]'
  prefs: []
  type: TYPE_PRE
- en: Interface for PipelineLoaders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE958]'
  prefs: []
  type: TYPE_PRE
- en: Load data for `columns` as AdjustedArrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain** (*zipline.pipeline.domain.Domain*) – The domain of the pipeline
    for which the requested data must be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)")*[*[*zipline.pipeline.data.dataset.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.dataset.BoundColumn")*]*) – Columns for which data is being
    requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sids** (*pd.Int64Index*) – Asset identifiers for which data is being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (*np.array**[**ndim=2**,* *dtype=bool**]*) – Boolean array of shape
    (len(dates), len(sids)) indicating dates on which we believe the requested assets
    were alive/tradeable. This is used for optimization by some loaders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays** – Map from column to an AdjustedArray representing a point-in-time
    rolling view over the requested dates for the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[BoundColumn
    -> zipline.lib.adjusted_array.AdjustedArray]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE959]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE960]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader that reads its input from DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Mostly useful for testing, but can also be used for real work if your data fits
    in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**column** ([*zipline.pipeline.data.BoundColumn*](#zipline.pipeline.data.BoundColumn
    "zipline.pipeline.data.BoundColumn")) – The column whose data is loadable by this
    loader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**baseline** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")) – A DataFrame with index of type DatetimeIndex and columns
    of type Int64Index. Dates should be labelled with the first date on which a value
    would be **available** to an algorithm. This means that OHLCV data should generally
    be shifted back by a trading day before being supplied to this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *default=None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A DataFrame with the following columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sid : int value : any kind : int (zipline.pipeline.loaders.frame.ADJUSTMENT_TYPES)
    start_date : datetime64 (can be NaT) end_date : datetime64 (must be set) apply_date
    : datetime64 (must be set)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default of None is interpreted as “no adjustments to the baseline”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE961]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE962]'
  prefs: []
  type: TYPE_PRE
- en: Build a dict of Adjustment objects in the format expected by AdjustedArray.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a dict of the form: { # Integer index into dates for the date on which
    we should # apply the list of adjustments. 1 : [ Float64Multiply(first_row=2,
    last_row=4, col=3, value=0.5), Float64Overwrite(first_row=3, last_row=5, col=1,
    value=2.0), … ], … }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE963]'
  prefs: []
  type: TYPE_PRE
- en: Load data from our stored baseline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE964]'
  prefs: []
  type: TYPE_PRE
- en: A PipelineLoader for loading daily OHLCV data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**raw_price_reader** (*zipline.data.session_bars.SessionBarReader*) – Reader
    providing raw prices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustments_reader** ([*zipline.data.adjustments.SQLiteAdjustmentReader*](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")) – Reader providing price/volume
    adjustments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fx_reader** (*zipline.data.fx.FXRateReader*) – Reader providing currency
    conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE965]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE966]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`EquityPricingLoader`](#zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader
    "zipline.pipeline.loaders.equity_pricing_loader.EquityPricingLoader")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE967]'
  prefs: []
  type: TYPE_PRE
- en: Base class for PipelineLoaders that supports loading the next and previous value
    of an event field.
  prefs: []
  type: TYPE_NORMAL
- en: Does not currently support adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**events** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataFrame representing events (e.g. share buybacks or earnings announcements)
    associated with particular companies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` must contain at least three columns::'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which we learned about the event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**next_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a next event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**previous_value_columns** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**BoundColumn -> str**]*) – Map from dataset columns to
    raw field names that should be used when searching for a previous event value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE968]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE969]'
  prefs: []
  type: TYPE_PRE
- en: An abstract pipeline loader for estimates data that can load data a variable
    number of quarters forwards/backwards from calendar dates depending on the num_announcements
    attribute of the columns’ dataset. If split adjustments are to be applied, a loader,
    split-adjusted columns, and the split-adjusted asof-date must be supplied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**estimates** (*pd.DataFrame*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The raw estimates data; must contain at least 5 columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with each estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event_datedatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the event that the estimate is for will/has occurred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timestampdatetime64[ns]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The datetime where we learned about the estimate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_quarterint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The quarter during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fiscal_yearint64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The year during which the event has/will occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**str -> str**]*) – A map of names of BoundColumns that
    this loader will load to the names of the corresponding columns in events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE970]'
  prefs: []
  type: TYPE_PRE
- en: Exchange and Asset Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE971]'
  prefs: []
  type: TYPE_PRE
- en: An exchange where assets are traded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *None*) – The full name of the exchange, for example ‘NEW
    YORK STOCK EXCHANGE’ or ‘NASDAQ GLOBAL MARKET’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**canonical_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The canonical name of the exchange, for example ‘NYSE’
    or ‘NASDAQ’. If None this will be the same as the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The country code where the exchange is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE972]'
  prefs: []
  type: TYPE_PRE
- en: The full name of the exchange, for example ‘NEW YORK STOCK EXCHANGE’ or ‘NASDAQ
    GLOBAL MARKET’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    or None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE973]'
  prefs: []
  type: TYPE_PRE
- en: The canonical name of the exchange, for example ‘NYSE’ or ‘NASDAQ’. If None
    this will be the same as the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE974]'
  prefs: []
  type: TYPE_PRE
- en: The country code where the exchange is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE975]'
  prefs: []
  type: TYPE_PRE
- en: The trading calendar the exchange uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: TradingCalendar
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE976]'
  prefs: []
  type: TYPE_PRE
- en: The trading calendar that this exchange uses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE977]'
  prefs: []
  type: TYPE_PRE
- en: Base class for entities that can be owned by a trading algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE978]'
  prefs: []
  type: TYPE_PRE
- en: Persistent unique identifier assigned to the asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE979]'
  prefs: []
  type: TYPE_PRE
- en: Most recent ticker under which the asset traded. This field can change without
    warning if the asset changes tickers. Use `sid` if you need a persistent identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE980]'
  prefs: []
  type: TYPE_PRE
- en: Full name of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE981]'
  prefs: []
  type: TYPE_PRE
- en: Canonical short name of the exchange on which the asset trades (e.g., ‘NYSE’).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE982]'
  prefs: []
  type: TYPE_PRE
- en: Full name of the exchange on which the asset trades (e.g., ‘NEW YORK STOCK EXCHANGE’).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE983]'
  prefs: []
  type: TYPE_PRE
- en: Information about the exchange this asset is listed on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.assets.ExchangeInfo](#zipline.assets.ExchangeInfo "zipline.assets.ExchangeInfo")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE984]'
  prefs: []
  type: TYPE_PRE
- en: Two character code indicating the country in which the asset trades.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE985]'
  prefs: []
  type: TYPE_PRE
- en: Date on which the asset first traded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE986]'
  prefs: []
  type: TYPE_PRE
- en: Last date on which the asset traded. On Quantopian, this value is set to the
    current (real time) date for assets that are still trading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE987]'
  prefs: []
  type: TYPE_PRE
- en: Minimum amount that the price can change for this asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE988]'
  prefs: []
  type: TYPE_PRE
- en: Date on which positions in this asset will be automatically liquidated to cash
    during a simulation. By default, this is three days after `end_date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE989]'
  prefs: []
  type: TYPE_PRE
- en: Build an Asset instance from a dict.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE990]'
  prefs: []
  type: TYPE_PRE
- en: Returns whether the asset is alive at the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**session_label** (*pd.Timestamp*) – The desired session label to check. (midnight
    UTC)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset is alive at the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE991]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt_minute** (*pd.Timestamp* *(**UTC**,* *tz-aware**)*) – The minute to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: whether the asset’s exchange is open at the given minute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE992]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a python dict containing all attributes of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: This is often useful for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**as_dict**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE993]'
  prefs: []
  type: TYPE_PRE
- en: Asset subclass representing partial ownership of a company, trust, or partnership.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE994]'
  prefs: []
  type: TYPE_PRE
- en: Asset subclass representing ownership of a futures contract.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE995]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a python dict.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE996]'
  prefs: []
  type: TYPE_PRE
- en: ABC for types that are convertible to integer-representations of Assets.
  prefs: []
  type: TYPE_NORMAL
- en: Includes Asset, str, and Integral
  prefs: []
  type: TYPE_NORMAL
- en: Trading Calendar API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The events that generate the timeline of the algorithm execution adhere to a
    given `TradingCalendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Data API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE997]'
  prefs: []
  type: TYPE_PRE
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE998]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE999]'
  prefs: []
  type: TYPE_PRE
- en: Read CSVs as DataFrames from our asset map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1000]'
  prefs: []
  type: TYPE_PRE
- en: Writer for data to be read by SQLiteAdjustmentReader
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1001]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1002]'
  prefs: []
  type: TYPE_PRE
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1003]'
  prefs: []
  type: TYPE_PRE
- en: Write both dividend payouts and the derived price adjustment ratios.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1004]'
  prefs: []
  type: TYPE_PRE
- en: Write dividend payout data to SQLite table dividend_payouts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1005]'
  prefs: []
  type: TYPE_PRE
- en: Class used to write data to an assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1006]'
  prefs: []
  type: TYPE_PRE
- en: Connect to database and create tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1007]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1008]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1009]'
  prefs: []
  type: TYPE_PRE
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1010]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1011]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1012]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of first row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1013]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of last row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1014]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> calendar index of first row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1015]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the first session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1016]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the last session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1017]'
  prefs: []
  type: TYPE_PRE
- en: String identifier of trading calendar used (ie, “NYSE”).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1018]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1019]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1020]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1021]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1022]'
  prefs: []
  type: TYPE_PRE
- en: Get currencies in which prices are quoted for the requested sids.
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1023]'
  prefs: []
  type: TYPE_PRE
- en: Get the latest minute on or before `dt` in which `asset` traded.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1024]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1025]'
  prefs: []
  type: TYPE_PRE
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1026]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1027]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1028]'
  prefs: []
  type: TYPE_PRE
- en: Loads adjustments based on corporate actions from a SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1029]'
  prefs: []
  type: TYPE_PRE
- en: Load collection of Adjustment objects from underlying adjustments db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1030]'
  prefs: []
  type: TYPE_PRE
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1031]'
  prefs: []
  type: TYPE_PRE
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1032]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for equities in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1033]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1034]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given exchange_name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1035]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for futures consracts in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1036]'
  prefs: []
  type: TYPE_PRE
- en: Get the value of a supplementary field for an asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1037]'
  prefs: []
  type: TYPE_PRE
- en: Group a list of sids by asset type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1038]'
  prefs: []
  type: TYPE_PRE
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1039]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve asset types for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1040]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a future contract by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1041]'
  prefs: []
  type: TYPE_PRE
- en: Convert an object into an Asset or sequence of Assets.
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1042]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an equity by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1043]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a list of equities by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1044]'
  prefs: []
  type: TYPE_PRE
- en: but potentially faster because repeated lookups are memoized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1045]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all assets in sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1046]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the Asset for a given sid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1047]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Equity objects for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1048]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Future objects for an iterable of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1049]'
  prefs: []
  type: TYPE_PRE
- en: All the sids in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1050]'
  prefs: []
  type: TYPE_PRE
- en: Interface to all of the data that a zipline simulation needs.
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1051]'
  prefs: []
  type: TYPE_PRE
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1052]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1053]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1054]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1055]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1056]'
  prefs: []
  type: TYPE_PRE
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1057]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1058]'
  prefs: []
  type: TYPE_PRE
- en: Returns any splits for the given sids and the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1059]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1060]'
  prefs: []
  type: TYPE_PRE
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1061]'
  prefs: []
  type: TYPE_PRE
- en: Extra sources always have a sid column.
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1062]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1063]'
  prefs: []
  type: TYPE_PRE
- en: Returns the daily returns for the given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1064]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1065]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1066]'
  prefs: []
  type: TYPE_PRE
- en: Register a data bundle ingest function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1067]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1068]'
  prefs: []
  type: TYPE_PRE
- en: Ingest data for a given bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1069]'
  prefs: []
  type: TYPE_PRE
- en: Loads a previously ingested bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1070]'
  prefs: []
  type: TYPE_PRE
- en: Unregister a bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1071]'
  prefs: []
  type: TYPE_PRE
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").
  prefs: []
  type: TYPE_NORMAL
- en: Writers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1072]'
  prefs: []
  type: TYPE_PRE
- en: Class capable of writing daily OHLCV data to disk in a format that can be read
    efficiently by BcolzDailyOHLCVReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The location at which we should write our output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**calendar** (*zipline.utils.calendar.trading_calendar*) – Calendar to use
    to compute asset calendar offsets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp*) – Midnight UTC session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarReader`](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1073]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (*iterable**[*[*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* [*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)") *or* *bcolz.ctable**]**]*) – The data chunks to write. Each
    chunk should be a tuple of sid and the data for that asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*set*](https://docs.python.org/3/library/stdtypes.html#set "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – The assets that should be in `data`.
    If this is provided we will check `data` against the assets and provide better
    progress information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Whether or not to show a progress bar while
    writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}**,* *optional*)
    – What to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The newly-written table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bcolz.ctable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1074]'
  prefs: []
  type: TYPE_PRE
- en: Read CSVs as DataFrames from our asset map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_map** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")*[**int -> str**]*) – A mapping from asset id to file path
    with the CSV data for that asset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether or not to show a progress bar while writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid_data_behavior** (*{''warn''**,* *''raise''**,* *''ignore''}*) – What
    to do when data is encountered that is outside the range of a uint32.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1075]'
  prefs: []
  type: TYPE_PRE
- en: Writer for data to be read by SQLiteAdjustmentReader
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn_or_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – A handle to the target sqlite database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_bar_reader** (*SessionBarReader*) – Daily bar reader to use
    for dividend writes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional**,* *default=False*) – If True and conn_or_path
    is a string, remove any existing files at the given path before connecting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1076]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the ratios to apply to equities when looking back at pricing history
    so that the price is smoothed over the ex_date, when the market adjusts to the
    change in equity value due to upcoming dividend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A frame in the same format as splits and mergers, with keys - sid, the id of
    the equity - effective_date, the date in seconds on which to apply the ratio.
    - ratio, the ratio to apply to backwards looking pricing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1077]'
  prefs: []
  type: TYPE_PRE
- en: Writes data to a SQLite file to be read by SQLiteAdjustmentReader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataframe containing split data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is divided by
    this value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**mergers** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing merger data. The format of this dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: effective_dateint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date, represented as seconds since Unix epoch, on which the adjustment should
    be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A value to apply to all data earlier than the effective date. For open, high,
    low, and close those values are multiplied by the ratio. Volume is unaffected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: amountfloat
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cash amount paid for each share.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Dividend ratios are calculated as: `1.0 - (dividend_value / "close on day prior
    to ex_date")`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stock_dividends** ([*pandas.DataFrame*](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
    "(in pandas v2.0.3)")*,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame containing stock dividend data. The format of the dataframe is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id associated with this adjustment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ex_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which an equity must be held to be eligible to receive payment.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: declared_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is announced to the public.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: pay_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the dividend is distributed.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: record_datedatetime64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which the stock ownership is checked to determine distribution of
    dividends.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: payment_sidint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset id of the shares that should be paid instead of cash.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ratiofloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ratio of currently held shares in the held sid that should be paid with
    new shares of the payment_sid.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentReader`](#zipline.data.adjustments.SQLiteAdjustmentReader
    "zipline.data.adjustments.SQLiteAdjustmentReader")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1078]'
  prefs: []
  type: TYPE_PRE
- en: Write both dividend payouts and the derived price adjustment ratios.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1079]'
  prefs: []
  type: TYPE_PRE
- en: Write dividend payout data to SQLite table dividend_payouts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1080]'
  prefs: []
  type: TYPE_PRE
- en: Class used to write data to an assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** (*Engine* *or* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An SQLAlchemy engine or path to a SQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1081]'
  prefs: []
  type: TYPE_PRE
- en: Connect to database and create tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**txn** (*sa.engine.Connection**,* *optional*) – The transaction block to execute
    in. If this is not provided, a new transaction will be started with the engine
    provided.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata** – The metadata that describes the new assets db.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: sa.MetaData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1082]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.assets.asset_finder`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1083]'
  prefs: []
  type: TYPE_PRE
- en: Write asset metadata to a sqlite database in the format that it is stored in
    the assets db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The equity metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this equity.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date on which to close any positions in this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The index of this dataframe should contain the sids.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**futures** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The future contract metadata. The columns for this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ticker symbol for this futures contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol, or the symbol with the expiration stripped out.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when this asset was created.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_datedatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: first_tradeddatetime, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first date we have trade data for this asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this asset is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: notice_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the owner of the contract may be forced to take physical delivery
    of the contract’s asset.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: expiration_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the contract expires.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: auto_close_datedatetime
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The date when the broker will automatically close any positions in this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: tick_sizefloat
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimum price movement of the contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiplier: float'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The amount of the underlying asset represented by this contract.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**exchanges** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exchanges where assets can be traded. The columns of this dataframe are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: canonical_namestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The canonical name of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: country_codestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ISO 3166 alpha-2 country code of the exchange.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_symbols** (*pd.DataFrame**,* *optional*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The root symbols for the futures contracts. The columns for this dataframe
    are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: root_symbolstr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root symbol name.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: root_symbol_idint
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The unique id for this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: sectorstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The sector of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: descriptionstring, optional
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A short description of this root symbol.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: exchangestr
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exchange where this root symbol is traded.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equity_supplementary_mappings** (*pd.DataFrame**,* *optional*) – Additional
    mappings from values of abitrary type to assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chunk_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The amount of rows to write to the SQLite
    table at once. This defaults to the default number of bind params in sqlite. If
    you have compiled sqlite3 with more bind or less params you may want to pass that
    value here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1084]'
  prefs: []
  type: TYPE_PRE
- en: Reader for raw pricing data written by BcolzDailyOHLCVWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** (*bcolz.ctable*) – The ctable contaning the pricing data, with attrs
    corresponding to the Attributes list below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_all_threshold** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of equities at which; below, the data is read
    by reading a slice from the carray per asset. above, the data is read by pulling
    all of the data for all assets into memory and then indexing into that array for
    each day and asset pair. Used to tune performance of reads when using a small
    or large number of equities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1085]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1086]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1087]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of first row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1088]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> index of last row in the dataset with that id.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1089]'
  prefs: []
  type: TYPE_PRE
- en: Map from asset_id -> calendar index of first row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1090]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the first session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1091]'
  prefs: []
  type: TYPE_PRE
- en: Epoch ns of the last session used in this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1092]'
  prefs: []
  type: TYPE_PRE
- en: String identifier of trading calendar used (ie, “NYSE”).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1093]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1094]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1095]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1096]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'A Bcolz CTable is comprised of Columns and Attributes. The table with which
    this loader interacts contains the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, ‘day’, ‘id’].'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in these columns is interpreted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price columns (‘open’, ‘high’, ‘low’, ‘close’) are interpreted as 1000 * as-traded
    dollar value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume is interpreted as as-traded volume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day is interpreted as seconds since midnight UTC, Jan 1, 1970.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Id is the asset id of the row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in each column is grouped by asset and then sorted by day within each
    asset block.
  prefs: []
  type: TYPE_NORMAL
- en: The table is built to represent a long time range of data, e.g. ten years of
    equity data, so the lengths of each asset block is not equal to each other. The
    blocks are clipped to the known start and end date of each asset to cut down on
    the number of empty values that would need to be included to make a regular/cubic
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: When read across the open, high, low, close, and volume with the same index
    should represent the same asset and day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bcolz_daily_bars.BcolzDailyBarWriter`](#zipline.data.bcolz_daily_bars.BcolzDailyBarWriter
    "zipline.data.bcolz_daily_bars.BcolzDailyBarWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1097]'
  prefs: []
  type: TYPE_PRE
- en: Get currencies in which prices are quoted for the requested sids.
  prefs: []
  type: TYPE_NORMAL
- en: Assumes that a sid’s prices are always quoted in a single currency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*np.array**[**int64**]*) – Array of sids for which currencies are
    needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**currency_codes** – Array of currency codes for listing currencies of `sids`.
    Implementations should return None for sids whose currency is unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.array[[object](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.11)")]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1098]'
  prefs: []
  type: TYPE_PRE
- en: Get the latest minute on or before `dt` in which `asset` traded.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no trades on or before `dt`, returns `pd.NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** (*zipline.asset.Asset*) – The asset for which to get the last traded
    minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The minute at which to start searching for the last
    traded minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**last_traded** – The dt of the last trade for the given asset, using the input
    dt as a vantage point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Timestamp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1099]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**colname** (*string*) – The price field. e.g. (‘open’, ‘high’, ‘low’, ‘close’,
    ‘volume’)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The spot price for colname of the given sid on the given day. Raises a NoDataOnDate
    exception if the given day and sid is before or after the date range of the equity.
    Returns -1 if the day is within the date range, but the price is 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1100]'
  prefs: []
  type: TYPE_PRE
- en: 'returns: **dt** – The last session for which the reader can provide data. :rtype:
    pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1101]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**columns** ([*list*](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)") *of* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – ‘open’, ‘high’, ‘low’, ‘close’, or ‘volume’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_date** (*Timestamp*) – Beginning of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_date** (*Timestamp*) – End of the window range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The asset identifiers in the window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list with an entry per field of ndarrays with shape (minutes in range, sids)
    with a dtype of float64, containing the values for the respective field over start
    and end dt range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
    of np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1102]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**day** (*datetime64-like*) – Midnight of the day for which data is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Index into the data tape for the given sid and day. Raises a NoDataOnDate exception
    if the given day and sid is before or after the date range of the equity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1103]'
  prefs: []
  type: TYPE_PRE
- en: Loads adjustments based on corporate actions from a SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: Expects data written in the format output by SQLiteAdjustmentWriter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**conn** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* [*sqlite3.Connection*](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection
    "(in Python v3.11)")) – Connection from which to load data.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.adjustments.SQLiteAdjustmentWriter`](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1104]'
  prefs: []
  type: TYPE_PRE
- en: Load collection of Adjustment objects from underlying adjustments db.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – Dates for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets** (*pd.Int64Index*) – Assets for which adjustments are needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_splits** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether split adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_mergers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether merger adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**should_include_dividends** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Whether dividend adjustments should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Whether price adjustments, volume adjustments, or both,
    should be included in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – A dictionary containing price and/or volume adjustment mappings
    from index to adjustment objects to apply at that index.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[str
    -> dict[int -> Adjustment]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1105]'
  prefs: []
  type: TYPE_PRE
- en: Returns the set of known tables in the adjustments file in DataFrame form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – By default, dates are returned in seconds
    since EPOCH. If convert_dates is True, all ints in date columns will be converted
    to datetimes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dfs** – Dictionary which maps table name to the corresponding DataFrame version
    of the table, where all date columns have been coerced back from int to datetime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: dict{str->DataFrame}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1106]'
  prefs: []
  type: TYPE_PRE
- en: An AssetFinder is an interface to a database of Asset metadata written by an
    `AssetDBWriter`.
  prefs: []
  type: TYPE_NORMAL
- en: This class provides methods for looking up assets by unique integer id or by
    symbol. For historical reasons, we refer to these unique ids as ‘sids’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**engine** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)") *or* *SQLAlchemy.engine*) – An engine with a connection to the
    asset database to use, or a string that can be parsed by SQLAlchemy as a URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_chain_predicates** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")) – A dict mapping future root symbol to a predicate function
    which accepts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**be** (*a contract as a parameter and returns whether* *or* *not the contract
    should*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chain.** (*included in the*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.assets.AssetDBWriter`](#zipline.assets.AssetDBWriter "zipline.assets.AssetDBWriter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1107]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for equities in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1108]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – An ISO 3166 alpha-2 country code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1109]'
  prefs: []
  type: TYPE_PRE
- en: Return all of the sids for a given exchange_name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exchange_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The sids whose exchanges are in this country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1110]'
  prefs: []
  type: TYPE_PRE
- en: All of the sids for futures consracts in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1111]'
  prefs: []
  type: TYPE_PRE
- en: Get the value of a supplementary field for an asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The sid of the asset to query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – Name of the supplementary field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp**,* *None*) – The last known value on this date
    is returned. If None, a value is returned only if we’ve only ever had one value
    for this sid. If None and we’ve had multiple values, MultipleValuesFoundForSid
    is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoValueForSid** – If we have no values for this asset, or no values was known
    on this as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleValuesFoundForSid** – If we have had multiple values for this asset
    over time, and None was passed for as_of_date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1112]'
  prefs: []
  type: TYPE_PRE
- en: Group a list of sids by asset type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – A dict mapping unique asset types to lists of sids drawn from sids.
    If we fail to look up an asset, we assign it a key of None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or None -> list[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1113]'
  prefs: []
  type: TYPE_PRE
- en: Compute a DataFrame representing asset lifetimes for the specified date range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dates** (*pd.DatetimeIndex*) – The dates for which to compute lifetimes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**include_start_date** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether or not to count the asset as alive on its start_date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful in a backtesting context where lifetimes is being used to signify
    “do I have data for this asset as of the morning of this date?” For many financial
    metrics, (e.g. daily close), data isn’t available for an asset until the end of
    the asset’s first day.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**country_codes** (*iterable**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – The country codes to get lifetimes for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lifetimes** – A frame of dtype bool with dates as index and an Int64Index
    of assets as columns. The value at lifetimes.loc[date, asset] will be True iff
    asset existed on date. If include_start_date is False, then lifetimes.loc[date,
    asset] will be false when date == asset.start_date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.putmask`](https://numpy.org/doc/stable/reference/generated/numpy.putmask.html#numpy.putmask
    "(in NumPy v1.25)"), `zipline.pipeline.engine.SimplePipelineEngine._compute_root_mask`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1114]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve asset types for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**types** – Asset types for the provided sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[sid
    -> str or None]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1115]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a future contract by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The symbol of the desired contract.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future** – The future contract referenced by `symbol`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Future](#zipline.assets.Future "zipline.assets.Future")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no contract named ‘symbol’ is found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1116]'
  prefs: []
  type: TYPE_PRE
- en: Convert an object into an Asset or sequence of Assets.
  prefs: []
  type: TYPE_NORMAL
- en: This method exists primarily as a convenience for implementing user-facing APIs
    that can handle multiple kinds of input. It should not be used for internal code
    where we already know the expected types of our inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**obj** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    *ContinuousFuture**, or* *iterable*) – The object to be converted into one or
    more Assets. Integers are interpreted as sids. Strings are interpreted as tickers.
    Assets and ContinuousFutures are returned unchanged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp* *or* *None*) – Timestamp to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None*) – ISO-3166 country code to use to disambiguate
    ticker lookups. Has the same semantics as in lookup_symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matches, missing** –'
  prefs: []
  type: TYPE_NORMAL
- en: '`matches` is the result of the conversion. `missing` is a list'
  prefs: []
  type: TYPE_NORMAL
- en: containing any values that couldn’t be resolved. If `obj` is not an iterable,
    `missing` will be an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1117]'
  prefs: []
  type: TYPE_PRE
- en: Lookup an equity by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The ticker symbol to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** ([*datetime.datetime*](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") *or* *None*) – Look up the last owner of this symbol as of
    this datetime. If `as_of_date` is None, then this can only resolve the equity
    if exactly one equity has ever owned the ticker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Should fuzzy symbol matching be used? Fuzzy symbol
    matching attempts to resolve differences in representations for shareclasses.
    For example, some people may represent the `A` shareclass of `BRK` as `BRK.A`,
    where others could write `BRK_A`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equity** – The equity that held `symbol` on the given `as_of_date`, or the
    only equity to hold `symbol` if `as_of_date` is None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Equity](#zipline.assets.Equity "zipline.assets.Equity")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymbolNotFound** – Raised when no equity has ever held the given symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultipleSymbolsFound** – Raised when no `as_of_date` is given and more than
    one equity has held `symbol`. This is also raised when `fuzzy=True` and there
    are multiple candidates for the given `symbol` on the `as_of_date`. Also raised
    when no `country_code` is given and the symbol is ambiguous across multiple countries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1118]'
  prefs: []
  type: TYPE_PRE
- en: Lookup a list of equities by symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1119]'
  prefs: []
  type: TYPE_PRE
- en: but potentially faster because repeated lookups are memoized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** (*sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*]*) – Sequence of ticker symbols to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**as_of_date** (*pd.Timestamp*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fuzzy** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")*,* *optional*) – Forwarded to `lookup_symbol`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**country_code** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") *or* *None**,* *optional*) – The country to limit searches
    to. If not provided, the search will span all countries which increases the likelihood
    of an ambiguous lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Equity](#zipline.assets.Equity
    "zipline.assets.Equity")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1120]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve all assets in sids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable* *of* [*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – Assets to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default_none** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – If True, return None for failed lookups. If False, raise
    SidsNotFound.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** – A list of the same length as sids containing Assets (or Nones)
    corresponding to the requested sids.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Asset](#zipline.assets.Asset
    "zipline.assets.Asset") or None]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SidsNotFound** – When a requested sid is not found and default_none=False.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1121]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the Asset for a given sid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1122]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Equity objects for a list of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1123]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve Future objects for an iterable of sids.
  prefs: []
  type: TYPE_NORMAL
- en: Users generally shouldn’t need to this method (instead, they should prefer the
    more general/friendly retrieve_assets), but it has a documented interface and
    tests because it’s used upstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sids** (*iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")[int
    -> Equity]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EquitiesNotFound** – When any requested asset isn’t found.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1124]'
  prefs: []
  type: TYPE_PRE
- en: All the sids in the asset finder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1125]'
  prefs: []
  type: TYPE_PRE
- en: Interface to all of the data that a zipline simulation needs.
  prefs: []
  type: TYPE_NORMAL
- en: This is used by the simulation runner to answer questions about the data, like
    getting the prices of assets on a given day or to service history calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset_finder** ([*zipline.assets.assets.AssetFinder*](#zipline.assets.AssetFinder
    "zipline.assets.assets.AssetFinder")) – The AssetFinder instance used to resolve
    assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_calendar** (*zipline.utils.calendar.exchange_calendar.TradingCalendar*)
    – The calendar instance used to provide minute->session information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_trading_day** (*pd.Timestamp*) – The first trading day for the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar reader for equities. This will be used to service daily data backtests or
    daily history calls in a minute backetest. If a daily bar reader is not provided
    but a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**equity_minute_reader** (*BcolzMinuteBarReader**,* *optional*) – The minute
    bar reader for equities. This will be used to service minute data backtests or
    minute history calls. This can be used to serve daily calls if no daily bar reader
    is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_daily_reader** ([*BcolzDailyBarReader*](#zipline.data.bcolz_daily_bars.BcolzDailyBarReader
    "zipline.data.bcolz_daily_bars.BcolzDailyBarReader")*,* *optional*) – The daily
    bar ready for futures. This will be used to service daily data backtests or daily
    history calls in a minute backetest. If a daily bar reader is not provided but
    a minute bar reader is, the minutes will be rolled up to serve the daily requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**future_minute_reader** (*BcolzFutureMinuteBarReader**,* *optional*) – The
    minute bar reader for futures. This will be used to service minute data backtests
    or minute history calls. This can be used to serve daily calls if no daily bar
    reader is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adjustment_reader** ([*SQLiteAdjustmentWriter*](#zipline.data.adjustments.SQLiteAdjustmentWriter
    "zipline.data.adjustments.SQLiteAdjustmentWriter")*,* *optional*) – The adjustment
    reader. This is used to apply splits, dividends, and other adjustment data to
    the raw data from the readers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_session** (*pd.Timestamp**,* *optional*) – The last session
    to make available in session-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_available_minute** (*pd.Timestamp**,* *optional*) – The last minute
    to make available in minute-level data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1126]'
  prefs: []
  type: TYPE_PRE
- en: Returns a scalar value representing the value of the desired asset’s field at
    the given dt with adjustments applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**asset** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The asset
    whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The value of the given `field` for `asset` at `dt` with any adjustments
    known by `perspective_dt` applied. The return type is based on the `field` requested.
    If the field is one of ‘open’, ‘high’, ‘low’, ‘close’, or ‘price’, the value will
    be a float. If the `field` is ‘volume’ the value will be a int. If the `field`
    is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1127]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of adjustments between the dt and perspective_dt for the given
    field and list of assets
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *type Asset**, or* [*Asset*](#zipline.assets.Asset "zipline.assets.Asset"))
    – The asset, or assets whose adjustments are desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*
    *''price''**,* *''last_traded''}*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perspective_dt** (*pd.Timestamp*) – The timestamp from which the data is
    being viewed back from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**adjustments** – The adjustments to that field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[Adjustment]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1128]'
  prefs: []
  type: TYPE_PRE
- en: Retrieves the future chain for the contract at the given dt according the continuous_future
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**future_chain** – A list of active futures, where the first index is the current
    contract specified by the continuous future definition, the second is the next
    upcoming contract and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[Future](#zipline.assets.Future
    "zipline.assets.Future")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1129]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of assets for the current date, as defined by the fetcher data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: a list of Asset objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1130]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a dataframe containing the requested history
    window. Data is fully adjusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)") *of* *zipline.data.Asset objects*) – The assets whose data is
    desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")) – The number of bars desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frequency** (*string*) – “1d” or “1m”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*string*) – The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** (*string*) – The frequency of the data to query; i.e. whether
    the data is ‘daily’ or ‘minute’ bars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ffill** (*boolean*) – Forward-fill missing values. Only has effect if field
    is ‘price’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing the requested data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1131]'
  prefs: []
  type: TYPE_PRE
- en: Given an asset and dt, returns the last traded dt from the viewpoint of the
    given dt.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a trade on the dt, the answer is dt provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1132]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")) – The
    asset or assets whose data is desired. This cannot be an arbitrary AssetConvertible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1133]'
  prefs: []
  type: TYPE_PRE
- en: Returns any splits for the given sids and the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** (*container*) – Assets for which we want splits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The date for which we are checking for splits. Note:
    this is expected to be midnight UTC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** – List of splits, where each split is a (asset, ratio) tuple.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[(asset,
    [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)"))]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1134]'
  prefs: []
  type: TYPE_PRE
- en: Public API method that returns a scalar value representing the value of the
    desired asset’s field at either the given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**assets** ([*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,* *ContinuousFuture**,
    or* *iterable* *of* *same.*) – The asset or assets whose data is desired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field** (*{''open''**,* *''high''**,* *''low''**,* *''close''**,* *''volume''**,*)
    – ‘price’, ‘last_traded’} The desired field of the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp*) – The timestamp for the desired value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_frequency** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The frequency of the data to query; i.e. whether the data
    is ‘daily’ or ‘minute’ bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** – The spot value of `field` for `asset` The return type is based
    on the `field` requested. If the field is one of ‘open’, ‘high’, ‘low’, ‘close’,
    or ‘price’, the value will be a float. If the `field` is ‘volume’ the value will
    be a int. If the `field` is ‘last_traded’ the value will be a Timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)"), [int](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)"), or pd.Timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1135]'
  prefs: []
  type: TYPE_PRE
- en: Returns all the stock dividends for a specific sid that occur in the given trading
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sid** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.11)")) – The asset whose stock dividends should be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trading_days** (*pd.DatetimeIndex*) – The trading range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**list** (*A list of objects with all relevant attributes populated.*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All timestamp fields are converted to pd.Timestamps.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1136]'
  prefs: []
  type: TYPE_PRE
- en: Extra sources always have a sid column.
  prefs: []
  type: TYPE_NORMAL
- en: We expand the given data (by forward filling) to the full range of the simulation
    dates, so that lookup is fast during simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1138]'
  prefs: []
  type: TYPE_PRE
- en: Returns the daily returns for the given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start** (*datetime*) – The inclusive starting session label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end** (*datetime**,* *optional*) – The inclusive ending session label. If
    not provided, treat `start` as a scalar key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns in the given period. The index will be the trading
    calendar in the range [start, end]. If just `start` is provided, return the scalar
    value on that day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series or [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1139]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_dt** (*datetime*) – The inclusive start label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_dt** (*datetime*) – The inclusive end label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The series of returns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1140]'
  prefs: []
  type: TYPE_PRE
- en: Look up the returns for a given dt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*datetime*) – The label to look up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**returns** – The returns at the given dt or session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.sources.benchmark_source.BenchmarkSource.daily_returns`](#zipline.sources.benchmark_source.BenchmarkSource.daily_returns
    "zipline.sources.benchmark_source.BenchmarkSource.daily_returns")'
  prefs: []
  type: TYPE_NORMAL
- en: '`This method expects minute inputs if `emission_rate == ''minute''` and session
    labels when `emission_rate == ''daily`.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``### Bundles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1141]'
  prefs: []
  type: TYPE_PRE
- en: Register a data bundle ingest function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f** (*callable*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ingest function. This function will be passed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: environmapping
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The environment this is being run with.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: asset_db_writerAssetDBWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The asset db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: minute_bar_writerBcolzMinuteBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minute bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: daily_bar_writerBcolzDailyBarWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The daily bar writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: adjustment_writerSQLiteAdjustmentWriter
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The adjustment db writer to write into.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: calendartrading_calendars.TradingCalendar
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trading calendar to ingest for.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: start_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: end_sessionpd.Timestamp
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last session of data to ingest.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: cacheDataFrameCache
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mapping object to temporarily store dataframes. This should be used to cache
    intermediates in case the load fails. This will be automatically cleaned up after
    a successful load.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: show_progressbool
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show the progress for the current load where possible.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**calendar_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of a calendar used to align bundle
    data. Default is ‘NYSE’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**start_session** (*pd.Timestamp**,* *optional*) – The first session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the first_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**end_session** (*pd.Timestamp**,* *optional*) – The last session for which
    we want data. If not provided, or if the date lies outside the range supported
    by the calendar, the last_session of the calendar is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minutes_per_day** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*,* *optional*) – The number of minutes in each normal trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create_writers** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the ingest machinery create the writers
    for the ingest function. This can be disabled as an optimization for cases where
    they are not needed, like the `quantopian-quandl` bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function my be used as a decorator, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1142]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1143]'
  prefs: []
  type: TYPE_PRE
- en: Ingest data for a given bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. By default
    this is os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp to use for the load.
    By default this is the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_versions** (*Iterable**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")*]**,* *optional*) – Versions of the assets db to which to
    downgrade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Tell the ingest function to display the
    progress where possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1144]'
  prefs: []
  type: TYPE_PRE
- en: Loads a previously ingested bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**environ** (*mapping**,* *optional*) – The environment variables. Defaults
    of os.environ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestamp** (*datetime**,* *optional*) – The timestamp of the data to lookup.
    Defaults to the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bundle_data** – The raw data readers for this bundle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: BundleData
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1145]'
  prefs: []
  type: TYPE_PRE
- en: Unregister a bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the bundle to unregister.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UnknownBundle** – Raised when no bundle has been registered with the given
    name.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipline.data.bundles.bundles`](#zipline.data.bundles.bundles "zipline.data.bundles.bundles")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1146]'
  prefs: []
  type: TYPE_PRE
- en: The bundles that have been registered as a mapping from bundle name to bundle
    data. This mapping is immutable and may only be updated through [`register()`](#zipline.data.bundles.register
    "zipline.data.bundles.register") or [`unregister()`](#zipline.data.bundles.unregister
    "zipline.data.bundles.unregister").
  prefs: []
  type: TYPE_NORMAL
- en: Risk Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Algorithm State
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1147]'
  prefs: []
  type: TYPE_PRE
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1148]'
  prefs: []
  type: TYPE_PRE
- en: The updated portfolio being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1149]'
  prefs: []
  type: TYPE_PRE
- en: The updated account being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1150]'
  prefs: []
  type: TYPE_PRE
- en: The current set of positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1151]'
  prefs: []
  type: TYPE_PRE
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1152]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1153]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1154]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1155]'
  prefs: []
  type: TYPE_PRE
- en: Override fields on `self.account`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1156]'
  prefs: []
  type: TYPE_PRE
- en: Compute the current portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1157]'
  prefs: []
  type: TYPE_PRE
- en: Process the commission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1158]'
  prefs: []
  type: TYPE_PRE
- en: Process dividends for the next session.
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1159]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of an order that was placed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1160]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1161]'
  prefs: []
  type: TYPE_PRE
- en: Add a transaction to ledger, updating the current state as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1162]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1163]'
  prefs: []
  type: TYPE_PRE
- en: Force a computation of the current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1164]'
  prefs: []
  type: TYPE_PRE
- en: Object providing read-only access to current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1165]'
  prefs: []
  type: TYPE_PRE
- en: Dict-like object containing information about currently-held positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1166]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash currently held in portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1167]'
  prefs: []
  type: TYPE_PRE
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1168]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash in the portfolio at the start of the backtest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1169]'
  prefs: []
  type: TYPE_PRE
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1170]'
  prefs: []
  type: TYPE_PRE
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1171]'
  prefs: []
  type: TYPE_PRE
- en: The current state of the positions held.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1172]'
  prefs: []
  type: TYPE_PRE
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1173]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1174]'
  prefs: []
  type: TYPE_PRE
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1175]'
  prefs: []
  type: TYPE_PRE
- en: The current status of the positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1176]'
  prefs: []
  type: TYPE_PRE
- en: Computed values from the current positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1177]'
  prefs: []
  type: TYPE_PRE
- en: The gross position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1178]'
  prefs: []
  type: TYPE_PRE
- en: The gross position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1179]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1180]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1181]'
  prefs: []
  type: TYPE_PRE
- en: The net position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1182]'
  prefs: []
  type: TYPE_PRE
- en: The net position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1183]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1184]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1185]'
  prefs: []
  type: TYPE_PRE
- en: The number of long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1186]'
  prefs: []
  type: TYPE_PRE
- en: The number of short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1187]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1188]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1189]'
  prefs: []
  type: TYPE_PRE
- en: Emit the current value of a ledger field every bar or every session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1190]'
  prefs: []
  type: TYPE_PRE
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1191]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1192]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1193]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the daily and cumulative returns of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1194]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1195]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative cash flow.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1196]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily orders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1197]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1198]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1199]'
  prefs: []
  type: TYPE_PRE
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1200]'
  prefs: []
  type: TYPE_PRE
- en: End of simulation alpha and beta to the benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1201]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the maximum account leverage.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1202]'
  prefs: []
  type: TYPE_PRE
- en: Register a new metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1203]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance of the metrics set registered with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1204]'
  prefs: []
  type: TYPE_PRE
- en: Unregister an existing metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1205]'
  prefs: []
  type: TYPE_PRE
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm State
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1206]'
  prefs: []
  type: TYPE_PRE
- en: The ledger tracks all orders and transactions as well as the current state of
    the portfolio and positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1207]'
  prefs: []
  type: TYPE_PRE
- en: The updated portfolio being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Portfolio](#zipline.protocol.Portfolio "zipline.protocol.Portfolio")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1208]'
  prefs: []
  type: TYPE_PRE
- en: The updated account being managed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[zipline.protocol.Account](#zipline.protocol.Account "zipline.protocol.Account")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1209]'
  prefs: []
  type: TYPE_PRE
- en: The current set of positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionTracker](#zipline.finance.ledger.PositionTracker "zipline.finance.ledger.PositionTracker")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1210]'
  prefs: []
  type: TYPE_PRE
- en: The current day’s returns. In minute emission mode, this is the partial day’s
    returns. In daily emission mode, this is `daily_returns[session]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1211]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns series. Days that have not yet finished will hold a value
    of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1212]'
  prefs: []
  type: TYPE_PRE
- en: The daily returns as an ndarray. Days that have not yet finished will hold a
    value of `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1213]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the orders in a given bar or for the whole
    simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up order for. If not passed, or None is explicitly passed, all of the
    orders will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orders** – The order information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1214]'
  prefs: []
  type: TYPE_PRE
- en: Override fields on `self.account`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1215]'
  prefs: []
  type: TYPE_PRE
- en: Compute the current portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the portfolio until the portfolio
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1216]'
  prefs: []
  type: TYPE_PRE
- en: Process the commission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**commission** (*zp.Event*) – The commission being paid.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1217]'
  prefs: []
  type: TYPE_PRE
- en: Process dividends for the next session.
  prefs: []
  type: TYPE_NORMAL
- en: This will earn us any dividends whose ex-date is the next session as well as
    paying out any dividends whose pay-date is the next session
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1218]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of an order that was placed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** (*zp.Order*) – The order to record.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1219]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")*[**(*[*Asset*](#zipline.assets.Asset "zipline.assets.Asset")*,*
    [*float*](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)")*)**]*)
    – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1220]'
  prefs: []
  type: TYPE_PRE
- en: Add a transaction to ledger, updating the current state as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transaction** (*zp.Transaction*) – The transaction to execute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1221]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the dict-form of all of the transactions in a given bar or for the
    whole simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dt** (*pd.Timestamp* *or* *None**,* *optional*) – The particular datetime
    to look up transactions for. If not passed, or None is explicitly passed, all
    of the transactions will be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**transactions** – The transaction information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")[[dict](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.11)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1222]'
  prefs: []
  type: TYPE_PRE
- en: Force a computation of the current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1223]'
  prefs: []
  type: TYPE_PRE
- en: Object providing read-only access to current portfolio state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start_date** (*pd.Timestamp*) – The start date for the period being recorded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**capital_base** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)")) – The starting value for the portfolio. This will be used
    as the starting cash, current cash, and portfolio value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1224]'
  prefs: []
  type: TYPE_PRE
- en: Dict-like object containing information about currently-held positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: zipline.protocol.Positions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1225]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash currently held in portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1226]'
  prefs: []
  type: TYPE_PRE
- en: Current liquidation value of the portfolio’s holdings. This is equal to `cash
    + sum(shares * price)`
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1227]'
  prefs: []
  type: TYPE_PRE
- en: Amount of cash in the portfolio at the start of the backtest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[float](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1228]'
  prefs: []
  type: TYPE_PRE
- en: Compute each asset’s weight in the portfolio by calculating its held value divided
    by the total value of all positions.
  prefs: []
  type: TYPE_NORMAL
- en: Each equity’s value is its price times the number of shares held. Each futures
    contract’s value is its unit price times number of shares held times the multiplier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1229]'
  prefs: []
  type: TYPE_PRE
- en: The account object tracks information about the trading account. The values
    are updated as the algorithm runs and its keys remain unchanged. If connected
    to a broker, one can update these values with the trading account values as reported
    by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1230]'
  prefs: []
  type: TYPE_PRE
- en: The current state of the positions held.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_frequency** (*{''daily''**,* *''minute''}*) – The data frequency of
    the simulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1231]'
  prefs: []
  type: TYPE_PRE
- en: Given a list of dividends whose ex_dates are all the next trading day, calculate
    and store the cash and/or stock payments to be paid on each dividend’s pay date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cash_dividends** (*iterable* *of* *(**asset**,* *amount**,* *pay_date**)*
    *namedtuples*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stock_dividends** (*iterable* *of* *(**asset**,* *payment_asset**,* *ratio**,*
    *pay_date**)*) – namedtuples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1232]'
  prefs: []
  type: TYPE_PRE
- en: Processes a list of splits by modifying any positions as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**splits** ([*list*](https://docs.python.org/3/library/stdtypes.html#list "(in
    Python v3.11)")) – A list of splits. Each split is a tuple of (asset, ratio).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**int** – position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: The leftover cash from fractional shares after modifying each
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1233]'
  prefs: []
  type: TYPE_PRE
- en: Returns a cash payment based on the dividends that should be paid out according
    to the accumulated bookkeeping of earned, unpaid, and stock dividends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1234]'
  prefs: []
  type: TYPE_PRE
- en: The current status of the positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stats** – The current stats position stats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PositionStats](#zipline.finance._finance_ext.PositionStats "zipline.finance._finance_ext.PositionStats")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is cached, repeated access will not recompute the stats until the stats
    may have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1235]'
  prefs: []
  type: TYPE_PRE
- en: Computed values from the current positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1236]'
  prefs: []
  type: TYPE_PRE
- en: The gross position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1237]'
  prefs: []
  type: TYPE_PRE
- en: The gross position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1238]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1239]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1240]'
  prefs: []
  type: TYPE_PRE
- en: The net position exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1241]'
  prefs: []
  type: TYPE_PRE
- en: The net position value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1242]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1243]'
  prefs: []
  type: TYPE_PRE
- en: The value of just the short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1244]'
  prefs: []
  type: TYPE_PRE
- en: The number of long positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1245]'
  prefs: []
  type: TYPE_PRE
- en: The number of short positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1246]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: np.ndarray[float64]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1247]'
  prefs: []
  type: TYPE_PRE
- en: The exposure of each position in the same order as `position_tracker.positions`.
    The index is the numeric sid of each asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: pd.Series[float64]
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` share the same underlying
    memory. The array interface should be preferred if you are doing access each minute
    for better performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`position_exposure_array` and `position_exposure_series` may be mutated when
    the position tracker next updates the stats. Do not rely on these objects being
    preserved across accesses to `stats`. If you need to freeze the values, you must
    take a copy.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1248]'
  prefs: []
  type: TYPE_PRE
- en: Emit the current value of a ledger field every bar or every session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1249]'
  prefs: []
  type: TYPE_PRE
- en: Like [`SimpleLedgerField`](#zipline.finance.metrics.metric.SimpleLedgerField
    "zipline.finance.metrics.metric.SimpleLedgerField") but also puts the current
    value in the `cumulative_perf` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1250]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1251]'
  prefs: []
  type: TYPE_PRE
- en: Keep track of the value of a ledger field at the start of the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ledger_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The ledger field to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packet_field** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field to populate in the
    packet. If not provided, `ledger_field` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1252]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the daily and cumulative returns of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1253]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative returns for the benchmark as well as the volatility
    of the benchmark returns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1254]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily and cumulative cash flow.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For historical reasons, this field is named ‘capital_used’ in the packets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1255]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily orders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1256]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily transactions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1257]'
  prefs: []
  type: TYPE_PRE
- en: Tracks daily positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1258]'
  prefs: []
  type: TYPE_PRE
- en: A metric that reports an end of simulation scalar or time series computed from
    the algorithm returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The function to call on the daily returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**field_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")*,* *optional*) – The name of the field. If not provided,
    it will be `function.__name__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1259]'
  prefs: []
  type: TYPE_PRE
- en: End of simulation alpha and beta to the benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1260]'
  prefs: []
  type: TYPE_PRE
- en: Tracks the maximum account leverage.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1261]'
  prefs: []
  type: TYPE_PRE
- en: Register a new metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** (*callable*) – The callable which produces the metrics set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This may be used as a decorator if only `name` is passed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.get_metrics_set`, `zipline.finance.metrics.unregister_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1262]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance of the metrics set registered with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**metrics** – A new instance of the metrics set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[set](https://docs.python.org/3/library/stdtypes.html#set "(in Python v3.11)")[Metric]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.11)") – Raised when no metrics set is registered to `name`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1263]'
  prefs: []
  type: TYPE_PRE
- en: Unregister an existing metrics set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")) – The name of the metrics set'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.finance.metrics.register_metrics_set`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1264]'
  prefs: []
  type: TYPE_PRE
- en: The metrics sets that have been registered as a mapping from metrics set name
    to load function. This mapping is immutable and may only be updated through [`register()`](#zipline.finance.metrics.register
    "zipline.finance.metrics.register") or [`unregister()`](#zipline.finance.metrics.unregister
    "zipline.finance.metrics.unregister").
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1265]'
  prefs: []
  type: TYPE_PRE
- en: A simple struct for maintaining a cached object with an expiration date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1267]'
  prefs: []
  type: TYPE_PRE
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1269]'
  prefs: []
  type: TYPE_PRE
- en: A disk-backed cache for dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1270]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1271]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1272]'
  prefs: []
  type: TYPE_PRE
- en: Optionally show a progress bar for the given iterator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1273]'
  prefs: []
  type: TYPE_PRE
- en: Caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1274]'
  prefs: []
  type: TYPE_PRE
- en: A simple struct for maintaining a cached object with an expiration date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** ([*object*](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.11)")) – The object to cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expires** (*datetime-like*) – Expiration date of value. The cache is considered
    invalid for dates **strictly greater** than expires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1276]'
  prefs: []
  type: TYPE_PRE
- en: A cache of multiple CachedObjects, which returns the wrapped the value or raises
    and deletes the CachedObject if the value has expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cache** (*dict-like**,* *optional*) – An instance of a dict-like object which
    needs to support at least: __del__, __getitem__, __setitem__ If None, than a dict
    is used as a default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cleanup** (*callable**,* *optional*) – A method that takes a single argument,
    a cached object, and is called upon expiry of the cached object, prior to deleting
    the object. If not provided, defaults to a no-op.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1278]'
  prefs: []
  type: TYPE_PRE
- en: A disk-backed cache for dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe_cache` is a mutable mapping from string names to pandas DataFrame
    objects. This object may be used as a context manager to delete the cache directory
    on exit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.11)")*,* *optional*) – The directory path to the cache. Files will be
    written as `path/<keyname>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lock** (*Lock**,* *optional*) – Thread lock for multithreaded/multiprocessed
    access to the cache. If not provided no locking will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean_on_failure** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")*,* *optional*) – Should the directory be cleaned up if an
    exception is raised in the context manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serialize** (*{''msgpack''**,* *''pickle:<n>''}**,* *optional*) – How should
    the data be serialized. If `''pickle''` is passed, an optional pickle protocol
    can be passed like: `''pickle:3''` which says to use pickle protocol 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `cache[:]` will load all key:value pairs into memory as a dictionary.
    The cache uses a temporary file format that is subject to change between versions
    of zipline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1279]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary file that will be moved to a non-temporary
    location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to NamedTemporaryFile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_file` uses
    [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "(in
    Python v3.11)") to move the actual files, meaning it has as strong of guarantees
    as [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1280]'
  prefs: []
  type: TYPE_PRE
- en: A context manager for managing a temporary directory that will be moved to a
    non-temporary location if no exceptions are raised in the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**final_path** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")) – The location to move the file when committing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to tmp_dir.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The file is moved on __exit__ if there are no exceptions. `working_dir` uses
    `dir_util.copy_tree()` to move the actual files, meaning it has as strong of guarantees
    as `dir_util.copy_tree()`.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1281]'
  prefs: []
  type: TYPE_PRE
- en: Optionally show a progress bar for the given iterator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**it** (*iterable*) – The underlying iterator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**show_progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")) – Should progress be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – Forwarded to the click progress bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**itercontext** – A context manager whose enter is the actual iterator to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1282]``````'
  prefs: []
  type: TYPE_NORMAL
