["```py\n--benchmark-file                The csv file that contains the benchmark\n                                returns (date, returns columns)\n--benchmark-symbol              The instrument's symbol to be used as\n                                a benchmark.\n                                (should exist in the ingested bundle)\n--benchmark-sid                 The sid of the instrument to be used as a\n                                benchmark.\n                                (should exist in the ingested bundle)\n--no-benchmark                  This flag is used to set the benchmark to\n                                zero. Alpha, beta and benchmark metrics\n                                are not calculated \n```", "```py\npipe = Pipeline(\n    columns={\n        'price': EquityPricing.close.latest,\n        'volume': EquityPricing.volume.latest,\n        'mcap': factset.Fundamentals.mkt_val.latest,\n    },\n    domain=CA_EQUITIES,\n) \n```", "```py\n> class SomeDataSet(DataSetFamily):\n>     extra_dims = [\n>         ('dimension_0', {'a', 'b', 'c'}),\n>         ('dimension_1', {'d', 'e', 'f'}),\n>     ]\n> \n>     column_0 = Column(float)\n>     column_1 = Column(bool) \n> ```", "```py\n> sid :: int64\n> asof_date :: datetime64[ns]\n> timestamp :: datetime64[ns]\n> dimension_0 :: str\n> dimension_1 :: str\n> column_0 :: float64\n> column_1 :: bool \n> ```", "```py\n> DataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n> ```", "```py\nfrom zipline.extensions import register\nfrom zipline.finance.blotter import Blotter, SimulationBlotter\nfrom zipline.finance.cancel_policy import EODCancel\n\n@register(Blotter, 'my-blotter')\ndef my_blotter():\n  \"\"\"Create a SimulationBlotter with a non-default cancel policy.\n \"\"\"\n    return SimulationBlotter(cancel_policy=EODCancel()) \n```", "```py\n$ zipline run --blotter my-blotter <...other-args...> \n```", "```py\n$ zipline -x argle=bargle run ... \n```", "```py\n$ zipline -x argle.bargle=foo \n```", "```py\n@zipline.data.bundles.register('my-new-bundle')\ndef my_new_bundle_ingest(environ,\n                         asset_db_writer,\n                         minute_bar_writer,\n                         daily_bar_writer,\n                         adjustment_writer,\n                         calendar,\n                         cache,\n                         show_progress):\n    ... \n```", "```py\n    context.account.settled_cash \n    ```", "```py\n    data[security].stddev(3) \n    ```", "```py\n    # this is how it works today (and this still works)\n    # put 50% of my portfolio in AAPL\n    order_percent('AAPL', 0.5)\n    # note that if this were a fully invested portfolio, it would become 150% levered.\n\n    # take half of my available cash and buy AAPL\n    order_percent('AAPL', 0.5, percent_of='cash')\n\n    # rebalance my short position, as a percentage of my current short\n    book_target_percent('MSFT', 0.1, percent_of='shorts')\n\n    # rebalance within a custom group of stocks\n    tech_stocks = ('AAPL', 'MSFT', 'GOOGL')\n    tech_filter = lambda p: p.sid in tech_stocks\n    for stock in tech_stocks:\n        order_target_percent(stock, 1/3, percent_of_fn=tech_filter) \n    ```", "```py\n    python run_algo.py -f dual_moving_avg.py --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o dma.pickle \n    ```", "```py\n    %%zipline --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o perf \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to place an\n        # order which would cause us to hold more than 10 shares\n        # or 1000 dollars worth of sid(24).\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to order more than\n        # 10 shares or 1000 dollars worth of sid(24) in a single order.\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0)\n\n    ``set_max_order_count(self, max_count)``\n    Set a limit on the number of orders that can be placed by the algorithm in\n    a single trading day.\n    Example: \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if more than 50 orders are placed in a day.\n        set_max_order_count(50) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if it attempts to place\n        # an order that would cause it to hold a short position.\n        set_long_only() \n    ```", "```py\n    name = 'Dynamically_Generated_String'\n    record( name, value, ... )\n    record( name, value1, 'name2', value2, name3=value3, name4=value4 ) \n    ```", "```py\n    -pytz==2013.9\n    +pytz==2014.4\n    +numpy==1.8.1\n    -numpy==1.8.0\n    +scipy==0.12.0\n    +patsy==0.2.1\n    +statsmodels==0.5.0\n    -six==1.5.2\n    +six==1.6.1\n    -Cython==0.20\n    +Cython==0.20.1\n    -TA-Lib==0.4.8\n    +--allow-external TA-Lib --allow-unverified TA-Lib TA-Lib==0.4.8\n    -requests==2.2.0\n    +requests==2.3.0\n    -nose==1.3.0\n    +nose==1.3.3\n    -xlrd==0.9.2\n    +xlrd==0.9.3\n    -pep8==1.4.6\n    +pep8==1.5.7\n    -pyflakes==0.7.3\n    -pip-tools==0.3.4\n    +pyflakes==0.8.1`\n    -scipy==0.13.2\n    -tornado==3.2\n    -pyparsing==2.0.1\n    -patsy==0.2.1\n    -statsmodels==0.4.3\n    +tornado==3.2.1\n    +pyparsing==2.0.2\n    -Markdown==2.3.1\n    +Markdown==2.4.1 \n    ```", "```py\n38  Scott Sanderson\n29  Thomas Wiecki\n26  Eddie Hebert\n 6  Delaney Granizo-Mackenzie\n 3  David Edwards\n 3  Richard Frank\n 2  Jonathan Kamens\n 1  Pankaj Garg\n 1  Tony Lambiris\n 1  fawce \n```", "```py\n    from datetime import datetime import pytz\n    from zipline import TradingAlgorithm\n    from zipline.utils.factory import load_from_yahoo\n\n    from zipline.api import order\n\n    def initialize(context):\n        context.test = 10\n\n    def handle_date(context, data):\n        order('AAPL', 10)\n        print(context.test)\n\n    if __name__ == '__main__':\n        import pylab as pl\n        start = datetime(2008, 1, 1, 0, 0, 0, 0, pytz.utc)\n        end = datetime(2010, 1, 1, 0, 0, 0, 0, pytz.utc)\n        data = load_from_yahoo(\n            stocks=['AAPL'],\n            indexes={},\n            start=start,\n            end=end)\n        data = data.dropna()\n        algo = TradingAlgorithm(\n            initialize=initialize,\n            handle_data=handle_date)\n        results = algo.run(data)\n        results.portfolio_value.plot()\n        pl.show() \n    ```", "```py\n    from zipline.api import history, add_history\n\n    def initialize(context):\n        add_history(bar_count=2, frequency='1d', field='price')\n\n    def handle_data(context, data):\n        prices = history(bar_count=2, frequency='1d', field='price')\n        context.last_prices = prices \n    ```", "```py\n    conda install -c quantopian zipline \n    ```", "```py\n49  Eddie Hebert\n28  Thomas Wiecki\n11  Richard Frank\n 2  Jamie Kirkpatrick\n 2  Jeremiah Lowin\n 1  Colin Alexander\n 1  Michael Schatzow\n 1  Moises Trovo\n 1  Suminda Dharmasena \n```", "```py\n--benchmark-file                The csv file that contains the benchmark\n                                returns (date, returns columns)\n--benchmark-symbol              The instrument's symbol to be used as\n                                a benchmark.\n                                (should exist in the ingested bundle)\n--benchmark-sid                 The sid of the instrument to be used as a\n                                benchmark.\n                                (should exist in the ingested bundle)\n--no-benchmark                  This flag is used to set the benchmark to\n                                zero. Alpha, beta and benchmark metrics\n                                are not calculated \n```", "```py\npipe = Pipeline(\n    columns={\n        'price': EquityPricing.close.latest,\n        'volume': EquityPricing.volume.latest,\n        'mcap': factset.Fundamentals.mkt_val.latest,\n    },\n    domain=CA_EQUITIES,\n) \n```", "```py\n> class SomeDataSet(DataSetFamily):\n>     extra_dims = [\n>         ('dimension_0', {'a', 'b', 'c'}),\n>         ('dimension_1', {'d', 'e', 'f'}),\n>     ]\n> \n>     column_0 = Column(float)\n>     column_1 = Column(bool) \n> ```", "```py\n> sid :: int64\n> asof_date :: datetime64[ns]\n> timestamp :: datetime64[ns]\n> dimension_0 :: str\n> dimension_1 :: str\n> column_0 :: float64\n> column_1 :: bool \n> ```", "```py\n> DataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n> ```", "```py\n--benchmark-file                The csv file that contains the benchmark\n                                returns (date, returns columns)\n--benchmark-symbol              The instrument's symbol to be used as\n                                a benchmark.\n                                (should exist in the ingested bundle)\n--benchmark-sid                 The sid of the instrument to be used as a\n                                benchmark.\n                                (should exist in the ingested bundle)\n--no-benchmark                  This flag is used to set the benchmark to\n                                zero. Alpha, beta and benchmark metrics\n                                are not calculated \n```", "```py\n--benchmark-file                The csv file that contains the benchmark\n                                returns (date, returns columns)\n--benchmark-symbol              The instrument's symbol to be used as\n                                a benchmark.\n                                (should exist in the ingested bundle)\n--benchmark-sid                 The sid of the instrument to be used as a\n                                benchmark.\n                                (should exist in the ingested bundle)\n--no-benchmark                  This flag is used to set the benchmark to\n                                zero. Alpha, beta and benchmark metrics\n                                are not calculated \n```", "```py\npipe = Pipeline(\n    columns={\n        'price': EquityPricing.close.latest,\n        'volume': EquityPricing.volume.latest,\n        'mcap': factset.Fundamentals.mkt_val.latest,\n    },\n    domain=CA_EQUITIES,\n) \n```", "```py\n> class SomeDataSet(DataSetFamily):\n>     extra_dims = [\n>         ('dimension_0', {'a', 'b', 'c'}),\n>         ('dimension_1', {'d', 'e', 'f'}),\n>     ]\n> \n>     column_0 = Column(float)\n>     column_1 = Column(bool) \n> ```", "```py\n> sid :: int64\n> asof_date :: datetime64[ns]\n> timestamp :: datetime64[ns]\n> dimension_0 :: str\n> dimension_1 :: str\n> column_0 :: float64\n> column_1 :: bool \n> ```", "```py\n> DataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n> ```", "```py\npipe = Pipeline(\n    columns={\n        'price': EquityPricing.close.latest,\n        'volume': EquityPricing.volume.latest,\n        'mcap': factset.Fundamentals.mkt_val.latest,\n    },\n    domain=CA_EQUITIES,\n) \n```", "```py\n> class SomeDataSet(DataSetFamily):\n>     extra_dims = [\n>         ('dimension_0', {'a', 'b', 'c'}),\n>         ('dimension_1', {'d', 'e', 'f'}),\n>     ]\n> \n>     column_0 = Column(float)\n>     column_1 = Column(bool) \n> ```", "```py\n> sid :: int64\n> asof_date :: datetime64[ns]\n> timestamp :: datetime64[ns]\n> dimension_0 :: str\n> dimension_1 :: str\n> column_0 :: float64\n> column_1 :: bool \n> ```", "```py\n> DataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e') \n> ```", "```py\nfrom zipline.extensions import register\nfrom zipline.finance.blotter import Blotter, SimulationBlotter\nfrom zipline.finance.cancel_policy import EODCancel\n\n@register(Blotter, 'my-blotter')\ndef my_blotter():\n  \"\"\"Create a SimulationBlotter with a non-default cancel policy.\n \"\"\"\n    return SimulationBlotter(cancel_policy=EODCancel()) \n```", "```py\n$ zipline run --blotter my-blotter <...other-args...> \n```", "```py\n$ zipline -x argle=bargle run ... \n```", "```py\n$ zipline -x argle.bargle=foo \n```", "```py\nfrom zipline.extensions import register\nfrom zipline.finance.blotter import Blotter, SimulationBlotter\nfrom zipline.finance.cancel_policy import EODCancel\n\n@register(Blotter, 'my-blotter')\ndef my_blotter():\n  \"\"\"Create a SimulationBlotter with a non-default cancel policy.\n \"\"\"\n    return SimulationBlotter(cancel_policy=EODCancel()) \n```", "```py\n$ zipline run --blotter my-blotter <...other-args...> \n```", "```py\n$ zipline -x argle=bargle run ... \n```", "```py\n$ zipline -x argle.bargle=foo \n```", "```py\nfrom zipline.extensions import register\nfrom zipline.finance.blotter import Blotter, SimulationBlotter\nfrom zipline.finance.cancel_policy import EODCancel\n\n@register(Blotter, 'my-blotter')\ndef my_blotter():\n  \"\"\"Create a SimulationBlotter with a non-default cancel policy.\n \"\"\"\n    return SimulationBlotter(cancel_policy=EODCancel()) \n```", "```py\n$ zipline run --blotter my-blotter <...other-args...> \n```", "```py\n$ zipline -x argle=bargle run ... \n```", "```py\n$ zipline -x argle.bargle=foo \n```", "```py\n@zipline.data.bundles.register('my-new-bundle')\ndef my_new_bundle_ingest(environ,\n                         asset_db_writer,\n                         minute_bar_writer,\n                         daily_bar_writer,\n                         adjustment_writer,\n                         calendar,\n                         cache,\n                         show_progress):\n    ... \n```", "```py\n@zipline.data.bundles.register('my-new-bundle')\ndef my_new_bundle_ingest(environ,\n                         asset_db_writer,\n                         minute_bar_writer,\n                         daily_bar_writer,\n                         adjustment_writer,\n                         calendar,\n                         cache,\n                         show_progress):\n    ... \n```", "```py\n@zipline.data.bundles.register('my-new-bundle')\ndef my_new_bundle_ingest(environ,\n                         asset_db_writer,\n                         minute_bar_writer,\n                         daily_bar_writer,\n                         adjustment_writer,\n                         calendar,\n                         cache,\n                         show_progress):\n    ... \n```", "```py\n    context.account.settled_cash \n    ```", "```py\n    data[security].stddev(3) \n    ```", "```py\n    # this is how it works today (and this still works)\n    # put 50% of my portfolio in AAPL\n    order_percent('AAPL', 0.5)\n    # note that if this were a fully invested portfolio, it would become 150% levered.\n\n    # take half of my available cash and buy AAPL\n    order_percent('AAPL', 0.5, percent_of='cash')\n\n    # rebalance my short position, as a percentage of my current short\n    book_target_percent('MSFT', 0.1, percent_of='shorts')\n\n    # rebalance within a custom group of stocks\n    tech_stocks = ('AAPL', 'MSFT', 'GOOGL')\n    tech_filter = lambda p: p.sid in tech_stocks\n    for stock in tech_stocks:\n        order_target_percent(stock, 1/3, percent_of_fn=tech_filter) \n    ```", "```py\n    context.account.settled_cash \n    ```", "```py\n    data[security].stddev(3) \n    ```", "```py\n    # this is how it works today (and this still works)\n    # put 50% of my portfolio in AAPL\n    order_percent('AAPL', 0.5)\n    # note that if this were a fully invested portfolio, it would become 150% levered.\n\n    # take half of my available cash and buy AAPL\n    order_percent('AAPL', 0.5, percent_of='cash')\n\n    # rebalance my short position, as a percentage of my current short\n    book_target_percent('MSFT', 0.1, percent_of='shorts')\n\n    # rebalance within a custom group of stocks\n    tech_stocks = ('AAPL', 'MSFT', 'GOOGL')\n    tech_filter = lambda p: p.sid in tech_stocks\n    for stock in tech_stocks:\n        order_target_percent(stock, 1/3, percent_of_fn=tech_filter) \n    ```", "```py\n    python run_algo.py -f dual_moving_avg.py --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o dma.pickle \n    ```", "```py\n    %%zipline --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o perf \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to place an\n        # order which would cause us to hold more than 10 shares\n        # or 1000 dollars worth of sid(24).\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to order more than\n        # 10 shares or 1000 dollars worth of sid(24) in a single order.\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0)\n\n    ``set_max_order_count(self, max_count)``\n    Set a limit on the number of orders that can be placed by the algorithm in\n    a single trading day.\n    Example: \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if more than 50 orders are placed in a day.\n        set_max_order_count(50) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if it attempts to place\n        # an order that would cause it to hold a short position.\n        set_long_only() \n    ```", "```py\n    name = 'Dynamically_Generated_String'\n    record( name, value, ... )\n    record( name, value1, 'name2', value2, name3=value3, name4=value4 ) \n    ```", "```py\n    -pytz==2013.9\n    +pytz==2014.4\n    +numpy==1.8.1\n    -numpy==1.8.0\n    +scipy==0.12.0\n    +patsy==0.2.1\n    +statsmodels==0.5.0\n    -six==1.5.2\n    +six==1.6.1\n    -Cython==0.20\n    +Cython==0.20.1\n    -TA-Lib==0.4.8\n    +--allow-external TA-Lib --allow-unverified TA-Lib TA-Lib==0.4.8\n    -requests==2.2.0\n    +requests==2.3.0\n    -nose==1.3.0\n    +nose==1.3.3\n    -xlrd==0.9.2\n    +xlrd==0.9.3\n    -pep8==1.4.6\n    +pep8==1.5.7\n    -pyflakes==0.7.3\n    -pip-tools==0.3.4\n    +pyflakes==0.8.1`\n    -scipy==0.13.2\n    -tornado==3.2\n    -pyparsing==2.0.1\n    -patsy==0.2.1\n    -statsmodels==0.4.3\n    +tornado==3.2.1\n    +pyparsing==2.0.2\n    -Markdown==2.3.1\n    +Markdown==2.4.1 \n    ```", "```py\n38  Scott Sanderson\n29  Thomas Wiecki\n26  Eddie Hebert\n 6  Delaney Granizo-Mackenzie\n 3  David Edwards\n 3  Richard Frank\n 2  Jonathan Kamens\n 1  Pankaj Garg\n 1  Tony Lambiris\n 1  fawce \n```", "```py\n    python run_algo.py -f dual_moving_avg.py --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o dma.pickle \n    ```", "```py\n    %%zipline --symbols AAPL --start 2011-1-1 --end 2012-1-1 -o perf \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to place an\n        # order which would cause us to hold more than 10 shares\n        # or 1000 dollars worth of sid(24).\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if we attempt to order more than\n        # 10 shares or 1000 dollars worth of sid(24) in a single order.\n        set_max_order_size(sid(24), max_shares=10, max_notional=1000.0)\n\n    ``set_max_order_count(self, max_count)``\n    Set a limit on the number of orders that can be placed by the algorithm in\n    a single trading day.\n    Example: \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if more than 50 orders are placed in a day.\n        set_max_order_count(50) \n    ```", "```py\n    def initialize(context):\n        # Algorithm will raise an exception if it attempts to place\n        # an order that would cause it to hold a short position.\n        set_long_only() \n    ```", "```py\n    name = 'Dynamically_Generated_String'\n    record( name, value, ... )\n    record( name, value1, 'name2', value2, name3=value3, name4=value4 ) \n    ```", "```py\n    -pytz==2013.9\n    +pytz==2014.4\n    +numpy==1.8.1\n    -numpy==1.8.0\n    +scipy==0.12.0\n    +patsy==0.2.1\n    +statsmodels==0.5.0\n    -six==1.5.2\n    +six==1.6.1\n    -Cython==0.20\n    +Cython==0.20.1\n    -TA-Lib==0.4.8\n    +--allow-external TA-Lib --allow-unverified TA-Lib TA-Lib==0.4.8\n    -requests==2.2.0\n    +requests==2.3.0\n    -nose==1.3.0\n    +nose==1.3.3\n    -xlrd==0.9.2\n    +xlrd==0.9.3\n    -pep8==1.4.6\n    +pep8==1.5.7\n    -pyflakes==0.7.3\n    -pip-tools==0.3.4\n    +pyflakes==0.8.1`\n    -scipy==0.13.2\n    -tornado==3.2\n    -pyparsing==2.0.1\n    -patsy==0.2.1\n    -statsmodels==0.4.3\n    +tornado==3.2.1\n    +pyparsing==2.0.2\n    -Markdown==2.3.1\n    +Markdown==2.4.1 \n    ```", "```py\n38  Scott Sanderson\n29  Thomas Wiecki\n26  Eddie Hebert\n 6  Delaney Granizo-Mackenzie\n 3  David Edwards\n 3  Richard Frank\n 2  Jonathan Kamens\n 1  Pankaj Garg\n 1  Tony Lambiris\n 1  fawce \n```", "```py\n    from datetime import datetime import pytz\n    from zipline import TradingAlgorithm\n    from zipline.utils.factory import load_from_yahoo\n\n    from zipline.api import order\n\n    def initialize(context):\n        context.test = 10\n\n    def handle_date(context, data):\n        order('AAPL', 10)\n        print(context.test)\n\n    if __name__ == '__main__':\n        import pylab as pl\n        start = datetime(2008, 1, 1, 0, 0, 0, 0, pytz.utc)\n        end = datetime(2010, 1, 1, 0, 0, 0, 0, pytz.utc)\n        data = load_from_yahoo(\n            stocks=['AAPL'],\n            indexes={},\n            start=start,\n            end=end)\n        data = data.dropna()\n        algo = TradingAlgorithm(\n            initialize=initialize,\n            handle_data=handle_date)\n        results = algo.run(data)\n        results.portfolio_value.plot()\n        pl.show() \n    ```", "```py\n    from zipline.api import history, add_history\n\n    def initialize(context):\n        add_history(bar_count=2, frequency='1d', field='price')\n\n    def handle_data(context, data):\n        prices = history(bar_count=2, frequency='1d', field='price')\n        context.last_prices = prices \n    ```", "```py\n    conda install -c quantopian zipline \n    ```", "```py\n49  Eddie Hebert\n28  Thomas Wiecki\n11  Richard Frank\n 2  Jamie Kirkpatrick\n 2  Jeremiah Lowin\n 1  Colin Alexander\n 1  Michael Schatzow\n 1  Moises Trovo\n 1  Suminda Dharmasena \n```", "```py\n    from datetime import datetime import pytz\n    from zipline import TradingAlgorithm\n    from zipline.utils.factory import load_from_yahoo\n\n    from zipline.api import order\n\n    def initialize(context):\n        context.test = 10\n\n    def handle_date(context, data):\n        order('AAPL', 10)\n        print(context.test)\n\n    if __name__ == '__main__':\n        import pylab as pl\n        start = datetime(2008, 1, 1, 0, 0, 0, 0, pytz.utc)\n        end = datetime(2010, 1, 1, 0, 0, 0, 0, pytz.utc)\n        data = load_from_yahoo(\n            stocks=['AAPL'],\n            indexes={},\n            start=start,\n            end=end)\n        data = data.dropna()\n        algo = TradingAlgorithm(\n            initialize=initialize,\n            handle_data=handle_date)\n        results = algo.run(data)\n        results.portfolio_value.plot()\n        pl.show() \n    ```", "```py\n    from zipline.api import history, add_history\n\n    def initialize(context):\n        add_history(bar_count=2, frequency='1d', field='price')\n\n    def handle_data(context, data):\n        prices = history(bar_count=2, frequency='1d', field='price')\n        context.last_prices = prices \n    ```", "```py\n    conda install -c quantopian zipline \n    ```", "```py\n49  Eddie Hebert\n28  Thomas Wiecki\n11  Richard Frank\n 2  Jamie Kirkpatrick\n 2  Jeremiah Lowin\n 1  Colin Alexander\n 1  Michael Schatzow\n 1  Moises Trovo\n 1  Suminda Dharmasena \n```"]