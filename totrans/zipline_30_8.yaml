- en: Releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://zipline.ml4trading.io/releases.html](https://zipline.ml4trading.io/releases.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Release 2.0.0rc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 2.0.0rc1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 5, 2021
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This release updates Zipline to be compatible with Python >= 3.7 as well as
    the current versions of relevant PyData libraries like Pandas, scikit-learn, and
    others.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conda packages](https://anaconda.org/ml4t/repo) for [Zipline](https://anaconda.org/ml4t/zipline-reloaded)
    and key dependencies [bcolz](https://anaconda.org/ml4t/bcolz-zipline) and [TA-Lib](https://anaconda.org/ml4t/ta-lib)
    are now available for Python 3.7-3.9 on the ‘ml4t’ Anaconda channel. Binary wheels
    are available on [PyPi](https://pypi.org/project/zipline-reloaded/) for Linux
    ( Python 3.7-3.9) and MacOSx (3.7 and 3.8).'
  prefs: []
  type: TYPE_NORMAL
- en: As part of the update, the `BlazeLoader` functionality was removed. It was built
    on the [Blaze Ecosystem](https://blaze.pydata.org/). Unfortunately, the three
    relevant projects ([Blaze](https://blaze.readthedocs.io/en/latest/index.html),
    [Odo](https://odo.readthedocs.io/en/latest/) and [datashape](https://datashape.readthedocs.io/en/latest/)
    have received very limited support over the last several years.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other updates include:'
  prefs: []
  type: TYPE_NORMAL
- en: A [new release](https://github.com/stefan-jansen/bcolz-zipline) for [Bcolz](https://github.com/Blosc/bcolz)
    which has been marked unmaintained since September 2020 by the [author](https://github.com/Blosc).
    The new release updates the underlying [c-blosc](https://github.com/Blosc/c-blosc)
    library from version 1.14 to the latest 1.21.0\. There are also conda packages
    for Bcolz (see links above).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Networkx](https://networkx.org/) now uses the better performing version 2.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda packages for TA-Lib 0.4.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This new release also makes it easier to load custom data sources into a Pipeline
    (such as the predictions of an ML model) when backtesting. See the relevant examples
    in the [Github repo](https://github.com/stefan-jansen/machine-learning-for-trading)
    of the book [Machine Learning for Trading](https://www.amazon.com/Machine-Learning-Algorithmic-Trading-alternative/dp/1839217715/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=1617658040&sr=8-1-spons),
    such as [these ones](https://github.com/stefan-jansen/machine-learning-for-trading/tree/master/08_ml4t_workflow/04_ml4t_workflow_with_zipline).
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: custom_loader() for custom Pipeline data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compatibility with the latest versions of Pandas, scikit-learn, and other relevant
    [PyData](https://pydata.org/) libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numerous tests updates to accommodate recent Python and dependency versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Latest blosc library may improve compression and I/O performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Python 2 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All builds consolidated on GitHub Actions CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Expanded with additional information on Pipeline and related DataLoaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.4.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: October 5, 2020
  prefs: []
  type: TYPE_NORMAL
- en: This release includes a small number of bug fixes, documentation improvements,
    and build/dependency enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Conda packages for zipline and its dependencies are now available for python
    3.6 on the ‘conda-forge’ Anaconda channel. They’re also available on the ‘Quantopian’
    channel, but we’ll stop updating those eventually.
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix for calling `run_algorithm` without `benchmark_returns` ([2762](https://github.com/stefan-jansen/zipline/issues/2762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for empyrical 0.5.3 ([2526](https://github.com/stefan-jansen/zipline/issues/2526))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed dependence on contextlib2 in py3 environments ([2757](https://github.com/stefan-jansen/zipline/issues/2757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update default bundle to ‘quantopian-quandl’ at more entrypoints ([2763](https://github.com/stefan-jansen/zipline/issues/2763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CI with newer statsmodels and scipy ([2739](https://github.com/stefan-jansen/zipline/issues/2739))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions CI on linux and macos ([2743](https://github.com/stefan-jansen/zipline/issues/2743),
    [2767](https://github.com/stefan-jansen/zipline/issues/2767))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added conda packaging for zipline and its dependencies to conda-forge ([2665](https://github.com/stefan-jansen/zipline/issues/2665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Various documentation improvements ([2763](https://github.com/stefan-jansen/zipline/issues/2763),
    [2771](https://github.com/stefan-jansen/zipline/issues/2771), [2772](https://github.com/stefan-jansen/zipline/issues/2772),
    [2776](https://github.com/stefan-jansen/zipline/issues/2776), [2780](https://github.com/stefan-jansen/zipline/issues/2780))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.4.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 22, 2020
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Implicit Dependency on Benchmarks and Treasury Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Previously, Zipline implicitly fetched these required inputs from third party
    API sources if they were not provided by users: treasury data from the US Federal
    Reserve’s API, and benchmarks from IEX. This meant that simulations required an
    internet connection and stable APIs for these data sources, neither of which were
    guaranteed for many users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We removed the dependency on treasury curves, since they weren’t actually being
    used anymore. And we replaced the implicit downloading of benchmark returns with
    explicit options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ([2627](https://github.com/stefan-jansen/zipline/issues/2627), [2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs: []
  type: TYPE_NORMAL
- en: New Built In Factors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`PercentChange`](api-reference.html#zipline.pipeline.factors.PercentChange
    "zipline.pipeline.factors.PercentChange"): Calculates the percent change over
    the given `window_length`. Note: Percent change is calculated as `(new - old)
    / abs(old)`. ([2506](https://github.com/stefan-jansen/zipline/issues/2506))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeerCount`](api-reference.html#zipline.pipeline.factors.PeerCount "zipline.pipeline.factors.PeerCount"):
    Gives the number of occurrences of each distinct category in a classifier. ([2509](https://github.com/stefan-jansen/zipline/issues/2509))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConstantMixin`: A mixin for creating a Pipeline term with a constant value.
    ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if_else()`: Allows users to create expressions that conditionally draw from
    the outputs of one of two terms. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillna()`: Allows users to fill missing data with either a constant value,
    or values from another term. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip()`: Allows users to constrain a factor’s values to a given range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean()`, `stddev()`, `max()`, `min()`, `median()`, `sum()`, `notnull_count()`:
    Summarize data across the entire domain into a scalar factor. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added International Pipelines ([2262](https://github.com/stefan-jansen/zipline/issues/2262))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added DataSetFamily (née MultiDimensionalDataSet) - a shorthand for creating
    a collection of regular DataSets that share the same columns. ([2402](https://github.com/stefan-jansen/zipline/issues/2402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `get_column()` for looking up columns by name ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `CheckWindowsClassifier` that allows us to test lookback windows of categorical
    and string columns using Pipeline. ([2458](https://github.com/stefan-jansen/zipline/issues/2458))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `PipelineHooks` which is now used to display Pipline progress bars ([2467](https://github.com/stefan-jansen/zipline/issues/2467))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`BoundColumn`](api-reference.html#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.dataset.BoundColumn")
    comparisons will now result in an error. This prevents writing `EquityPricing.volume
    > 1000` (silently returning bad data) insteads of `EquityPricing.volume.latest
    > 1000`. ([2537](https://github.com/stefan-jansen/zipline/issues/2537))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added currency conversion support to Pipeline. ([2586](https://github.com/stefan-jansen/zipline/issues/2586))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `--benchmark-file` and `--benchmark-symbol` command line arguments to
    make it easier to provide benchmark data. ([2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Python 3.6 ([2643](https://github.com/stefan-jansen/zipline/issues/2643))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `mask` argument to Factor.peer_count. ([2676](https://github.com/stefan-jansen/zipline/issues/2676))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `if_else()` and `fillna()` for allowing conditional logic in Pipelines.
    ([2691](https://github.com/stefan-jansen/zipline/issues/2691))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added daily summary methods to Factor for collecting summary statistics for
    the entire universe. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `clip()` method for clipping values to a range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Pipeline term arithmetic with more than 32 terms. ([2727](https://github.com/stefan-jansen/zipline/issues/2727))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed support for non unique sid->exchange mappings. ([2289](https://github.com/stefan-jansen/zipline/issues/2289))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed crash on dividend warning. ([2323](https://github.com/stefan-jansen/zipline/issues/2323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `week_start` when Monday precedes the New Year. ([2394](https://github.com/stefan-jansen/zipline/issues/2394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensured correct dtypes when unpacking empty dataframes. ([2444](https://github.com/stefan-jansen/zipline/issues/2444))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where a Pipeline term with `window_length=0` would not copy the
    input before calling `compute()` which could cause incorrect results if the input
    was reused in the Pipeline. ([2723](https://github.com/stefan-jansen/zipline/issues/2723))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added `HDF5DailyBarWriter`, which writes daily pricing in a new format as an
    HDF5 file. Each OHLCV field is stored as a 2D array in a chunked HDF5 dataset,
    with a row per sid and a column per day. The file also supports multiple countries.
    Added `HDF5DailyBarReader`, which implements the BarReader interface and can read
    files written by HDF5DailyBarWriter. ([2295](https://github.com/stefan-jansen/zipline/issues/2295))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vectorized dividend ratio calculation ([2298](https://github.com/stefan-jansen/zipline/issues/2298))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of the [`RollingPearson`](api-reference.html#zipline.pipeline.factors.RollingPearson
    "zipline.pipeline.factors.RollingPearson") and [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns") pipeline factors. ([2071](https://github.com/stefan-jansen/zipline/issues/2071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made `parameter_space()` reset instance fixtures between runs ([2433](https://github.com/stefan-jansen/zipline/issues/2433))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused treasury curves data handling. ([2626](https://github.com/stefan-jansen/zipline/issues/2626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: International Pipelines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Pipeline now supports international data.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline is a tool that allows you to define computations over a universe of
    assets and a period of time. In the past, you could only run pipelines on the
    US equity market. Now, you can now specify a domain over which a pipeline should
    be computed. The name “domain” refers to the mathematical concept of the “domain
    of a function”, which is the set of potential inputs to a function. In the context
    of Pipeline, the domain specifies the set of assets and a corresponding trading
    calendar over which the expressions of a pipeline should be computed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following pipeline returns the latest close price and volume
    for all Canadian equities, every day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Another challenge related to currencies is the fact that some exchanges don’t
    require stocks to be listed in local currency. For example, the London Stock Exchange
    only has about 75% of its listings denominated in GBP*. The other 25% are primarily
    listed in EUR or USD. This can make it hard to make cross sectional comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, most people rely on currency conversions to bring price-based
    fields into the same currency. Pipeline columns now support an `fx` method for
    specifying what currency the data should be viewed as. This method is only available
    on terms which are “currency-aware”, for example open or close, but not on terms
    that do not care about currency like volume.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no way to load international data into a bundle. We are
    working on ways to make it easy to get international data into Zipline.
  prefs: []
  type: TYPE_NORMAL
- en: ([2265](https://github.com/stefan-jansen/zipline/issues/2265), [2262](https://github.com/stefan-jansen/zipline/issues/2262),
    and many others)
  prefs: []
  type: TYPE_NORMAL
- en: 'The domains that Zipline currently supports for running pipelines (using the
    latest [trading-calendars](https://pypi.org/project/trading-calendars/) package)
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Argentina
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Austria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belgium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brazil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canada
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: China
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czech Republic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colombia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czechia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: France
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Germany
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greece
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hong Kong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hungary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: India
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indonesia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ireland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Japan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malaysia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mexico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netherlands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Zealand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Norway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pakistan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peru
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Philippines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portugal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singapore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sweden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taiwan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thailand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United Kingdom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United States
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Africa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Korea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switzerland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([2301](https://github.com/stefan-jansen/zipline/issues/2301), [2333](https://github.com/stefan-jansen/zipline/issues/2333),
    [2338](https://github.com/stefan-jansen/zipline/issues/2338), [2355](https://github.com/stefan-jansen/zipline/issues/2355),
    [2369](https://github.com/stefan-jansen/zipline/issues/2369), [2550](https://github.com/stefan-jansen/zipline/issues/2550),
    [2552](https://github.com/stefan-jansen/zipline/issues/2552), [2559](https://github.com/stefan-jansen/zipline/issues/2559))
  prefs: []
  type: TYPE_NORMAL
- en: DataSetFamily
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") in a pipeline expression, one must choose
    a specific value for each of the extra dimensions using the [`slice()`](api-reference.html#zipline.pipeline.data.DataSetFamily.slice
    "zipline.pipeline.data.DataSetFamily.slice") method. For example, given a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This dataset might represent a table with the following columns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can be converted to a regular [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") with:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ([2402](https://github.com/stefan-jansen/zipline/issues/2402), [2452](https://github.com/stefan-jansen/zipline/issues/2452),
    [2456](https://github.com/stefan-jansen/zipline/issues/2456))
  prefs: []
  type: TYPE_NORMAL
- en: Release 1.3.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 16, 2018
  prefs: []
  type: TYPE_NORMAL
- en: This release includes several enhancements and performance improvements along
    with a small number of bug fixes. We recommend that all users upgrade to this
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This will likely be the last minor release in the Zipline 1.x series. The release
    next will be Zipline 2.0, which will include a number of small breaking changes
    required to support international equities.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for Newer Numpy/Pandas Versions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline has historically been very conservative when updating versions of numpy,
    pandas, and other “PyData” ecosystem packages. This conservatism is primarily
    due to the fact that Zipline is used as the backtesting engine for [Quantopian](https://www.quantopian.com/),
    which means that updating package versions risks breaking a large installed codebase.
    Of course, many Zipline users don’t have the backwards compatibility requirements
    that Quantopian has, and they’d like to be able to use the latest and greatest
    package versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this release, we’re now building and testing Zipline with two package
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stable”, using numpy version 1.11 and pandas version 0.18.1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Latest”, using numpy version 1.14 and pandas version 0.22.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other combinations of numpy and pandas **may** work, but these package sets
    will be built and tested during our normal development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, our goal is to continue to maintain support for two sets of
    packages at any given time. The “stable” package set will change relatively infrequently,
    and will contain the versions of numpy and pandas supported on Quantopian. The
    “latest” package set will change regularly, and will contain recently-released
    versions of numpy and pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Our hope with these changes is to strike a balance between stability and novelty
    without taking on too great a maintenance burden by supporting every possible
    combination of packages. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs: []
  type: TYPE_NORMAL
- en: Standalone `trading_calendars` Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most popular features of Zipline is its collection of trading calendars,
    which provide information about holidays and trading hours of various markets.
    As part of this release, Zipline’s calendar-related functionality has been moved
    to a separate [trading-calendars](https://pypi.org/project/trading-calendars/)
    package, allowing users that only needed access to the calendars to use them without
    taking on the rest of Zipline’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compability, Zipline will continue to re-export calendar-related
    functions. For example, `zipline.get_calendar()` still exists, but is now an alias
    for `trading_calendars.get_calendar`. Users that depend on this functionality
    are encouraged to update their imports to the new locations in `trading_calendars`.
    ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Blotters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This release adds experimental support for running Zipline with user-defined
    subclasses of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter"). The primary motivation for this change
    is to make it easier to run live algorithms from the Zipline CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary ways to configure a custom blotter:'
  prefs: []
  type: TYPE_NORMAL
- en: You can pass an instance of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") as the `blotter` parameter to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). (This functionality had existed previously, but wasn’t
    well-documented.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can register a named **factory** for a blotter in your `extension.py` and
    pass the name on the command line via the `--blotter` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example usage of **(2)** might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ~/.zipline/extension.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this factory when running zipline from the command line, we would invoke
    zipline like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As part of this change, the [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") class has been converted to an abstract
    base class. The default blotter used in simulations is now named [`zipline.finance.blotter.SimulationBlotter`](api-reference.html#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter").
  prefs: []
  type: TYPE_NORMAL
- en: ([2210](https://github.com/stefan-jansen/zipline/issues/2210), [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Command-Line Arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This release adds support for passing custom arguments to the `zipline` command-line
    interface. Custom command-line arguments are passed via the `-x` flag followed
    by a `key=value` pair. Arguments passed this way can be accessed from Python code
    (e.g., an algorithm or an extension) via attributes of `zipline.extension_args`.
    For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: then the result of `zipline.extension_args.argle` would be the string `"bargle"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom arguments can be grouped into namespaces by including `.` characters
    in keys. For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: then `zipline.extension_args.argle` will contain an object with a `bargle` attribute
    containing the string `"foo"`. Keys can contain multiple dots to create nested
    namespaces. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for pandas 0.22 and numpy 1.14\. See above for details. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `zipline.utils.calendars` into a separately-installable [trading-calendars](https://pypi.org/project/trading-calendars/)
    package. ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for specifying custom string arguments with the `-x` flag. See
    above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for registering custom subclass of `zipline.finance.blotter.Blotter`.
    See above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210),
    [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in [`zipline.pipeline.Factor.winsorize()`](api-reference.html#zipline.pipeline.Factor.winsorize
    "zipline.pipeline.Factor.winsorize") where NaN values were incorrectly included
    in value counts when determining cutoff thresholds for winsorization. ([2138](https://github.com/stefan-jansen/zipline/issues/2138))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a crash in [`zipline.pipeline.Factor.top()`](api-reference.html#zipline.pipeline.Factor.top
    "zipline.pipeline.Factor.top") with a count of 1 and no groupby. ([2218](https://github.com/stefan-jansen/zipline/issues/2218))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where calling `data.history` with a negative lookback would fetch
    prices from the future. ([2164](https://github.com/stefan-jansen/zipline/issues/2164))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where `StopOrder``, [`zipline.finance.execution.LimitOrder`](api-reference.html#zipline.finance.execution.LimitOrder
    "zipline.finance.execution.LimitOrder"), and [`zipline.finance.execution.StopLimitOrder`](api-reference.html#zipline.finance.execution.StopLimitOrder
    "zipline.finance.execution.StopLimitOrder") prices were being rounded to the nearest
    penny regardless of asset tick size. Prices are now rounded based on the `tick_size`
    attribute of the asset being ordered. ([2211](https://github.com/stefan-jansen/zipline/issues/2211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for assets that trade regularly.
    ([2108](https://github.com/stefan-jansen/zipline/issues/2108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for many assets by tuning
    cache sizes. ([2110](https://github.com/stefan-jansen/zipline/issues/2110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactored large parts of the Zipline test suite to make it easier to change
    the signature of `zipline.algorithm.TradingAlgorithm`. ([2169](https://github.com/stefan-jansen/zipline/issues/2169),
    [2168](https://github.com/stefan-jansen/zipline/issues/2168), [2165](https://github.com/stefan-jansen/zipline/issues/2165),
    [2171](https://github.com/stefan-jansen/zipline/issues/2171))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for running travis builds with pandas 0.18 and 0.22. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OSX builds to the travis build matrix. ([2244](https://github.com/stefan-jansen/zipline/issues/2244))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 4, 2018
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extensible Risk and Performance Metrics ([2081](https://github.com/stefan-jansen/zipline/issues/2081))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The risk and performance metrics are summarizing values calculated by Zipline
    when running a simulation, for example: returns or Sharpe ratio. 1.1.2 introduces
    a new API for registering custom risk and performance metrics defined by the user.
    We have also made it possible to run a backtest without computing any metrics
    to improve the feedback cycle when debugging an algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [Metrics](risk-and-perf-metrics.html#metrics).
  prefs: []
  type: TYPE_NORMAL
- en: Docs, Trading Calendars, and Benchmarks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline now defaults to using the `quandl` bundle, which you’ll need an API
    Key for, and can find information about in the Data Bundles documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added many Tutorial & Documentations updates, including information on
    how to create your own `TradingCalendar`, pass it to your algorithm via the Zipline
    CLI, and how to use custom csv data using the `csvdir` bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline is no longer being tested and packaged for Python 3.4.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline now requests data for SPY, the default benchmark used for Zipline backtests,
    using the [IEX Trading](https://iextrading.com) API, and no longer uses `pandas-datareader`.
    You can run a backtest up to 5 years from the current day using this data.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Grow minute file cache to 1550 by default ([1906](https://github.com/stefan-jansen/zipline/issues/1906))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change default commission to .001 ([1946](https://github.com/stefan-jansen/zipline/issues/1946))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the ability to compute multiple pipelines ([1974](https://github.com/stefan-jansen/zipline/issues/1974))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow users to switch between calendars ([1800](https://github.com/stefan-jansen/zipline/issues/1800))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New filter `NoMissingValues` ([1969](https://github.com/stefan-jansen/zipline/issues/1969))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail better on `AssetFinder(nonexistent_path)` ([2000](https://github.com/stefan-jansen/zipline/issues/2000))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement csvdir bundle ([1860](https://github.com/stefan-jansen/zipline/issues/1860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update quandl_bundle to use Quandl API v3 ([1990](https://github.com/stefan-jansen/zipline/issues/1990))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `FixedBasisPointsSlippage` slippage model ([2047](https://github.com/stefan-jansen/zipline/issues/2047))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create MinLeverage control ([2064](https://github.com/stefan-jansen/zipline/issues/2064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`history` calls with a frequency of `1d` now work when using a Panel as the
    minute data source. ([1920](https://github.com/stefan-jansen/zipline/issues/1920))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check contract exists when using futures daily bar reader ([1892](https://github.com/stefan-jansen/zipline/issues/1892))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoDataBeforeDate` edge cases ([1894](https://github.com/stefan-jansen/zipline/issues/1894))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix frame column validation in Python 2.7.5 ([1954](https://github.com/stefan-jansen/zipline/issues/1954))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix daily history for minute panel data backtest ([1920](https://github.com/stefan-jansen/zipline/issues/1920))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_last_traded_dt` expects a trading day ([2087](https://github.com/stefan-jansen/zipline/issues/2087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily Adjustment perspective fix ([2089](https://github.com/stefan-jansen/zipline/issues/2089))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change algorithm account validation from happening every minute in `handle_data`
    to only occurring once at the end of each day ([1884](https://github.com/stefan-jansen/zipline/issues/1884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blaze core loader performance improvements ([1866](https://github.com/stefan-jansen/zipline/issues/1866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new factor that just computes beta ([2021](https://github.com/stefan-jansen/zipline/issues/2021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduces memory footprint of Quandl WIKI Prices bundle ([2053](https://github.com/stefan-jansen/zipline/issues/2053))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add `CachedObject.expired()` ([1881](https://github.com/stefan-jansen/zipline/issues/1881))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RollingLinearRegressionOfReturns` factor to be window_safe ([1902](https://github.com/stefan-jansen/zipline/issues/1902))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RSI` factor to be window_safe ([1904](https://github.com/stefan-jansen/zipline/issues/1904))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates for better docs generation ([1890](https://github.com/stefan-jansen/zipline/issues/1890))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove and zero out unused treasury curves ([1910](https://github.com/stefan-jansen/zipline/issues/1910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networkx 2 changes the behavior of out_degree ([1996](https://github.com/stefan-jansen/zipline/issues/1996))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass calendars to `DataPortal` ([2026](https://github.com/stefan-jansen/zipline/issues/2026))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove old Yahoo code ([2032](https://github.com/stefan-jansen/zipline/issues/2032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sync and fill benchmarks through latest trading day ([2044](https://github.com/stefan-jansen/zipline/issues/2044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides better error message when QUANDL_API_KEY is missing ([2078](https://github.com/stefan-jansen/zipline/issues/2078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the error message for misaligned dates in Pipeline engine ([2131](https://github.com/stefan-jansen/zipline/issues/2131))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the conda tools we’re using to fix our packaging ([1942](https://github.com/stefan-jansen/zipline/issues/1942))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.2 ([1983](https://github.com/stefan-jansen/zipline/issues/1983))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update conda tooling and remove Python 3.4 builds ([2009](https://github.com/stefan-jansen/zipline/issues/2009))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.3 ([2014](https://github.com/stefan-jansen/zipline/issues/2014))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.4 ([2098](https://github.com/stefan-jansen/zipline/issues/2098))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.4.2 ([2125](https://github.com/stefan-jansen/zipline/issues/2125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Include `MACDSignal` in zipline.io documentation ([1828](https://github.com/stefan-jansen/zipline/issues/1828))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove mentions of Yahoo from the Beginner Tutorial ([1845](https://github.com/stefan-jansen/zipline/issues/1845))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add contributing & questions section to the README ([1889](https://github.com/stefan-jansen/zipline/issues/1889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add info about using a conda envs for installs ([1922](https://github.com/stefan-jansen/zipline/issues/1922))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix Beginner Tutorial link ([1932](https://github.com/stefan-jansen/zipline/issues/1932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add clean docs ([1943](https://github.com/stefan-jansen/zipline/issues/1943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add distinct warnings for benchmark and treasury fetchers ([1971](https://github.com/stefan-jansen/zipline/issues/1971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add CONTRIBUTING.rst ([2033](https://github.com/stefan-jansen/zipline/issues/2033))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add tutorial on creating a custom `TradingCalendar` ([2035](https://github.com/stefan-jansen/zipline/issues/2035))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docs & tutorial updates for ingesting, beginners, and csvdir ([2073](https://github.com/stefan-jansen/zipline/issues/2073))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented the new risk and performance metrics API ([2081](https://github.com/stefan-jansen/zipline/issues/2081)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a typo in the description of `--bundle-timestamp` ([2123](https://github.com/stefan-jansen/zipline/issues/2123))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Release 1.1.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 5, 2017
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now has broad support for futures, in addition to equities. It’s also
    being tested and packaged for Python 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw breaking changes occur from Yahoo changing their API endpoint, thus
    preventing users from downloading benchmark data needed for backtests. Since that
    change, we have swapped out Yahoo-related benchmarking code with references to
    Google Finance and have removed all deprecated Yahoo code, including the usage
    of custom Yahoo bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a property for BarData to know about current session’s minutes ([1713](https://github.com/stefan-jansen/zipline/issues/1713))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a better error message for non-existent root symbols ([1715:](https://github.com/stefan-jansen/zipline/issues/1715:))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `StaticSids` Pipeline Filter ([1717](https://github.com/stefan-jansen/zipline/issues/1717))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows `zipline.data.data_portal.DataPortal.get_spot_value` to accept multiple
    assets ([1719](https://github.com/stefan-jansen/zipline/issues/1719))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `ContinuousFuture` to `lookup_generic` ([1718](https://github.com/stefan-jansen/zipline/issues/1718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds CFE Adhoc Holidays to `exchange_calendar_cfe` ([1698](https://github.com/stefan-jansen/zipline/issues/1698))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows overriding of order amount rounding ([1722](https://github.com/stefan-jansen/zipline/issues/1722))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes continuous future adjustment style an argument ([1726](https://github.com/stefan-jansen/zipline/issues/1726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds preliminary support for Futures slippage and commission models ([1738](https://github.com/stefan-jansen/zipline/issues/1738))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug in cost basis calculation and change all mentions of `sid` to `asset`
    ([1757](https://github.com/stefan-jansen/zipline/issues/1757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add slippage and commission models for futures ([1748](https://github.com/stefan-jansen/zipline/issues/1748))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Python 3.5 in our Dockerfile ([1806](https://github.com/stefan-jansen/zipline/issues/1806))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow pipelines to be run in chunks ([1811](https://github.com/stefan-jansen/zipline/issues/1811))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds get_range to BenchmarkSource ([1815](https://github.com/stefan-jansen/zipline/issues/1815))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for relabeling classifiers in Pipeline ([1833](https://github.com/stefan-jansen/zipline/issues/1833))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes a floating point division issue in `zipline.data.minute_bars` by using
    integer divison instead ([1683](https://github.com/stefan-jansen/zipline/issues/1683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorts data in `zipline.pipeline.loaders.blaze.core` on `asof_date` to resolve
    timestamp conflicts ([1710](https://github.com/stefan-jansen/zipline/issues/1710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swapped out Yahoo for Google Finance benchmark data ([1812](https://github.com/stefan-jansen/zipline/issues/1812))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gold and silver futures contracts only traded during certain months ([1779](https://github.com/stefan-jansen/zipline/issues/1779))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug in TradingCalendar initialization when we use tzaware datetimes ([1802](https://github.com/stefan-jansen/zipline/issues/1802))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes precision issues on futures prices when rounding ([1788](https://github.com/stefan-jansen/zipline/issues/1788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoid repeated recursive calls when getting forward-filled close price ([1735](https://github.com/stefan-jansen/zipline/issues/1735))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds linter recommendations to adjustments module ([1712](https://github.com/stefan-jansen/zipline/issues/1712))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clears up naming and logic in resample close ([1728](https://github.com/stefan-jansen/zipline/issues/1728))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use March quarterly cycle for several continuous futures ([1762](https://github.com/stefan-jansen/zipline/issues/1762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use better repr for Transaction objects ([1746](https://github.com/stefan-jansen/zipline/issues/1746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorten repr for Asset objects ([1786](https://github.com/stefan-jansen/zipline/issues/1786))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes usage of empyrical’s information ratio ([1854](https://github.com/stefan-jansen/zipline/issues/1854))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Python 3.5 packages ([1701](https://github.com/stefan-jansen/zipline/issues/1701))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap conda-build arguments so we don’t build packages on every CI build ([1813](https://github.com/stefan-jansen/zipline/issues/1813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Zipline Development Guidelines, for people to read about how to contribute
    to zipline ([1820](https://github.com/stefan-jansen/zipline/issues/1820))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show exchange as required for equities ([1731](https://github.com/stefan-jansen/zipline/issues/1731))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates the Zipline Beginner Tutorial notebook ([1707](https://github.com/stefan-jansen/zipline/issues/1707))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes PipelineEngine, pipeline Term, Factors, and other pipeline things to
    docs ([1826](https://github.com/stefan-jansen/zipline/issues/1826))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use csv market data with `run_algorithm` so we don’t try to download data for
    tests ([1793](https://github.com/stefan-jansen/zipline/issues/1793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates Dockerfile to use Python 3.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.1.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: March 10, 2017
  prefs: []
  type: TYPE_NORMAL
- en: This release is meant to provide zipline support for pandas 0.18, as well as
    several bug fixes, API changes, and many performance changes.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes the minute bar read catch NoDataOnDate exceptions if dates are not in
    the calendar. Before, the minute bar reader was forward filling, but now it returns
    nan for OHLC and 0 for V. ([1488](https://github.com/stefan-jansen/zipline/issues/1488))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `truncate` method to `BcolzMinuteBarWriter` ([1499](https://github.com/stefan-jansen/zipline/issues/1499))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps up to pandas 0.18.1 and numpy 1.11.1 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds an earnings estimates quarter loader for Pipeline ([1396](https://github.com/stefan-jansen/zipline/issues/1396))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a restricted list manager that takes in information about restricted
    sids and stores in memory upon instantiation ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `last_available{session, minute}` args to `DataPortal` ([1528](https://github.com/stefan-jansen/zipline/issues/1528))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `SpecificAssets` filter ([1530](https://github.com/stefan-jansen/zipline/issues/1530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the ability for an algorithm to request the current contract for a future
    chain ([1529](https://github.com/stefan-jansen/zipline/issues/1529))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `chain` field to current and supporting methods in `DataPortal` and `OrderedContracts`
    ([1538](https://github.com/stefan-jansen/zipline/issues/1538))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds history for continuous futures ([1539](https://github.com/stefan-jansen/zipline/issues/1539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds adjusted history for continuous future ([1548](https://github.com/stefan-jansen/zipline/issues/1548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds roll style which takes the volume of a future contract into account, specifically
    for continuous futures ([1556](https://github.com/stefan-jansen/zipline/issues/1556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds better error message when calling Zipline API functions outside of a running
    simulation ([1593](https://github.com/stefan-jansen/zipline/issues/1593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `MACDSignal()`, `MovingAverageConvergenceDivergenceSignal()`, and `AnnualizedVolatility()`
    as built-in factors. ([1588](https://github.com/stefan-jansen/zipline/issues/1588))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows running pipelines with custom date chunks in `attach_pipeline` ([1617](https://github.com/stefan-jansen/zipline/issues/1617))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `order_batch` to the trade blotter ([1596](https://github.com/stefan-jansen/zipline/issues/1596))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds vectorized lookup_symbol ([1627](https://github.com/stefan-jansen/zipline/issues/1627))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solidifies equality comparisons for SlippageModel classes ([1657](https://github.com/stefan-jansen/zipline/issues/1657))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a factor for winsorized results ([1696](https://github.com/stefan-jansen/zipline/issues/1696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes str to string_types to avoid errors when type checking unicode and not
    str type. ([1315](https://github.com/stefan-jansen/zipline/issues/1315))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Algorithms default to quantopian-quandl bundle when no data source is specified
    ([1479](https://github.com/stefan-jansen/zipline/issues/1479)) ([1374](https://github.com/stefan-jansen/zipline/issues/1374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catches all missing data exceptions when computing dividend ratios ([1507](https://github.com/stefan-jansen/zipline/issues/1507))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates adjustments based on ordered assets instead of a set. Before, adjustments
    were created for estimates based on where assets happened to fall in a set rather
    than using ordered assets ([1547](https://github.com/stefan-jansen/zipline/issues/1547))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes blaze pipeline queries for when users query for the `asof_date` column
    ([1608](https://github.com/stefan-jansen/zipline/issues/1608))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimes should be converted in utc. DataFrames being returned were creating
    US/Eastern timestamps out of the ints, potentially changing the date returned
    to be the date before ([1635](https://github.com/stefan-jansen/zipline/issues/1635))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes default inputs for `IchimokuKinkoHyo` factor ([1638](https://github.com/stefan-jansen/zipline/issues/1638))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removes invocations of `get_calendar('NYSE')` which cuts down zipline import
    time and makes the CLI more responsive and use less memory. ([1471](https://github.com/stefan-jansen/zipline/issues/1471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refcounts and releases pipeline terms when they are no longer needed ([1484](https://github.com/stefan-jansen/zipline/issues/1484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves up to 75% of calls to minute_to_session_label ([1492](https://github.com/stefan-jansen/zipline/issues/1492))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up counting of number of minutes across contiguous session ([1497](https://github.com/stefan-jansen/zipline/issues/1497))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes/defers calls to get_loc on large indices ([1504](https://github.com/stefan-jansen/zipline/issues/1504))
    ([1503](https://github.com/stefan-jansen/zipline/issues/1503))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaces `get_loc` calls in `calc_dividend_ratios` with `get_indexer` ([1510](https://github.com/stefan-jansen/zipline/issues/1510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up minute to session sampling ([1549](https://github.com/stefan-jansen/zipline/issues/1549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds some micro optimizations in `data.current` ([1561](https://github.com/stefan-jansen/zipline/issues/1561))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds optimization for initial workspace for pipelines ([1521](https://github.com/stefan-jansen/zipline/issues/1521))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More memory savings ([1599](https://github.com/stefan-jansen/zipline/issues/1599))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updates leveraged ETF list ([747](https://github.com/stefan-jansen/zipline/issues/747))
    ([1434](https://github.com/stefan-jansen/zipline/issues/1434))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds additional fields to `__getitem__` for Order class ([1483](https://github.com/stefan-jansen/zipline/issues/1483))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `BarReader` base class for minute and session readers ([1486](https://github.com/stefan-jansen/zipline/issues/1486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes `future_chain` API method, to be replaced by `data.current_chain` ([1502](https://github.com/stefan-jansen/zipline/issues/1502))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puts zipline back on blaze master ([1505](https://github.com/stefan-jansen/zipline/issues/1505))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Tini and sets version range for numpy, pandas, and scipy in Dockerfile
    ([1514](https://github.com/stefan-jansen/zipline/issues/1514))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecates `set_do_not_order_list` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses `Timedelta` instead of `DateOffset` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update and pin more dev requirements ([1642](https://github.com/stefan-jansen/zipline/issues/1642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds binary dependency on numpy for empyrical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes old numpy/pandas versions from Travis ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates appveyor.yml for new numpy and pandas ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downgrades to scipy 0.17 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps empyrical to 0.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated example notebook for latest zipline cell magic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds ANACONDA_TOKEN directions ([1589](https://github.com/stefan-jansen/zipline/issues/1589))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changed the short-opt for `--before` in the `zipline clean` entrypoint. The
    new argument is `-e`. The old argument, `-b`, conflicted with the `--bundle` short-opt
    ([1625](https://github.com/stefan-jansen/zipline/issues/1625)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.2
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: September 8, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds forward fill checkpoint tables for the blaze core loader. This allow the
    loader to more efficiently forward fill the data by capping the lower date it
    must search for when querying data. The checkpoints should have novel deltas applied
    ([1276](https://github.com/stefan-jansen/zipline/issues/1276)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated VagrantFile to include all dev requirements and use a newer image ([1310](https://github.com/stefan-jansen/zipline/issues/1310)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow correlations and regressions to be computed between two 2D factors by
    doing computations asset-wise ([1307](https://github.com/stefan-jansen/zipline/issues/1307)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters have been made window_safe by default. Now they can be passed in as
    arguments to other Filters, Factors and Classifiers ([1338](https://github.com/stefan-jansen/zipline/issues/1338)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an optional `groupby` parameter to `rank()`, `top()`, and `bottom()`.
    ([1349](https://github.com/stefan-jansen/zipline/issues/1349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filters, [`All`](api-reference.html#zipline.pipeline.filters.All
    "zipline.pipeline.filters.All") and [`Any`](api-reference.html#zipline.pipeline.filters.Any
    "zipline.pipeline.filters.Any"), which takes another filter and returns True if
    an asset produced a True for any/all days in the previous `window_length` days
    ([1358](https://github.com/stefan-jansen/zipline/issues/1358)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filter [`AtLeastN`](api-reference.html#zipline.pipeline.filters.AtLeastN
    "zipline.pipeline.filters.AtLeastN"), which takes another filter and an int N
    and returns True if an asset produced a True on N or more days in the previous
    `window_length` days ([1367](https://github.com/stefan-jansen/zipline/issues/1367)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use external library empyrical for risk calculations. Empyrical unifies risk
    metric calculations between pyfolio and zipline. Empyrical adds custom annualization
    options for returns of custom frequencies. ([855](https://github.com/stefan-jansen/zipline/issues/855))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Aroon factor. ([1258](https://github.com/stefan-jansen/zipline/issues/1258))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fast stochastic oscillator factor. ([1255](https://github.com/stefan-jansen/zipline/issues/1255))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a Dockerfile. ([1254](https://github.com/stefan-jansen/zipline/issues/1254))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New trading calendar which supports sessions which span across midnights, e.g.
    24 hour 6:01PM-6:00PM sessions for futures trading. zipline.utils.tradingcalendar
    is now deprecated. ([1138](https://github.com/stefan-jansen/zipline/issues/1138))
    ([1312](https://github.com/stefan-jansen/zipline/issues/1312))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow slicing a single column out of a Factor/Filter/Classifier. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide Ichimoku Cloud factor ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow default parameters on Pipeline terms. ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide rate of change percentage factor. ([1324](https://github.com/stefan-jansen/zipline/issues/1324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide linear weighted moving average factor. ([1325](https://github.com/stefan-jansen/zipline/issues/1325))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `NotNullFilter`. ([1345](https://github.com/stefan-jansen/zipline/issues/1345))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow capital changes to be defined by a target value. ([1337](https://github.com/stefan-jansen/zipline/issues/1337))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `TrueRange` factor. ([1348](https://github.com/stefan-jansen/zipline/issues/1348))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add point in time lookups to `assets.db`. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make `can_trade` aware of the asset’s exchange . ([1346](https://github.com/stefan-jansen/zipline/issues/1346))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `downsample` method to all computable terms. ([1394](https://github.com/stefan-jansen/zipline/issues/1394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add QuantopianUSFuturesCalendar. ([1414](https://github.com/stefan-jansen/zipline/issues/1414))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable publishing of old `assets.db` versions. ([1430](https://github.com/stefan-jansen/zipline/issues/1430))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable `schedule_function` for Futures trading calendar. ([1442](https://github.com/stefan-jansen/zipline/issues/1442))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallow regressions of length 1\. ([1466](https://github.com/stefan-jansen/zipline/issues/1466))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add support for comingled Future and Equity history windows, and enable other
    Future data access via data portal. ([1435](https://github.com/stefan-jansen/zipline/issues/1435))
    ([1432](https://github.com/stefan-jansen/zipline/issues/1432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume") built-in factor to treat missing
    close or volume values as 0\. Previously, NaNs were simply discarded before averaging,
    giving the remaining values too much weight ([1309](https://github.com/stefan-jansen/zipline/issues/1309)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove risk-free rate from sharpe ratio calculation. The ratio is now the average
    of risk adjusted returns over violatility of adjusted returns. ([853](https://github.com/stefan-jansen/zipline/issues/853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sortino ratio will return calculation instead of np.nan when required returns
    are equal to zero. The ratio now returns the average of risk adjusted returns
    over downside risk. Fixed mislabeled API by converting mar to downside_risk. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downside risk now returns the square root of the mean of downside difference
    squares. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information ratio updated to return mean of risk adjusted returns over standard
    deviation of risk adjusted returns. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alpha and sharpe ratio are now annualized. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix units during reading and writing of daily bar `first_trading_day` attribute.
    ([1245](https://github.com/stefan-jansen/zipline/issues/1245))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dispatch modules, when missing, no longer cause a NameError. ([1246](https://github.com/stefan-jansen/zipline/issues/1246))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat `schedule_function` argument as a time rule when a time rule, but no date
    rule is supplied. ([1221](https://github.com/stefan-jansen/zipline/issues/1221))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect against boundary conditions at beginning and end trading day in schedule
    function. ([1226](https://github.com/stefan-jansen/zipline/issues/1226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply adjustments to previous day when using history with a frequency of 1d.
    ([1256](https://github.com/stefan-jansen/zipline/issues/1256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail fast on invalid pipeline columns, instead of attempting to access the nonexistent
    column. ([1280](https://github.com/stefan-jansen/zipline/issues/1280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `AverageDollarVolume` NaN handling. ([1309](https://github.com/stefan-jansen/zipline/issues/1309))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance improvements to blaze core loader. ([1227](https://github.com/stefan-jansen/zipline/issues/1227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow concurrent blaze queries. ([1323](https://github.com/stefan-jansen/zipline/issues/1323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent missing leading bcolz minute data from doing repeated unnecessary lookups.
    ([1451](https://github.com/stefan-jansen/zipline/issues/1451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache future chain lookups. ([1455](https://github.com/stefan-jansen/zipline/issues/1455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed remaining mentions of `add_history`. ([1287](https://github.com/stefan-jansen/zipline/issues/1287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add test fixture which sources daily pricing data from minute pricing data fixtures.
    ([1243](https://github.com/stefan-jansen/zipline/issues/1243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Format Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`BcolzDailyBarReader` and `BcolzDailyBarWriter` use trading calendar instance,
    instead of trading days serialized to `JSON`. ([1330](https://github.com/stefan-jansen/zipline/issues/1330))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change format of `assets.db` to support point in time lookups. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `BcolzMinuteBarReader``and ``BcolzMinuteBarWriter` to support varying
    tick sizes. ([1428](https://github.com/stefan-jansen/zipline/issues/1428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: May 27, 2016
  prefs: []
  type: TYPE_NORMAL
- en: This is a minor bug-fix release from 1.0.0 and includes a small number of bug
    fixes and documentation improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for user-defined commission models. See the [`zipline.finance.commission.CommissionModel`](api-reference.html#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") class for more details on implementing
    a commision model. ([1213](https://github.com/stefan-jansen/zipline/issues/1213))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for non-float columns to Blaze-backed Pipeline datasets ([1201](https://github.com/stefan-jansen/zipline/issues/1201)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `zipline.pipeline.slice.Slice`, a new pipeline term designed to extract
    a single column from another term. Slices can be created by indexing into a term,
    keyed by asset. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where Pipeline loaders were not properly initialized by [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). This also affected invocations of `zipline run` from
    the CLI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug that caused the `%%zipline` IPython cell magic to fail ([533233fae43c7ff74abfb0044f046978817cb4e4](https://github.com/stefan-jansen/zipline/commit/533233fae43c7ff74abfb0044f046978817cb4e4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in the [`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade") commission model where commissions were
    incorrectly applied to each partial-fill of an order rather than on the order
    itself, resulting in algorithms being charged too much in commissions when placing
    large orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade "zipline.finance.commission.PerTrade")
    now correctly applies commissions on a per-order basis ([1213](https://github.com/stefan-jansen/zipline/issues/1213)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attribute accesses on [`CustomFactors`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor") defining multiple outputs will now correctly
    return an output slice when the output is also the name of a `Factor` method ([1214](https://github.com/stefan-jansen/zipline/issues/1214)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaced deprecated usage of `pandas.io.data` with `pandas_datareader` ([1218](https://github.com/stefan-jansen/zipline/issues/1218)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where `.pyi` stub files for `zipline.api` were accidentally excluded
    from the PyPI source distribution. Conda users should be unaffected ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new example, `zipline.examples.momentum_pipeline`, which exercises the
    Pipeline API ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: May 19, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline 1.0 Rewrite ([1105](https://github.com/stefan-jansen/zipline/issues/1105))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have rewritten a lot of Zipline and its basic concepts in order to improve
    runtime performance. At the same time, we’ve introduced several new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, earlier versions of Zipline simulations pulled from a multiplexed
    stream of data sources, which were merged via heapq. This stream was fed to the
    main simulation loop, driving the clock forward. This strong dependency on reading
    all the data made it difficult to optimize simulation performance because there
    was no connection between the amount of data we fetched and the amount of data
    actually used by the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we only fetch data when the algorithm needs it. A new class, [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), dispatches data requests to various data
    sources and returns the requested values. This makes the runtime of a simulation
    scale much more closely with the complexity of the algorithm, rather than with
    the number of assets provided by the data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the data stream driving the clock, now simulations iterate through
    a pre-calculated set of day or minute timestamps. The timestamps are emitted by
    `MinuteSimulationClock` and `DailySimulationClock`, and consumed by the main loop
    in `transform()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve retired the `data[sid(N)]` and `history` APIs, replacing them with several
    methods on the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object: [`current()`](api-reference.html#zipline.protocol.BarData.current "zipline.protocol.BarData.current"),
    [`history()`](api-reference.html#zipline.protocol.BarData.history "zipline.protocol.BarData.history"),
    [`can_trade()`](api-reference.html#zipline.protocol.BarData.can_trade "zipline.protocol.BarData.can_trade"),
    and [`is_stale()`](api-reference.html#zipline.protocol.BarData.is_stale "zipline.protocol.BarData.is_stale").
    Old APIs will continue to work for now, but will issue deprecation warnings.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now pass in an adjustments source to the [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), and we will apply adjustments to the pricing
    data when looking backwards at data. Prices and volumes for execution and presented
    to the algorithm in data.current are the as-traded value of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: New Entry Points ([1173](https://github.com/stefan-jansen/zipline/issues/1173)
    and [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to make it easier to use zipline we have updated the entry points
    for a backtest. The three supported ways to run a backtest are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.run_algo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ zipline run`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%zipline` (IPython magic)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data Bundles ([1173](https://github.com/stefan-jansen/zipline/issues/1173) and
    [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1.0.0 introduces data bundles. Data bundles are groups of data that should be
    preloaded and used to run backtests later. This allows users to not need to specify
    which tickers they are interested in each time they run an algorithm. This also
    allows us to cache the data between runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `quantopian-quandl` bundle will be used which pulls data from
    Quantopian’s mirror of the quandl [WIKI dataset](https://www.quandl.com/data/WIKI).
    New bundles may be registered with [`zipline.data.bundles.register()`](api-reference.html#zipline.data.bundles.register
    "zipline.data.bundles.register") like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This function should retrieve the data it needs and then use the writers that
    have been passed to write that data to disc in a location that zipline can find
    later.
  prefs: []
  type: TYPE_NORMAL
- en: This data can be used in backtests by passing the name as the `-b / --bundle`
    argument to `$ zipline run` or as the `bundle` argument to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: For more information see [Data](bundles.html#data-bundles) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: String Support in Pipeline ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added support for string data in Pipeline. [`zipline.pipeline.data.Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") now accepts `object` as a dtype, which signifies
    that loaders for that column should emit windowed iterators over the experimental
    new `LabelArray` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several new `Classifier` methods have also been added for constructing [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") instances based on string operations. The new methods
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element_of()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`startswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`endswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`has_substring()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`matches()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for string-dtype classifiers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made the data loading classes have more consistent interfaces. This includes
    the equity bar writers, adjustment writer, and asset db writer. The new interface
    is that the resource to be written to is passed at construction time and the data
    to write is provided later to the write method as dataframes or some iterator
    of dataframes. This model allows us to pass these writer objects around as a resource
    for other classes and functions to consume ([1109](https://github.com/stefan-jansen/zipline/issues/1109)
    and [1149](https://github.com/stefan-jansen/zipline/issues/1149)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added masking to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors can now be passed a Filter upon
    instantiation. This tells the factor to only compute over stocks for which the
    filter returns True, rather than always computing over the entire universe of
    stocks. ([1095](https://github.com/stefan-jansen/zipline/issues/1095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.utils.cache.ExpiringCache`](api-reference.html#zipline.utils.cache.ExpiringCache
    "zipline.utils.cache.ExpiringCache"). A cache which wraps entries in a [`zipline.utils.cache.CachedObject`](api-reference.html#zipline.utils.cache.CachedObject
    "zipline.utils.cache.CachedObject"), which manages expiration of entries based
    on the dt supplied to the get method. ([1130](https://github.com/stefan-jansen/zipline/issues/1130))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.factors.RecarrayField`, a new pipeline term designed
    to be the output type of a CustomFactor with multiple outputs. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added optional outputs parameter to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors are now capable of computing
    and returning multiple outputs, each of which are themselves a Factor. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for string-dtype pipeline columns. Loaders for thse columns should
    produce instances of `zipline.lib.labelarray.LabelArray` when traversed. [`latest()`](api-reference.html#zipline.pipeline.data.BoundColumn.latest
    "zipline.pipeline.data.BoundColumn.latest") on string columns produces a string-dtype
    `zipline.pipeline.Classifier`. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added several methods for converting Classifiers into Filters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new methods are: - `element_of()` - `startswith()` - `endswith()` - `has_substring()`
    - `matches()`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for strings. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Added [`BollingerBands`](api-reference.html#zipline.pipeline.factors.BollingerBands
    "zipline.pipeline.factors.BollingerBands") factor. This factor implements the
    Bollinger Bands technical indicator: [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
    ([1199](https://github.com/stefan-jansen/zipline/issues/1199)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetcher has been moved from Quantopian internal code into Zipline ([1105](https://github.com/stefan-jansen/zipline/issues/1105)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`RollingSpearmanOfReturns`](api-reference.html#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns") and [`RollingLinearRegressionOfReturns`](api-reference.html#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns") ([1154](https://github.com/stefan-jansen/zipline/issues/1154))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added a new `zipline.lib.labelarray.LabelArray` class for efficiently representing
    and computing on string data with numpy. This class is conceptually similar to
    [`pandas.Categorical`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Categorical.html#pandas.Categorical
    "(in pandas v2.0.3)"), in that it represents string arrays as arrays of indices
    into a (smaller) array of unique string values. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated documentation for the API methods ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated release process to mention that docs should be built with python 3 ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now provides a [stub file](https://www.python.org/dev/peps/pep-0484/#stub-files)
    for the `zipline.api` module. This module is normally dynamically created so the
    stub file provides some static information for utilities that can consume it,
    for example PyCharm ([1208](https://github.com/stefan-jansen/zipline/issues/1208)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.9.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.9.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: March 29, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added classifiers and normalization methods to pipeline, along with new datasets
    and factors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Windows with continuous integration on AppVeyor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added new datasets `CashBuybackAuthorizations` and `ShareBuybackAuthorizations`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding cash and share buyback authorizations data, respectively, to a new algorithm.
    pandas-based reference implementations for these datasets can be found in `zipline.pipeline.loaders.buyback_auth`,
    and experimental blaze-based implementations can be found in `zipline.pipeline.loaders.blaze.buyback_auth`.
    ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new datasets `DividendsByExDate`, `DividendsByPayDate`, and `DividendsByAnnouncementDate`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding dividends data organized by ex date, pay date, and announcement date, respectively,
    to a new algorithm. pandas-based reference implementations for these datasets
    can be found in `zipline.pipeline.loaders.dividends`, and experimental blaze-based
    implementations can be found in `zipline.pipeline.loaders.blaze.dividends`. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceCashBuybackAuth`
    and `zipline.pipeline.factors.BusinessDaysSinceShareBuybackAuth`. These factors
    use the new `CashBuybackAuthorizations` and `ShareBuybackAuthorizations` datasets,
    respectively. ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceDividendAnnouncement`,
    `zipline.pipeline.factors.BusinessDaysUntilNextExDate`, and `zipline.pipeline.factors.BusinessDaysSincePreviousExDate`.
    These factors use the new `DividendsByAnnouncementDate` and ``DividendsByExDate`
    datasets, respectively. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.Classifier`, a new core pipeline API term representing
    grouping keys. Classifiers are primarily used by passing them as the `groupby`
    parameter to factor normalization methods. ([1046](https://github.com/stefan-jansen/zipline/issues/1046))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added factor normalization methods: [`zipline.pipeline.Factor.demean()`](api-reference.html#zipline.pipeline.Factor.demean
    "zipline.pipeline.Factor.demean") and [`zipline.pipeline.Factor.zscore()`](api-reference.html#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore"). ([1046](https://github.com/stefan-jansen/zipline/issues/1046))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.Factor.quantiles()`](api-reference.html#zipline.pipeline.Factor.quantiles
    "zipline.pipeline.Factor.quantiles"), a method for computing a Classifier from
    a Factor by partitioning into equally-sized buckets. Also added helpers for common
    quantile sizes ([`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), [`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), and [`zipline.pipeline.Factor.deciles()`](api-reference.html#zipline.pipeline.Factor.deciles
    "zipline.pipeline.Factor.deciles")) ([1075](https://github.com/stefan-jansen/zipline/issues/1075)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where merging two numerical expressions failed given too many inputs.
    This caused running a pipeline to fail when combining more than ten factors or
    filters. ([1072](https://github.com/stefan-jansen/zipline/issues/1072))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added AppVeyor for continuous integration on Windows. Added conda build of zipline
    and its dependencies to AppVeyor and Travis builds, which upload their results
    to anaconda.org labeled with “ci”. ([981](https://github.com/stefan-jansen/zipline/issues/981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adds `ZiplineTestCase` which provides hooks to consume test fixtures. Fixtures
    are things like: `WithAssetFinder` which will make `self.asset_finder` available
    to your test with some mock data ([1042](https://github.com/stefan-jansen/zipline/issues/1042)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.8.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: February 24, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AssetFinder`](api-reference.html#zipline.assets.AssetFinder "zipline.assets.assets.AssetFinder")
    speedups ([830](https://github.com/stefan-jansen/zipline/issues/830) and [817](https://github.com/stefan-jansen/zipline/issues/817)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for non-float dtypes in Pipeline. Most notably, we now support
    `datetime64` and `int64` dtypes for `Factor`, and `BoundColumn.latest` now returns
    a proper `Filter` object when the column is of dtype `bool`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipline now supports `numpy` 1.10, `pandas` 0.17, and `scipy` 0.16 ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch transforms have been deprecated and will be removed in a future release.
    Using `history` is recommended as an alternative.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a way for users to provide a context manager to use when executing the
    scheduled functions (including `handle_data`). This context manager will be passed
    the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object for the bar and will be used for the duration of all of the functions scheduled
    to run. This can be passed to `TradingAlgorithm` by the keyword argument `create_event_context`
    ([828](https://github.com/stefan-jansen/zipline/issues/828)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `zipline.pipeline.factors.Factor` instances with `datetime64[ns]`
    dtypes. ([905](https://github.com/stefan-jansen/zipline/issues/905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. This dataset
    provides an abstract interface for adding earnings announcement data to a new
    algorithm. A pandas-based reference implementation for this dataset can be found
    in `zipline.pipeline.loaders.earnings`, and an experimental blaze-based implementation
    can be found in `zipline.pipeline.loaders.blaze.earnings`. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysUntilNextEarnings`
    and `zipline.pipeline.factors.BusinessDaysSincePreviousEarnings`. These factors
    use the new `EarningsCalendar` dataset. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `isnan()`, `notnan()` and `isfinite()` methods to `zipline.pipeline.factors.Factor`
    ([861](https://github.com/stefan-jansen/zipline/issues/861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.factors.Returns`](api-reference.html#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns"), a built-in factor which calculates the percent
    change in close price over the given window_length. ([884](https://github.com/stefan-jansen/zipline/issues/884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added a new built-in factor: [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume"). ([927](https://github.com/stefan-jansen/zipline/issues/927)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`ExponentialWeightedMovingAverage`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingAverage
    "zipline.pipeline.factors.ExponentialWeightedMovingAverage") and [`ExponentialWeightedMovingStdDev`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingStdDev
    "zipline.pipeline.factors.ExponentialWeightedMovingStdDev") factors. ([910](https://github.com/stefan-jansen/zipline/issues/910)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    classes to be subclassed where subclasses inherit all of the columns from the
    parent. These columns will be new sentinels so you can register them a custom
    loader ([924](https://github.com/stefan-jansen/zipline/issues/924)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `coerce()` to coerce inputs from one type into another before passing
    them to the function ([948](https://github.com/stefan-jansen/zipline/issues/948)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `optionally()` to wrap other preprocessor functions to explicitly allow
    `None` ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `ensure_timezone()` to allow string arguments to get converted into [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo
    "(in Python v3.11)") objects. This also allows `tzinfo` objects to be passed directly
    ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added two optional arguments, `data_query_time` and `data_query_tz` to `BlazeLoader`
    and `BlazeEarningsCalendarLoader`. These arguments allow the user to specify some
    cutoff time for data when loading from the resource. For example, if I want to
    simulate executing my `before_trading_start` function at `8:45 US/Eastern` then
    I could pass `datetime.time(8, 45)` and `'US/Eastern'` to the loader. This means
    that data that is timestamped on or after `8:45` will not seen on that day in
    the simulation. The data will be made available on the next day ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoundColumn.latest` now returns a `Filter` for columns of dtype `bool` ([962](https://github.com/stefan-jansen/zipline/issues/962)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `Factor` instances with `int64` dtype. [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.dataset.Column") now requires a `missing_value` when dtype
    is integral. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also now possible to specify custom `missing_value` values for `float`,
    `datetime`, and `bool` Pipeline terms. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added auto-close support for equities. Any positions held in an equity that
    reaches its `auto_close_date` will be liquidated for cash according to the equity’s
    last sale price. Furthermore, any open orders for that equity will be canceled.
    Both futures and equities are now auto-closed on the morning of their `auto_close_date`,
    immediately prior to `before_trading_start`. ([982](https://github.com/stefan-jansen/zipline/issues/982))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for parameterized `Factor` subclasses. Factors may specify `params`
    as a class-level attribute containing a tuple of parameter names. These values
    are then accepted by the constructor and forwarded by name to the factor’s `compute`
    function. This API is experimental, and may change in future releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes an issue that would cause the daily/minutely method caching to change
    the `len` of a `SIDData` object. This would cause us to think that the object
    was not empty even when it was ([826](https://github.com/stefan-jansen/zipline/issues/826)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes an error raised in calculating beta when benchmark data were sparse. Instead
    [`numpy.nan`](https://numpy.org/doc/stable/reference/constants.html#numpy.nan
    "(in NumPy v1.25)") is returned ([859](https://github.com/stefan-jansen/zipline/issues/859)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue pickling `sentinel()` objects ([872](https://github.com/stefan-jansen/zipline/issues/872)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed spurious warnings on first download of treasury data (:issue 922).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the error messages for [`set_commission()`](api-reference.html#zipline.api.set_commission
    "zipline.api.set_commission") and [`set_slippage()`](api-reference.html#zipline.api.set_slippage
    "zipline.api.set_slippage") when used outside of the `initialize` function. These
    errors called the functions `override_*` instead of `set_*`. This also renamed
    the exception types raised from `OverrideSlippagePostInit` and `OverrideCommissionPostInit`
    to `SetSlippagePostInit` and `SetCommissionPostInit` ([923](https://github.com/stefan-jansen/zipline/issues/923)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue in the CLI that would cause assets to be added twice. This would
    map the same symbol to two different sids ([942](https://github.com/stefan-jansen/zipline/issues/942)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where the `PerformancePeriod` incorrectly reported the total_positions_value
    when creating a [`Account`](api-reference.html#zipline.protocol.Account "zipline.protocol.Account")
    ([950](https://github.com/stefan-jansen/zipline/issues/950)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed issues around KeyErrors coming from history and BarData on 32-bit python,
    where Assets did not compare properly with int64s ([959](https://github.com/stefan-jansen/zipline/issues/959)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where boolean operators were not properly implemented on [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") ([991](https://github.com/stefan-jansen/zipline/issues/991)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of zipline no longer downgrades numpy to 1.9.2 silently and unconditionally
    ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Speeds up `lookup_symbol()` by adding an extension, `AssetFinderCachedEquities`,
    that loads equities into dictionaries and then directs `lookup_symbol()` to these
    dictionaries to find matching equities ([830](https://github.com/stefan-jansen/zipline/issues/830)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `lookup_symbol()` by performing batched queries. ([817](https://github.com/stefan-jansen/zipline/issues/817)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Asset databases now contain version information to ensure compatibility with
    current Zipline version ([815](https://github.com/stefan-jansen/zipline/issues/815)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `requests` version to 2.9.1 ([2ee40db](https://github.com/stefan-jansen/zipline/commit/2ee40db))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `logbook` version to 0.12.5 ([11465d9](https://github.com/stefan-jansen/zipline/commit/11465d9)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `Cython` version to 0.23.4 ([5f49fa2](https://github.com/stefan-jansen/zipline/commit/5f49fa2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes zipline install requirements more flexible ([825](https://github.com/stefan-jansen/zipline/issues/825)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `versioneer` to manage the project `__version__` and setup.py version ([829](https://github.com/stefan-jansen/zipline/issues/829)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed coveralls integration on travis build ([840](https://github.com/stefan-jansen/zipline/issues/840)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed conda build, which now uses git source as its source and reads requirements
    using setup.py, instead of copying them and letting them get out of sync ([937](https://github.com/stefan-jansen/zipline/issues/937)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Require `setuptools` > 18.0 ([951](https://github.com/stefan-jansen/zipline/issues/951)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Document the release process for developers ([835](https://github.com/stefan-jansen/zipline/issues/835)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for the Pipeline API. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for Asset Metadata APIs. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated documentation now includes links to source code for many classes and
    functions. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added platform-specific documentation describing how to find binary dependencies.
    ([883](https://github.com/stefan-jansen/zipline/issues/883)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a `show_graph()` method to render a Pipeline as an image ([836](https://github.com/stefan-jansen/zipline/issues/836)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `subtest()` decorator for creating subtests without `nose_parameterized.expand()`
    which bloats the test output ([833](https://github.com/stefan-jansen/zipline/issues/833)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits timer report in test output to 15 longest tests ([838](https://github.com/stefan-jansen/zipline/issues/838)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treasury and benchmark downloads will now wait up to an hour to download again
    if data returned from a remote source does not extend to the date expected. ([841](https://github.com/stefan-jansen/zipline/issues/841)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a tool to downgrade the assets db to previous versions ([941](https://github.com/stefan-jansen/zipline/issues/941)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.8.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.3
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: November 6, 2015
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We advanced the version to `0.8.3` to fix a source distribution issue with pypi.
    There are no code changes in this version.
  prefs: []
  type: TYPE_NORMAL
- en: Release 0.8.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: November 6, 2015
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New documentation system with a new website at [zipline.io](https://www.zipline.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major performance enhancements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New user defined method: `before_trading_start`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_max_leverage()`](api-reference.html#zipline.api.set_max_leverage
    "zipline.api.set_max_leverage").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_do_not_order_list()`](api-reference.html#zipline.api.set_do_not_order_list
    "zipline.api.set_do_not_order_list").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for trading futures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Account object: Adds an account object to context to track information about
    the trading account. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns the settled cash value that is stored on the account object. This value
    is updated accordingly as the algorithm is run ([396](https://github.com/stefan-jansen/zipline/issues/396)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`HistoryContainer` can now grow dynamically. Calls to `history()` will now
    be able to increase the size or change the shape of the history container to be
    able to service the call. `add_history()` now acts as a preformance hint to pre-allocate
    sufficient space in the container. This change is backwards compatible with `history`,
    all existing algorithms should continue to work as intended ([412](https://github.com/stefan-jansen/zipline/issues/412)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simple transforms ported from quantopian and use history. `SIDData` now has
    methods for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stddev`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mavg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vwap`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`returns`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These methods, except for `returns`, accept a number of days. If you are running
    with minute data, then this will calculate the number of minutes in those days,
    accounting for early closes and the current time and apply the transform over
    the set of minutes. `returns` takes no parameters and will return the daily returns
    of the given asset. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([429](https://github.com/stefan-jansen/zipline/issues/429)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New fields in Performance Period. Performance Period has new fields accessible
    in return value of `to_dict`: - gross leverage - net leverage - short exposure
    - long exposure - shorts count - longs count ([464](https://github.com/stefan-jansen/zipline/issues/464)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`order_percent()`](api-reference.html#zipline.api.order_percent "zipline.api.order_percent")
    to work with various market values (by Jeremiah Lowin).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Currently, [`order_percent()`](api-reference.html#zipline.api.order_percent
    "zipline.api.order_percent") and [`order_target_percent()`](api-reference.html#zipline.api.order_target_percent
    "zipline.api.order_target_percent") both operate as a percentage of `self.portfolio.portfolio_value`.
    This PR lets them operate as percentages of other important MVs. Also adds `context.get_market_value()`,
    which enables this functionality. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([477](https://github.com/stefan-jansen/zipline/issues/477)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Command line option to for printing algo to stdout (by Andrea D’Amore) ([545](https://github.com/stefan-jansen/zipline/issues/545)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New user defined function `before_trading_start`. This function can be overridden
    by the user to be called once before the market opens every day ([389](https://github.com/stefan-jansen/zipline/issues/389)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function"). This function allows the user to schedule a
    function to be called based on more complicated rules about the date and time.
    For example, call the function 15 minutes before market close respecting early
    closes ([411](https://github.com/stefan-jansen/zipline/issues/411)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function `set_do_not_order_list()`. This function accepts a list of
    assets and adds a trading guard that prevents the algorithm from trading them.
    Adds a list point in time list of leveraged ETFs that people may want to mark
    as ‘do not trade’ ([478](https://github.com/stefan-jansen/zipline/issues/478)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a class for representing securities. [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") and other order functions now require an instance of `Security`
    instead of an int or string ([520](https://github.com/stefan-jansen/zipline/issues/520)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalize the `Security` class to [`Asset`](api-reference.html#zipline.assets.Asset
    "zipline.assets.Asset"). This is in preperation of adding support for other asset
    types ([535](https://github.com/stefan-jansen/zipline/issues/535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment"). This function by default returns the string `'zipline'`.
    This is used so that algorithms can have different behavior on Quantopian and
    local zipline ([384](https://github.com/stefan-jansen/zipline/issues/384)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extends [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment") to expose more of the environment to the algorithm.
    The function now accepts an argument that is the field to return. By default,
    this is `''platform''` which returns the old value of `''zipline''` but the following
    new fields can be requested:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''''arena''`: Is this live trading or backtesting?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''data_frequency''`: Is this minute mode or daily mode?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''start''`: Simulation start date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''end''`: Simulation end date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''capital_base''`: The starting capital for the simulation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''platform''`: The platform that the algorithm is running on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''*''`: A dictionary containing all of these fields.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ([449](https://github.com/stefan-jansen/zipline/issues/449)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New api function `set_max_leveraged()`. This method adds a trading guard that
    prevents your algorithm from over leveraging itself ([552](https://github.com/stefan-jansen/zipline/issues/552)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Adds new Pipeline API. The pipeline API is a high-level declarative API for
    representing trailing window computations on large datasets ([630](https://github.com/stefan-jansen/zipline/issues/630)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for futures trading ([637](https://github.com/stefan-jansen/zipline/issues/637)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Pipeline loader for blaze expressions. This allows users to pull data from
    any format blaze understands and use it in the Pipeline API. ([775](https://github.com/stefan-jansen/zipline/issues/775)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix a bug where the reported returns could sharply dip for random periods of
    time ([378](https://github.com/stefan-jansen/zipline/issues/378)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that prevented debuggers from resolving the algorithm file ([431](https://github.com/stefan-jansen/zipline/issues/431)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properly forward arguments to user defined `initialize` function ([687](https://github.com/stefan-jansen/zipline/issues/687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause treasury data to be redownloaded every backtest between
    midnight EST and the time when the treasury data was available ([793](https://github.com/stefan-jansen/zipline/issues/793)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause the user defined `analyze` function to not be called
    if it was passed as a keyword argument to `TradingAlgorithm` ([819](https://github.com/stefan-jansen/zipline/issues/819)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major performance enhancements to history (by Dale Jung) ([488](https://github.com/stefan-jansen/zipline/issues/488)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove simple transform code. These are available as methods of `SIDData` ([550](https://github.com/stefan-jansen/zipline/issues/550)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Switched to sphinx for the documentation ([816](https://github.com/stefan-jansen/zipline/issues/816)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.7.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.7.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 25, 2014
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Command line interface to run algorithms directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPython Magic `%%zipline` that runs algorithm defined in an IPython notebook
    cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API methods for building safeguards against runaway ordering and undesired short
    positions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New history() function to get a moving DataFrame of past market data (replaces
    BatchTransform).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new [beginner tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CLI: Adds a CLI and IPython magic for zipline. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Grabs the data from yahoo finance, runs the file dual_moving_avg.py (and looks
    for `dual_moving_avg_analyze.py` which, if found, will be executed after the algorithm
    has been run), and outputs the perf `DataFrame` to `dma.pickle` ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IPython magic command (at the top of an IPython notebook cell). Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Does the same as above except instead of executing the file looks for the algorithm
    in the cell and instead of outputting the perf df to a file, creates a variable
    in the namespace called perf ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds Trading Controls to the algorithm API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following functions are now available on `TradingAlgorithm` and for algo
    scripts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set_max_order_size(self, sid=None, max_shares=None, max_notional=None)` Set
    a limit on the absolute magnitude, in shares and/or total dollar value, of any
    single order placed by this algorithm for a given sid. If `sid` is None, then
    the rule is applied to any order placed by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_max_position_size(self, sid=None, max_shares=None, max_notional=None)`
    -Set a limit on the absolute magnitude, in either shares or dollar value, of any
    position held by the algorithm for a given sid. If `sid` is None, then the rule
    is applied to any position held by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_long_only(self)` Set a rule specifying that the algorithm may not hold
    short positions. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([329](https://github.com/stefan-jansen/zipline/issues/329)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds an `all_api_methods` classmethod on `TradingAlgorithm` that returns a list
    of all `TradingAlgorithm` API methods ([333](https://github.com/stefan-jansen/zipline/issues/333)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expanded record() functionality for dynamic naming. The record() function can
    now take positional args before the kwargs. All original usage and functionality
    is the same, but now these extra usages will work:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The requirements are simply that the poritional args occur only before the kwargs
    ([355](https://github.com/stefan-jansen/zipline/issues/355)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: history() has been ported from Quantopian to Zipline and provides moving window
    of market data. history() replaces BatchTransform. It is faster, works for minute
    level data and has a superior interface. To use it, call `add_history()` inside
    of `initialize()` and then receive a pandas `DataFrame` by calling history() from
    inside `handle_data()`. Check out the [tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb)
    and an [example](https://github.com/quantopian/zipline/blob/master/zipline/examples/dual_moving_average.py).
    ([345](https://github.com/stefan-jansen/zipline/issues/345) and [357](https://github.com/stefan-jansen/zipline/issues/357)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: history() now supports `1m` window lengths ([345](https://github.com/stefan-jansen/zipline/issues/345)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix alignment of trading days and open and closes in trading environment ([331](https://github.com/stefan-jansen/zipline/issues/331)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RollingPanel fix when adding/dropping new fields ([349](https://github.com/stefan-jansen/zipline/issues/349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed undocumented and untested HDF5 and CSV data sources ([267](https://github.com/stefan-jansen/zipline/issues/267)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor sim_params ([352](https://github.com/stefan-jansen/zipline/issues/352)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring of history ([340](https://github.com/stefan-jansen/zipline/issues/340)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following dependencies have been updated (zipline might work with other
    versions too):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Release 0.6.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.6.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 23, 2014
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major fixes to risk calculations, see Bug Fixes section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port of `history()` function, see Enhancements section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start of support for Quantopian algorithm script-syntax, see ENH section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conda package manager support, see Build section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always process new orders i.e. on bars where `handle_data` isn’t called, but
    there is ‘clock’ data e.g. a consistent benchmark, process orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty positions are now filtered from the portfolio container. To help prevent
    algorithms from operating on positions that are not in the existing universe of
    stocks. Formerly, iterating over positions would return positions for stocks which
    had zero shares held. (Where an explicit check in algorithm code for `pos.amount
    != 0` could prevent from using a non-existent position.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add trading calendar for BMF&Bovespa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add beginning of algo script support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starts on the path of parity with the script syntax in Quantopian’s IDE on
    [https://quantopian.com](https://quantopian.com) Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add HDF5 and CSV sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit `handle_data` to times with market data. To prevent cases where custom
    data types had unaligned timestamps, only call `handle_data` when market data
    passes through. Custom data that comes before market data will still update the
    data bar. But the handling of that data will only be done when there is actionable
    market data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended commission PerShare method to allow a minimum cost per trade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add symbol api function A `symbol()` lookup feature was added to Quantopian.
    By adding the same API function to zipline we can make copy&pasting of a Zipline
    algo to Quantopian easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add simulated random trade source. Added a new data source that emits events
    with certain user-specified frequency (minute or daily). This allows users to
    backtest and debug an algorithm in minute mode to provide a cleaner path towards
    Quantopian.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remove dependency on benchmark for trading day calendar. Instead of the benchmarks’
    index, the trading calendar is now used to populate the environment’s trading
    days. Remove `extra_date` field, since unlike the benchmarks list, the trading
    calendar can generate future dates, so dates for current day trading do not need
    to be appended. Motivations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source for the open and close/early close calendar and the trading day calendar
    is now the same, which should help prevent potential issues due to misalignment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows configurations where the benchmark is provided as a generator based data
    source to need to supply a second benchmark list just to populate dates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Port `history()` API method from Quantopian. Opens the core of the `history()`
    function that was previously only available on the Quantopian platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The history method is analoguous to the `batch_transform` function/decorator,
    but with a hopefully more precise specification of the frequency and period of
    the previous bar data that is captured. Example usage:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: N.B. this version of history lacks the backfilling capability that allows the
    return a full DataFrame on the first bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adjust benchmark events to match market hours ([241](https://github.com/stefan-jansen/zipline/issues/241)).
    Previously benchmark events were emitted at 0:00 on the day the benchmark related
    to: in ‘minute’ emission mode this meant that the benchmarks were emitted before
    any intra-day trades were processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure perf stats are generated for all days When running with minutely emissions
    the simulator would report to the user that it simulated ‘n - 1’ days (where n
    is the number of days specified in the simulation params). Now the correct number
    of trading days are reported as being simulated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix repr for cumulative risk metrics. The `__repr__` for RiskMetricsCumulative
    was referring to an older structure of the class, causing an exception when printed.
    Also, now prints the last values in the metrics DataFrame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent minute emission from crashing at end of available data. The next day
    calculation was causing an error when a minute emission algorithm reached the
    end of available data. Instead of a generic exception when available data is reached,
    raise and catch a named exception so that the tradesimulation loop can skip over,
    since the next market close is not needed at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix pandas indexing in trading calendar. This could alternatively be filed under
    Performance. Index using loc instead of the inefficient index-ing of day, then
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent crash in vwap transform due to non-existent member. The WrongDataForTransform
    was referencing a `self.fields` member, which did not exist. Add a self.fields
    member set to `price` and `volume` and use it to iterate over during the check.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix max drawdown calculation. The input into max drawdown was incorrect, causing
    the bad results. i.e. the `compounded_log_returns` were not values representative
    of the algorithms total return at a given time, though `calculate_max_drawdown`
    was treating the values as if they were. Instead, the `algorithm_period_returns`
    series is now used, which does provide the total return.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix cost basis calculation. Cost basis calculation now takes direction of txn
    into account. Closing a long position or covering a short shouldn’t affect the
    cost basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix floating point error in `order()`. Where order amounts that were near an
    integer could accidentally be floored or ceilinged (depending on being postive
    or negative) to the wrong integer. e.g. an amount stored internally as -27.99999
    was converted to -27 instead of -28.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update perf period state when positions are changed by splits. Otherwise, `self._position_amounts`
    will be out of sync with position.amount, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix misalignment of downside series calc when using exact dates. An oddity that
    was exposed while working on making the return series passed to the risk module
    more exact, the series comparison between the returns and mean returns was unbalanced,
    because the mean returns were not masked down to the downside data points; however,
    in most, if not all cases this was papered over by the call to `.valid()` which
    was removed in this change set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that self.logger exists before using it. `self.logger` is initialized
    as `None` and there is no guarantee that users have set it, so check that it exists
    before trying to pass messages to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent out of sync market closes in performance tracker. In situations where
    the performance tracker has been reset or patched to handle state juggling with
    warming up live data, the `market_close` member of the performance tracker could
    end up out of sync with the current algo time as determined by the performance
    tracker. The symptom was dividends never triggering, because the end of day checks
    would not match the current time. Fix by having the tradesimulation loop be responsible,
    in minute/minute mode, for advancing the market close and passing that value to
    the performance tracker, instead of having the market close advanced by the performance
    tracker as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix numerous cumulative and period risk calculations. The calculations that
    are expected to change are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.beta`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.alpha`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.information`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.sharpe`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`period.sortino`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How Risk Calculations Are Changing Risk Fixes for Both Period and Cumulative
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Downside Risk
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population for standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a rounding factor, so that if the two values are close for a given dt, that
    they do not count as a downside value, which would throw off the denominator of
    the standard deviation of the downside diffs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Standard Deviation Type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Across the board the standard deviation has been standardized to using a ‘sample’
    calculation, whereas before cumulative risk was mostly using ‘population’. Using
    `ddof=1` with `np.std` calculates as if the values are a sample.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cumulative Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Beta
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the daily algorithm returns and benchmarks instead of annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Volatility
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population with standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The volatility is an input to other calculations so this change affects Sharpe
    and Information ratio calculations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Information Ratio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Alpha
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Period Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sortino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now uses the downside risk of the daily return vs. the mean algorithm returns
    for the minimum acceptable return instead of the treasury return.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The above required adding the calculation of the mean algorithm returns for
    period risk.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, uses `algorithm_period_returns` and `tresaury_period_return` as the cumulative
    Sortino does, instead of using algorithm returns for both inputs into the Sortino
    calculation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed `alias_dt` transform in favor of property on SIDData. Adding a copy
    of the Event’s dt field as datetime via the `alias_dt` generator, so that the
    API was forgiving and allowed both datetime and dt on a SIDData object, was creating
    noticeable overhead, even on an noop algorithms. Instead of incurring the cost
    of copying the datetime value and assigning it to the Event object on every event
    that is passed through the system, add a property to SIDData which acts as an
    alias `datetime` to `dt`. Eventually support for `data['foo'].datetime` may be
    removed, and could be considered deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the drop of ‘null return’ from cumulative returns. The check of existence
    of the null return key, and the drop of said return on every single bar was adding
    unneeded CPU time when an algorithm was run with minute emissions. Instead, add
    the 0.0 return with an index of the trading day before the start date. The removal
    of the `null return` was mainly in place so that the period calculation was not
    crashing on a non-date index value; with the index as a date, the period return
    can also approximate volatility (even though the that volatility has high noise-to-signal
    strength because it uses only two values as an input.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Allow `sim_params` to provide data frequency for the algorithm. In the case
    that `data_frequency` of the algorithm is None, allow the `sim_params` to provide
    the `data_frequency`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, defer to the algorithms data frequency, if provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for building and releasing via conda For those who prefer building
    with [https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/) to compiling
    locally with pip. The following should install Zipline on many systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Release 2.0.0rc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 2.0.0rc1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 5, 2021
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This release updates Zipline to be compatible with Python >= 3.7 as well as
    the current versions of relevant PyData libraries like Pandas, scikit-learn, and
    others.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conda packages](https://anaconda.org/ml4t/repo) for [Zipline](https://anaconda.org/ml4t/zipline-reloaded)
    and key dependencies [bcolz](https://anaconda.org/ml4t/bcolz-zipline) and [TA-Lib](https://anaconda.org/ml4t/ta-lib)
    are now available for Python 3.7-3.9 on the ‘ml4t’ Anaconda channel. Binary wheels
    are available on [PyPi](https://pypi.org/project/zipline-reloaded/) for Linux
    ( Python 3.7-3.9) and MacOSx (3.7 and 3.8).'
  prefs: []
  type: TYPE_NORMAL
- en: As part of the update, the `BlazeLoader` functionality was removed. It was built
    on the [Blaze Ecosystem](https://blaze.pydata.org/). Unfortunately, the three
    relevant projects ([Blaze](https://blaze.readthedocs.io/en/latest/index.html),
    [Odo](https://odo.readthedocs.io/en/latest/) and [datashape](https://datashape.readthedocs.io/en/latest/)
    have received very limited support over the last several years.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other updates include:'
  prefs: []
  type: TYPE_NORMAL
- en: A [new release](https://github.com/stefan-jansen/bcolz-zipline) for [Bcolz](https://github.com/Blosc/bcolz)
    which has been marked unmaintained since September 2020 by the [author](https://github.com/Blosc).
    The new release updates the underlying [c-blosc](https://github.com/Blosc/c-blosc)
    library from version 1.14 to the latest 1.21.0\. There are also conda packages
    for Bcolz (see links above).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Networkx](https://networkx.org/) now uses the better performing version 2.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda packages for TA-Lib 0.4.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This new release also makes it easier to load custom data sources into a Pipeline
    (such as the predictions of an ML model) when backtesting. See the relevant examples
    in the [Github repo](https://github.com/stefan-jansen/machine-learning-for-trading)
    of the book [Machine Learning for Trading](https://www.amazon.com/Machine-Learning-Algorithmic-Trading-alternative/dp/1839217715/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=1617658040&sr=8-1-spons),
    such as [these ones](https://github.com/stefan-jansen/machine-learning-for-trading/tree/master/08_ml4t_workflow/04_ml4t_workflow_with_zipline).
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: custom_loader() for custom Pipeline data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compatibility with the latest versions of Pandas, scikit-learn, and other relevant
    [PyData](https://pydata.org/) libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numerous tests updates to accommodate recent Python and dependency versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Latest blosc library may improve compression and I/O performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Python 2 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All builds consolidated on GitHub Actions CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Expanded with additional information on Pipeline and related DataLoaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This release updates Zipline to be compatible with Python >= 3.7 as well as
    the current versions of relevant PyData libraries like Pandas, scikit-learn, and
    others.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conda packages](https://anaconda.org/ml4t/repo) for [Zipline](https://anaconda.org/ml4t/zipline-reloaded)
    and key dependencies [bcolz](https://anaconda.org/ml4t/bcolz-zipline) and [TA-Lib](https://anaconda.org/ml4t/ta-lib)
    are now available for Python 3.7-3.9 on the ‘ml4t’ Anaconda channel. Binary wheels
    are available on [PyPi](https://pypi.org/project/zipline-reloaded/) for Linux
    ( Python 3.7-3.9) and MacOSx (3.7 and 3.8).'
  prefs: []
  type: TYPE_NORMAL
- en: As part of the update, the `BlazeLoader` functionality was removed. It was built
    on the [Blaze Ecosystem](https://blaze.pydata.org/). Unfortunately, the three
    relevant projects ([Blaze](https://blaze.readthedocs.io/en/latest/index.html),
    [Odo](https://odo.readthedocs.io/en/latest/) and [datashape](https://datashape.readthedocs.io/en/latest/)
    have received very limited support over the last several years.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other updates include:'
  prefs: []
  type: TYPE_NORMAL
- en: A [new release](https://github.com/stefan-jansen/bcolz-zipline) for [Bcolz](https://github.com/Blosc/bcolz)
    which has been marked unmaintained since September 2020 by the [author](https://github.com/Blosc).
    The new release updates the underlying [c-blosc](https://github.com/Blosc/c-blosc)
    library from version 1.14 to the latest 1.21.0\. There are also conda packages
    for Bcolz (see links above).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Networkx](https://networkx.org/) now uses the better performing version 2.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda packages for TA-Lib 0.4.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This new release also makes it easier to load custom data sources into a Pipeline
    (such as the predictions of an ML model) when backtesting. See the relevant examples
    in the [Github repo](https://github.com/stefan-jansen/machine-learning-for-trading)
    of the book [Machine Learning for Trading](https://www.amazon.com/Machine-Learning-Algorithmic-Trading-alternative/dp/1839217715/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=1617658040&sr=8-1-spons),
    such as [these ones](https://github.com/stefan-jansen/machine-learning-for-trading/tree/master/08_ml4t_workflow/04_ml4t_workflow_with_zipline).
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: custom_loader() for custom Pipeline data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compatibility with the latest versions of Pandas, scikit-learn, and other relevant
    [PyData](https://pydata.org/) libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numerous tests updates to accommodate recent Python and dependency versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Latest blosc library may improve compression and I/O performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Python 2 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All builds consolidated on GitHub Actions CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Expanded with additional information on Pipeline and related DataLoaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.4.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: October 5, 2020
  prefs: []
  type: TYPE_NORMAL
- en: This release includes a small number of bug fixes, documentation improvements,
    and build/dependency enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Conda packages for zipline and its dependencies are now available for python
    3.6 on the ‘conda-forge’ Anaconda channel. They’re also available on the ‘Quantopian’
    channel, but we’ll stop updating those eventually.
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix for calling `run_algorithm` without `benchmark_returns` ([2762](https://github.com/stefan-jansen/zipline/issues/2762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for empyrical 0.5.3 ([2526](https://github.com/stefan-jansen/zipline/issues/2526))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed dependence on contextlib2 in py3 environments ([2757](https://github.com/stefan-jansen/zipline/issues/2757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update default bundle to ‘quantopian-quandl’ at more entrypoints ([2763](https://github.com/stefan-jansen/zipline/issues/2763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CI with newer statsmodels and scipy ([2739](https://github.com/stefan-jansen/zipline/issues/2739))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions CI on linux and macos ([2743](https://github.com/stefan-jansen/zipline/issues/2743),
    [2767](https://github.com/stefan-jansen/zipline/issues/2767))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added conda packaging for zipline and its dependencies to conda-forge ([2665](https://github.com/stefan-jansen/zipline/issues/2665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Various documentation improvements ([2763](https://github.com/stefan-jansen/zipline/issues/2763),
    [2771](https://github.com/stefan-jansen/zipline/issues/2771), [2772](https://github.com/stefan-jansen/zipline/issues/2772),
    [2776](https://github.com/stefan-jansen/zipline/issues/2776), [2780](https://github.com/stefan-jansen/zipline/issues/2780))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix for calling `run_algorithm` without `benchmark_returns` ([2762](https://github.com/stefan-jansen/zipline/issues/2762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for empyrical 0.5.3 ([2526](https://github.com/stefan-jansen/zipline/issues/2526))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed dependence on contextlib2 in py3 environments ([2757](https://github.com/stefan-jansen/zipline/issues/2757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update default bundle to ‘quantopian-quandl’ at more entrypoints ([2763](https://github.com/stefan-jansen/zipline/issues/2763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CI with newer statsmodels and scipy ([2739](https://github.com/stefan-jansen/zipline/issues/2739))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions CI on linux and macos ([2743](https://github.com/stefan-jansen/zipline/issues/2743),
    [2767](https://github.com/stefan-jansen/zipline/issues/2767))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added conda packaging for zipline and its dependencies to conda-forge ([2665](https://github.com/stefan-jansen/zipline/issues/2665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Various documentation improvements ([2763](https://github.com/stefan-jansen/zipline/issues/2763),
    [2771](https://github.com/stefan-jansen/zipline/issues/2771), [2772](https://github.com/stefan-jansen/zipline/issues/2772),
    [2776](https://github.com/stefan-jansen/zipline/issues/2776), [2780](https://github.com/stefan-jansen/zipline/issues/2780))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.4.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 22, 2020
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Implicit Dependency on Benchmarks and Treasury Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Previously, Zipline implicitly fetched these required inputs from third party
    API sources if they were not provided by users: treasury data from the US Federal
    Reserve’s API, and benchmarks from IEX. This meant that simulations required an
    internet connection and stable APIs for these data sources, neither of which were
    guaranteed for many users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We removed the dependency on treasury curves, since they weren’t actually being
    used anymore. And we replaced the implicit downloading of benchmark returns with
    explicit options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: ([2627](https://github.com/stefan-jansen/zipline/issues/2627), [2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs: []
  type: TYPE_NORMAL
- en: New Built In Factors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`PercentChange`](api-reference.html#zipline.pipeline.factors.PercentChange
    "zipline.pipeline.factors.PercentChange"): Calculates the percent change over
    the given `window_length`. Note: Percent change is calculated as `(new - old)
    / abs(old)`. ([2506](https://github.com/stefan-jansen/zipline/issues/2506))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeerCount`](api-reference.html#zipline.pipeline.factors.PeerCount "zipline.pipeline.factors.PeerCount"):
    Gives the number of occurrences of each distinct category in a classifier. ([2509](https://github.com/stefan-jansen/zipline/issues/2509))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConstantMixin`: A mixin for creating a Pipeline term with a constant value.
    ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if_else()`: Allows users to create expressions that conditionally draw from
    the outputs of one of two terms. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillna()`: Allows users to fill missing data with either a constant value,
    or values from another term. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip()`: Allows users to constrain a factor’s values to a given range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean()`, `stddev()`, `max()`, `min()`, `median()`, `sum()`, `notnull_count()`:
    Summarize data across the entire domain into a scalar factor. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added International Pipelines ([2262](https://github.com/stefan-jansen/zipline/issues/2262))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added DataSetFamily (née MultiDimensionalDataSet) - a shorthand for creating
    a collection of regular DataSets that share the same columns. ([2402](https://github.com/stefan-jansen/zipline/issues/2402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `get_column()` for looking up columns by name ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `CheckWindowsClassifier` that allows us to test lookback windows of categorical
    and string columns using Pipeline. ([2458](https://github.com/stefan-jansen/zipline/issues/2458))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `PipelineHooks` which is now used to display Pipline progress bars ([2467](https://github.com/stefan-jansen/zipline/issues/2467))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`BoundColumn`](api-reference.html#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.dataset.BoundColumn")
    comparisons will now result in an error. This prevents writing `EquityPricing.volume
    > 1000` (silently returning bad data) insteads of `EquityPricing.volume.latest
    > 1000`. ([2537](https://github.com/stefan-jansen/zipline/issues/2537))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added currency conversion support to Pipeline. ([2586](https://github.com/stefan-jansen/zipline/issues/2586))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `--benchmark-file` and `--benchmark-symbol` command line arguments to
    make it easier to provide benchmark data. ([2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Python 3.6 ([2643](https://github.com/stefan-jansen/zipline/issues/2643))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `mask` argument to Factor.peer_count. ([2676](https://github.com/stefan-jansen/zipline/issues/2676))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `if_else()` and `fillna()` for allowing conditional logic in Pipelines.
    ([2691](https://github.com/stefan-jansen/zipline/issues/2691))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added daily summary methods to Factor for collecting summary statistics for
    the entire universe. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `clip()` method for clipping values to a range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Pipeline term arithmetic with more than 32 terms. ([2727](https://github.com/stefan-jansen/zipline/issues/2727))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed support for non unique sid->exchange mappings. ([2289](https://github.com/stefan-jansen/zipline/issues/2289))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed crash on dividend warning. ([2323](https://github.com/stefan-jansen/zipline/issues/2323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `week_start` when Monday precedes the New Year. ([2394](https://github.com/stefan-jansen/zipline/issues/2394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensured correct dtypes when unpacking empty dataframes. ([2444](https://github.com/stefan-jansen/zipline/issues/2444))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where a Pipeline term with `window_length=0` would not copy the
    input before calling `compute()` which could cause incorrect results if the input
    was reused in the Pipeline. ([2723](https://github.com/stefan-jansen/zipline/issues/2723))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added `HDF5DailyBarWriter`, which writes daily pricing in a new format as an
    HDF5 file. Each OHLCV field is stored as a 2D array in a chunked HDF5 dataset,
    with a row per sid and a column per day. The file also supports multiple countries.
    Added `HDF5DailyBarReader`, which implements the BarReader interface and can read
    files written by HDF5DailyBarWriter. ([2295](https://github.com/stefan-jansen/zipline/issues/2295))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vectorized dividend ratio calculation ([2298](https://github.com/stefan-jansen/zipline/issues/2298))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of the [`RollingPearson`](api-reference.html#zipline.pipeline.factors.RollingPearson
    "zipline.pipeline.factors.RollingPearson") and [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns") pipeline factors. ([2071](https://github.com/stefan-jansen/zipline/issues/2071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made `parameter_space()` reset instance fixtures between runs ([2433](https://github.com/stefan-jansen/zipline/issues/2433))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused treasury curves data handling. ([2626](https://github.com/stefan-jansen/zipline/issues/2626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: International Pipelines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Pipeline now supports international data.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline is a tool that allows you to define computations over a universe of
    assets and a period of time. In the past, you could only run pipelines on the
    US equity market. Now, you can now specify a domain over which a pipeline should
    be computed. The name “domain” refers to the mathematical concept of the “domain
    of a function”, which is the set of potential inputs to a function. In the context
    of Pipeline, the domain specifies the set of assets and a corresponding trading
    calendar over which the expressions of a pipeline should be computed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following pipeline returns the latest close price and volume
    for all Canadian equities, every day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Another challenge related to currencies is the fact that some exchanges don’t
    require stocks to be listed in local currency. For example, the London Stock Exchange
    only has about 75% of its listings denominated in GBP*. The other 25% are primarily
    listed in EUR or USD. This can make it hard to make cross sectional comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, most people rely on currency conversions to bring price-based
    fields into the same currency. Pipeline columns now support an `fx` method for
    specifying what currency the data should be viewed as. This method is only available
    on terms which are “currency-aware”, for example open or close, but not on terms
    that do not care about currency like volume.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no way to load international data into a bundle. We are
    working on ways to make it easy to get international data into Zipline.
  prefs: []
  type: TYPE_NORMAL
- en: ([2265](https://github.com/stefan-jansen/zipline/issues/2265), [2262](https://github.com/stefan-jansen/zipline/issues/2262),
    and many others)
  prefs: []
  type: TYPE_NORMAL
- en: 'The domains that Zipline currently supports for running pipelines (using the
    latest [trading-calendars](https://pypi.org/project/trading-calendars/) package)
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Argentina
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Austria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belgium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brazil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canada
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: China
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czech Republic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colombia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czechia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: France
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Germany
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greece
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hong Kong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hungary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: India
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indonesia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ireland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Japan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malaysia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mexico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netherlands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Zealand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Norway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pakistan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peru
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Philippines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portugal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singapore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sweden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taiwan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thailand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United Kingdom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United States
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Africa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Korea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switzerland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([2301](https://github.com/stefan-jansen/zipline/issues/2301), [2333](https://github.com/stefan-jansen/zipline/issues/2333),
    [2338](https://github.com/stefan-jansen/zipline/issues/2338), [2355](https://github.com/stefan-jansen/zipline/issues/2355),
    [2369](https://github.com/stefan-jansen/zipline/issues/2369), [2550](https://github.com/stefan-jansen/zipline/issues/2550),
    [2552](https://github.com/stefan-jansen/zipline/issues/2552), [2559](https://github.com/stefan-jansen/zipline/issues/2559))
  prefs: []
  type: TYPE_NORMAL
- en: DataSetFamily
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") in a pipeline expression, one must choose
    a specific value for each of the extra dimensions using the [`slice()`](api-reference.html#zipline.pipeline.data.DataSetFamily.slice
    "zipline.pipeline.data.DataSetFamily.slice") method. For example, given a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This dataset might represent a table with the following columns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can be converted to a regular [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") with:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ([2402](https://github.com/stefan-jansen/zipline/issues/2402), [2452](https://github.com/stefan-jansen/zipline/issues/2452),
    [2456](https://github.com/stefan-jansen/zipline/issues/2456))
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed Implicit Dependency on Benchmarks and Treasury Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Previously, Zipline implicitly fetched these required inputs from third party
    API sources if they were not provided by users: treasury data from the US Federal
    Reserve’s API, and benchmarks from IEX. This meant that simulations required an
    internet connection and stable APIs for these data sources, neither of which were
    guaranteed for many users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We removed the dependency on treasury curves, since they weren’t actually being
    used anymore. And we replaced the implicit downloading of benchmark returns with
    explicit options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: ([2627](https://github.com/stefan-jansen/zipline/issues/2627), [2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs: []
  type: TYPE_NORMAL
- en: New Built In Factors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`PercentChange`](api-reference.html#zipline.pipeline.factors.PercentChange
    "zipline.pipeline.factors.PercentChange"): Calculates the percent change over
    the given `window_length`. Note: Percent change is calculated as `(new - old)
    / abs(old)`. ([2506](https://github.com/stefan-jansen/zipline/issues/2506))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeerCount`](api-reference.html#zipline.pipeline.factors.PeerCount "zipline.pipeline.factors.PeerCount"):
    Gives the number of occurrences of each distinct category in a classifier. ([2509](https://github.com/stefan-jansen/zipline/issues/2509))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConstantMixin`: A mixin for creating a Pipeline term with a constant value.
    ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if_else()`: Allows users to create expressions that conditionally draw from
    the outputs of one of two terms. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillna()`: Allows users to fill missing data with either a constant value,
    or values from another term. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip()`: Allows users to constrain a factor’s values to a given range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean()`, `stddev()`, `max()`, `min()`, `median()`, `sum()`, `notnull_count()`:
    Summarize data across the entire domain into a scalar factor. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed Implicit Dependency on Benchmarks and Treasury Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Previously, Zipline implicitly fetched these required inputs from third party
    API sources if they were not provided by users: treasury data from the US Federal
    Reserve’s API, and benchmarks from IEX. This meant that simulations required an
    internet connection and stable APIs for these data sources, neither of which were
    guaranteed for many users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We removed the dependency on treasury curves, since they weren’t actually being
    used anymore. And we replaced the implicit downloading of benchmark returns with
    explicit options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: ([2627](https://github.com/stefan-jansen/zipline/issues/2627), [2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs: []
  type: TYPE_NORMAL
- en: New Built In Factors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`PercentChange`](api-reference.html#zipline.pipeline.factors.PercentChange
    "zipline.pipeline.factors.PercentChange"): Calculates the percent change over
    the given `window_length`. Note: Percent change is calculated as `(new - old)
    / abs(old)`. ([2506](https://github.com/stefan-jansen/zipline/issues/2506))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeerCount`](api-reference.html#zipline.pipeline.factors.PeerCount "zipline.pipeline.factors.PeerCount"):
    Gives the number of occurrences of each distinct category in a classifier. ([2509](https://github.com/stefan-jansen/zipline/issues/2509))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConstantMixin`: A mixin for creating a Pipeline term with a constant value.
    ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if_else()`: Allows users to create expressions that conditionally draw from
    the outputs of one of two terms. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillna()`: Allows users to fill missing data with either a constant value,
    or values from another term. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip()`: Allows users to constrain a factor’s values to a given range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean()`, `stddev()`, `max()`, `min()`, `median()`, `sum()`, `notnull_count()`:
    Summarize data across the entire domain into a scalar factor. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added International Pipelines ([2262](https://github.com/stefan-jansen/zipline/issues/2262))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added DataSetFamily (née MultiDimensionalDataSet) - a shorthand for creating
    a collection of regular DataSets that share the same columns. ([2402](https://github.com/stefan-jansen/zipline/issues/2402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `get_column()` for looking up columns by name ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `CheckWindowsClassifier` that allows us to test lookback windows of categorical
    and string columns using Pipeline. ([2458](https://github.com/stefan-jansen/zipline/issues/2458))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `PipelineHooks` which is now used to display Pipline progress bars ([2467](https://github.com/stefan-jansen/zipline/issues/2467))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`BoundColumn`](api-reference.html#zipline.pipeline.data.BoundColumn "zipline.pipeline.data.dataset.BoundColumn")
    comparisons will now result in an error. This prevents writing `EquityPricing.volume
    > 1000` (silently returning bad data) insteads of `EquityPricing.volume.latest
    > 1000`. ([2537](https://github.com/stefan-jansen/zipline/issues/2537))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added currency conversion support to Pipeline. ([2586](https://github.com/stefan-jansen/zipline/issues/2586))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `--benchmark-file` and `--benchmark-symbol` command line arguments to
    make it easier to provide benchmark data. ([2642](https://github.com/stefan-jansen/zipline/issues/2642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Python 3.6 ([2643](https://github.com/stefan-jansen/zipline/issues/2643))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `mask` argument to Factor.peer_count. ([2676](https://github.com/stefan-jansen/zipline/issues/2676))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `if_else()` and `fillna()` for allowing conditional logic in Pipelines.
    ([2691](https://github.com/stefan-jansen/zipline/issues/2691))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added daily summary methods to Factor for collecting summary statistics for
    the entire universe. ([2697](https://github.com/stefan-jansen/zipline/issues/2697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `clip()` method for clipping values to a range. ([2708](https://github.com/stefan-jansen/zipline/issues/2708))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Pipeline term arithmetic with more than 32 terms. ([2727](https://github.com/stefan-jansen/zipline/issues/2727))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed support for non unique sid->exchange mappings. ([2289](https://github.com/stefan-jansen/zipline/issues/2289))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed crash on dividend warning. ([2323](https://github.com/stefan-jansen/zipline/issues/2323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `week_start` when Monday precedes the New Year. ([2394](https://github.com/stefan-jansen/zipline/issues/2394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensured correct dtypes when unpacking empty dataframes. ([2444](https://github.com/stefan-jansen/zipline/issues/2444))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where a Pipeline term with `window_length=0` would not copy the
    input before calling `compute()` which could cause incorrect results if the input
    was reused in the Pipeline. ([2723](https://github.com/stefan-jansen/zipline/issues/2723))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added `HDF5DailyBarWriter`, which writes daily pricing in a new format as an
    HDF5 file. Each OHLCV field is stored as a 2D array in a chunked HDF5 dataset,
    with a row per sid and a column per day. The file also supports multiple countries.
    Added `HDF5DailyBarReader`, which implements the BarReader interface and can read
    files written by HDF5DailyBarWriter. ([2295](https://github.com/stefan-jansen/zipline/issues/2295))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vectorized dividend ratio calculation ([2298](https://github.com/stefan-jansen/zipline/issues/2298))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of the [`RollingPearson`](api-reference.html#zipline.pipeline.factors.RollingPearson
    "zipline.pipeline.factors.RollingPearson") and [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns") pipeline factors. ([2071](https://github.com/stefan-jansen/zipline/issues/2071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made `parameter_space()` reset instance fixtures between runs ([2433](https://github.com/stefan-jansen/zipline/issues/2433))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed unused treasury curves data handling. ([2626](https://github.com/stefan-jansen/zipline/issues/2626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: International Pipelines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Pipeline now supports international data.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline is a tool that allows you to define computations over a universe of
    assets and a period of time. In the past, you could only run pipelines on the
    US equity market. Now, you can now specify a domain over which a pipeline should
    be computed. The name “domain” refers to the mathematical concept of the “domain
    of a function”, which is the set of potential inputs to a function. In the context
    of Pipeline, the domain specifies the set of assets and a corresponding trading
    calendar over which the expressions of a pipeline should be computed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following pipeline returns the latest close price and volume
    for all Canadian equities, every day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Another challenge related to currencies is the fact that some exchanges don’t
    require stocks to be listed in local currency. For example, the London Stock Exchange
    only has about 75% of its listings denominated in GBP*. The other 25% are primarily
    listed in EUR or USD. This can make it hard to make cross sectional comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, most people rely on currency conversions to bring price-based
    fields into the same currency. Pipeline columns now support an `fx` method for
    specifying what currency the data should be viewed as. This method is only available
    on terms which are “currency-aware”, for example open or close, but not on terms
    that do not care about currency like volume.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no way to load international data into a bundle. We are
    working on ways to make it easy to get international data into Zipline.
  prefs: []
  type: TYPE_NORMAL
- en: ([2265](https://github.com/stefan-jansen/zipline/issues/2265), [2262](https://github.com/stefan-jansen/zipline/issues/2262),
    and many others)
  prefs: []
  type: TYPE_NORMAL
- en: 'The domains that Zipline currently supports for running pipelines (using the
    latest [trading-calendars](https://pypi.org/project/trading-calendars/) package)
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Argentina
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Austria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belgium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brazil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canada
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: China
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czech Republic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colombia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czechia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: France
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Germany
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greece
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hong Kong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hungary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: India
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indonesia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ireland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Japan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malaysia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mexico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netherlands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Zealand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Norway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pakistan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peru
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Philippines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portugal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singapore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sweden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taiwan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thailand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United Kingdom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United States
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Africa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Korea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switzerland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([2301](https://github.com/stefan-jansen/zipline/issues/2301), [2333](https://github.com/stefan-jansen/zipline/issues/2333),
    [2338](https://github.com/stefan-jansen/zipline/issues/2338), [2355](https://github.com/stefan-jansen/zipline/issues/2355),
    [2369](https://github.com/stefan-jansen/zipline/issues/2369), [2550](https://github.com/stefan-jansen/zipline/issues/2550),
    [2552](https://github.com/stefan-jansen/zipline/issues/2552), [2559](https://github.com/stefan-jansen/zipline/issues/2559))
  prefs: []
  type: TYPE_NORMAL
- en: DataSetFamily
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") in a pipeline expression, one must choose
    a specific value for each of the extra dimensions using the [`slice()`](api-reference.html#zipline.pipeline.data.DataSetFamily.slice
    "zipline.pipeline.data.DataSetFamily.slice") method. For example, given a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This dataset might represent a table with the following columns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can be converted to a regular [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") with:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ([2402](https://github.com/stefan-jansen/zipline/issues/2402), [2452](https://github.com/stefan-jansen/zipline/issues/2452),
    [2456](https://github.com/stefan-jansen/zipline/issues/2456))
  prefs: []
  type: TYPE_NORMAL
- en: International Pipelines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Pipeline now supports international data.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline is a tool that allows you to define computations over a universe of
    assets and a period of time. In the past, you could only run pipelines on the
    US equity market. Now, you can now specify a domain over which a pipeline should
    be computed. The name “domain” refers to the mathematical concept of the “domain
    of a function”, which is the set of potential inputs to a function. In the context
    of Pipeline, the domain specifies the set of assets and a corresponding trading
    calendar over which the expressions of a pipeline should be computed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following pipeline returns the latest close price and volume
    for all Canadian equities, every day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Another challenge related to currencies is the fact that some exchanges don’t
    require stocks to be listed in local currency. For example, the London Stock Exchange
    only has about 75% of its listings denominated in GBP*. The other 25% are primarily
    listed in EUR or USD. This can make it hard to make cross sectional comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, most people rely on currency conversions to bring price-based
    fields into the same currency. Pipeline columns now support an `fx` method for
    specifying what currency the data should be viewed as. This method is only available
    on terms which are “currency-aware”, for example open or close, but not on terms
    that do not care about currency like volume.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is no way to load international data into a bundle. We are
    working on ways to make it easy to get international data into Zipline.
  prefs: []
  type: TYPE_NORMAL
- en: ([2265](https://github.com/stefan-jansen/zipline/issues/2265), [2262](https://github.com/stefan-jansen/zipline/issues/2262),
    and many others)
  prefs: []
  type: TYPE_NORMAL
- en: 'The domains that Zipline currently supports for running pipelines (using the
    latest [trading-calendars](https://pypi.org/project/trading-calendars/) package)
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Argentina
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Austria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belgium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brazil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canada
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: China
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czech Republic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colombia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Czechia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: France
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Germany
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greece
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hong Kong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hungary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: India
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indonesia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ireland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Japan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malaysia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mexico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netherlands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Zealand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Norway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pakistan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peru
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Philippines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portugal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singapore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sweden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taiwan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thailand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United Kingdom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: United States
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Africa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: South Korea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switzerland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([2301](https://github.com/stefan-jansen/zipline/issues/2301), [2333](https://github.com/stefan-jansen/zipline/issues/2333),
    [2338](https://github.com/stefan-jansen/zipline/issues/2338), [2355](https://github.com/stefan-jansen/zipline/issues/2355),
    [2369](https://github.com/stefan-jansen/zipline/issues/2369), [2550](https://github.com/stefan-jansen/zipline/issues/2550),
    [2552](https://github.com/stefan-jansen/zipline/issues/2552), [2559](https://github.com/stefan-jansen/zipline/issues/2559))
  prefs: []
  type: TYPE_NORMAL
- en: DataSetFamily
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Dataset families are used to represent data where the unique identifier for
    a row requires more than just asset and date coordinates. A [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can also be thought of as a collection
    of [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    objects, each of which has the same columns, domain, and ndim.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily "zipline.pipeline.data.DataSetFamily")
    objects are defined with one or more [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") objects, plus one additional field: `extra_dims`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `extra_dims` field defines coordinates other than asset and date that must
    be fixed to produce a logical timeseries. The column objects determine columns
    that will be shared by slices of the family.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extra_dims` are represented as an ordered dictionary where the keys are the
    dimension name, and the values are a set of unique values along that dimension.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To work with a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") in a pipeline expression, one must choose
    a specific value for each of the extra dimensions using the [`slice()`](api-reference.html#zipline.pipeline.data.DataSetFamily.slice
    "zipline.pipeline.data.DataSetFamily.slice") method. For example, given a [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily"):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This dataset might represent a table with the following columns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here we see the implicit `sid`, `asof_date` and `timestamp` columns as well
    as the extra dimensions columns.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This [`DataSetFamily`](api-reference.html#zipline.pipeline.data.DataSetFamily
    "zipline.pipeline.data.DataSetFamily") can be converted to a regular [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet
    "zipline.pipeline.data.DataSet") with:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This sliced dataset represents the rows from the higher dimensional dataset
    where `(dimension_0 == 'a') & (dimension_1 == 'e')`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ([2402](https://github.com/stefan-jansen/zipline/issues/2402), [2452](https://github.com/stefan-jansen/zipline/issues/2452),
    [2456](https://github.com/stefan-jansen/zipline/issues/2456))
  prefs: []
  type: TYPE_NORMAL
- en: Release 1.3.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 16, 2018
  prefs: []
  type: TYPE_NORMAL
- en: This release includes several enhancements and performance improvements along
    with a small number of bug fixes. We recommend that all users upgrade to this
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This will likely be the last minor release in the Zipline 1.x series. The release
    next will be Zipline 2.0, which will include a number of small breaking changes
    required to support international equities.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for Newer Numpy/Pandas Versions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline has historically been very conservative when updating versions of numpy,
    pandas, and other “PyData” ecosystem packages. This conservatism is primarily
    due to the fact that Zipline is used as the backtesting engine for [Quantopian](https://www.quantopian.com/),
    which means that updating package versions risks breaking a large installed codebase.
    Of course, many Zipline users don’t have the backwards compatibility requirements
    that Quantopian has, and they’d like to be able to use the latest and greatest
    package versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this release, we’re now building and testing Zipline with two package
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stable”, using numpy version 1.11 and pandas version 0.18.1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Latest”, using numpy version 1.14 and pandas version 0.22.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other combinations of numpy and pandas **may** work, but these package sets
    will be built and tested during our normal development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, our goal is to continue to maintain support for two sets of
    packages at any given time. The “stable” package set will change relatively infrequently,
    and will contain the versions of numpy and pandas supported on Quantopian. The
    “latest” package set will change regularly, and will contain recently-released
    versions of numpy and pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Our hope with these changes is to strike a balance between stability and novelty
    without taking on too great a maintenance burden by supporting every possible
    combination of packages. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs: []
  type: TYPE_NORMAL
- en: Standalone `trading_calendars` Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most popular features of Zipline is its collection of trading calendars,
    which provide information about holidays and trading hours of various markets.
    As part of this release, Zipline’s calendar-related functionality has been moved
    to a separate [trading-calendars](https://pypi.org/project/trading-calendars/)
    package, allowing users that only needed access to the calendars to use them without
    taking on the rest of Zipline’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compability, Zipline will continue to re-export calendar-related
    functions. For example, `zipline.get_calendar()` still exists, but is now an alias
    for `trading_calendars.get_calendar`. Users that depend on this functionality
    are encouraged to update their imports to the new locations in `trading_calendars`.
    ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Blotters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This release adds experimental support for running Zipline with user-defined
    subclasses of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter"). The primary motivation for this change
    is to make it easier to run live algorithms from the Zipline CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary ways to configure a custom blotter:'
  prefs: []
  type: TYPE_NORMAL
- en: You can pass an instance of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") as the `blotter` parameter to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). (This functionality had existed previously, but wasn’t
    well-documented.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can register a named **factory** for a blotter in your `extension.py` and
    pass the name on the command line via the `--blotter` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example usage of **(2)** might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ~/.zipline/extension.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this factory when running zipline from the command line, we would invoke
    zipline like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As part of this change, the [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") class has been converted to an abstract
    base class. The default blotter used in simulations is now named [`zipline.finance.blotter.SimulationBlotter`](api-reference.html#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter").
  prefs: []
  type: TYPE_NORMAL
- en: ([2210](https://github.com/stefan-jansen/zipline/issues/2210), [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Command-Line Arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This release adds support for passing custom arguments to the `zipline` command-line
    interface. Custom command-line arguments are passed via the `-x` flag followed
    by a `key=value` pair. Arguments passed this way can be accessed from Python code
    (e.g., an algorithm or an extension) via attributes of `zipline.extension_args`.
    For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: then the result of `zipline.extension_args.argle` would be the string `"bargle"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom arguments can be grouped into namespaces by including `.` characters
    in keys. For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: then `zipline.extension_args.argle` will contain an object with a `bargle` attribute
    containing the string `"foo"`. Keys can contain multiple dots to create nested
    namespaces. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for pandas 0.22 and numpy 1.14\. See above for details. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `zipline.utils.calendars` into a separately-installable [trading-calendars](https://pypi.org/project/trading-calendars/)
    package. ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for specifying custom string arguments with the `-x` flag. See
    above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for registering custom subclass of `zipline.finance.blotter.Blotter`.
    See above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210),
    [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in [`zipline.pipeline.Factor.winsorize()`](api-reference.html#zipline.pipeline.Factor.winsorize
    "zipline.pipeline.Factor.winsorize") where NaN values were incorrectly included
    in value counts when determining cutoff thresholds for winsorization. ([2138](https://github.com/stefan-jansen/zipline/issues/2138))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a crash in [`zipline.pipeline.Factor.top()`](api-reference.html#zipline.pipeline.Factor.top
    "zipline.pipeline.Factor.top") with a count of 1 and no groupby. ([2218](https://github.com/stefan-jansen/zipline/issues/2218))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where calling `data.history` with a negative lookback would fetch
    prices from the future. ([2164](https://github.com/stefan-jansen/zipline/issues/2164))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where `StopOrder``, [`zipline.finance.execution.LimitOrder`](api-reference.html#zipline.finance.execution.LimitOrder
    "zipline.finance.execution.LimitOrder"), and [`zipline.finance.execution.StopLimitOrder`](api-reference.html#zipline.finance.execution.StopLimitOrder
    "zipline.finance.execution.StopLimitOrder") prices were being rounded to the nearest
    penny regardless of asset tick size. Prices are now rounded based on the `tick_size`
    attribute of the asset being ordered. ([2211](https://github.com/stefan-jansen/zipline/issues/2211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for assets that trade regularly.
    ([2108](https://github.com/stefan-jansen/zipline/issues/2108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for many assets by tuning
    cache sizes. ([2110](https://github.com/stefan-jansen/zipline/issues/2110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactored large parts of the Zipline test suite to make it easier to change
    the signature of `zipline.algorithm.TradingAlgorithm`. ([2169](https://github.com/stefan-jansen/zipline/issues/2169),
    [2168](https://github.com/stefan-jansen/zipline/issues/2168), [2165](https://github.com/stefan-jansen/zipline/issues/2165),
    [2171](https://github.com/stefan-jansen/zipline/issues/2171))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for running travis builds with pandas 0.18 and 0.22. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OSX builds to the travis build matrix. ([2244](https://github.com/stefan-jansen/zipline/issues/2244))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for Newer Numpy/Pandas Versions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline has historically been very conservative when updating versions of numpy,
    pandas, and other “PyData” ecosystem packages. This conservatism is primarily
    due to the fact that Zipline is used as the backtesting engine for [Quantopian](https://www.quantopian.com/),
    which means that updating package versions risks breaking a large installed codebase.
    Of course, many Zipline users don’t have the backwards compatibility requirements
    that Quantopian has, and they’d like to be able to use the latest and greatest
    package versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this release, we’re now building and testing Zipline with two package
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stable”, using numpy version 1.11 and pandas version 0.18.1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Latest”, using numpy version 1.14 and pandas version 0.22.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other combinations of numpy and pandas **may** work, but these package sets
    will be built and tested during our normal development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, our goal is to continue to maintain support for two sets of
    packages at any given time. The “stable” package set will change relatively infrequently,
    and will contain the versions of numpy and pandas supported on Quantopian. The
    “latest” package set will change regularly, and will contain recently-released
    versions of numpy and pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Our hope with these changes is to strike a balance between stability and novelty
    without taking on too great a maintenance burden by supporting every possible
    combination of packages. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs: []
  type: TYPE_NORMAL
- en: Standalone `trading_calendars` Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most popular features of Zipline is its collection of trading calendars,
    which provide information about holidays and trading hours of various markets.
    As part of this release, Zipline’s calendar-related functionality has been moved
    to a separate [trading-calendars](https://pypi.org/project/trading-calendars/)
    package, allowing users that only needed access to the calendars to use them without
    taking on the rest of Zipline’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compability, Zipline will continue to re-export calendar-related
    functions. For example, `zipline.get_calendar()` still exists, but is now an alias
    for `trading_calendars.get_calendar`. Users that depend on this functionality
    are encouraged to update their imports to the new locations in `trading_calendars`.
    ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Blotters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This release adds experimental support for running Zipline with user-defined
    subclasses of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter"). The primary motivation for this change
    is to make it easier to run live algorithms from the Zipline CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary ways to configure a custom blotter:'
  prefs: []
  type: TYPE_NORMAL
- en: You can pass an instance of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") as the `blotter` parameter to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). (This functionality had existed previously, but wasn’t
    well-documented.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can register a named **factory** for a blotter in your `extension.py` and
    pass the name on the command line via the `--blotter` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example usage of **(2)** might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ~/.zipline/extension.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this factory when running zipline from the command line, we would invoke
    zipline like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As part of this change, the [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") class has been converted to an abstract
    base class. The default blotter used in simulations is now named [`zipline.finance.blotter.SimulationBlotter`](api-reference.html#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter").
  prefs: []
  type: TYPE_NORMAL
- en: ([2210](https://github.com/stefan-jansen/zipline/issues/2210), [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Command-Line Arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This release adds support for passing custom arguments to the `zipline` command-line
    interface. Custom command-line arguments are passed via the `-x` flag followed
    by a `key=value` pair. Arguments passed this way can be accessed from Python code
    (e.g., an algorithm or an extension) via attributes of `zipline.extension_args`.
    For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: then the result of `zipline.extension_args.argle` would be the string `"bargle"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom arguments can be grouped into namespaces by including `.` characters
    in keys. For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: then `zipline.extension_args.argle` will contain an object with a `bargle` attribute
    containing the string `"foo"`. Keys can contain multiple dots to create nested
    namespaces. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs: []
  type: TYPE_NORMAL
- en: Support for Newer Numpy/Pandas Versions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline has historically been very conservative when updating versions of numpy,
    pandas, and other “PyData” ecosystem packages. This conservatism is primarily
    due to the fact that Zipline is used as the backtesting engine for [Quantopian](https://www.quantopian.com/),
    which means that updating package versions risks breaking a large installed codebase.
    Of course, many Zipline users don’t have the backwards compatibility requirements
    that Quantopian has, and they’d like to be able to use the latest and greatest
    package versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this release, we’re now building and testing Zipline with two package
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: “Stable”, using numpy version 1.11 and pandas version 0.18.1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Latest”, using numpy version 1.14 and pandas version 0.22.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other combinations of numpy and pandas **may** work, but these package sets
    will be built and tested during our normal development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, our goal is to continue to maintain support for two sets of
    packages at any given time. The “stable” package set will change relatively infrequently,
    and will contain the versions of numpy and pandas supported on Quantopian. The
    “latest” package set will change regularly, and will contain recently-released
    versions of numpy and pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Our hope with these changes is to strike a balance between stability and novelty
    without taking on too great a maintenance burden by supporting every possible
    combination of packages. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs: []
  type: TYPE_NORMAL
- en: Standalone `trading_calendars` Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most popular features of Zipline is its collection of trading calendars,
    which provide information about holidays and trading hours of various markets.
    As part of this release, Zipline’s calendar-related functionality has been moved
    to a separate [trading-calendars](https://pypi.org/project/trading-calendars/)
    package, allowing users that only needed access to the calendars to use them without
    taking on the rest of Zipline’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compability, Zipline will continue to re-export calendar-related
    functions. For example, `zipline.get_calendar()` still exists, but is now an alias
    for `trading_calendars.get_calendar`. Users that depend on this functionality
    are encouraged to update their imports to the new locations in `trading_calendars`.
    ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Blotters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This release adds experimental support for running Zipline with user-defined
    subclasses of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter"). The primary motivation for this change
    is to make it easier to run live algorithms from the Zipline CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary ways to configure a custom blotter:'
  prefs: []
  type: TYPE_NORMAL
- en: You can pass an instance of [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") as the `blotter` parameter to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). (This functionality had existed previously, but wasn’t
    well-documented.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can register a named **factory** for a blotter in your `extension.py` and
    pass the name on the command line via the `--blotter` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example usage of **(2)** might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ~/.zipline/extension.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this factory when running zipline from the command line, we would invoke
    zipline like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: As part of this change, the [`Blotter`](api-reference.html#zipline.finance.blotter.blotter.Blotter
    "zipline.finance.blotter.blotter.Blotter") class has been converted to an abstract
    base class. The default blotter used in simulations is now named [`zipline.finance.blotter.SimulationBlotter`](api-reference.html#zipline.finance.blotter.SimulationBlotter
    "zipline.finance.blotter.SimulationBlotter").
  prefs: []
  type: TYPE_NORMAL
- en: ([2210](https://github.com/stefan-jansen/zipline/issues/2210), [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs: []
  type: TYPE_NORMAL
- en: Custom Command-Line Arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This release adds support for passing custom arguments to the `zipline` command-line
    interface. Custom command-line arguments are passed via the `-x` flag followed
    by a `key=value` pair. Arguments passed this way can be accessed from Python code
    (e.g., an algorithm or an extension) via attributes of `zipline.extension_args`.
    For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: then the result of `zipline.extension_args.argle` would be the string `"bargle"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom arguments can be grouped into namespaces by including `.` characters
    in keys. For example, if zipline is invoked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: then `zipline.extension_args.argle` will contain an object with a `bargle` attribute
    containing the string `"foo"`. Keys can contain multiple dots to create nested
    namespaces. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for pandas 0.22 and numpy 1.14\. See above for details. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved `zipline.utils.calendars` into a separately-installable [trading-calendars](https://pypi.org/project/trading-calendars/)
    package. ([2219](https://github.com/stefan-jansen/zipline/issues/2219))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for specifying custom string arguments with the `-x` flag. See
    above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for registering custom subclass of `zipline.finance.blotter.Blotter`.
    See above for details. ([2210](https://github.com/stefan-jansen/zipline/issues/2210),
    [2251](https://github.com/stefan-jansen/zipline/issues/2251))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in [`zipline.pipeline.Factor.winsorize()`](api-reference.html#zipline.pipeline.Factor.winsorize
    "zipline.pipeline.Factor.winsorize") where NaN values were incorrectly included
    in value counts when determining cutoff thresholds for winsorization. ([2138](https://github.com/stefan-jansen/zipline/issues/2138))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a crash in [`zipline.pipeline.Factor.top()`](api-reference.html#zipline.pipeline.Factor.top
    "zipline.pipeline.Factor.top") with a count of 1 and no groupby. ([2218](https://github.com/stefan-jansen/zipline/issues/2218))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where calling `data.history` with a negative lookback would fetch
    prices from the future. ([2164](https://github.com/stefan-jansen/zipline/issues/2164))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where `StopOrder``, [`zipline.finance.execution.LimitOrder`](api-reference.html#zipline.finance.execution.LimitOrder
    "zipline.finance.execution.LimitOrder"), and [`zipline.finance.execution.StopLimitOrder`](api-reference.html#zipline.finance.execution.StopLimitOrder
    "zipline.finance.execution.StopLimitOrder") prices were being rounded to the nearest
    penny regardless of asset tick size. Prices are now rounded based on the `tick_size`
    attribute of the asset being ordered. ([2211](https://github.com/stefan-jansen/zipline/issues/2211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for assets that trade regularly.
    ([2108](https://github.com/stefan-jansen/zipline/issues/2108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance when fetching minutely prices for many assets by tuning
    cache sizes. ([2110](https://github.com/stefan-jansen/zipline/issues/2110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactored large parts of the Zipline test suite to make it easier to change
    the signature of `zipline.algorithm.TradingAlgorithm`. ([2169](https://github.com/stefan-jansen/zipline/issues/2169),
    [2168](https://github.com/stefan-jansen/zipline/issues/2168), [2165](https://github.com/stefan-jansen/zipline/issues/2165),
    [2171](https://github.com/stefan-jansen/zipline/issues/2171))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for running travis builds with pandas 0.18 and 0.22. ([2194](https://github.com/stefan-jansen/zipline/issues/2194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added OSX builds to the travis build matrix. ([2244](https://github.com/stefan-jansen/zipline/issues/2244))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 4, 2018
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extensible Risk and Performance Metrics ([2081](https://github.com/stefan-jansen/zipline/issues/2081))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The risk and performance metrics are summarizing values calculated by Zipline
    when running a simulation, for example: returns or Sharpe ratio. 1.1.2 introduces
    a new API for registering custom risk and performance metrics defined by the user.
    We have also made it possible to run a backtest without computing any metrics
    to improve the feedback cycle when debugging an algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [Metrics](risk-and-perf-metrics.html#metrics).
  prefs: []
  type: TYPE_NORMAL
- en: Docs, Trading Calendars, and Benchmarks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline now defaults to using the `quandl` bundle, which you’ll need an API
    Key for, and can find information about in the Data Bundles documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added many Tutorial & Documentations updates, including information on
    how to create your own `TradingCalendar`, pass it to your algorithm via the Zipline
    CLI, and how to use custom csv data using the `csvdir` bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline is no longer being tested and packaged for Python 3.4.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline now requests data for SPY, the default benchmark used for Zipline backtests,
    using the [IEX Trading](https://iextrading.com) API, and no longer uses `pandas-datareader`.
    You can run a backtest up to 5 years from the current day using this data.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Grow minute file cache to 1550 by default ([1906](https://github.com/stefan-jansen/zipline/issues/1906))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change default commission to .001 ([1946](https://github.com/stefan-jansen/zipline/issues/1946))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the ability to compute multiple pipelines ([1974](https://github.com/stefan-jansen/zipline/issues/1974))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow users to switch between calendars ([1800](https://github.com/stefan-jansen/zipline/issues/1800))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New filter `NoMissingValues` ([1969](https://github.com/stefan-jansen/zipline/issues/1969))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail better on `AssetFinder(nonexistent_path)` ([2000](https://github.com/stefan-jansen/zipline/issues/2000))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement csvdir bundle ([1860](https://github.com/stefan-jansen/zipline/issues/1860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update quandl_bundle to use Quandl API v3 ([1990](https://github.com/stefan-jansen/zipline/issues/1990))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `FixedBasisPointsSlippage` slippage model ([2047](https://github.com/stefan-jansen/zipline/issues/2047))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create MinLeverage control ([2064](https://github.com/stefan-jansen/zipline/issues/2064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`history` calls with a frequency of `1d` now work when using a Panel as the
    minute data source. ([1920](https://github.com/stefan-jansen/zipline/issues/1920))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check contract exists when using futures daily bar reader ([1892](https://github.com/stefan-jansen/zipline/issues/1892))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoDataBeforeDate` edge cases ([1894](https://github.com/stefan-jansen/zipline/issues/1894))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix frame column validation in Python 2.7.5 ([1954](https://github.com/stefan-jansen/zipline/issues/1954))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix daily history for minute panel data backtest ([1920](https://github.com/stefan-jansen/zipline/issues/1920))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_last_traded_dt` expects a trading day ([2087](https://github.com/stefan-jansen/zipline/issues/2087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily Adjustment perspective fix ([2089](https://github.com/stefan-jansen/zipline/issues/2089))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change algorithm account validation from happening every minute in `handle_data`
    to only occurring once at the end of each day ([1884](https://github.com/stefan-jansen/zipline/issues/1884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blaze core loader performance improvements ([1866](https://github.com/stefan-jansen/zipline/issues/1866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new factor that just computes beta ([2021](https://github.com/stefan-jansen/zipline/issues/2021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduces memory footprint of Quandl WIKI Prices bundle ([2053](https://github.com/stefan-jansen/zipline/issues/2053))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add `CachedObject.expired()` ([1881](https://github.com/stefan-jansen/zipline/issues/1881))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RollingLinearRegressionOfReturns` factor to be window_safe ([1902](https://github.com/stefan-jansen/zipline/issues/1902))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RSI` factor to be window_safe ([1904](https://github.com/stefan-jansen/zipline/issues/1904))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates for better docs generation ([1890](https://github.com/stefan-jansen/zipline/issues/1890))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove and zero out unused treasury curves ([1910](https://github.com/stefan-jansen/zipline/issues/1910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networkx 2 changes the behavior of out_degree ([1996](https://github.com/stefan-jansen/zipline/issues/1996))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass calendars to `DataPortal` ([2026](https://github.com/stefan-jansen/zipline/issues/2026))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove old Yahoo code ([2032](https://github.com/stefan-jansen/zipline/issues/2032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sync and fill benchmarks through latest trading day ([2044](https://github.com/stefan-jansen/zipline/issues/2044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides better error message when QUANDL_API_KEY is missing ([2078](https://github.com/stefan-jansen/zipline/issues/2078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the error message for misaligned dates in Pipeline engine ([2131](https://github.com/stefan-jansen/zipline/issues/2131))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the conda tools we’re using to fix our packaging ([1942](https://github.com/stefan-jansen/zipline/issues/1942))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.2 ([1983](https://github.com/stefan-jansen/zipline/issues/1983))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update conda tooling and remove Python 3.4 builds ([2009](https://github.com/stefan-jansen/zipline/issues/2009))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.3 ([2014](https://github.com/stefan-jansen/zipline/issues/2014))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.4 ([2098](https://github.com/stefan-jansen/zipline/issues/2098))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.4.2 ([2125](https://github.com/stefan-jansen/zipline/issues/2125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Include `MACDSignal` in zipline.io documentation ([1828](https://github.com/stefan-jansen/zipline/issues/1828))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove mentions of Yahoo from the Beginner Tutorial ([1845](https://github.com/stefan-jansen/zipline/issues/1845))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add contributing & questions section to the README ([1889](https://github.com/stefan-jansen/zipline/issues/1889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add info about using a conda envs for installs ([1922](https://github.com/stefan-jansen/zipline/issues/1922))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix Beginner Tutorial link ([1932](https://github.com/stefan-jansen/zipline/issues/1932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add clean docs ([1943](https://github.com/stefan-jansen/zipline/issues/1943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add distinct warnings for benchmark and treasury fetchers ([1971](https://github.com/stefan-jansen/zipline/issues/1971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add CONTRIBUTING.rst ([2033](https://github.com/stefan-jansen/zipline/issues/2033))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add tutorial on creating a custom `TradingCalendar` ([2035](https://github.com/stefan-jansen/zipline/issues/2035))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docs & tutorial updates for ingesting, beginners, and csvdir ([2073](https://github.com/stefan-jansen/zipline/issues/2073))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented the new risk and performance metrics API ([2081](https://github.com/stefan-jansen/zipline/issues/2081)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a typo in the description of `--bundle-timestamp` ([2123](https://github.com/stefan-jansen/zipline/issues/2123))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extensible Risk and Performance Metrics ([2081](https://github.com/stefan-jansen/zipline/issues/2081))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The risk and performance metrics are summarizing values calculated by Zipline
    when running a simulation, for example: returns or Sharpe ratio. 1.1.2 introduces
    a new API for registering custom risk and performance metrics defined by the user.
    We have also made it possible to run a backtest without computing any metrics
    to improve the feedback cycle when debugging an algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [Metrics](risk-and-perf-metrics.html#metrics).
  prefs: []
  type: TYPE_NORMAL
- en: Docs, Trading Calendars, and Benchmarks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline now defaults to using the `quandl` bundle, which you’ll need an API
    Key for, and can find information about in the Data Bundles documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added many Tutorial & Documentations updates, including information on
    how to create your own `TradingCalendar`, pass it to your algorithm via the Zipline
    CLI, and how to use custom csv data using the `csvdir` bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline is no longer being tested and packaged for Python 3.4.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline now requests data for SPY, the default benchmark used for Zipline backtests,
    using the [IEX Trading](https://iextrading.com) API, and no longer uses `pandas-datareader`.
    You can run a backtest up to 5 years from the current day using this data.
  prefs: []
  type: TYPE_NORMAL
- en: Extensible Risk and Performance Metrics ([2081](https://github.com/stefan-jansen/zipline/issues/2081))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The risk and performance metrics are summarizing values calculated by Zipline
    when running a simulation, for example: returns or Sharpe ratio. 1.1.2 introduces
    a new API for registering custom risk and performance metrics defined by the user.
    We have also made it possible to run a backtest without computing any metrics
    to improve the feedback cycle when debugging an algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [Metrics](risk-and-perf-metrics.html#metrics).
  prefs: []
  type: TYPE_NORMAL
- en: Docs, Trading Calendars, and Benchmarks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zipline now defaults to using the `quandl` bundle, which you’ll need an API
    Key for, and can find information about in the Data Bundles documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added many Tutorial & Documentations updates, including information on
    how to create your own `TradingCalendar`, pass it to your algorithm via the Zipline
    CLI, and how to use custom csv data using the `csvdir` bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline is no longer being tested and packaged for Python 3.4.
  prefs: []
  type: TYPE_NORMAL
- en: Zipline now requests data for SPY, the default benchmark used for Zipline backtests,
    using the [IEX Trading](https://iextrading.com) API, and no longer uses `pandas-datareader`.
    You can run a backtest up to 5 years from the current day using this data.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Grow minute file cache to 1550 by default ([1906](https://github.com/stefan-jansen/zipline/issues/1906))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change default commission to .001 ([1946](https://github.com/stefan-jansen/zipline/issues/1946))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the ability to compute multiple pipelines ([1974](https://github.com/stefan-jansen/zipline/issues/1974))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow users to switch between calendars ([1800](https://github.com/stefan-jansen/zipline/issues/1800))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New filter `NoMissingValues` ([1969](https://github.com/stefan-jansen/zipline/issues/1969))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail better on `AssetFinder(nonexistent_path)` ([2000](https://github.com/stefan-jansen/zipline/issues/2000))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement csvdir bundle ([1860](https://github.com/stefan-jansen/zipline/issues/1860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update quandl_bundle to use Quandl API v3 ([1990](https://github.com/stefan-jansen/zipline/issues/1990))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `FixedBasisPointsSlippage` slippage model ([2047](https://github.com/stefan-jansen/zipline/issues/2047))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create MinLeverage control ([2064](https://github.com/stefan-jansen/zipline/issues/2064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`history` calls with a frequency of `1d` now work when using a Panel as the
    minute data source. ([1920](https://github.com/stefan-jansen/zipline/issues/1920))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check contract exists when using futures daily bar reader ([1892](https://github.com/stefan-jansen/zipline/issues/1892))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoDataBeforeDate` edge cases ([1894](https://github.com/stefan-jansen/zipline/issues/1894))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix frame column validation in Python 2.7.5 ([1954](https://github.com/stefan-jansen/zipline/issues/1954))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix daily history for minute panel data backtest ([1920](https://github.com/stefan-jansen/zipline/issues/1920))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_last_traded_dt` expects a trading day ([2087](https://github.com/stefan-jansen/zipline/issues/2087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily Adjustment perspective fix ([2089](https://github.com/stefan-jansen/zipline/issues/2089))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change algorithm account validation from happening every minute in `handle_data`
    to only occurring once at the end of each day ([1884](https://github.com/stefan-jansen/zipline/issues/1884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blaze core loader performance improvements ([1866](https://github.com/stefan-jansen/zipline/issues/1866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new factor that just computes beta ([2021](https://github.com/stefan-jansen/zipline/issues/2021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduces memory footprint of Quandl WIKI Prices bundle ([2053](https://github.com/stefan-jansen/zipline/issues/2053))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add `CachedObject.expired()` ([1881](https://github.com/stefan-jansen/zipline/issues/1881))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RollingLinearRegressionOfReturns` factor to be window_safe ([1902](https://github.com/stefan-jansen/zipline/issues/1902))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `RSI` factor to be window_safe ([1904](https://github.com/stefan-jansen/zipline/issues/1904))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates for better docs generation ([1890](https://github.com/stefan-jansen/zipline/issues/1890))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove and zero out unused treasury curves ([1910](https://github.com/stefan-jansen/zipline/issues/1910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networkx 2 changes the behavior of out_degree ([1996](https://github.com/stefan-jansen/zipline/issues/1996))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass calendars to `DataPortal` ([2026](https://github.com/stefan-jansen/zipline/issues/2026))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove old Yahoo code ([2032](https://github.com/stefan-jansen/zipline/issues/2032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sync and fill benchmarks through latest trading day ([2044](https://github.com/stefan-jansen/zipline/issues/2044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides better error message when QUANDL_API_KEY is missing ([2078](https://github.com/stefan-jansen/zipline/issues/2078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the error message for misaligned dates in Pipeline engine ([2131](https://github.com/stefan-jansen/zipline/issues/2131))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the conda tools we’re using to fix our packaging ([1942](https://github.com/stefan-jansen/zipline/issues/1942))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.2 ([1983](https://github.com/stefan-jansen/zipline/issues/1983))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update conda tooling and remove Python 3.4 builds ([2009](https://github.com/stefan-jansen/zipline/issues/2009))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.3 ([2014](https://github.com/stefan-jansen/zipline/issues/2014))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.3.4 ([2098](https://github.com/stefan-jansen/zipline/issues/2098))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade empyrical to 0.4.2 ([2125](https://github.com/stefan-jansen/zipline/issues/2125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Include `MACDSignal` in zipline.io documentation ([1828](https://github.com/stefan-jansen/zipline/issues/1828))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove mentions of Yahoo from the Beginner Tutorial ([1845](https://github.com/stefan-jansen/zipline/issues/1845))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add contributing & questions section to the README ([1889](https://github.com/stefan-jansen/zipline/issues/1889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add info about using a conda envs for installs ([1922](https://github.com/stefan-jansen/zipline/issues/1922))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix Beginner Tutorial link ([1932](https://github.com/stefan-jansen/zipline/issues/1932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add clean docs ([1943](https://github.com/stefan-jansen/zipline/issues/1943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add distinct warnings for benchmark and treasury fetchers ([1971](https://github.com/stefan-jansen/zipline/issues/1971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add CONTRIBUTING.rst ([2033](https://github.com/stefan-jansen/zipline/issues/2033))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add tutorial on creating a custom `TradingCalendar` ([2035](https://github.com/stefan-jansen/zipline/issues/2035))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docs & tutorial updates for ingesting, beginners, and csvdir ([2073](https://github.com/stefan-jansen/zipline/issues/2073))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented the new risk and performance metrics API ([2081](https://github.com/stefan-jansen/zipline/issues/2081)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a typo in the description of `--bundle-timestamp` ([2123](https://github.com/stefan-jansen/zipline/issues/2123))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Release 1.1.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 5, 2017
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now has broad support for futures, in addition to equities. It’s also
    being tested and packaged for Python 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw breaking changes occur from Yahoo changing their API endpoint, thus
    preventing users from downloading benchmark data needed for backtests. Since that
    change, we have swapped out Yahoo-related benchmarking code with references to
    Google Finance and have removed all deprecated Yahoo code, including the usage
    of custom Yahoo bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a property for BarData to know about current session’s minutes ([1713](https://github.com/stefan-jansen/zipline/issues/1713))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a better error message for non-existent root symbols ([1715:](https://github.com/stefan-jansen/zipline/issues/1715:))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `StaticSids` Pipeline Filter ([1717](https://github.com/stefan-jansen/zipline/issues/1717))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows `zipline.data.data_portal.DataPortal.get_spot_value` to accept multiple
    assets ([1719](https://github.com/stefan-jansen/zipline/issues/1719))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `ContinuousFuture` to `lookup_generic` ([1718](https://github.com/stefan-jansen/zipline/issues/1718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds CFE Adhoc Holidays to `exchange_calendar_cfe` ([1698](https://github.com/stefan-jansen/zipline/issues/1698))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows overriding of order amount rounding ([1722](https://github.com/stefan-jansen/zipline/issues/1722))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes continuous future adjustment style an argument ([1726](https://github.com/stefan-jansen/zipline/issues/1726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds preliminary support for Futures slippage and commission models ([1738](https://github.com/stefan-jansen/zipline/issues/1738))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug in cost basis calculation and change all mentions of `sid` to `asset`
    ([1757](https://github.com/stefan-jansen/zipline/issues/1757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add slippage and commission models for futures ([1748](https://github.com/stefan-jansen/zipline/issues/1748))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Python 3.5 in our Dockerfile ([1806](https://github.com/stefan-jansen/zipline/issues/1806))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow pipelines to be run in chunks ([1811](https://github.com/stefan-jansen/zipline/issues/1811))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds get_range to BenchmarkSource ([1815](https://github.com/stefan-jansen/zipline/issues/1815))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for relabeling classifiers in Pipeline ([1833](https://github.com/stefan-jansen/zipline/issues/1833))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes a floating point division issue in `zipline.data.minute_bars` by using
    integer divison instead ([1683](https://github.com/stefan-jansen/zipline/issues/1683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorts data in `zipline.pipeline.loaders.blaze.core` on `asof_date` to resolve
    timestamp conflicts ([1710](https://github.com/stefan-jansen/zipline/issues/1710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swapped out Yahoo for Google Finance benchmark data ([1812](https://github.com/stefan-jansen/zipline/issues/1812))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gold and silver futures contracts only traded during certain months ([1779](https://github.com/stefan-jansen/zipline/issues/1779))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug in TradingCalendar initialization when we use tzaware datetimes ([1802](https://github.com/stefan-jansen/zipline/issues/1802))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes precision issues on futures prices when rounding ([1788](https://github.com/stefan-jansen/zipline/issues/1788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoid repeated recursive calls when getting forward-filled close price ([1735](https://github.com/stefan-jansen/zipline/issues/1735))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds linter recommendations to adjustments module ([1712](https://github.com/stefan-jansen/zipline/issues/1712))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clears up naming and logic in resample close ([1728](https://github.com/stefan-jansen/zipline/issues/1728))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use March quarterly cycle for several continuous futures ([1762](https://github.com/stefan-jansen/zipline/issues/1762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use better repr for Transaction objects ([1746](https://github.com/stefan-jansen/zipline/issues/1746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorten repr for Asset objects ([1786](https://github.com/stefan-jansen/zipline/issues/1786))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes usage of empyrical’s information ratio ([1854](https://github.com/stefan-jansen/zipline/issues/1854))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Python 3.5 packages ([1701](https://github.com/stefan-jansen/zipline/issues/1701))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap conda-build arguments so we don’t build packages on every CI build ([1813](https://github.com/stefan-jansen/zipline/issues/1813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Zipline Development Guidelines, for people to read about how to contribute
    to zipline ([1820](https://github.com/stefan-jansen/zipline/issues/1820))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show exchange as required for equities ([1731](https://github.com/stefan-jansen/zipline/issues/1731))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates the Zipline Beginner Tutorial notebook ([1707](https://github.com/stefan-jansen/zipline/issues/1707))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes PipelineEngine, pipeline Term, Factors, and other pipeline things to
    docs ([1826](https://github.com/stefan-jansen/zipline/issues/1826))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use csv market data with `run_algorithm` so we don’t try to download data for
    tests ([1793](https://github.com/stefan-jansen/zipline/issues/1793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates Dockerfile to use Python 3.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now has broad support for futures, in addition to equities. It’s also
    being tested and packaged for Python 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw breaking changes occur from Yahoo changing their API endpoint, thus
    preventing users from downloading benchmark data needed for backtests. Since that
    change, we have swapped out Yahoo-related benchmarking code with references to
    Google Finance and have removed all deprecated Yahoo code, including the usage
    of custom Yahoo bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a property for BarData to know about current session’s minutes ([1713](https://github.com/stefan-jansen/zipline/issues/1713))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a better error message for non-existent root symbols ([1715:](https://github.com/stefan-jansen/zipline/issues/1715:))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `StaticSids` Pipeline Filter ([1717](https://github.com/stefan-jansen/zipline/issues/1717))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows `zipline.data.data_portal.DataPortal.get_spot_value` to accept multiple
    assets ([1719](https://github.com/stefan-jansen/zipline/issues/1719))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `ContinuousFuture` to `lookup_generic` ([1718](https://github.com/stefan-jansen/zipline/issues/1718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds CFE Adhoc Holidays to `exchange_calendar_cfe` ([1698](https://github.com/stefan-jansen/zipline/issues/1698))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows overriding of order amount rounding ([1722](https://github.com/stefan-jansen/zipline/issues/1722))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes continuous future adjustment style an argument ([1726](https://github.com/stefan-jansen/zipline/issues/1726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds preliminary support for Futures slippage and commission models ([1738](https://github.com/stefan-jansen/zipline/issues/1738))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug in cost basis calculation and change all mentions of `sid` to `asset`
    ([1757](https://github.com/stefan-jansen/zipline/issues/1757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add slippage and commission models for futures ([1748](https://github.com/stefan-jansen/zipline/issues/1748))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Python 3.5 in our Dockerfile ([1806](https://github.com/stefan-jansen/zipline/issues/1806))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow pipelines to be run in chunks ([1811](https://github.com/stefan-jansen/zipline/issues/1811))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds get_range to BenchmarkSource ([1815](https://github.com/stefan-jansen/zipline/issues/1815))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for relabeling classifiers in Pipeline ([1833](https://github.com/stefan-jansen/zipline/issues/1833))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes a floating point division issue in `zipline.data.minute_bars` by using
    integer divison instead ([1683](https://github.com/stefan-jansen/zipline/issues/1683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorts data in `zipline.pipeline.loaders.blaze.core` on `asof_date` to resolve
    timestamp conflicts ([1710](https://github.com/stefan-jansen/zipline/issues/1710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swapped out Yahoo for Google Finance benchmark data ([1812](https://github.com/stefan-jansen/zipline/issues/1812))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gold and silver futures contracts only traded during certain months ([1779](https://github.com/stefan-jansen/zipline/issues/1779))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug in TradingCalendar initialization when we use tzaware datetimes ([1802](https://github.com/stefan-jansen/zipline/issues/1802))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes precision issues on futures prices when rounding ([1788](https://github.com/stefan-jansen/zipline/issues/1788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoid repeated recursive calls when getting forward-filled close price ([1735](https://github.com/stefan-jansen/zipline/issues/1735))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds linter recommendations to adjustments module ([1712](https://github.com/stefan-jansen/zipline/issues/1712))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clears up naming and logic in resample close ([1728](https://github.com/stefan-jansen/zipline/issues/1728))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use March quarterly cycle for several continuous futures ([1762](https://github.com/stefan-jansen/zipline/issues/1762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use better repr for Transaction objects ([1746](https://github.com/stefan-jansen/zipline/issues/1746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorten repr for Asset objects ([1786](https://github.com/stefan-jansen/zipline/issues/1786))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes usage of empyrical’s information ratio ([1854](https://github.com/stefan-jansen/zipline/issues/1854))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Python 3.5 packages ([1701](https://github.com/stefan-jansen/zipline/issues/1701))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap conda-build arguments so we don’t build packages on every CI build ([1813](https://github.com/stefan-jansen/zipline/issues/1813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds Zipline Development Guidelines, for people to read about how to contribute
    to zipline ([1820](https://github.com/stefan-jansen/zipline/issues/1820))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show exchange as required for equities ([1731](https://github.com/stefan-jansen/zipline/issues/1731))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates the Zipline Beginner Tutorial notebook ([1707](https://github.com/stefan-jansen/zipline/issues/1707))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes PipelineEngine, pipeline Term, Factors, and other pipeline things to
    docs ([1826](https://github.com/stefan-jansen/zipline/issues/1826))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use csv market data with `run_algorithm` so we don’t try to download data for
    tests ([1793](https://github.com/stefan-jansen/zipline/issues/1793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates Dockerfile to use Python 3.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.1.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: March 10, 2017
  prefs: []
  type: TYPE_NORMAL
- en: This release is meant to provide zipline support for pandas 0.18, as well as
    several bug fixes, API changes, and many performance changes.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes the minute bar read catch NoDataOnDate exceptions if dates are not in
    the calendar. Before, the minute bar reader was forward filling, but now it returns
    nan for OHLC and 0 for V. ([1488](https://github.com/stefan-jansen/zipline/issues/1488))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `truncate` method to `BcolzMinuteBarWriter` ([1499](https://github.com/stefan-jansen/zipline/issues/1499))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps up to pandas 0.18.1 and numpy 1.11.1 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds an earnings estimates quarter loader for Pipeline ([1396](https://github.com/stefan-jansen/zipline/issues/1396))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a restricted list manager that takes in information about restricted
    sids and stores in memory upon instantiation ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `last_available{session, minute}` args to `DataPortal` ([1528](https://github.com/stefan-jansen/zipline/issues/1528))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `SpecificAssets` filter ([1530](https://github.com/stefan-jansen/zipline/issues/1530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the ability for an algorithm to request the current contract for a future
    chain ([1529](https://github.com/stefan-jansen/zipline/issues/1529))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `chain` field to current and supporting methods in `DataPortal` and `OrderedContracts`
    ([1538](https://github.com/stefan-jansen/zipline/issues/1538))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds history for continuous futures ([1539](https://github.com/stefan-jansen/zipline/issues/1539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds adjusted history for continuous future ([1548](https://github.com/stefan-jansen/zipline/issues/1548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds roll style which takes the volume of a future contract into account, specifically
    for continuous futures ([1556](https://github.com/stefan-jansen/zipline/issues/1556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds better error message when calling Zipline API functions outside of a running
    simulation ([1593](https://github.com/stefan-jansen/zipline/issues/1593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `MACDSignal()`, `MovingAverageConvergenceDivergenceSignal()`, and `AnnualizedVolatility()`
    as built-in factors. ([1588](https://github.com/stefan-jansen/zipline/issues/1588))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows running pipelines with custom date chunks in `attach_pipeline` ([1617](https://github.com/stefan-jansen/zipline/issues/1617))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `order_batch` to the trade blotter ([1596](https://github.com/stefan-jansen/zipline/issues/1596))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds vectorized lookup_symbol ([1627](https://github.com/stefan-jansen/zipline/issues/1627))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solidifies equality comparisons for SlippageModel classes ([1657](https://github.com/stefan-jansen/zipline/issues/1657))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a factor for winsorized results ([1696](https://github.com/stefan-jansen/zipline/issues/1696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes str to string_types to avoid errors when type checking unicode and not
    str type. ([1315](https://github.com/stefan-jansen/zipline/issues/1315))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Algorithms default to quantopian-quandl bundle when no data source is specified
    ([1479](https://github.com/stefan-jansen/zipline/issues/1479)) ([1374](https://github.com/stefan-jansen/zipline/issues/1374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catches all missing data exceptions when computing dividend ratios ([1507](https://github.com/stefan-jansen/zipline/issues/1507))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates adjustments based on ordered assets instead of a set. Before, adjustments
    were created for estimates based on where assets happened to fall in a set rather
    than using ordered assets ([1547](https://github.com/stefan-jansen/zipline/issues/1547))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes blaze pipeline queries for when users query for the `asof_date` column
    ([1608](https://github.com/stefan-jansen/zipline/issues/1608))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimes should be converted in utc. DataFrames being returned were creating
    US/Eastern timestamps out of the ints, potentially changing the date returned
    to be the date before ([1635](https://github.com/stefan-jansen/zipline/issues/1635))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes default inputs for `IchimokuKinkoHyo` factor ([1638](https://github.com/stefan-jansen/zipline/issues/1638))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removes invocations of `get_calendar('NYSE')` which cuts down zipline import
    time and makes the CLI more responsive and use less memory. ([1471](https://github.com/stefan-jansen/zipline/issues/1471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refcounts and releases pipeline terms when they are no longer needed ([1484](https://github.com/stefan-jansen/zipline/issues/1484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves up to 75% of calls to minute_to_session_label ([1492](https://github.com/stefan-jansen/zipline/issues/1492))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up counting of number of minutes across contiguous session ([1497](https://github.com/stefan-jansen/zipline/issues/1497))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes/defers calls to get_loc on large indices ([1504](https://github.com/stefan-jansen/zipline/issues/1504))
    ([1503](https://github.com/stefan-jansen/zipline/issues/1503))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaces `get_loc` calls in `calc_dividend_ratios` with `get_indexer` ([1510](https://github.com/stefan-jansen/zipline/issues/1510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up minute to session sampling ([1549](https://github.com/stefan-jansen/zipline/issues/1549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds some micro optimizations in `data.current` ([1561](https://github.com/stefan-jansen/zipline/issues/1561))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds optimization for initial workspace for pipelines ([1521](https://github.com/stefan-jansen/zipline/issues/1521))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More memory savings ([1599](https://github.com/stefan-jansen/zipline/issues/1599))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updates leveraged ETF list ([747](https://github.com/stefan-jansen/zipline/issues/747))
    ([1434](https://github.com/stefan-jansen/zipline/issues/1434))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds additional fields to `__getitem__` for Order class ([1483](https://github.com/stefan-jansen/zipline/issues/1483))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `BarReader` base class for minute and session readers ([1486](https://github.com/stefan-jansen/zipline/issues/1486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes `future_chain` API method, to be replaced by `data.current_chain` ([1502](https://github.com/stefan-jansen/zipline/issues/1502))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puts zipline back on blaze master ([1505](https://github.com/stefan-jansen/zipline/issues/1505))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Tini and sets version range for numpy, pandas, and scipy in Dockerfile
    ([1514](https://github.com/stefan-jansen/zipline/issues/1514))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecates `set_do_not_order_list` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses `Timedelta` instead of `DateOffset` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update and pin more dev requirements ([1642](https://github.com/stefan-jansen/zipline/issues/1642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds binary dependency on numpy for empyrical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes old numpy/pandas versions from Travis ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates appveyor.yml for new numpy and pandas ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downgrades to scipy 0.17 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps empyrical to 0.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated example notebook for latest zipline cell magic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds ANACONDA_TOKEN directions ([1589](https://github.com/stefan-jansen/zipline/issues/1589))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changed the short-opt for `--before` in the `zipline clean` entrypoint. The
    new argument is `-e`. The old argument, `-b`, conflicted with the `--bundle` short-opt
    ([1625](https://github.com/stefan-jansen/zipline/issues/1625)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes the minute bar read catch NoDataOnDate exceptions if dates are not in
    the calendar. Before, the minute bar reader was forward filling, but now it returns
    nan for OHLC and 0 for V. ([1488](https://github.com/stefan-jansen/zipline/issues/1488))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `truncate` method to `BcolzMinuteBarWriter` ([1499](https://github.com/stefan-jansen/zipline/issues/1499))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps up to pandas 0.18.1 and numpy 1.11.1 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds an earnings estimates quarter loader for Pipeline ([1396](https://github.com/stefan-jansen/zipline/issues/1396))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a restricted list manager that takes in information about restricted
    sids and stores in memory upon instantiation ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `last_available{session, minute}` args to `DataPortal` ([1528](https://github.com/stefan-jansen/zipline/issues/1528))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `SpecificAssets` filter ([1530](https://github.com/stefan-jansen/zipline/issues/1530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the ability for an algorithm to request the current contract for a future
    chain ([1529](https://github.com/stefan-jansen/zipline/issues/1529))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `chain` field to current and supporting methods in `DataPortal` and `OrderedContracts`
    ([1538](https://github.com/stefan-jansen/zipline/issues/1538))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds history for continuous futures ([1539](https://github.com/stefan-jansen/zipline/issues/1539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds adjusted history for continuous future ([1548](https://github.com/stefan-jansen/zipline/issues/1548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds roll style which takes the volume of a future contract into account, specifically
    for continuous futures ([1556](https://github.com/stefan-jansen/zipline/issues/1556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds better error message when calling Zipline API functions outside of a running
    simulation ([1593](https://github.com/stefan-jansen/zipline/issues/1593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `MACDSignal()`, `MovingAverageConvergenceDivergenceSignal()`, and `AnnualizedVolatility()`
    as built-in factors. ([1588](https://github.com/stefan-jansen/zipline/issues/1588))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows running pipelines with custom date chunks in `attach_pipeline` ([1617](https://github.com/stefan-jansen/zipline/issues/1617))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `order_batch` to the trade blotter ([1596](https://github.com/stefan-jansen/zipline/issues/1596))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds vectorized lookup_symbol ([1627](https://github.com/stefan-jansen/zipline/issues/1627))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solidifies equality comparisons for SlippageModel classes ([1657](https://github.com/stefan-jansen/zipline/issues/1657))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a factor for winsorized results ([1696](https://github.com/stefan-jansen/zipline/issues/1696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes str to string_types to avoid errors when type checking unicode and not
    str type. ([1315](https://github.com/stefan-jansen/zipline/issues/1315))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Algorithms default to quantopian-quandl bundle when no data source is specified
    ([1479](https://github.com/stefan-jansen/zipline/issues/1479)) ([1374](https://github.com/stefan-jansen/zipline/issues/1374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catches all missing data exceptions when computing dividend ratios ([1507](https://github.com/stefan-jansen/zipline/issues/1507))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates adjustments based on ordered assets instead of a set. Before, adjustments
    were created for estimates based on where assets happened to fall in a set rather
    than using ordered assets ([1547](https://github.com/stefan-jansen/zipline/issues/1547))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes blaze pipeline queries for when users query for the `asof_date` column
    ([1608](https://github.com/stefan-jansen/zipline/issues/1608))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimes should be converted in utc. DataFrames being returned were creating
    US/Eastern timestamps out of the ints, potentially changing the date returned
    to be the date before ([1635](https://github.com/stefan-jansen/zipline/issues/1635))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes default inputs for `IchimokuKinkoHyo` factor ([1638](https://github.com/stefan-jansen/zipline/issues/1638))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removes invocations of `get_calendar('NYSE')` which cuts down zipline import
    time and makes the CLI more responsive and use less memory. ([1471](https://github.com/stefan-jansen/zipline/issues/1471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refcounts and releases pipeline terms when they are no longer needed ([1484](https://github.com/stefan-jansen/zipline/issues/1484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves up to 75% of calls to minute_to_session_label ([1492](https://github.com/stefan-jansen/zipline/issues/1492))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up counting of number of minutes across contiguous session ([1497](https://github.com/stefan-jansen/zipline/issues/1497))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes/defers calls to get_loc on large indices ([1504](https://github.com/stefan-jansen/zipline/issues/1504))
    ([1503](https://github.com/stefan-jansen/zipline/issues/1503))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaces `get_loc` calls in `calc_dividend_ratios` with `get_indexer` ([1510](https://github.com/stefan-jansen/zipline/issues/1510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeds up minute to session sampling ([1549](https://github.com/stefan-jansen/zipline/issues/1549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds some micro optimizations in `data.current` ([1561](https://github.com/stefan-jansen/zipline/issues/1561))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds optimization for initial workspace for pipelines ([1521](https://github.com/stefan-jansen/zipline/issues/1521))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More memory savings ([1599](https://github.com/stefan-jansen/zipline/issues/1599))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updates leveraged ETF list ([747](https://github.com/stefan-jansen/zipline/issues/747))
    ([1434](https://github.com/stefan-jansen/zipline/issues/1434))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds additional fields to `__getitem__` for Order class ([1483](https://github.com/stefan-jansen/zipline/issues/1483))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `BarReader` base class for minute and session readers ([1486](https://github.com/stefan-jansen/zipline/issues/1486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes `future_chain` API method, to be replaced by `data.current_chain` ([1502](https://github.com/stefan-jansen/zipline/issues/1502))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puts zipline back on blaze master ([1505](https://github.com/stefan-jansen/zipline/issues/1505))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Tini and sets version range for numpy, pandas, and scipy in Dockerfile
    ([1514](https://github.com/stefan-jansen/zipline/issues/1514))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecates `set_do_not_order_list` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses `Timedelta` instead of `DateOffset` ([1487](https://github.com/stefan-jansen/zipline/issues/1487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update and pin more dev requirements ([1642](https://github.com/stefan-jansen/zipline/issues/1642))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds binary dependency on numpy for empyrical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes old numpy/pandas versions from Travis ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates appveyor.yml for new numpy and pandas ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downgrades to scipy 0.17 ([1339](https://github.com/stefan-jansen/zipline/issues/1339))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps empyrical to 0.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated example notebook for latest zipline cell magic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds ANACONDA_TOKEN directions ([1589](https://github.com/stefan-jansen/zipline/issues/1589))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changed the short-opt for `--before` in the `zipline clean` entrypoint. The
    new argument is `-e`. The old argument, `-b`, conflicted with the `--bundle` short-opt
    ([1625](https://github.com/stefan-jansen/zipline/issues/1625)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.2
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: September 8, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds forward fill checkpoint tables for the blaze core loader. This allow the
    loader to more efficiently forward fill the data by capping the lower date it
    must search for when querying data. The checkpoints should have novel deltas applied
    ([1276](https://github.com/stefan-jansen/zipline/issues/1276)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated VagrantFile to include all dev requirements and use a newer image ([1310](https://github.com/stefan-jansen/zipline/issues/1310)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow correlations and regressions to be computed between two 2D factors by
    doing computations asset-wise ([1307](https://github.com/stefan-jansen/zipline/issues/1307)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters have been made window_safe by default. Now they can be passed in as
    arguments to other Filters, Factors and Classifiers ([1338](https://github.com/stefan-jansen/zipline/issues/1338)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an optional `groupby` parameter to `rank()`, `top()`, and `bottom()`.
    ([1349](https://github.com/stefan-jansen/zipline/issues/1349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filters, [`All`](api-reference.html#zipline.pipeline.filters.All
    "zipline.pipeline.filters.All") and [`Any`](api-reference.html#zipline.pipeline.filters.Any
    "zipline.pipeline.filters.Any"), which takes another filter and returns True if
    an asset produced a True for any/all days in the previous `window_length` days
    ([1358](https://github.com/stefan-jansen/zipline/issues/1358)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filter [`AtLeastN`](api-reference.html#zipline.pipeline.filters.AtLeastN
    "zipline.pipeline.filters.AtLeastN"), which takes another filter and an int N
    and returns True if an asset produced a True on N or more days in the previous
    `window_length` days ([1367](https://github.com/stefan-jansen/zipline/issues/1367)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use external library empyrical for risk calculations. Empyrical unifies risk
    metric calculations between pyfolio and zipline. Empyrical adds custom annualization
    options for returns of custom frequencies. ([855](https://github.com/stefan-jansen/zipline/issues/855))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Aroon factor. ([1258](https://github.com/stefan-jansen/zipline/issues/1258))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fast stochastic oscillator factor. ([1255](https://github.com/stefan-jansen/zipline/issues/1255))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a Dockerfile. ([1254](https://github.com/stefan-jansen/zipline/issues/1254))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New trading calendar which supports sessions which span across midnights, e.g.
    24 hour 6:01PM-6:00PM sessions for futures trading. zipline.utils.tradingcalendar
    is now deprecated. ([1138](https://github.com/stefan-jansen/zipline/issues/1138))
    ([1312](https://github.com/stefan-jansen/zipline/issues/1312))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow slicing a single column out of a Factor/Filter/Classifier. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide Ichimoku Cloud factor ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow default parameters on Pipeline terms. ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide rate of change percentage factor. ([1324](https://github.com/stefan-jansen/zipline/issues/1324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide linear weighted moving average factor. ([1325](https://github.com/stefan-jansen/zipline/issues/1325))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `NotNullFilter`. ([1345](https://github.com/stefan-jansen/zipline/issues/1345))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow capital changes to be defined by a target value. ([1337](https://github.com/stefan-jansen/zipline/issues/1337))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `TrueRange` factor. ([1348](https://github.com/stefan-jansen/zipline/issues/1348))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add point in time lookups to `assets.db`. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make `can_trade` aware of the asset’s exchange . ([1346](https://github.com/stefan-jansen/zipline/issues/1346))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `downsample` method to all computable terms. ([1394](https://github.com/stefan-jansen/zipline/issues/1394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add QuantopianUSFuturesCalendar. ([1414](https://github.com/stefan-jansen/zipline/issues/1414))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable publishing of old `assets.db` versions. ([1430](https://github.com/stefan-jansen/zipline/issues/1430))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable `schedule_function` for Futures trading calendar. ([1442](https://github.com/stefan-jansen/zipline/issues/1442))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallow regressions of length 1\. ([1466](https://github.com/stefan-jansen/zipline/issues/1466))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add support for comingled Future and Equity history windows, and enable other
    Future data access via data portal. ([1435](https://github.com/stefan-jansen/zipline/issues/1435))
    ([1432](https://github.com/stefan-jansen/zipline/issues/1432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume") built-in factor to treat missing
    close or volume values as 0\. Previously, NaNs were simply discarded before averaging,
    giving the remaining values too much weight ([1309](https://github.com/stefan-jansen/zipline/issues/1309)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove risk-free rate from sharpe ratio calculation. The ratio is now the average
    of risk adjusted returns over violatility of adjusted returns. ([853](https://github.com/stefan-jansen/zipline/issues/853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sortino ratio will return calculation instead of np.nan when required returns
    are equal to zero. The ratio now returns the average of risk adjusted returns
    over downside risk. Fixed mislabeled API by converting mar to downside_risk. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downside risk now returns the square root of the mean of downside difference
    squares. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information ratio updated to return mean of risk adjusted returns over standard
    deviation of risk adjusted returns. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alpha and sharpe ratio are now annualized. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix units during reading and writing of daily bar `first_trading_day` attribute.
    ([1245](https://github.com/stefan-jansen/zipline/issues/1245))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dispatch modules, when missing, no longer cause a NameError. ([1246](https://github.com/stefan-jansen/zipline/issues/1246))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat `schedule_function` argument as a time rule when a time rule, but no date
    rule is supplied. ([1221](https://github.com/stefan-jansen/zipline/issues/1221))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect against boundary conditions at beginning and end trading day in schedule
    function. ([1226](https://github.com/stefan-jansen/zipline/issues/1226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply adjustments to previous day when using history with a frequency of 1d.
    ([1256](https://github.com/stefan-jansen/zipline/issues/1256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail fast on invalid pipeline columns, instead of attempting to access the nonexistent
    column. ([1280](https://github.com/stefan-jansen/zipline/issues/1280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `AverageDollarVolume` NaN handling. ([1309](https://github.com/stefan-jansen/zipline/issues/1309))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance improvements to blaze core loader. ([1227](https://github.com/stefan-jansen/zipline/issues/1227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow concurrent blaze queries. ([1323](https://github.com/stefan-jansen/zipline/issues/1323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent missing leading bcolz minute data from doing repeated unnecessary lookups.
    ([1451](https://github.com/stefan-jansen/zipline/issues/1451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache future chain lookups. ([1455](https://github.com/stefan-jansen/zipline/issues/1455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed remaining mentions of `add_history`. ([1287](https://github.com/stefan-jansen/zipline/issues/1287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add test fixture which sources daily pricing data from minute pricing data fixtures.
    ([1243](https://github.com/stefan-jansen/zipline/issues/1243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Format Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`BcolzDailyBarReader` and `BcolzDailyBarWriter` use trading calendar instance,
    instead of trading days serialized to `JSON`. ([1330](https://github.com/stefan-jansen/zipline/issues/1330))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change format of `assets.db` to support point in time lookups. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `BcolzMinuteBarReader``and ``BcolzMinuteBarWriter` to support varying
    tick sizes. ([1428](https://github.com/stefan-jansen/zipline/issues/1428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds forward fill checkpoint tables for the blaze core loader. This allow the
    loader to more efficiently forward fill the data by capping the lower date it
    must search for when querying data. The checkpoints should have novel deltas applied
    ([1276](https://github.com/stefan-jansen/zipline/issues/1276)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated VagrantFile to include all dev requirements and use a newer image ([1310](https://github.com/stefan-jansen/zipline/issues/1310)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow correlations and regressions to be computed between two 2D factors by
    doing computations asset-wise ([1307](https://github.com/stefan-jansen/zipline/issues/1307)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters have been made window_safe by default. Now they can be passed in as
    arguments to other Filters, Factors and Classifiers ([1338](https://github.com/stefan-jansen/zipline/issues/1338)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added an optional `groupby` parameter to `rank()`, `top()`, and `bottom()`.
    ([1349](https://github.com/stefan-jansen/zipline/issues/1349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filters, [`All`](api-reference.html#zipline.pipeline.filters.All
    "zipline.pipeline.filters.All") and [`Any`](api-reference.html#zipline.pipeline.filters.Any
    "zipline.pipeline.filters.Any"), which takes another filter and returns True if
    an asset produced a True for any/all days in the previous `window_length` days
    ([1358](https://github.com/stefan-jansen/zipline/issues/1358)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new pipeline filter [`AtLeastN`](api-reference.html#zipline.pipeline.filters.AtLeastN
    "zipline.pipeline.filters.AtLeastN"), which takes another filter and an int N
    and returns True if an asset produced a True on N or more days in the previous
    `window_length` days ([1367](https://github.com/stefan-jansen/zipline/issues/1367)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use external library empyrical for risk calculations. Empyrical unifies risk
    metric calculations between pyfolio and zipline. Empyrical adds custom annualization
    options for returns of custom frequencies. ([855](https://github.com/stefan-jansen/zipline/issues/855))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Aroon factor. ([1258](https://github.com/stefan-jansen/zipline/issues/1258))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fast stochastic oscillator factor. ([1255](https://github.com/stefan-jansen/zipline/issues/1255))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a Dockerfile. ([1254](https://github.com/stefan-jansen/zipline/issues/1254))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New trading calendar which supports sessions which span across midnights, e.g.
    24 hour 6:01PM-6:00PM sessions for futures trading. zipline.utils.tradingcalendar
    is now deprecated. ([1138](https://github.com/stefan-jansen/zipline/issues/1138))
    ([1312](https://github.com/stefan-jansen/zipline/issues/1312))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow slicing a single column out of a Factor/Filter/Classifier. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide Ichimoku Cloud factor ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow default parameters on Pipeline terms. ([1263](https://github.com/stefan-jansen/zipline/issues/1263))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide rate of change percentage factor. ([1324](https://github.com/stefan-jansen/zipline/issues/1324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide linear weighted moving average factor. ([1325](https://github.com/stefan-jansen/zipline/issues/1325))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `NotNullFilter`. ([1345](https://github.com/stefan-jansen/zipline/issues/1345))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow capital changes to be defined by a target value. ([1337](https://github.com/stefan-jansen/zipline/issues/1337))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `TrueRange` factor. ([1348](https://github.com/stefan-jansen/zipline/issues/1348))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add point in time lookups to `assets.db`. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make `can_trade` aware of the asset’s exchange . ([1346](https://github.com/stefan-jansen/zipline/issues/1346))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `downsample` method to all computable terms. ([1394](https://github.com/stefan-jansen/zipline/issues/1394))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add QuantopianUSFuturesCalendar. ([1414](https://github.com/stefan-jansen/zipline/issues/1414))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable publishing of old `assets.db` versions. ([1430](https://github.com/stefan-jansen/zipline/issues/1430))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable `schedule_function` for Futures trading calendar. ([1442](https://github.com/stefan-jansen/zipline/issues/1442))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallow regressions of length 1\. ([1466](https://github.com/stefan-jansen/zipline/issues/1466))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add support for comingled Future and Equity history windows, and enable other
    Future data access via data portal. ([1435](https://github.com/stefan-jansen/zipline/issues/1435))
    ([1432](https://github.com/stefan-jansen/zipline/issues/1432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume") built-in factor to treat missing
    close or volume values as 0\. Previously, NaNs were simply discarded before averaging,
    giving the remaining values too much weight ([1309](https://github.com/stefan-jansen/zipline/issues/1309)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove risk-free rate from sharpe ratio calculation. The ratio is now the average
    of risk adjusted returns over violatility of adjusted returns. ([853](https://github.com/stefan-jansen/zipline/issues/853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sortino ratio will return calculation instead of np.nan when required returns
    are equal to zero. The ratio now returns the average of risk adjusted returns
    over downside risk. Fixed mislabeled API by converting mar to downside_risk. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downside risk now returns the square root of the mean of downside difference
    squares. ([747](https://github.com/stefan-jansen/zipline/issues/747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information ratio updated to return mean of risk adjusted returns over standard
    deviation of risk adjusted returns. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alpha and sharpe ratio are now annualized. ([1322](https://github.com/stefan-jansen/zipline/issues/1322))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix units during reading and writing of daily bar `first_trading_day` attribute.
    ([1245](https://github.com/stefan-jansen/zipline/issues/1245))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dispatch modules, when missing, no longer cause a NameError. ([1246](https://github.com/stefan-jansen/zipline/issues/1246))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat `schedule_function` argument as a time rule when a time rule, but no date
    rule is supplied. ([1221](https://github.com/stefan-jansen/zipline/issues/1221))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect against boundary conditions at beginning and end trading day in schedule
    function. ([1226](https://github.com/stefan-jansen/zipline/issues/1226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply adjustments to previous day when using history with a frequency of 1d.
    ([1256](https://github.com/stefan-jansen/zipline/issues/1256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail fast on invalid pipeline columns, instead of attempting to access the nonexistent
    column. ([1280](https://github.com/stefan-jansen/zipline/issues/1280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `AverageDollarVolume` NaN handling. ([1309](https://github.com/stefan-jansen/zipline/issues/1309))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance improvements to blaze core loader. ([1227](https://github.com/stefan-jansen/zipline/issues/1227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow concurrent blaze queries. ([1323](https://github.com/stefan-jansen/zipline/issues/1323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent missing leading bcolz minute data from doing repeated unnecessary lookups.
    ([1451](https://github.com/stefan-jansen/zipline/issues/1451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache future chain lookups. ([1455](https://github.com/stefan-jansen/zipline/issues/1455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed remaining mentions of `add_history`. ([1287](https://github.com/stefan-jansen/zipline/issues/1287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add test fixture which sources daily pricing data from minute pricing data fixtures.
    ([1243](https://github.com/stefan-jansen/zipline/issues/1243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Format Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`BcolzDailyBarReader` and `BcolzDailyBarWriter` use trading calendar instance,
    instead of trading days serialized to `JSON`. ([1330](https://github.com/stefan-jansen/zipline/issues/1330))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change format of `assets.db` to support point in time lookups. ([1361](https://github.com/stefan-jansen/zipline/issues/1361))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `BcolzMinuteBarReader``and ``BcolzMinuteBarWriter` to support varying
    tick sizes. ([1428](https://github.com/stefan-jansen/zipline/issues/1428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: May 27, 2016
  prefs: []
  type: TYPE_NORMAL
- en: This is a minor bug-fix release from 1.0.0 and includes a small number of bug
    fixes and documentation improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for user-defined commission models. See the [`zipline.finance.commission.CommissionModel`](api-reference.html#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") class for more details on implementing
    a commision model. ([1213](https://github.com/stefan-jansen/zipline/issues/1213))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for non-float columns to Blaze-backed Pipeline datasets ([1201](https://github.com/stefan-jansen/zipline/issues/1201)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `zipline.pipeline.slice.Slice`, a new pipeline term designed to extract
    a single column from another term. Slices can be created by indexing into a term,
    keyed by asset. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where Pipeline loaders were not properly initialized by [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). This also affected invocations of `zipline run` from
    the CLI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug that caused the `%%zipline` IPython cell magic to fail ([533233fae43c7ff74abfb0044f046978817cb4e4](https://github.com/stefan-jansen/zipline/commit/533233fae43c7ff74abfb0044f046978817cb4e4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in the [`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade") commission model where commissions were
    incorrectly applied to each partial-fill of an order rather than on the order
    itself, resulting in algorithms being charged too much in commissions when placing
    large orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade "zipline.finance.commission.PerTrade")
    now correctly applies commissions on a per-order basis ([1213](https://github.com/stefan-jansen/zipline/issues/1213)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attribute accesses on [`CustomFactors`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor") defining multiple outputs will now correctly
    return an output slice when the output is also the name of a `Factor` method ([1214](https://github.com/stefan-jansen/zipline/issues/1214)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaced deprecated usage of `pandas.io.data` with `pandas_datareader` ([1218](https://github.com/stefan-jansen/zipline/issues/1218)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where `.pyi` stub files for `zipline.api` were accidentally excluded
    from the PyPI source distribution. Conda users should be unaffected ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new example, `zipline.examples.momentum_pipeline`, which exercises the
    Pipeline API ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for user-defined commission models. See the [`zipline.finance.commission.CommissionModel`](api-reference.html#zipline.finance.commission.CommissionModel
    "zipline.finance.commission.CommissionModel") class for more details on implementing
    a commision model. ([1213](https://github.com/stefan-jansen/zipline/issues/1213))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for non-float columns to Blaze-backed Pipeline datasets ([1201](https://github.com/stefan-jansen/zipline/issues/1201)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `zipline.pipeline.slice.Slice`, a new pipeline term designed to extract
    a single column from another term. Slices can be created by indexing into a term,
    keyed by asset. ([1267](https://github.com/stefan-jansen/zipline/issues/1267))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where Pipeline loaders were not properly initialized by [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm"). This also affected invocations of `zipline run` from
    the CLI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug that caused the `%%zipline` IPython cell magic to fail ([533233fae43c7ff74abfb0044f046978817cb4e4](https://github.com/stefan-jansen/zipline/commit/533233fae43c7ff74abfb0044f046978817cb4e4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug in the [`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade
    "zipline.finance.commission.PerTrade") commission model where commissions were
    incorrectly applied to each partial-fill of an order rather than on the order
    itself, resulting in algorithms being charged too much in commissions when placing
    large orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PerTrade`](api-reference.html#zipline.finance.commission.PerTrade "zipline.finance.commission.PerTrade")
    now correctly applies commissions on a per-order basis ([1213](https://github.com/stefan-jansen/zipline/issues/1213)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attribute accesses on [`CustomFactors`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor") defining multiple outputs will now correctly
    return an output slice when the output is also the name of a `Factor` method ([1214](https://github.com/stefan-jansen/zipline/issues/1214)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaced deprecated usage of `pandas.io.data` with `pandas_datareader` ([1218](https://github.com/stefan-jansen/zipline/issues/1218)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where `.pyi` stub files for `zipline.api` were accidentally excluded
    from the PyPI source distribution. Conda users should be unaffected ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new example, `zipline.examples.momentum_pipeline`, which exercises the
    Pipeline API ([1230](https://github.com/stefan-jansen/zipline/issues/1230)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 1.0.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: May 19, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline 1.0 Rewrite ([1105](https://github.com/stefan-jansen/zipline/issues/1105))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have rewritten a lot of Zipline and its basic concepts in order to improve
    runtime performance. At the same time, we’ve introduced several new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, earlier versions of Zipline simulations pulled from a multiplexed
    stream of data sources, which were merged via heapq. This stream was fed to the
    main simulation loop, driving the clock forward. This strong dependency on reading
    all the data made it difficult to optimize simulation performance because there
    was no connection between the amount of data we fetched and the amount of data
    actually used by the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we only fetch data when the algorithm needs it. A new class, [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), dispatches data requests to various data
    sources and returns the requested values. This makes the runtime of a simulation
    scale much more closely with the complexity of the algorithm, rather than with
    the number of assets provided by the data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the data stream driving the clock, now simulations iterate through
    a pre-calculated set of day or minute timestamps. The timestamps are emitted by
    `MinuteSimulationClock` and `DailySimulationClock`, and consumed by the main loop
    in `transform()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve retired the `data[sid(N)]` and `history` APIs, replacing them with several
    methods on the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object: [`current()`](api-reference.html#zipline.protocol.BarData.current "zipline.protocol.BarData.current"),
    [`history()`](api-reference.html#zipline.protocol.BarData.history "zipline.protocol.BarData.history"),
    [`can_trade()`](api-reference.html#zipline.protocol.BarData.can_trade "zipline.protocol.BarData.can_trade"),
    and [`is_stale()`](api-reference.html#zipline.protocol.BarData.is_stale "zipline.protocol.BarData.is_stale").
    Old APIs will continue to work for now, but will issue deprecation warnings.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now pass in an adjustments source to the [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), and we will apply adjustments to the pricing
    data when looking backwards at data. Prices and volumes for execution and presented
    to the algorithm in data.current are the as-traded value of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: New Entry Points ([1173](https://github.com/stefan-jansen/zipline/issues/1173)
    and [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to make it easier to use zipline we have updated the entry points
    for a backtest. The three supported ways to run a backtest are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.run_algo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ zipline run`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%zipline` (IPython magic)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data Bundles ([1173](https://github.com/stefan-jansen/zipline/issues/1173) and
    [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1.0.0 introduces data bundles. Data bundles are groups of data that should be
    preloaded and used to run backtests later. This allows users to not need to specify
    which tickers they are interested in each time they run an algorithm. This also
    allows us to cache the data between runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `quantopian-quandl` bundle will be used which pulls data from
    Quantopian’s mirror of the quandl [WIKI dataset](https://www.quandl.com/data/WIKI).
    New bundles may be registered with [`zipline.data.bundles.register()`](api-reference.html#zipline.data.bundles.register
    "zipline.data.bundles.register") like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This function should retrieve the data it needs and then use the writers that
    have been passed to write that data to disc in a location that zipline can find
    later.
  prefs: []
  type: TYPE_NORMAL
- en: This data can be used in backtests by passing the name as the `-b / --bundle`
    argument to `$ zipline run` or as the `bundle` argument to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: For more information see [Data](bundles.html#data-bundles) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: String Support in Pipeline ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added support for string data in Pipeline. [`zipline.pipeline.data.Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") now accepts `object` as a dtype, which signifies
    that loaders for that column should emit windowed iterators over the experimental
    new `LabelArray` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several new `Classifier` methods have also been added for constructing [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") instances based on string operations. The new methods
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element_of()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`startswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`endswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`has_substring()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`matches()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for string-dtype classifiers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made the data loading classes have more consistent interfaces. This includes
    the equity bar writers, adjustment writer, and asset db writer. The new interface
    is that the resource to be written to is passed at construction time and the data
    to write is provided later to the write method as dataframes or some iterator
    of dataframes. This model allows us to pass these writer objects around as a resource
    for other classes and functions to consume ([1109](https://github.com/stefan-jansen/zipline/issues/1109)
    and [1149](https://github.com/stefan-jansen/zipline/issues/1149)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added masking to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors can now be passed a Filter upon
    instantiation. This tells the factor to only compute over stocks for which the
    filter returns True, rather than always computing over the entire universe of
    stocks. ([1095](https://github.com/stefan-jansen/zipline/issues/1095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.utils.cache.ExpiringCache`](api-reference.html#zipline.utils.cache.ExpiringCache
    "zipline.utils.cache.ExpiringCache"). A cache which wraps entries in a [`zipline.utils.cache.CachedObject`](api-reference.html#zipline.utils.cache.CachedObject
    "zipline.utils.cache.CachedObject"), which manages expiration of entries based
    on the dt supplied to the get method. ([1130](https://github.com/stefan-jansen/zipline/issues/1130))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.factors.RecarrayField`, a new pipeline term designed
    to be the output type of a CustomFactor with multiple outputs. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added optional outputs parameter to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors are now capable of computing
    and returning multiple outputs, each of which are themselves a Factor. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for string-dtype pipeline columns. Loaders for thse columns should
    produce instances of `zipline.lib.labelarray.LabelArray` when traversed. [`latest()`](api-reference.html#zipline.pipeline.data.BoundColumn.latest
    "zipline.pipeline.data.BoundColumn.latest") on string columns produces a string-dtype
    `zipline.pipeline.Classifier`. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added several methods for converting Classifiers into Filters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new methods are: - `element_of()` - `startswith()` - `endswith()` - `has_substring()`
    - `matches()`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for strings. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Added [`BollingerBands`](api-reference.html#zipline.pipeline.factors.BollingerBands
    "zipline.pipeline.factors.BollingerBands") factor. This factor implements the
    Bollinger Bands technical indicator: [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
    ([1199](https://github.com/stefan-jansen/zipline/issues/1199)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetcher has been moved from Quantopian internal code into Zipline ([1105](https://github.com/stefan-jansen/zipline/issues/1105)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`RollingSpearmanOfReturns`](api-reference.html#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns") and [`RollingLinearRegressionOfReturns`](api-reference.html#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns") ([1154](https://github.com/stefan-jansen/zipline/issues/1154))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added a new `zipline.lib.labelarray.LabelArray` class for efficiently representing
    and computing on string data with numpy. This class is conceptually similar to
    [`pandas.Categorical`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Categorical.html#pandas.Categorical
    "(in pandas v2.0.3)"), in that it represents string arrays as arrays of indices
    into a (smaller) array of unique string values. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated documentation for the API methods ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated release process to mention that docs should be built with python 3 ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now provides a [stub file](https://www.python.org/dev/peps/pep-0484/#stub-files)
    for the `zipline.api` module. This module is normally dynamically created so the
    stub file provides some static information for utilities that can consume it,
    for example PyCharm ([1208](https://github.com/stefan-jansen/zipline/issues/1208)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline 1.0 Rewrite ([1105](https://github.com/stefan-jansen/zipline/issues/1105))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have rewritten a lot of Zipline and its basic concepts in order to improve
    runtime performance. At the same time, we’ve introduced several new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, earlier versions of Zipline simulations pulled from a multiplexed
    stream of data sources, which were merged via heapq. This stream was fed to the
    main simulation loop, driving the clock forward. This strong dependency on reading
    all the data made it difficult to optimize simulation performance because there
    was no connection between the amount of data we fetched and the amount of data
    actually used by the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we only fetch data when the algorithm needs it. A new class, [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), dispatches data requests to various data
    sources and returns the requested values. This makes the runtime of a simulation
    scale much more closely with the complexity of the algorithm, rather than with
    the number of assets provided by the data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the data stream driving the clock, now simulations iterate through
    a pre-calculated set of day or minute timestamps. The timestamps are emitted by
    `MinuteSimulationClock` and `DailySimulationClock`, and consumed by the main loop
    in `transform()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve retired the `data[sid(N)]` and `history` APIs, replacing them with several
    methods on the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object: [`current()`](api-reference.html#zipline.protocol.BarData.current "zipline.protocol.BarData.current"),
    [`history()`](api-reference.html#zipline.protocol.BarData.history "zipline.protocol.BarData.history"),
    [`can_trade()`](api-reference.html#zipline.protocol.BarData.can_trade "zipline.protocol.BarData.can_trade"),
    and [`is_stale()`](api-reference.html#zipline.protocol.BarData.is_stale "zipline.protocol.BarData.is_stale").
    Old APIs will continue to work for now, but will issue deprecation warnings.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now pass in an adjustments source to the [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), and we will apply adjustments to the pricing
    data when looking backwards at data. Prices and volumes for execution and presented
    to the algorithm in data.current are the as-traded value of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: New Entry Points ([1173](https://github.com/stefan-jansen/zipline/issues/1173)
    and [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to make it easier to use zipline we have updated the entry points
    for a backtest. The three supported ways to run a backtest are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.run_algo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ zipline run`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%zipline` (IPython magic)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data Bundles ([1173](https://github.com/stefan-jansen/zipline/issues/1173) and
    [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1.0.0 introduces data bundles. Data bundles are groups of data that should be
    preloaded and used to run backtests later. This allows users to not need to specify
    which tickers they are interested in each time they run an algorithm. This also
    allows us to cache the data between runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `quantopian-quandl` bundle will be used which pulls data from
    Quantopian’s mirror of the quandl [WIKI dataset](https://www.quandl.com/data/WIKI).
    New bundles may be registered with [`zipline.data.bundles.register()`](api-reference.html#zipline.data.bundles.register
    "zipline.data.bundles.register") like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This function should retrieve the data it needs and then use the writers that
    have been passed to write that data to disc in a location that zipline can find
    later.
  prefs: []
  type: TYPE_NORMAL
- en: This data can be used in backtests by passing the name as the `-b / --bundle`
    argument to `$ zipline run` or as the `bundle` argument to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: For more information see [Data](bundles.html#data-bundles) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: String Support in Pipeline ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added support for string data in Pipeline. [`zipline.pipeline.data.Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") now accepts `object` as a dtype, which signifies
    that loaders for that column should emit windowed iterators over the experimental
    new `LabelArray` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several new `Classifier` methods have also been added for constructing [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") instances based on string operations. The new methods
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element_of()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`startswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`endswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`has_substring()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`matches()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for string-dtype classifiers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Zipline 1.0 Rewrite ([1105](https://github.com/stefan-jansen/zipline/issues/1105))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have rewritten a lot of Zipline and its basic concepts in order to improve
    runtime performance. At the same time, we’ve introduced several new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, earlier versions of Zipline simulations pulled from a multiplexed
    stream of data sources, which were merged via heapq. This stream was fed to the
    main simulation loop, driving the clock forward. This strong dependency on reading
    all the data made it difficult to optimize simulation performance because there
    was no connection between the amount of data we fetched and the amount of data
    actually used by the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we only fetch data when the algorithm needs it. A new class, [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), dispatches data requests to various data
    sources and returns the requested values. This makes the runtime of a simulation
    scale much more closely with the complexity of the algorithm, rather than with
    the number of assets provided by the data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the data stream driving the clock, now simulations iterate through
    a pre-calculated set of day or minute timestamps. The timestamps are emitted by
    `MinuteSimulationClock` and `DailySimulationClock`, and consumed by the main loop
    in `transform()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve retired the `data[sid(N)]` and `history` APIs, replacing them with several
    methods on the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object: [`current()`](api-reference.html#zipline.protocol.BarData.current "zipline.protocol.BarData.current"),
    [`history()`](api-reference.html#zipline.protocol.BarData.history "zipline.protocol.BarData.history"),
    [`can_trade()`](api-reference.html#zipline.protocol.BarData.can_trade "zipline.protocol.BarData.can_trade"),
    and [`is_stale()`](api-reference.html#zipline.protocol.BarData.is_stale "zipline.protocol.BarData.is_stale").
    Old APIs will continue to work for now, but will issue deprecation warnings.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now pass in an adjustments source to the [`DataPortal`](api-reference.html#zipline.data.data_portal.DataPortal
    "zipline.data.data_portal.DataPortal"), and we will apply adjustments to the pricing
    data when looking backwards at data. Prices and volumes for execution and presented
    to the algorithm in data.current are the as-traded value of the asset.
  prefs: []
  type: TYPE_NORMAL
- en: New Entry Points ([1173](https://github.com/stefan-jansen/zipline/issues/1173)
    and [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to make it easier to use zipline we have updated the entry points
    for a backtest. The three supported ways to run a backtest are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zipline.run_algo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ zipline run`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%zipline` (IPython magic)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data Bundles ([1173](https://github.com/stefan-jansen/zipline/issues/1173) and
    [1178](https://github.com/stefan-jansen/zipline/issues/1178))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 1.0.0 introduces data bundles. Data bundles are groups of data that should be
    preloaded and used to run backtests later. This allows users to not need to specify
    which tickers they are interested in each time they run an algorithm. This also
    allows us to cache the data between runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `quantopian-quandl` bundle will be used which pulls data from
    Quantopian’s mirror of the quandl [WIKI dataset](https://www.quandl.com/data/WIKI).
    New bundles may be registered with [`zipline.data.bundles.register()`](api-reference.html#zipline.data.bundles.register
    "zipline.data.bundles.register") like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This function should retrieve the data it needs and then use the writers that
    have been passed to write that data to disc in a location that zipline can find
    later.
  prefs: []
  type: TYPE_NORMAL
- en: This data can be used in backtests by passing the name as the `-b / --bundle`
    argument to `$ zipline run` or as the `bundle` argument to [`zipline.run_algorithm()`](api-reference.html#zipline.run_algorithm
    "zipline.run_algorithm").
  prefs: []
  type: TYPE_NORMAL
- en: For more information see [Data](bundles.html#data-bundles) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: String Support in Pipeline ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added support for string data in Pipeline. [`zipline.pipeline.data.Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.Column") now accepts `object` as a dtype, which signifies
    that loaders for that column should emit windowed iterators over the experimental
    new `LabelArray` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several new `Classifier` methods have also been added for constructing [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") instances based on string operations. The new methods
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element_of()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`startswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`endswith()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`has_substring()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`matches()`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for string-dtype classifiers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Made the data loading classes have more consistent interfaces. This includes
    the equity bar writers, adjustment writer, and asset db writer. The new interface
    is that the resource to be written to is passed at construction time and the data
    to write is provided later to the write method as dataframes or some iterator
    of dataframes. This model allows us to pass these writer objects around as a resource
    for other classes and functions to consume ([1109](https://github.com/stefan-jansen/zipline/issues/1109)
    and [1149](https://github.com/stefan-jansen/zipline/issues/1149)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added masking to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors can now be passed a Filter upon
    instantiation. This tells the factor to only compute over stocks for which the
    filter returns True, rather than always computing over the entire universe of
    stocks. ([1095](https://github.com/stefan-jansen/zipline/issues/1095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.utils.cache.ExpiringCache`](api-reference.html#zipline.utils.cache.ExpiringCache
    "zipline.utils.cache.ExpiringCache"). A cache which wraps entries in a [`zipline.utils.cache.CachedObject`](api-reference.html#zipline.utils.cache.CachedObject
    "zipline.utils.cache.CachedObject"), which manages expiration of entries based
    on the dt supplied to the get method. ([1130](https://github.com/stefan-jansen/zipline/issues/1130))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.factors.RecarrayField`, a new pipeline term designed
    to be the output type of a CustomFactor with multiple outputs. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added optional outputs parameter to [`zipline.pipeline.CustomFactor`](api-reference.html#zipline.pipeline.CustomFactor
    "zipline.pipeline.CustomFactor"). Custom factors are now capable of computing
    and returning multiple outputs, each of which are themselves a Factor. ([1119](https://github.com/stefan-jansen/zipline/issues/1119))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for string-dtype pipeline columns. Loaders for thse columns should
    produce instances of `zipline.lib.labelarray.LabelArray` when traversed. [`latest()`](api-reference.html#zipline.pipeline.data.BoundColumn.latest
    "zipline.pipeline.data.BoundColumn.latest") on string columns produces a string-dtype
    `zipline.pipeline.Classifier`. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added several methods for converting Classifiers into Filters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new methods are: - `element_of()` - `startswith()` - `endswith()` - `has_substring()`
    - `matches()`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`element_of` is defined for all classifiers. The remaining methods are only
    defined for strings. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Added [`BollingerBands`](api-reference.html#zipline.pipeline.factors.BollingerBands
    "zipline.pipeline.factors.BollingerBands") factor. This factor implements the
    Bollinger Bands technical indicator: [https://en.wikipedia.org/wiki/Bollinger_Bands](https://en.wikipedia.org/wiki/Bollinger_Bands)
    ([1199](https://github.com/stefan-jansen/zipline/issues/1199)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetcher has been moved from Quantopian internal code into Zipline ([1105](https://github.com/stefan-jansen/zipline/issues/1105)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, [`RollingPearsonOfReturns`](api-reference.html#zipline.pipeline.factors.RollingPearsonOfReturns
    "zipline.pipeline.factors.RollingPearsonOfReturns"), [`RollingSpearmanOfReturns`](api-reference.html#zipline.pipeline.factors.RollingSpearmanOfReturns
    "zipline.pipeline.factors.RollingSpearmanOfReturns") and [`RollingLinearRegressionOfReturns`](api-reference.html#zipline.pipeline.factors.RollingLinearRegressionOfReturns
    "zipline.pipeline.factors.RollingLinearRegressionOfReturns") ([1154](https://github.com/stefan-jansen/zipline/issues/1154))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added a new `zipline.lib.labelarray.LabelArray` class for efficiently representing
    and computing on string data with numpy. This class is conceptually similar to
    [`pandas.Categorical`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Categorical.html#pandas.Categorical
    "(in pandas v2.0.3)"), in that it represents string arrays as arrays of indices
    into a (smaller) array of unique string values. ([1174](https://github.com/stefan-jansen/zipline/issues/1174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Updated documentation for the API methods ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated release process to mention that docs should be built with python 3 ([1188](https://github.com/stefan-jansen/zipline/issues/1188)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zipline now provides a [stub file](https://www.python.org/dev/peps/pep-0484/#stub-files)
    for the `zipline.api` module. This module is normally dynamically created so the
    stub file provides some static information for utilities that can consume it,
    for example PyCharm ([1208](https://github.com/stefan-jansen/zipline/issues/1208)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.9.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.9.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: March 29, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added classifiers and normalization methods to pipeline, along with new datasets
    and factors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Windows with continuous integration on AppVeyor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added new datasets `CashBuybackAuthorizations` and `ShareBuybackAuthorizations`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding cash and share buyback authorizations data, respectively, to a new algorithm.
    pandas-based reference implementations for these datasets can be found in `zipline.pipeline.loaders.buyback_auth`,
    and experimental blaze-based implementations can be found in `zipline.pipeline.loaders.blaze.buyback_auth`.
    ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new datasets `DividendsByExDate`, `DividendsByPayDate`, and `DividendsByAnnouncementDate`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding dividends data organized by ex date, pay date, and announcement date, respectively,
    to a new algorithm. pandas-based reference implementations for these datasets
    can be found in `zipline.pipeline.loaders.dividends`, and experimental blaze-based
    implementations can be found in `zipline.pipeline.loaders.blaze.dividends`. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceCashBuybackAuth`
    and `zipline.pipeline.factors.BusinessDaysSinceShareBuybackAuth`. These factors
    use the new `CashBuybackAuthorizations` and `ShareBuybackAuthorizations` datasets,
    respectively. ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceDividendAnnouncement`,
    `zipline.pipeline.factors.BusinessDaysUntilNextExDate`, and `zipline.pipeline.factors.BusinessDaysSincePreviousExDate`.
    These factors use the new `DividendsByAnnouncementDate` and ``DividendsByExDate`
    datasets, respectively. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.Classifier`, a new core pipeline API term representing
    grouping keys. Classifiers are primarily used by passing them as the `groupby`
    parameter to factor normalization methods. ([1046](https://github.com/stefan-jansen/zipline/issues/1046))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added factor normalization methods: [`zipline.pipeline.Factor.demean()`](api-reference.html#zipline.pipeline.Factor.demean
    "zipline.pipeline.Factor.demean") and [`zipline.pipeline.Factor.zscore()`](api-reference.html#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore"). ([1046](https://github.com/stefan-jansen/zipline/issues/1046))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.Factor.quantiles()`](api-reference.html#zipline.pipeline.Factor.quantiles
    "zipline.pipeline.Factor.quantiles"), a method for computing a Classifier from
    a Factor by partitioning into equally-sized buckets. Also added helpers for common
    quantile sizes ([`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), [`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), and [`zipline.pipeline.Factor.deciles()`](api-reference.html#zipline.pipeline.Factor.deciles
    "zipline.pipeline.Factor.deciles")) ([1075](https://github.com/stefan-jansen/zipline/issues/1075)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where merging two numerical expressions failed given too many inputs.
    This caused running a pipeline to fail when combining more than ten factors or
    filters. ([1072](https://github.com/stefan-jansen/zipline/issues/1072))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added AppVeyor for continuous integration on Windows. Added conda build of zipline
    and its dependencies to AppVeyor and Travis builds, which upload their results
    to anaconda.org labeled with “ci”. ([981](https://github.com/stefan-jansen/zipline/issues/981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adds `ZiplineTestCase` which provides hooks to consume test fixtures. Fixtures
    are things like: `WithAssetFinder` which will make `self.asset_finder` available
    to your test with some mock data ([1042](https://github.com/stefan-jansen/zipline/issues/1042)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added classifiers and normalization methods to pipeline, along with new datasets
    and factors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Windows with continuous integration on AppVeyor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added new datasets `CashBuybackAuthorizations` and `ShareBuybackAuthorizations`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding cash and share buyback authorizations data, respectively, to a new algorithm.
    pandas-based reference implementations for these datasets can be found in `zipline.pipeline.loaders.buyback_auth`,
    and experimental blaze-based implementations can be found in `zipline.pipeline.loaders.blaze.buyback_auth`.
    ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new datasets `DividendsByExDate`, `DividendsByPayDate`, and `DividendsByAnnouncementDate`
    for use in the Pipeline API. These datasets provide an abstract interface for
    adding dividends data organized by ex date, pay date, and announcement date, respectively,
    to a new algorithm. pandas-based reference implementations for these datasets
    can be found in `zipline.pipeline.loaders.dividends`, and experimental blaze-based
    implementations can be found in `zipline.pipeline.loaders.blaze.dividends`. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceCashBuybackAuth`
    and `zipline.pipeline.factors.BusinessDaysSinceShareBuybackAuth`. These factors
    use the new `CashBuybackAuthorizations` and `ShareBuybackAuthorizations` datasets,
    respectively. ([1022](https://github.com/stefan-jansen/zipline/issues/1022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysSinceDividendAnnouncement`,
    `zipline.pipeline.factors.BusinessDaysUntilNextExDate`, and `zipline.pipeline.factors.BusinessDaysSincePreviousExDate`.
    These factors use the new `DividendsByAnnouncementDate` and ``DividendsByExDate`
    datasets, respectively. ([1093](https://github.com/stefan-jansen/zipline/issues/1093)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented `zipline.pipeline.Classifier`, a new core pipeline API term representing
    grouping keys. Classifiers are primarily used by passing them as the `groupby`
    parameter to factor normalization methods. ([1046](https://github.com/stefan-jansen/zipline/issues/1046))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added factor normalization methods: [`zipline.pipeline.Factor.demean()`](api-reference.html#zipline.pipeline.Factor.demean
    "zipline.pipeline.Factor.demean") and [`zipline.pipeline.Factor.zscore()`](api-reference.html#zipline.pipeline.Factor.zscore
    "zipline.pipeline.Factor.zscore"). ([1046](https://github.com/stefan-jansen/zipline/issues/1046))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.Factor.quantiles()`](api-reference.html#zipline.pipeline.Factor.quantiles
    "zipline.pipeline.Factor.quantiles"), a method for computing a Classifier from
    a Factor by partitioning into equally-sized buckets. Also added helpers for common
    quantile sizes ([`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), [`zipline.pipeline.Factor.quartiles()`](api-reference.html#zipline.pipeline.Factor.quartiles
    "zipline.pipeline.Factor.quartiles"), and [`zipline.pipeline.Factor.deciles()`](api-reference.html#zipline.pipeline.Factor.deciles
    "zipline.pipeline.Factor.deciles")) ([1075](https://github.com/stefan-jansen/zipline/issues/1075)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug where merging two numerical expressions failed given too many inputs.
    This caused running a pipeline to fail when combining more than ten factors or
    filters. ([1072](https://github.com/stefan-jansen/zipline/issues/1072))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added AppVeyor for continuous integration on Windows. Added conda build of zipline
    and its dependencies to AppVeyor and Travis builds, which upload their results
    to anaconda.org labeled with “ci”. ([981](https://github.com/stefan-jansen/zipline/issues/981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adds `ZiplineTestCase` which provides hooks to consume test fixtures. Fixtures
    are things like: `WithAssetFinder` which will make `self.asset_finder` available
    to your test with some mock data ([1042](https://github.com/stefan-jansen/zipline/issues/1042)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.8.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: February 24, 2016
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AssetFinder`](api-reference.html#zipline.assets.AssetFinder "zipline.assets.assets.AssetFinder")
    speedups ([830](https://github.com/stefan-jansen/zipline/issues/830) and [817](https://github.com/stefan-jansen/zipline/issues/817)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for non-float dtypes in Pipeline. Most notably, we now support
    `datetime64` and `int64` dtypes for `Factor`, and `BoundColumn.latest` now returns
    a proper `Filter` object when the column is of dtype `bool`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipline now supports `numpy` 1.10, `pandas` 0.17, and `scipy` 0.16 ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch transforms have been deprecated and will be removed in a future release.
    Using `history` is recommended as an alternative.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a way for users to provide a context manager to use when executing the
    scheduled functions (including `handle_data`). This context manager will be passed
    the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object for the bar and will be used for the duration of all of the functions scheduled
    to run. This can be passed to `TradingAlgorithm` by the keyword argument `create_event_context`
    ([828](https://github.com/stefan-jansen/zipline/issues/828)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `zipline.pipeline.factors.Factor` instances with `datetime64[ns]`
    dtypes. ([905](https://github.com/stefan-jansen/zipline/issues/905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. This dataset
    provides an abstract interface for adding earnings announcement data to a new
    algorithm. A pandas-based reference implementation for this dataset can be found
    in `zipline.pipeline.loaders.earnings`, and an experimental blaze-based implementation
    can be found in `zipline.pipeline.loaders.blaze.earnings`. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysUntilNextEarnings`
    and `zipline.pipeline.factors.BusinessDaysSincePreviousEarnings`. These factors
    use the new `EarningsCalendar` dataset. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `isnan()`, `notnan()` and `isfinite()` methods to `zipline.pipeline.factors.Factor`
    ([861](https://github.com/stefan-jansen/zipline/issues/861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.factors.Returns`](api-reference.html#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns"), a built-in factor which calculates the percent
    change in close price over the given window_length. ([884](https://github.com/stefan-jansen/zipline/issues/884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added a new built-in factor: [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume"). ([927](https://github.com/stefan-jansen/zipline/issues/927)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`ExponentialWeightedMovingAverage`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingAverage
    "zipline.pipeline.factors.ExponentialWeightedMovingAverage") and [`ExponentialWeightedMovingStdDev`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingStdDev
    "zipline.pipeline.factors.ExponentialWeightedMovingStdDev") factors. ([910](https://github.com/stefan-jansen/zipline/issues/910)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    classes to be subclassed where subclasses inherit all of the columns from the
    parent. These columns will be new sentinels so you can register them a custom
    loader ([924](https://github.com/stefan-jansen/zipline/issues/924)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `coerce()` to coerce inputs from one type into another before passing
    them to the function ([948](https://github.com/stefan-jansen/zipline/issues/948)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `optionally()` to wrap other preprocessor functions to explicitly allow
    `None` ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `ensure_timezone()` to allow string arguments to get converted into [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo
    "(in Python v3.11)") objects. This also allows `tzinfo` objects to be passed directly
    ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added two optional arguments, `data_query_time` and `data_query_tz` to `BlazeLoader`
    and `BlazeEarningsCalendarLoader`. These arguments allow the user to specify some
    cutoff time for data when loading from the resource. For example, if I want to
    simulate executing my `before_trading_start` function at `8:45 US/Eastern` then
    I could pass `datetime.time(8, 45)` and `'US/Eastern'` to the loader. This means
    that data that is timestamped on or after `8:45` will not seen on that day in
    the simulation. The data will be made available on the next day ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoundColumn.latest` now returns a `Filter` for columns of dtype `bool` ([962](https://github.com/stefan-jansen/zipline/issues/962)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `Factor` instances with `int64` dtype. [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.dataset.Column") now requires a `missing_value` when dtype
    is integral. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also now possible to specify custom `missing_value` values for `float`,
    `datetime`, and `bool` Pipeline terms. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added auto-close support for equities. Any positions held in an equity that
    reaches its `auto_close_date` will be liquidated for cash according to the equity’s
    last sale price. Furthermore, any open orders for that equity will be canceled.
    Both futures and equities are now auto-closed on the morning of their `auto_close_date`,
    immediately prior to `before_trading_start`. ([982](https://github.com/stefan-jansen/zipline/issues/982))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for parameterized `Factor` subclasses. Factors may specify `params`
    as a class-level attribute containing a tuple of parameter names. These values
    are then accepted by the constructor and forwarded by name to the factor’s `compute`
    function. This API is experimental, and may change in future releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes an issue that would cause the daily/minutely method caching to change
    the `len` of a `SIDData` object. This would cause us to think that the object
    was not empty even when it was ([826](https://github.com/stefan-jansen/zipline/issues/826)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes an error raised in calculating beta when benchmark data were sparse. Instead
    [`numpy.nan`](https://numpy.org/doc/stable/reference/constants.html#numpy.nan
    "(in NumPy v1.25)") is returned ([859](https://github.com/stefan-jansen/zipline/issues/859)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue pickling `sentinel()` objects ([872](https://github.com/stefan-jansen/zipline/issues/872)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed spurious warnings on first download of treasury data (:issue 922).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the error messages for [`set_commission()`](api-reference.html#zipline.api.set_commission
    "zipline.api.set_commission") and [`set_slippage()`](api-reference.html#zipline.api.set_slippage
    "zipline.api.set_slippage") when used outside of the `initialize` function. These
    errors called the functions `override_*` instead of `set_*`. This also renamed
    the exception types raised from `OverrideSlippagePostInit` and `OverrideCommissionPostInit`
    to `SetSlippagePostInit` and `SetCommissionPostInit` ([923](https://github.com/stefan-jansen/zipline/issues/923)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue in the CLI that would cause assets to be added twice. This would
    map the same symbol to two different sids ([942](https://github.com/stefan-jansen/zipline/issues/942)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where the `PerformancePeriod` incorrectly reported the total_positions_value
    when creating a [`Account`](api-reference.html#zipline.protocol.Account "zipline.protocol.Account")
    ([950](https://github.com/stefan-jansen/zipline/issues/950)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed issues around KeyErrors coming from history and BarData on 32-bit python,
    where Assets did not compare properly with int64s ([959](https://github.com/stefan-jansen/zipline/issues/959)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where boolean operators were not properly implemented on [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") ([991](https://github.com/stefan-jansen/zipline/issues/991)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of zipline no longer downgrades numpy to 1.9.2 silently and unconditionally
    ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Speeds up `lookup_symbol()` by adding an extension, `AssetFinderCachedEquities`,
    that loads equities into dictionaries and then directs `lookup_symbol()` to these
    dictionaries to find matching equities ([830](https://github.com/stefan-jansen/zipline/issues/830)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `lookup_symbol()` by performing batched queries. ([817](https://github.com/stefan-jansen/zipline/issues/817)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Asset databases now contain version information to ensure compatibility with
    current Zipline version ([815](https://github.com/stefan-jansen/zipline/issues/815)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `requests` version to 2.9.1 ([2ee40db](https://github.com/stefan-jansen/zipline/commit/2ee40db))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `logbook` version to 0.12.5 ([11465d9](https://github.com/stefan-jansen/zipline/commit/11465d9)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `Cython` version to 0.23.4 ([5f49fa2](https://github.com/stefan-jansen/zipline/commit/5f49fa2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes zipline install requirements more flexible ([825](https://github.com/stefan-jansen/zipline/issues/825)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `versioneer` to manage the project `__version__` and setup.py version ([829](https://github.com/stefan-jansen/zipline/issues/829)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed coveralls integration on travis build ([840](https://github.com/stefan-jansen/zipline/issues/840)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed conda build, which now uses git source as its source and reads requirements
    using setup.py, instead of copying them and letting them get out of sync ([937](https://github.com/stefan-jansen/zipline/issues/937)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Require `setuptools` > 18.0 ([951](https://github.com/stefan-jansen/zipline/issues/951)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Document the release process for developers ([835](https://github.com/stefan-jansen/zipline/issues/835)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for the Pipeline API. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for Asset Metadata APIs. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated documentation now includes links to source code for many classes and
    functions. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added platform-specific documentation describing how to find binary dependencies.
    ([883](https://github.com/stefan-jansen/zipline/issues/883)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a `show_graph()` method to render a Pipeline as an image ([836](https://github.com/stefan-jansen/zipline/issues/836)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `subtest()` decorator for creating subtests without `nose_parameterized.expand()`
    which bloats the test output ([833](https://github.com/stefan-jansen/zipline/issues/833)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits timer report in test output to 15 longest tests ([838](https://github.com/stefan-jansen/zipline/issues/838)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treasury and benchmark downloads will now wait up to an hour to download again
    if data returned from a remote source does not extend to the date expected. ([841](https://github.com/stefan-jansen/zipline/issues/841)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a tool to downgrade the assets db to previous versions ([941](https://github.com/stefan-jansen/zipline/issues/941)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AssetFinder`](api-reference.html#zipline.assets.AssetFinder "zipline.assets.assets.AssetFinder")
    speedups ([830](https://github.com/stefan-jansen/zipline/issues/830) and [817](https://github.com/stefan-jansen/zipline/issues/817)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for non-float dtypes in Pipeline. Most notably, we now support
    `datetime64` and `int64` dtypes for `Factor`, and `BoundColumn.latest` now returns
    a proper `Filter` object when the column is of dtype `bool`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipline now supports `numpy` 1.10, `pandas` 0.17, and `scipy` 0.16 ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch transforms have been deprecated and will be removed in a future release.
    Using `history` is recommended as an alternative.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adds a way for users to provide a context manager to use when executing the
    scheduled functions (including `handle_data`). This context manager will be passed
    the [`BarData`](api-reference.html#zipline.protocol.BarData "zipline.protocol.BarData")
    object for the bar and will be used for the duration of all of the functions scheduled
    to run. This can be passed to `TradingAlgorithm` by the keyword argument `create_event_context`
    ([828](https://github.com/stefan-jansen/zipline/issues/828)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `zipline.pipeline.factors.Factor` instances with `datetime64[ns]`
    dtypes. ([905](https://github.com/stefan-jansen/zipline/issues/905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a new `EarningsCalendar` dataset for use in the Pipeline API. This dataset
    provides an abstract interface for adding earnings announcement data to a new
    algorithm. A pandas-based reference implementation for this dataset can be found
    in `zipline.pipeline.loaders.earnings`, and an experimental blaze-based implementation
    can be found in `zipline.pipeline.loaders.blaze.earnings`. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new built-in factors, `zipline.pipeline.factors.BusinessDaysUntilNextEarnings`
    and `zipline.pipeline.factors.BusinessDaysSincePreviousEarnings`. These factors
    use the new `EarningsCalendar` dataset. ([905](https://github.com/stefan-jansen/zipline/issues/905)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `isnan()`, `notnan()` and `isfinite()` methods to `zipline.pipeline.factors.Factor`
    ([861](https://github.com/stefan-jansen/zipline/issues/861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`zipline.pipeline.factors.Returns`](api-reference.html#zipline.pipeline.factors.Returns
    "zipline.pipeline.factors.Returns"), a built-in factor which calculates the percent
    change in close price over the given window_length. ([884](https://github.com/stefan-jansen/zipline/issues/884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added a new built-in factor: [`AverageDollarVolume`](api-reference.html#zipline.pipeline.factors.AverageDollarVolume
    "zipline.pipeline.factors.AverageDollarVolume"). ([927](https://github.com/stefan-jansen/zipline/issues/927)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`ExponentialWeightedMovingAverage`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingAverage
    "zipline.pipeline.factors.ExponentialWeightedMovingAverage") and [`ExponentialWeightedMovingStdDev`](api-reference.html#zipline.pipeline.factors.ExponentialWeightedMovingStdDev
    "zipline.pipeline.factors.ExponentialWeightedMovingStdDev") factors. ([910](https://github.com/stefan-jansen/zipline/issues/910)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`DataSet`](api-reference.html#zipline.pipeline.data.DataSet "zipline.pipeline.data.DataSet")
    classes to be subclassed where subclasses inherit all of the columns from the
    parent. These columns will be new sentinels so you can register them a custom
    loader ([924](https://github.com/stefan-jansen/zipline/issues/924)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `coerce()` to coerce inputs from one type into another before passing
    them to the function ([948](https://github.com/stefan-jansen/zipline/issues/948)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `optionally()` to wrap other preprocessor functions to explicitly allow
    `None` ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `ensure_timezone()` to allow string arguments to get converted into [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo
    "(in Python v3.11)") objects. This also allows `tzinfo` objects to be passed directly
    ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added two optional arguments, `data_query_time` and `data_query_tz` to `BlazeLoader`
    and `BlazeEarningsCalendarLoader`. These arguments allow the user to specify some
    cutoff time for data when loading from the resource. For example, if I want to
    simulate executing my `before_trading_start` function at `8:45 US/Eastern` then
    I could pass `datetime.time(8, 45)` and `'US/Eastern'` to the loader. This means
    that data that is timestamped on or after `8:45` will not seen on that day in
    the simulation. The data will be made available on the next day ([947](https://github.com/stefan-jansen/zipline/issues/947)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoundColumn.latest` now returns a `Filter` for columns of dtype `bool` ([962](https://github.com/stefan-jansen/zipline/issues/962)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for `Factor` instances with `int64` dtype. [`Column`](api-reference.html#zipline.pipeline.data.Column
    "zipline.pipeline.data.dataset.Column") now requires a `missing_value` when dtype
    is integral. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also now possible to specify custom `missing_value` values for `float`,
    `datetime`, and `bool` Pipeline terms. ([962](https://github.com/stefan-jansen/zipline/issues/962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added auto-close support for equities. Any positions held in an equity that
    reaches its `auto_close_date` will be liquidated for cash according to the equity’s
    last sale price. Furthermore, any open orders for that equity will be canceled.
    Both futures and equities are now auto-closed on the morning of their `auto_close_date`,
    immediately prior to `before_trading_start`. ([982](https://github.com/stefan-jansen/zipline/issues/982))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Added support for parameterized `Factor` subclasses. Factors may specify `params`
    as a class-level attribute containing a tuple of parameter names. These values
    are then accepted by the constructor and forwarded by name to the factor’s `compute`
    function. This API is experimental, and may change in future releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixes an issue that would cause the daily/minutely method caching to change
    the `len` of a `SIDData` object. This would cause us to think that the object
    was not empty even when it was ([826](https://github.com/stefan-jansen/zipline/issues/826)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes an error raised in calculating beta when benchmark data were sparse. Instead
    [`numpy.nan`](https://numpy.org/doc/stable/reference/constants.html#numpy.nan
    "(in NumPy v1.25)") is returned ([859](https://github.com/stefan-jansen/zipline/issues/859)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue pickling `sentinel()` objects ([872](https://github.com/stefan-jansen/zipline/issues/872)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed spurious warnings on first download of treasury data (:issue 922).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrected the error messages for [`set_commission()`](api-reference.html#zipline.api.set_commission
    "zipline.api.set_commission") and [`set_slippage()`](api-reference.html#zipline.api.set_slippage
    "zipline.api.set_slippage") when used outside of the `initialize` function. These
    errors called the functions `override_*` instead of `set_*`. This also renamed
    the exception types raised from `OverrideSlippagePostInit` and `OverrideCommissionPostInit`
    to `SetSlippagePostInit` and `SetCommissionPostInit` ([923](https://github.com/stefan-jansen/zipline/issues/923)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue in the CLI that would cause assets to be added twice. This would
    map the same symbol to two different sids ([942](https://github.com/stefan-jansen/zipline/issues/942)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed an issue where the `PerformancePeriod` incorrectly reported the total_positions_value
    when creating a [`Account`](api-reference.html#zipline.protocol.Account "zipline.protocol.Account")
    ([950](https://github.com/stefan-jansen/zipline/issues/950)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed issues around KeyErrors coming from history and BarData on 32-bit python,
    where Assets did not compare properly with int64s ([959](https://github.com/stefan-jansen/zipline/issues/959)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug where boolean operators were not properly implemented on [`Filter`](api-reference.html#zipline.pipeline.Filter
    "zipline.pipeline.Filter") ([991](https://github.com/stefan-jansen/zipline/issues/991)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of zipline no longer downgrades numpy to 1.9.2 silently and unconditionally
    ([969](https://github.com/stefan-jansen/zipline/issues/969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Speeds up `lookup_symbol()` by adding an extension, `AssetFinderCachedEquities`,
    that loads equities into dictionaries and then directs `lookup_symbol()` to these
    dictionaries to find matching equities ([830](https://github.com/stefan-jansen/zipline/issues/830)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `lookup_symbol()` by performing batched queries. ([817](https://github.com/stefan-jansen/zipline/issues/817)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Asset databases now contain version information to ensure compatibility with
    current Zipline version ([815](https://github.com/stefan-jansen/zipline/issues/815)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `requests` version to 2.9.1 ([2ee40db](https://github.com/stefan-jansen/zipline/commit/2ee40db))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `logbook` version to 0.12.5 ([11465d9](https://github.com/stefan-jansen/zipline/commit/11465d9)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade `Cython` version to 0.23.4 ([5f49fa2](https://github.com/stefan-jansen/zipline/commit/5f49fa2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Makes zipline install requirements more flexible ([825](https://github.com/stefan-jansen/zipline/issues/825)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `versioneer` to manage the project `__version__` and setup.py version ([829](https://github.com/stefan-jansen/zipline/issues/829)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed coveralls integration on travis build ([840](https://github.com/stefan-jansen/zipline/issues/840)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed conda build, which now uses git source as its source and reads requirements
    using setup.py, instead of copying them and letting them get out of sync ([937](https://github.com/stefan-jansen/zipline/issues/937)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Require `setuptools` > 18.0 ([951](https://github.com/stefan-jansen/zipline/issues/951)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Document the release process for developers ([835](https://github.com/stefan-jansen/zipline/issues/835)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for the Pipeline API. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added reference docs for Asset Metadata APIs. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated documentation now includes links to source code for many classes and
    functions. ([864](https://github.com/stefan-jansen/zipline/issues/864)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added platform-specific documentation describing how to find binary dependencies.
    ([883](https://github.com/stefan-jansen/zipline/issues/883)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added a `show_graph()` method to render a Pipeline as an image ([836](https://github.com/stefan-jansen/zipline/issues/836)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds `subtest()` decorator for creating subtests without `nose_parameterized.expand()`
    which bloats the test output ([833](https://github.com/stefan-jansen/zipline/issues/833)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits timer report in test output to 15 longest tests ([838](https://github.com/stefan-jansen/zipline/issues/838)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treasury and benchmark downloads will now wait up to an hour to download again
    if data returned from a remote source does not extend to the date expected. ([841](https://github.com/stefan-jansen/zipline/issues/841)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a tool to downgrade the assets db to previous versions ([941](https://github.com/stefan-jansen/zipline/issues/941)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.8.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.3
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: November 6, 2015
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We advanced the version to `0.8.3` to fix a source distribution issue with pypi.
    There are no code changes in this version.
  prefs: []
  type: TYPE_NORMAL
- en: Release 0.8.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.8.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: November 6, 2015
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New documentation system with a new website at [zipline.io](https://www.zipline.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major performance enhancements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New user defined method: `before_trading_start`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_max_leverage()`](api-reference.html#zipline.api.set_max_leverage
    "zipline.api.set_max_leverage").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_do_not_order_list()`](api-reference.html#zipline.api.set_do_not_order_list
    "zipline.api.set_do_not_order_list").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for trading futures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Account object: Adds an account object to context to track information about
    the trading account. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns the settled cash value that is stored on the account object. This value
    is updated accordingly as the algorithm is run ([396](https://github.com/stefan-jansen/zipline/issues/396)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`HistoryContainer` can now grow dynamically. Calls to `history()` will now
    be able to increase the size or change the shape of the history container to be
    able to service the call. `add_history()` now acts as a preformance hint to pre-allocate
    sufficient space in the container. This change is backwards compatible with `history`,
    all existing algorithms should continue to work as intended ([412](https://github.com/stefan-jansen/zipline/issues/412)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simple transforms ported from quantopian and use history. `SIDData` now has
    methods for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stddev`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mavg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vwap`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`returns`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These methods, except for `returns`, accept a number of days. If you are running
    with minute data, then this will calculate the number of minutes in those days,
    accounting for early closes and the current time and apply the transform over
    the set of minutes. `returns` takes no parameters and will return the daily returns
    of the given asset. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([429](https://github.com/stefan-jansen/zipline/issues/429)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New fields in Performance Period. Performance Period has new fields accessible
    in return value of `to_dict`: - gross leverage - net leverage - short exposure
    - long exposure - shorts count - longs count ([464](https://github.com/stefan-jansen/zipline/issues/464)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`order_percent()`](api-reference.html#zipline.api.order_percent "zipline.api.order_percent")
    to work with various market values (by Jeremiah Lowin).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Currently, [`order_percent()`](api-reference.html#zipline.api.order_percent
    "zipline.api.order_percent") and [`order_target_percent()`](api-reference.html#zipline.api.order_target_percent
    "zipline.api.order_target_percent") both operate as a percentage of `self.portfolio.portfolio_value`.
    This PR lets them operate as percentages of other important MVs. Also adds `context.get_market_value()`,
    which enables this functionality. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([477](https://github.com/stefan-jansen/zipline/issues/477)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Command line option to for printing algo to stdout (by Andrea D’Amore) ([545](https://github.com/stefan-jansen/zipline/issues/545)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New user defined function `before_trading_start`. This function can be overridden
    by the user to be called once before the market opens every day ([389](https://github.com/stefan-jansen/zipline/issues/389)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function"). This function allows the user to schedule a
    function to be called based on more complicated rules about the date and time.
    For example, call the function 15 minutes before market close respecting early
    closes ([411](https://github.com/stefan-jansen/zipline/issues/411)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function `set_do_not_order_list()`. This function accepts a list of
    assets and adds a trading guard that prevents the algorithm from trading them.
    Adds a list point in time list of leveraged ETFs that people may want to mark
    as ‘do not trade’ ([478](https://github.com/stefan-jansen/zipline/issues/478)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a class for representing securities. [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") and other order functions now require an instance of `Security`
    instead of an int or string ([520](https://github.com/stefan-jansen/zipline/issues/520)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalize the `Security` class to [`Asset`](api-reference.html#zipline.assets.Asset
    "zipline.assets.Asset"). This is in preperation of adding support for other asset
    types ([535](https://github.com/stefan-jansen/zipline/issues/535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment"). This function by default returns the string `'zipline'`.
    This is used so that algorithms can have different behavior on Quantopian and
    local zipline ([384](https://github.com/stefan-jansen/zipline/issues/384)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extends [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment") to expose more of the environment to the algorithm.
    The function now accepts an argument that is the field to return. By default,
    this is `''platform''` which returns the old value of `''zipline''` but the following
    new fields can be requested:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''''arena''`: Is this live trading or backtesting?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''data_frequency''`: Is this minute mode or daily mode?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''start''`: Simulation start date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''end''`: Simulation end date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''capital_base''`: The starting capital for the simulation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''platform''`: The platform that the algorithm is running on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''*''`: A dictionary containing all of these fields.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ([449](https://github.com/stefan-jansen/zipline/issues/449)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New api function `set_max_leveraged()`. This method adds a trading guard that
    prevents your algorithm from over leveraging itself ([552](https://github.com/stefan-jansen/zipline/issues/552)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Adds new Pipeline API. The pipeline API is a high-level declarative API for
    representing trailing window computations on large datasets ([630](https://github.com/stefan-jansen/zipline/issues/630)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for futures trading ([637](https://github.com/stefan-jansen/zipline/issues/637)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Pipeline loader for blaze expressions. This allows users to pull data from
    any format blaze understands and use it in the Pipeline API. ([775](https://github.com/stefan-jansen/zipline/issues/775)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix a bug where the reported returns could sharply dip for random periods of
    time ([378](https://github.com/stefan-jansen/zipline/issues/378)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that prevented debuggers from resolving the algorithm file ([431](https://github.com/stefan-jansen/zipline/issues/431)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properly forward arguments to user defined `initialize` function ([687](https://github.com/stefan-jansen/zipline/issues/687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause treasury data to be redownloaded every backtest between
    midnight EST and the time when the treasury data was available ([793](https://github.com/stefan-jansen/zipline/issues/793)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause the user defined `analyze` function to not be called
    if it was passed as a keyword argument to `TradingAlgorithm` ([819](https://github.com/stefan-jansen/zipline/issues/819)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major performance enhancements to history (by Dale Jung) ([488](https://github.com/stefan-jansen/zipline/issues/488)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove simple transform code. These are available as methods of `SIDData` ([550](https://github.com/stefan-jansen/zipline/issues/550)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Switched to sphinx for the documentation ([816](https://github.com/stefan-jansen/zipline/issues/816)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New documentation system with a new website at [zipline.io](https://www.zipline.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major performance enhancements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New user defined method: `before_trading_start`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_max_leverage()`](api-reference.html#zipline.api.set_max_leverage
    "zipline.api.set_max_leverage").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New api function: [`set_do_not_order_list()`](api-reference.html#zipline.api.set_do_not_order_list
    "zipline.api.set_do_not_order_list").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for trading futures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Account object: Adds an account object to context to track information about
    the trading account. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns the settled cash value that is stored on the account object. This value
    is updated accordingly as the algorithm is run ([396](https://github.com/stefan-jansen/zipline/issues/396)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`HistoryContainer` can now grow dynamically. Calls to `history()` will now
    be able to increase the size or change the shape of the history container to be
    able to service the call. `add_history()` now acts as a preformance hint to pre-allocate
    sufficient space in the container. This change is backwards compatible with `history`,
    all existing algorithms should continue to work as intended ([412](https://github.com/stefan-jansen/zipline/issues/412)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simple transforms ported from quantopian and use history. `SIDData` now has
    methods for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stddev`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mavg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vwap`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`returns`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These methods, except for `returns`, accept a number of days. If you are running
    with minute data, then this will calculate the number of minutes in those days,
    accounting for early closes and the current time and apply the transform over
    the set of minutes. `returns` takes no parameters and will return the daily returns
    of the given asset. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([429](https://github.com/stefan-jansen/zipline/issues/429)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New fields in Performance Period. Performance Period has new fields accessible
    in return value of `to_dict`: - gross leverage - net leverage - short exposure
    - long exposure - shorts count - longs count ([464](https://github.com/stefan-jansen/zipline/issues/464)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow [`order_percent()`](api-reference.html#zipline.api.order_percent "zipline.api.order_percent")
    to work with various market values (by Jeremiah Lowin).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Currently, [`order_percent()`](api-reference.html#zipline.api.order_percent
    "zipline.api.order_percent") and [`order_target_percent()`](api-reference.html#zipline.api.order_target_percent
    "zipline.api.order_target_percent") both operate as a percentage of `self.portfolio.portfolio_value`.
    This PR lets them operate as percentages of other important MVs. Also adds `context.get_market_value()`,
    which enables this functionality. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([477](https://github.com/stefan-jansen/zipline/issues/477)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Command line option to for printing algo to stdout (by Andrea D’Amore) ([545](https://github.com/stefan-jansen/zipline/issues/545)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New user defined function `before_trading_start`. This function can be overridden
    by the user to be called once before the market opens every day ([389](https://github.com/stefan-jansen/zipline/issues/389)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`schedule_function()`](api-reference.html#zipline.api.schedule_function
    "zipline.api.schedule_function"). This function allows the user to schedule a
    function to be called based on more complicated rules about the date and time.
    For example, call the function 15 minutes before market close respecting early
    closes ([411](https://github.com/stefan-jansen/zipline/issues/411)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function `set_do_not_order_list()`. This function accepts a list of
    assets and adds a trading guard that prevents the algorithm from trading them.
    Adds a list point in time list of leveraged ETFs that people may want to mark
    as ‘do not trade’ ([478](https://github.com/stefan-jansen/zipline/issues/478)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a class for representing securities. [`order()`](api-reference.html#zipline.api.order
    "zipline.api.order") and other order functions now require an instance of `Security`
    instead of an int or string ([520](https://github.com/stefan-jansen/zipline/issues/520)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalize the `Security` class to [`Asset`](api-reference.html#zipline.assets.Asset
    "zipline.assets.Asset"). This is in preperation of adding support for other asset
    types ([535](https://github.com/stefan-jansen/zipline/issues/535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New api function [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment"). This function by default returns the string `'zipline'`.
    This is used so that algorithms can have different behavior on Quantopian and
    local zipline ([384](https://github.com/stefan-jansen/zipline/issues/384)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extends [`get_environment()`](api-reference.html#zipline.api.get_environment
    "zipline.api.get_environment") to expose more of the environment to the algorithm.
    The function now accepts an argument that is the field to return. By default,
    this is `''platform''` which returns the old value of `''zipline''` but the following
    new fields can be requested:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''''arena''`: Is this live trading or backtesting?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''data_frequency''`: Is this minute mode or daily mode?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''start''`: Simulation start date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''end''`: Simulation end date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''capital_base''`: The starting capital for the simulation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''platform''`: The platform that the algorithm is running on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''*''`: A dictionary containing all of these fields.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ([449](https://github.com/stefan-jansen/zipline/issues/449)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New api function `set_max_leveraged()`. This method adds a trading guard that
    prevents your algorithm from over leveraging itself ([552](https://github.com/stefan-jansen/zipline/issues/552)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experimental Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Experimental features are subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: Adds new Pipeline API. The pipeline API is a high-level declarative API for
    representing trailing window computations on large datasets ([630](https://github.com/stefan-jansen/zipline/issues/630)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for futures trading ([637](https://github.com/stefan-jansen/zipline/issues/637)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds Pipeline loader for blaze expressions. This allows users to pull data from
    any format blaze understands and use it in the Pipeline API. ([775](https://github.com/stefan-jansen/zipline/issues/775)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix a bug where the reported returns could sharply dip for random periods of
    time ([378](https://github.com/stefan-jansen/zipline/issues/378)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that prevented debuggers from resolving the algorithm file ([431](https://github.com/stefan-jansen/zipline/issues/431)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properly forward arguments to user defined `initialize` function ([687](https://github.com/stefan-jansen/zipline/issues/687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause treasury data to be redownloaded every backtest between
    midnight EST and the time when the treasury data was available ([793](https://github.com/stefan-jansen/zipline/issues/793)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix a bug that would cause the user defined `analyze` function to not be called
    if it was passed as a keyword argument to `TradingAlgorithm` ([819](https://github.com/stefan-jansen/zipline/issues/819)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major performance enhancements to history (by Dale Jung) ([488](https://github.com/stefan-jansen/zipline/issues/488)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove simple transform code. These are available as methods of `SIDData` ([550](https://github.com/stefan-jansen/zipline/issues/550)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Switched to sphinx for the documentation ([816](https://github.com/stefan-jansen/zipline/issues/816)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release 0.7.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.7.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: July 25, 2014
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Command line interface to run algorithms directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPython Magic `%%zipline` that runs algorithm defined in an IPython notebook
    cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API methods for building safeguards against runaway ordering and undesired short
    positions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New history() function to get a moving DataFrame of past market data (replaces
    BatchTransform).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new [beginner tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CLI: Adds a CLI and IPython magic for zipline. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Grabs the data from yahoo finance, runs the file dual_moving_avg.py (and looks
    for `dual_moving_avg_analyze.py` which, if found, will be executed after the algorithm
    has been run), and outputs the perf `DataFrame` to `dma.pickle` ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IPython magic command (at the top of an IPython notebook cell). Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Does the same as above except instead of executing the file looks for the algorithm
    in the cell and instead of outputting the perf df to a file, creates a variable
    in the namespace called perf ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds Trading Controls to the algorithm API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following functions are now available on `TradingAlgorithm` and for algo
    scripts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set_max_order_size(self, sid=None, max_shares=None, max_notional=None)` Set
    a limit on the absolute magnitude, in shares and/or total dollar value, of any
    single order placed by this algorithm for a given sid. If `sid` is None, then
    the rule is applied to any order placed by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_max_position_size(self, sid=None, max_shares=None, max_notional=None)`
    -Set a limit on the absolute magnitude, in either shares or dollar value, of any
    position held by the algorithm for a given sid. If `sid` is None, then the rule
    is applied to any position held by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_long_only(self)` Set a rule specifying that the algorithm may not hold
    short positions. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([329](https://github.com/stefan-jansen/zipline/issues/329)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds an `all_api_methods` classmethod on `TradingAlgorithm` that returns a list
    of all `TradingAlgorithm` API methods ([333](https://github.com/stefan-jansen/zipline/issues/333)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expanded record() functionality for dynamic naming. The record() function can
    now take positional args before the kwargs. All original usage and functionality
    is the same, but now these extra usages will work:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The requirements are simply that the poritional args occur only before the kwargs
    ([355](https://github.com/stefan-jansen/zipline/issues/355)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: history() has been ported from Quantopian to Zipline and provides moving window
    of market data. history() replaces BatchTransform. It is faster, works for minute
    level data and has a superior interface. To use it, call `add_history()` inside
    of `initialize()` and then receive a pandas `DataFrame` by calling history() from
    inside `handle_data()`. Check out the [tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb)
    and an [example](https://github.com/quantopian/zipline/blob/master/zipline/examples/dual_moving_average.py).
    ([345](https://github.com/stefan-jansen/zipline/issues/345) and [357](https://github.com/stefan-jansen/zipline/issues/357)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: history() now supports `1m` window lengths ([345](https://github.com/stefan-jansen/zipline/issues/345)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix alignment of trading days and open and closes in trading environment ([331](https://github.com/stefan-jansen/zipline/issues/331)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RollingPanel fix when adding/dropping new fields ([349](https://github.com/stefan-jansen/zipline/issues/349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed undocumented and untested HDF5 and CSV data sources ([267](https://github.com/stefan-jansen/zipline/issues/267)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor sim_params ([352](https://github.com/stefan-jansen/zipline/issues/352)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring of history ([340](https://github.com/stefan-jansen/zipline/issues/340)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following dependencies have been updated (zipline might work with other
    versions too):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Command line interface to run algorithms directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPython Magic `%%zipline` that runs algorithm defined in an IPython notebook
    cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API methods for building safeguards against runaway ordering and undesired short
    positions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New history() function to get a moving DataFrame of past market data (replaces
    BatchTransform).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new [beginner tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CLI: Adds a CLI and IPython magic for zipline. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Grabs the data from yahoo finance, runs the file dual_moving_avg.py (and looks
    for `dual_moving_avg_analyze.py` which, if found, will be executed after the algorithm
    has been run), and outputs the perf `DataFrame` to `dma.pickle` ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IPython magic command (at the top of an IPython notebook cell). Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Does the same as above except instead of executing the file looks for the algorithm
    in the cell and instead of outputting the perf df to a file, creates a variable
    in the namespace called perf ([325](https://github.com/stefan-jansen/zipline/issues/325)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds Trading Controls to the algorithm API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following functions are now available on `TradingAlgorithm` and for algo
    scripts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set_max_order_size(self, sid=None, max_shares=None, max_notional=None)` Set
    a limit on the absolute magnitude, in shares and/or total dollar value, of any
    single order placed by this algorithm for a given sid. If `sid` is None, then
    the rule is applied to any order placed by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_max_position_size(self, sid=None, max_shares=None, max_notional=None)`
    -Set a limit on the absolute magnitude, in either shares or dollar value, of any
    position held by the algorithm for a given sid. If `sid` is None, then the rule
    is applied to any position held by the algorithm. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set_long_only(self)` Set a rule specifying that the algorithm may not hold
    short positions. Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ([329](https://github.com/stefan-jansen/zipline/issues/329)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adds an `all_api_methods` classmethod on `TradingAlgorithm` that returns a list
    of all `TradingAlgorithm` API methods ([333](https://github.com/stefan-jansen/zipline/issues/333)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expanded record() functionality for dynamic naming. The record() function can
    now take positional args before the kwargs. All original usage and functionality
    is the same, but now these extra usages will work:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The requirements are simply that the poritional args occur only before the kwargs
    ([355](https://github.com/stefan-jansen/zipline/issues/355)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: history() has been ported from Quantopian to Zipline and provides moving window
    of market data. history() replaces BatchTransform. It is faster, works for minute
    level data and has a superior interface. To use it, call `add_history()` inside
    of `initialize()` and then receive a pandas `DataFrame` by calling history() from
    inside `handle_data()`. Check out the [tutorial](http://nbviewer.ipython.org/github/quantopian/zipline/blob/master/docs/tutorial.ipynb)
    and an [example](https://github.com/quantopian/zipline/blob/master/zipline/examples/dual_moving_average.py).
    ([345](https://github.com/stefan-jansen/zipline/issues/345) and [357](https://github.com/stefan-jansen/zipline/issues/357)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: history() now supports `1m` window lengths ([345](https://github.com/stefan-jansen/zipline/issues/345)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fix alignment of trading days and open and closes in trading environment ([331](https://github.com/stefan-jansen/zipline/issues/331)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RollingPanel fix when adding/dropping new fields ([349](https://github.com/stefan-jansen/zipline/issues/349)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed undocumented and untested HDF5 and CSV data sources ([267](https://github.com/stefan-jansen/zipline/issues/267)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor sim_params ([352](https://github.com/stefan-jansen/zipline/issues/352)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring of history ([340](https://github.com/stefan-jansen/zipline/issues/340)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following dependencies have been updated (zipline might work with other
    versions too):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Release 0.6.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.6.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:'
  prefs: []
  type: TYPE_NORMAL
- en: April 23, 2014
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major fixes to risk calculations, see Bug Fixes section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port of `history()` function, see Enhancements section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start of support for Quantopian algorithm script-syntax, see ENH section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conda package manager support, see Build section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always process new orders i.e. on bars where `handle_data` isn’t called, but
    there is ‘clock’ data e.g. a consistent benchmark, process orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty positions are now filtered from the portfolio container. To help prevent
    algorithms from operating on positions that are not in the existing universe of
    stocks. Formerly, iterating over positions would return positions for stocks which
    had zero shares held. (Where an explicit check in algorithm code for `pos.amount
    != 0` could prevent from using a non-existent position.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add trading calendar for BMF&Bovespa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add beginning of algo script support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starts on the path of parity with the script syntax in Quantopian’s IDE on
    [https://quantopian.com](https://quantopian.com) Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add HDF5 and CSV sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit `handle_data` to times with market data. To prevent cases where custom
    data types had unaligned timestamps, only call `handle_data` when market data
    passes through. Custom data that comes before market data will still update the
    data bar. But the handling of that data will only be done when there is actionable
    market data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended commission PerShare method to allow a minimum cost per trade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add symbol api function A `symbol()` lookup feature was added to Quantopian.
    By adding the same API function to zipline we can make copy&pasting of a Zipline
    algo to Quantopian easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add simulated random trade source. Added a new data source that emits events
    with certain user-specified frequency (minute or daily). This allows users to
    backtest and debug an algorithm in minute mode to provide a cleaner path towards
    Quantopian.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remove dependency on benchmark for trading day calendar. Instead of the benchmarks’
    index, the trading calendar is now used to populate the environment’s trading
    days. Remove `extra_date` field, since unlike the benchmarks list, the trading
    calendar can generate future dates, so dates for current day trading do not need
    to be appended. Motivations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source for the open and close/early close calendar and the trading day calendar
    is now the same, which should help prevent potential issues due to misalignment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows configurations where the benchmark is provided as a generator based data
    source to need to supply a second benchmark list just to populate dates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Port `history()` API method from Quantopian. Opens the core of the `history()`
    function that was previously only available on the Quantopian platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The history method is analoguous to the `batch_transform` function/decorator,
    but with a hopefully more precise specification of the frequency and period of
    the previous bar data that is captured. Example usage:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: N.B. this version of history lacks the backfilling capability that allows the
    return a full DataFrame on the first bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adjust benchmark events to match market hours ([241](https://github.com/stefan-jansen/zipline/issues/241)).
    Previously benchmark events were emitted at 0:00 on the day the benchmark related
    to: in ‘minute’ emission mode this meant that the benchmarks were emitted before
    any intra-day trades were processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure perf stats are generated for all days When running with minutely emissions
    the simulator would report to the user that it simulated ‘n - 1’ days (where n
    is the number of days specified in the simulation params). Now the correct number
    of trading days are reported as being simulated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix repr for cumulative risk metrics. The `__repr__` for RiskMetricsCumulative
    was referring to an older structure of the class, causing an exception when printed.
    Also, now prints the last values in the metrics DataFrame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent minute emission from crashing at end of available data. The next day
    calculation was causing an error when a minute emission algorithm reached the
    end of available data. Instead of a generic exception when available data is reached,
    raise and catch a named exception so that the tradesimulation loop can skip over,
    since the next market close is not needed at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix pandas indexing in trading calendar. This could alternatively be filed under
    Performance. Index using loc instead of the inefficient index-ing of day, then
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent crash in vwap transform due to non-existent member. The WrongDataForTransform
    was referencing a `self.fields` member, which did not exist. Add a self.fields
    member set to `price` and `volume` and use it to iterate over during the check.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix max drawdown calculation. The input into max drawdown was incorrect, causing
    the bad results. i.e. the `compounded_log_returns` were not values representative
    of the algorithms total return at a given time, though `calculate_max_drawdown`
    was treating the values as if they were. Instead, the `algorithm_period_returns`
    series is now used, which does provide the total return.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix cost basis calculation. Cost basis calculation now takes direction of txn
    into account. Closing a long position or covering a short shouldn’t affect the
    cost basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix floating point error in `order()`. Where order amounts that were near an
    integer could accidentally be floored or ceilinged (depending on being postive
    or negative) to the wrong integer. e.g. an amount stored internally as -27.99999
    was converted to -27 instead of -28.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update perf period state when positions are changed by splits. Otherwise, `self._position_amounts`
    will be out of sync with position.amount, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix misalignment of downside series calc when using exact dates. An oddity that
    was exposed while working on making the return series passed to the risk module
    more exact, the series comparison between the returns and mean returns was unbalanced,
    because the mean returns were not masked down to the downside data points; however,
    in most, if not all cases this was papered over by the call to `.valid()` which
    was removed in this change set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that self.logger exists before using it. `self.logger` is initialized
    as `None` and there is no guarantee that users have set it, so check that it exists
    before trying to pass messages to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent out of sync market closes in performance tracker. In situations where
    the performance tracker has been reset or patched to handle state juggling with
    warming up live data, the `market_close` member of the performance tracker could
    end up out of sync with the current algo time as determined by the performance
    tracker. The symptom was dividends never triggering, because the end of day checks
    would not match the current time. Fix by having the tradesimulation loop be responsible,
    in minute/minute mode, for advancing the market close and passing that value to
    the performance tracker, instead of having the market close advanced by the performance
    tracker as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix numerous cumulative and period risk calculations. The calculations that
    are expected to change are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.beta`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.alpha`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.information`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.sharpe`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`period.sortino`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How Risk Calculations Are Changing Risk Fixes for Both Period and Cumulative
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Downside Risk
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population for standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a rounding factor, so that if the two values are close for a given dt, that
    they do not count as a downside value, which would throw off the denominator of
    the standard deviation of the downside diffs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Standard Deviation Type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Across the board the standard deviation has been standardized to using a ‘sample’
    calculation, whereas before cumulative risk was mostly using ‘population’. Using
    `ddof=1` with `np.std` calculates as if the values are a sample.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cumulative Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Beta
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the daily algorithm returns and benchmarks instead of annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Volatility
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population with standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The volatility is an input to other calculations so this change affects Sharpe
    and Information ratio calculations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Information Ratio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Alpha
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Period Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sortino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now uses the downside risk of the daily return vs. the mean algorithm returns
    for the minimum acceptable return instead of the treasury return.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The above required adding the calculation of the mean algorithm returns for
    period risk.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, uses `algorithm_period_returns` and `tresaury_period_return` as the cumulative
    Sortino does, instead of using algorithm returns for both inputs into the Sortino
    calculation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed `alias_dt` transform in favor of property on SIDData. Adding a copy
    of the Event’s dt field as datetime via the `alias_dt` generator, so that the
    API was forgiving and allowed both datetime and dt on a SIDData object, was creating
    noticeable overhead, even on an noop algorithms. Instead of incurring the cost
    of copying the datetime value and assigning it to the Event object on every event
    that is passed through the system, add a property to SIDData which acts as an
    alias `datetime` to `dt`. Eventually support for `data['foo'].datetime` may be
    removed, and could be considered deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the drop of ‘null return’ from cumulative returns. The check of existence
    of the null return key, and the drop of said return on every single bar was adding
    unneeded CPU time when an algorithm was run with minute emissions. Instead, add
    the 0.0 return with an index of the trading day before the start date. The removal
    of the `null return` was mainly in place so that the period calculation was not
    crashing on a non-date index value; with the index as a date, the period return
    can also approximate volatility (even though the that volatility has high noise-to-signal
    strength because it uses only two values as an input.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Allow `sim_params` to provide data frequency for the algorithm. In the case
    that `data_frequency` of the algorithm is None, allow the `sim_params` to provide
    the `data_frequency`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, defer to the algorithms data frequency, if provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for building and releasing via conda For those who prefer building
    with [https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/) to compiling
    locally with pip. The following should install Zipline on many systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Major fixes to risk calculations, see Bug Fixes section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port of `history()` function, see Enhancements section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start of support for Quantopian algorithm script-syntax, see ENH section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conda package manager support, see Build section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always process new orders i.e. on bars where `handle_data` isn’t called, but
    there is ‘clock’ data e.g. a consistent benchmark, process orders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty positions are now filtered from the portfolio container. To help prevent
    algorithms from operating on positions that are not in the existing universe of
    stocks. Formerly, iterating over positions would return positions for stocks which
    had zero shares held. (Where an explicit check in algorithm code for `pos.amount
    != 0` could prevent from using a non-existent position.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add trading calendar for BMF&Bovespa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add beginning of algo script support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starts on the path of parity with the script syntax in Quantopian’s IDE on
    [https://quantopian.com](https://quantopian.com) Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add HDF5 and CSV sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit `handle_data` to times with market data. To prevent cases where custom
    data types had unaligned timestamps, only call `handle_data` when market data
    passes through. Custom data that comes before market data will still update the
    data bar. But the handling of that data will only be done when there is actionable
    market data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended commission PerShare method to allow a minimum cost per trade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add symbol api function A `symbol()` lookup feature was added to Quantopian.
    By adding the same API function to zipline we can make copy&pasting of a Zipline
    algo to Quantopian easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add simulated random trade source. Added a new data source that emits events
    with certain user-specified frequency (minute or daily). This allows users to
    backtest and debug an algorithm in minute mode to provide a cleaner path towards
    Quantopian.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remove dependency on benchmark for trading day calendar. Instead of the benchmarks’
    index, the trading calendar is now used to populate the environment’s trading
    days. Remove `extra_date` field, since unlike the benchmarks list, the trading
    calendar can generate future dates, so dates for current day trading do not need
    to be appended. Motivations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source for the open and close/early close calendar and the trading day calendar
    is now the same, which should help prevent potential issues due to misalignment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows configurations where the benchmark is provided as a generator based data
    source to need to supply a second benchmark list just to populate dates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Port `history()` API method from Quantopian. Opens the core of the `history()`
    function that was previously only available on the Quantopian platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The history method is analoguous to the `batch_transform` function/decorator,
    but with a hopefully more precise specification of the frequency and period of
    the previous bar data that is captured. Example usage:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: N.B. this version of history lacks the backfilling capability that allows the
    return a full DataFrame on the first bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bug Fixes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adjust benchmark events to match market hours ([241](https://github.com/stefan-jansen/zipline/issues/241)).
    Previously benchmark events were emitted at 0:00 on the day the benchmark related
    to: in ‘minute’ emission mode this meant that the benchmarks were emitted before
    any intra-day trades were processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure perf stats are generated for all days When running with minutely emissions
    the simulator would report to the user that it simulated ‘n - 1’ days (where n
    is the number of days specified in the simulation params). Now the correct number
    of trading days are reported as being simulated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix repr for cumulative risk metrics. The `__repr__` for RiskMetricsCumulative
    was referring to an older structure of the class, causing an exception when printed.
    Also, now prints the last values in the metrics DataFrame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent minute emission from crashing at end of available data. The next day
    calculation was causing an error when a minute emission algorithm reached the
    end of available data. Instead of a generic exception when available data is reached,
    raise and catch a named exception so that the tradesimulation loop can skip over,
    since the next market close is not needed at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix pandas indexing in trading calendar. This could alternatively be filed under
    Performance. Index using loc instead of the inefficient index-ing of day, then
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent crash in vwap transform due to non-existent member. The WrongDataForTransform
    was referencing a `self.fields` member, which did not exist. Add a self.fields
    member set to `price` and `volume` and use it to iterate over during the check.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix max drawdown calculation. The input into max drawdown was incorrect, causing
    the bad results. i.e. the `compounded_log_returns` were not values representative
    of the algorithms total return at a given time, though `calculate_max_drawdown`
    was treating the values as if they were. Instead, the `algorithm_period_returns`
    series is now used, which does provide the total return.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix cost basis calculation. Cost basis calculation now takes direction of txn
    into account. Closing a long position or covering a short shouldn’t affect the
    cost basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix floating point error in `order()`. Where order amounts that were near an
    integer could accidentally be floored or ceilinged (depending on being postive
    or negative) to the wrong integer. e.g. an amount stored internally as -27.99999
    was converted to -27 instead of -28.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update perf period state when positions are changed by splits. Otherwise, `self._position_amounts`
    will be out of sync with position.amount, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix misalignment of downside series calc when using exact dates. An oddity that
    was exposed while working on making the return series passed to the risk module
    more exact, the series comparison between the returns and mean returns was unbalanced,
    because the mean returns were not masked down to the downside data points; however,
    in most, if not all cases this was papered over by the call to `.valid()` which
    was removed in this change set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that self.logger exists before using it. `self.logger` is initialized
    as `None` and there is no guarantee that users have set it, so check that it exists
    before trying to pass messages to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent out of sync market closes in performance tracker. In situations where
    the performance tracker has been reset or patched to handle state juggling with
    warming up live data, the `market_close` member of the performance tracker could
    end up out of sync with the current algo time as determined by the performance
    tracker. The symptom was dividends never triggering, because the end of day checks
    would not match the current time. Fix by having the tradesimulation loop be responsible,
    in minute/minute mode, for advancing the market close and passing that value to
    the performance tracker, instead of having the market close advanced by the performance
    tracker as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix numerous cumulative and period risk calculations. The calculations that
    are expected to change are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.beta`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.alpha`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.information`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumulative.sharpe`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`period.sortino`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How Risk Calculations Are Changing Risk Fixes for Both Period and Cumulative
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Downside Risk
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population for standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a rounding factor, so that if the two values are close for a given dt, that
    they do not count as a downside value, which would throw off the denominator of
    the standard deviation of the downside diffs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Standard Deviation Type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Across the board the standard deviation has been standardized to using a ‘sample’
    calculation, whereas before cumulative risk was mostly using ‘population’. Using
    `ddof=1` with `np.std` calculates as if the values are a sample.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cumulative Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Beta
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the daily algorithm returns and benchmarks instead of annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Volatility
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use sample instead of population with standard deviation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The volatility is an input to other calculations so this change affects Sharpe
    and Information ratio calculations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Information Ratio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Alpha
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The benchmark returns input is changed from annualized benchmark returns to
    the annualized mean returns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Period Risk Fixes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sortino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now uses the downside risk of the daily return vs. the mean algorithm returns
    for the minimum acceptable return instead of the treasury return.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The above required adding the calculation of the mean algorithm returns for
    period risk.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, uses `algorithm_period_returns` and `tresaury_period_return` as the cumulative
    Sortino does, instead of using algorithm returns for both inputs into the Sortino
    calculation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed `alias_dt` transform in favor of property on SIDData. Adding a copy
    of the Event’s dt field as datetime via the `alias_dt` generator, so that the
    API was forgiving and allowed both datetime and dt on a SIDData object, was creating
    noticeable overhead, even on an noop algorithms. Instead of incurring the cost
    of copying the datetime value and assigning it to the Event object on every event
    that is passed through the system, add a property to SIDData which acts as an
    alias `datetime` to `dt`. Eventually support for `data['foo'].datetime` may be
    removed, and could be considered deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the drop of ‘null return’ from cumulative returns. The check of existence
    of the null return key, and the drop of said return on every single bar was adding
    unneeded CPU time when an algorithm was run with minute emissions. Instead, add
    the 0.0 return with an index of the trading day before the start date. The removal
    of the `null return` was mainly in place so that the period calculation was not
    crashing on a non-date index value; with the index as a date, the period return
    can also approximate volatility (even though the that volatility has high noise-to-signal
    strength because it uses only two values as an input.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance and Refactorings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Allow `sim_params` to provide data frequency for the algorithm. In the case
    that `data_frequency` of the algorithm is None, allow the `sim_params` to provide
    the `data_frequency`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, defer to the algorithms data frequency, if provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added support for building and releasing via conda For those who prefer building
    with [https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/) to compiling
    locally with pip. The following should install Zipline on many systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Contributors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following people have contributed to this release, ordered by numbers of
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
